//# 1 "client.bc.runtime.js"
// Generated by js_of_ocaml 3.4.0
(function(joo_global_object)
   {"use strict";
    var caml_oo_last_id=0;
    function caml_ml_string_length(s){return s.l}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_int64_add(x,y)
     {var
       z1=x[1] + y[1],
       z2=x[2] + y[2] + (z1 >> 24),
       z3=x[3] + y[3] + (z2 >> 24);
      return [255,z1 & 0xffffff,z2 & 0xffffff,z3 & 0xffff]}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_int64_mul(x,y)
     {var
       z1=x[1] * y[1],
       z2=(z1 * caml_int64_offset | 0) + x[2] * y[1] + x[1] * y[2],
       z3=
        (z2 * caml_int64_offset | 0)
        +
        x[3]
        *
        y[1]
        +
        x[2]
        *
        y[2]
        +
        x[1]
        *
        y[3];
      return [255,z1 & 0xffffff,z2 & 0xffffff,z3 & 0xffff]}
    function caml_int64_neg(x)
     {var y1=- x[1],y2=- x[2] + (y1 >> 24),y3=- x[3] + (y2 >> 24);
      return [255,y1 & 0xffffff,y2 & 0xffffff,y3 & 0xffff]}
    function caml_int64_of_int32(x)
     {return [255,x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 0xffffff,z2 & 0xffffff,z3 & 0xffff]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 0xffffff;
      x[1] = x[1] << 1 & 0xffffff}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 0xffffff;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 0xffffff;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_ult(x,y){return caml_int64_ucompare(x,y) < 0}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break
         }
      return [i,sign,base]}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString = function(){return caml_to_js_string(this)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_new_string(s){return new MlBytes(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int64_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       base64=caml_int64_of_int32(base),
       threshold=caml_int64_udivmod([255,0xffffff,0xfffffff,0xffff],base64)[1],
       c=caml_string_unsafe_get(s,i),
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=caml_int64_of_int32(d);
      for(;;)
       {i++;
        c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        if(caml_int64_ult(threshold,res))caml_failwith("int_of_string");
        d = caml_int64_of_int32(d);
        res = caml_int64_add(caml_int64_mul(base64,res),d);
        if(caml_int64_ult(res,d))caml_failwith("int_of_string")}
      if(i != caml_ml_string_length(s))caml_failwith("int_of_string");
      if(r[2] == 10 && caml_int64_ult([255,0,0,0x8000],res))
       caml_failwith("int_of_string");
      if(sign < 0)res = caml_int64_neg(res);
      return res}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_expm1_float(x)
     {var y=Math.exp(x),z=y - 1;
      return Math.abs(x) > 1?z:z == 0?x:x * z / Math.log(y)}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlBytes?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlBytes?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_ml_bytes_length(s){return s.l}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_bytes(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res !== 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlBytes)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=Buffer.from(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=Buffer.from(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=Buffer.from(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_sys_is_directory(name)
     {var root=resolve_fs_device(name),a=root.device.is_dir(root.rest);
      return a?1:0}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_ba_set_1(ba,i0,v){return ba.set1(i0,v)}
    function bigstring_blit_string_bigstring_stub
     (v_str,v_src_pos,v_bstr,v_dst_pos,v_len)
     {for(var i=0;i < v_len;i++)
       caml_ba_set_1
        (v_bstr,v_dst_pos + i,caml_string_get(v_str,v_src_pos + i));
      return 0}
    var caml_blit_string_to_bigstring=bigstring_blit_string_bigstring_stub;
    function caml_make_vect(len,init)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(! caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=name.toString();
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_js_to_string(g.process.env[n]);
      if
       (joo_global_object.jsoo_static_env
        &&
        joo_global_object.jsoo_static_env[n])
       return caml_js_to_string(joo_global_object.jsoo_static_env[n]);
      caml_raise_not_found()}
    function caml_sys_rename(o,n)
     {var o_root=resolve_fs_device(o),n_root=resolve_fs_device(n);
      if(o_root.device != n_root.device)
       caml_failwith
        ("caml_sys_rename: cannot move file between two filesystem");
      if(! o_root.device.rename)
       caml_failwith("caml_sys_rename: no implemented");
      o_root.device.rename(o_root.rest,n_root.rest)}
    function caml_raise_not_a_dir(name)
     {name = name instanceof MlBytes?name.toString():name;
      caml_raise_sys_error(name + ": Not a directory")}
    function caml_sys_read_directory(name)
     {var
       root=resolve_fs_device(name),
       a=root.device.readdir(root.rest),
       l=new Array(a.length + 1);
      l[0] = 0;
      for(var i=0;i < a.length;i++)l[i + 1] = caml_new_string(a[i]);
      return l}
    var caml_ml_channels=new Array();
    function caml_ml_seek_in(chanid,pos)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill != null)caml_raise_sys_error("Illegal seek");
      chan.offset = pos;
      return 0}
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,string,0,len)}
      var
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes(chanid,buffer,offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_bytes_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    function caml_ml_may_refill_input(chanid)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill == null)return;
      if(chan.file.length() != chan.offset)return;
      caml_ml_refill_input(chan)}
    function caml_raise_end_of_file()
     {caml_raise_constant(caml_global_data.End_of_file)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_ml_input_char(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      if(chan.offset >= chan.file.length())caml_raise_end_of_file();
      var res=chan.file.read_one(chan.offset);
      chan.offset++;
      return res}
    function caml_sys_const_ostype_win32(){return 0}
    function caml_obj_is_block(x){return + (x instanceof Array)}
    function caml_int64_float_of_bits(x)
     {var exp=(x[3] & 0x7fff) >> 4;
      if(exp == 2047)
       return (x[1] | x[2] | x[3] & 0xf) == 0
               ?x[3] & 0x8000?- Infinity:Infinity
               :NaN;
      var k=Math.pow(2,- 24),res=(x[1] * k + x[2]) * k + (x[3] & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(x[3] & 0x8000)res = - res;
      return res}
    function caml_int64_of_bytes(a)
     {return [255,
              a[7] | a[6] << 8 | a[5] << 16,
              a[4] | a[3] << 8 | a[2] << 16,
              a[1] | a[0] << 8]}
    function caml_float_of_bytes(a)
     {return caml_int64_float_of_bits(caml_int64_of_bytes(a))}
    function caml_log10_float(x){return Math.LOG10E * Math.log(x)}
    var caml_runtime_warnings=0;
    function caml_ml_enable_runtime_warnings(bool)
     {caml_runtime_warnings = bool;return 0}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_js_var(x)
     {var x=x.toString();
      if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
       js_print_stderr
        ('caml_js_var: "'
         +
         x
         +
         '" is not a valid JavaScript variable. continuing ..');
      return eval(x)}
    function caml_ml_input_scan_line(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      var p=chan.offset,len=chan.file.length();
      if(p >= len)return 0;
      while(true)
       {if(p >= len)return - (p - chan.offset);
        if(chan.file.read_one(p) == 10)return p - chan.offset + 1;
        p++}}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function caml_gc_minor(){return 0}
    function caml_trunc_float(x){return Math.trunc(x)}
    var caml_ephe_data_offset=2;
    function caml_ephe_blit_data(src,dst)
     {dst[caml_ephe_data_offset] = src[caml_ephe_data_offset];return 0}
    function caml_is_printable(c){return + (c > 31 && c < 127)}
    function caml_bytes_lessequal(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c <= s2.c?1:0}
    function caml_ba_uint8_get64(ba,i0)
     {var
       b1=ba.get1(i0),
       b2=ba.get1(i0 + 1) << 8,
       b3=ba.get1(i0 + 2) << 16,
       b4=ba.get1(i0 + 3),
       b5=ba.get1(i0 + 4) << 8,
       b6=ba.get1(i0 + 5) << 16,
       b7=ba.get1(i0 + 6),
       b8=ba.get1(i0 + 7) << 8;
      return [255,b1 | b2 | b3,b4 | b5 | b6,b7 | b8]}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         if(a instanceof MlBytes)
          if(b instanceof MlBytes)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?- 1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?- 1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlBytes
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return - 1;
           else
            if(typeof a != "number" && a && a.compare)
             {var cmp=a.compare(b,total);if(cmp != 0)return cmp}
            else
             if(typeof a == "function")
              caml_invalid_argument("compare: functional value");
             else
              {if(a < b)return - 1;
               if(a > b)return 1;
               if(a != b)
                {if(! total)return NaN;
                 if(a == a)return 1;
                 if(b == b)return - 1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function caml_ba_num_dims(ba,_dim){return ba.num_dims}
    function caml_ba_get_1(ba,i0){return ba.get1(i0)}
    function bigstring_blit_bigstring_bytes_stub
     (v_bstr,v_src_pos,v_str,v_dst_pos,v_len)
     {for(var i=0;i < v_len;i++)
       {var c=caml_ba_get_1(v_bstr,v_src_pos + i);
        caml_bytes_set(v_str,v_dst_pos + i,c)}
      return 0}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      return 0}
    if(! Math.imul)
     Math.imul
     =
     function(x,y){y |= 0;return ((x >> 16) * y << 16) + (x & 0xffff) * y | 0};
    var caml_mul=Math.imul;
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_string_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_return_exn_constant(tag){return tag}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function caml_final_register_called_without_value(){return 0}
    function caml_sys_random_seed()
     {var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    function caml_list_of_js_array(a)
     {var l=0;
      for(var i=a.length - 1;i >= 0;i--){var e=a[i];l = [0,e,l]}
      return l}
    function caml_ba_get_2(ba,i0,i1){return ba.get([i0,i1])}
    function caml_set_parser_trace(){return 0}
    function win_handle_fd(x){return x}
    function unix_gettimeofday(){return new Date().getTime() / 1000}
    function caml_ba_uint8_set16(ba,i0,v)
     {ba.set1(i0,v & 0xff);ba.set1(i0 + 1,v >>> 8 & 0xff);return 0}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_js_wrap_callback_arguments(f)
     {return function(){return caml_js_wrap_callback(f)(arguments)}}
    function caml_sys_chdir(dir)
     {var root=resolve_fs_device(dir);
      if(root.device.exists(root.rest))
       {caml_current_dir = root.rest?root.path + root.rest + "/":root.path;
        return 0}
      else
       caml_raise_no_such_file(dir)}
    function caml_gc_counters(){return [254,0,0,0]}
    function caml_js_delete(o,f){delete o[f];return 0}
    function caml_list_mount_point()
     {var prev=0;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var old=prev;prev = [0,caml_new_string(jsoo_mount_point[i].path),old]}
      return prev}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    var
     caml_marshal_constants=
      {PREFIX_SMALL_BLOCK:0x80,
       PREFIX_SMALL_INT:0x40,
       PREFIX_SMALL_STRING:0x20,
       CODE_INT8:0x00,
       CODE_INT16:0x01,
       CODE_INT32:0x02,
       CODE_INT64:0x03,
       CODE_SHARED8:0x04,
       CODE_SHARED16:0x05,
       CODE_SHARED32:0x06,
       CODE_BLOCK32:0x08,
       CODE_BLOCK64:0x13,
       CODE_STRING8:0x09,
       CODE_STRING32:0x0A,
       CODE_DOUBLE_BIG:0x0B,
       CODE_DOUBLE_LITTLE:0x0C,
       CODE_DOUBLE_ARRAY8_BIG:0x0D,
       CODE_DOUBLE_ARRAY8_LITTLE:0x0E,
       CODE_DOUBLE_ARRAY32_BIG:0x0F,
       CODE_DOUBLE_ARRAY32_LITTLE:0x07,
       CODE_CODEPOINTER:0x10,
       CODE_INFIXPOINTER:0x11,
       CODE_CUSTOM:0x12};
    function caml_js_equals(x,y){return + (x == y)}
    function caml_hash_mix_string_str(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
    function caml_ba_blit(src,dst){dst.blit(src);return 0}
    function caml_input_value_from_reader(reader,ofs)
     {var
       _magic=reader.read32u(),
       _block_len=reader.read32u(),
       num_objects=reader.read32u(),
       _size_32=reader.read32u(),
       _size_64=reader.read32u(),
       stack=[],
       intern_obj_table=num_objects > 0?[]:null,
       obj_counter=0;
      function intern_rec()
       {var code=reader.read8u();
        if(code >= 0x40)
         if(code >= 0x80)
          {var tag=code & 0xF,size=code >> 4 & 0x7,v=[tag];
           if(size == 0)return v;
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           stack.push(v,size);
           return v}
         else
          return code & 0x3F;
        else
         if(code >= 0x20)
          {var len=code & 0x1F,v=reader.readstr(len);
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           return v}
         else
          switch(code)
           {case 0x00:return reader.read8s();
            case 0x01:return reader.read16s();
            case 0x02:return reader.read32s();
            case 0x03:caml_failwith("input_value: integer too large");break;
            case 0x04:
             var offset=reader.read8u();
             return intern_obj_table[obj_counter - offset];
            case 0x05:
             var offset=reader.read16u();
             return intern_obj_table[obj_counter - offset];
            case 0x06:
             var offset=reader.read32u();
             return intern_obj_table[obj_counter - offset];
            case 0x08:
             var
              header=reader.read32u(),
              tag=header & 0xFF,
              size=header >> 10,
              v=[tag];
             if(size == 0)return v;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             stack.push(v,size);
             return v;
            case 0x13:
             caml_failwith("input_value: data block too large");break;
            case 0x09:
             var len=reader.read8u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0A:
             var len=reader.read32u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0C:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[7 - i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0B:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0E:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0D:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x07:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0F:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x10:
            case 0x11:caml_failwith("input_value: code pointer");break;
            case 0x12:
             var c,s="";
             while((c = reader.read8u()) != 0)s += String.fromCharCode(c);
             switch(s)
              {case "_j":
                var t=new Array(8);
                for(var j=0;j < 8;j++)t[j] = reader.read8u();
                var v=caml_int64_of_bytes(t);
                if(intern_obj_table)intern_obj_table[obj_counter++] = v;
                return v;
               case "_i":
                var v=reader.read32s();
                if(intern_obj_table)intern_obj_table[obj_counter++] = v;
                return v;
               case "_n":
                switch(reader.read8u())
                 {case 1:
                   var v=reader.read32s();
                   if(intern_obj_table)intern_obj_table[obj_counter++] = v;
                   return v;
                  case 2:
                   caml_failwith("input_value: native integer value too large");
                  default:
                   caml_failwith("input_value: ill-formed native integer")}
               default:
                caml_failwith("input_value: unknown custom block identifier")}
            default:caml_failwith("input_value: ill-formed message")}}
      var res=intern_rec();
      while(stack.length > 0)
       {var size=stack.pop(),v=stack.pop(),d=v.length;
        if(d < size)stack.push(v,size);
        v[d] = intern_rec()}
      if(typeof ofs != "number")ofs[0] = reader.i;
      return res}
    function caml_js_from_array(a){return raw_array_sub(a,1,a.length - 1)}
    function caml_ba_slice(ba,vind){return ba.slice(caml_js_from_array(vind))}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_int64_div(x,y)
     {if(caml_int64_is_zero(y))caml_raise_zero_divide();
      var sign=x[3] ^ y[3];
      if(x[3] & 0x8000)x = caml_int64_neg(x);
      if(y[3] & 0x8000)y = caml_int64_neg(y);
      var q=caml_int64_udivmod(x,y)[1];
      if(sign & 0x8000)q = caml_int64_neg(q);
      return q}
    function bigstring_find(bs,chr,pos,len)
     {while(len > 0){if(caml_ba_get_1(bs,pos) == chr)return pos;pos++;len--}
      return - 1}
    function caml_js_html_entities(s)
     {var str,temp=document.createElement("p");
      temp.innerHTML = s;
      str = temp.textContent || temp.innerText;
      temp = null;
      return str}
    function caml_int64_of_float(x)
     {if(x < 0)x = Math.ceil(x);
      return [255,
              x & 0xffffff,
              Math.floor(x * caml_int64_offset) & 0xffffff,
              Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff]}
    function caml_ml_channel_size_64(chanid)
     {var chan=caml_ml_channels[chanid];
      return caml_int64_of_float(chan.file.length())}
    function caml_ba_set_2(ba,i0,i1,v){return ba.set([i0,i1],v)}
    function caml_string_unsafe_set(s,i,c)
     {return caml_bytes_unsafe_set(s,i,c)}
    function caml_CamlinternalMod_init_mod(loc,shape)
     {function undef_module(_x)
       {caml_raise_with_arg(caml_global_data.Undefined_recursive_module,loc)}
      function loop(shape,struct,idx)
       {if(typeof shape === "number")
         switch(shape)
          {case 0:struct[idx] = {fun:undef_module};break;
           case 1:struct[idx] = [246,undef_module];break;
           default:struct[idx] = []}
        else
         switch(shape[0])
          {case 0:
            struct[idx] = [0];
            for(var i=1;i < shape[1].length;i++)
             loop(shape[1][i],struct[idx],i);
            break;
           default:struct[idx] = shape[1]}}
      var res=[];
      loop(shape,res,0);
      return res[0]}
    function caml_js_eval_string(s){return eval(s.toString())}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_marshal_data_size(s,ofs)
     {function get32(s,i)
       {return caml_bytes_unsafe_get(s,i)
               <<
               24
               |
               caml_bytes_unsafe_get(s,i + 1)
               <<
               16
               |
               caml_bytes_unsafe_get(s,i + 2)
               <<
               8
               |
               caml_bytes_unsafe_get(s,i + 3)}
      if(get32(s,ofs) != (0x8495A6BE | 0))
       caml_failwith("Marshal.data_size: bad object");
      return get32(s,ofs + 4)}
    function MlBytesReader(s,i){this.s = caml_jsbytes_of_string(s);this.i = i}
    MlBytesReader.prototype
    =
    {read8u:function(){return this.s.charCodeAt(this.i++)},
     read8s:function(){return this.s.charCodeAt(this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (s.charCodeAt(i)
               <<
               24
               |
               s.charCodeAt(i + 1)
               <<
               16
               |
               s.charCodeAt(i + 2)
               <<
               8
               |
               s.charCodeAt(i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return s.charCodeAt(i)
              <<
              24
              |
              s.charCodeAt(i + 1)
              <<
              16
              |
              s.charCodeAt(i + 2)
              <<
              8
              |
              s.charCodeAt(i + 3)},
     readstr:
     function(len)
      {var i=this.i;
       this.i = i + len;
       return caml_new_string(this.s.substring(i,i + len))}};
    function caml_input_value_from_string(s,ofs)
     {var reader=new MlBytesReader(s,typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    function caml_input_value(chanid)
     {var chan=caml_ml_channels[chanid],buf=caml_create_bytes(8);
      chan.file.read(chan.offset,buf,0,8);
      var len=caml_marshal_data_size(buf,0) + 20,buf=caml_create_bytes(len);
      chan.file.read(chan.offset,buf,0,len);
      var offset=[0],res=caml_input_value_from_string(buf,offset);
      chan.offset = chan.offset + offset[0];
      return res}
    function caml_ba_kind(ba){return ba.kind}
    function caml_js_fun_call(f,a)
     {switch(a.length)
       {case 1:return f();
        case 2:return f(a[1]);
        case 3:return f(a[1],a[2]);
        case 4:return f(a[1],a[2],a[3]);
        case 5:return f(a[1],a[2],a[3],a[4]);
        case 6:return f(a[1],a[2],a[3],a[4],a[5]);
        case 7:return f(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return f(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      return f.apply(null,caml_js_from_array(a))}
    function caml_js_pure_expr(f){return f()}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_ba_reshape(ba,vind)
     {return ba.reshape(caml_js_from_array(vind))}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_hash_mix_bigstring(h,bs)
     {return caml_hash_mix_string_arr(h,bs.data)}
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_record_backtrace(){return 0}
    function caml_get_global_data(){return caml_global_data}
    function unix_gmtime(t)
     {var
       d=new Date(t * 1000),
       d_num=d.getTime(),
       januaryfirst=new Date(Date.UTC(d.getUTCFullYear(),0,1)).getTime(),
       doy=Math.floor((d_num - januaryfirst) / 86400000);
      return [0,
              d.getUTCSeconds(),
              d.getUTCMinutes(),
              d.getUTCHours(),
              d.getUTCDate(),
              d.getUTCMonth(),
              d.getUTCFullYear() - 1900,
              d.getUTCDay(),
              doy,
              false | 0]}
    function caml_ba_uint8_get16(ba,i0)
     {var b1=ba.get1(i0),b2=ba.get1(i0 + 1) << 8;return b1 | b2}
    function caml_int64_shift_right_unsigned(x,s)
     {s = s & 63;
      if(s == 0)return x;
      if(s < 24)
       return [255,
               (x[1] >> s | x[2] << 24 - s) & 0xffffff,
               (x[2] >> s | x[3] << 24 - s) & 0xffffff,
               x[3] >> s];
      if(s < 48)
       return [255,
               (x[2] >> s - 24 | x[3] << 48 - s) & 0xffffff,
               x[3] >> s - 24,
               0];
      return [255,x[3] >> s - 48,0,0]}
    function caml_sys_const_backend_type()
     {return [0,caml_new_string("js_of_ocaml")]}
    function caml_sys_get_config(){return [0,caml_new_string("Unix"),32,0]}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function unix_time(){return Math.floor(unix_gettimeofday())}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    var
     bigstring_blit_bigstring_string_stub=
      bigstring_blit_bigstring_bytes_stub;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_int64_to_float(x)
     {return (x[3] << 16) * Math.pow(2,32) + x[2] * Math.pow(2,24) + x[1]}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_ba_create_from(data,data2,data_type,kind,layout,dims)
     {var n_dims=dims.length,size=caml_ba_get_size(dims);
      function offset_c(index)
       {var ofs=0;
        if(n_dims != index.length)
         caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
        for(var i=0;i < n_dims;i++)
         {if(index[i] < 0 || index[i] >= dims[i])caml_array_bound_error();
          ofs = ofs * dims[i] + index[i]}
        return ofs}
      function offset_fortran(index)
       {var ofs=0;
        if(n_dims != index.length)
         caml_invalid_argument("Bigarray.get/set: wrong number of indices");
        for(var i=n_dims - 1;i >= 0;i--)
         {if(index[i] < 1 || index[i] > dims[i])caml_array_bound_error();
          ofs = ofs * dims[i] + (index[i] - 1)}
        return ofs}
      var offset=layout == 0?offset_c:offset_fortran,dim0=dims[0];
      function get_std(index){var ofs=offset(index),v=data[ofs];return v}
      function get_int64(index)
       {var off=offset(index),l=data[off],h=data2[off];
        return [255,
                l & 0xffffff,
                l >>> 24 & 0xff | (h & 0xffff) << 8,
                h >>> 16 & 0xffff]}
      function get_complex(index)
       {var off=offset(index),r=data[off],i=data2[off];return [254,r,i]}
      var get=data_type == 1?get_int64:data_type == 2?get_complex:get_std;
      function get1_c(i)
       {if(i < 0 || i >= dim0)caml_array_bound_error();return data[i]}
      function get1_fortran(i)
       {if(i < 1 || i > dim0)caml_array_bound_error();return data[i - 1]}
      function get1_any(i){return get([i])}
      var get1=data_type == 0?layout == 0?get1_c:get1_fortran:get1_any;
      function set_std_raw(off,v){data[off] = v}
      function set_int64_raw(off,v)
       {data[off] = v[1] | (v[2] & 0xff) << 24;
        data2[off] = v[2] >>> 8 & 0xffff | v[3] << 16}
      function set_complex_raw(off,v){data[off] = v[1];data2[off] = v[2]}
      function set_std(index,v)
       {var ofs=offset(index);return set_std_raw(ofs,v)}
      function set_int64(index,v){return set_int64_raw(offset(index),v)}
      function set_complex(index,v){return set_complex_raw(offset(index),v)}
      var set=data_type == 1?set_int64:data_type == 2?set_complex:set_std;
      function set1_c(i,v)
       {if(i < 0 || i >= dim0)caml_array_bound_error();data[i] = v}
      function set1_fortran(i,v)
       {if(i < 1 || i > dim0)caml_array_bound_error();data[i - 1] = v}
      function set1_any(i,v){set([i],v)}
      var set1=data_type == 0?layout == 0?set1_c:set1_fortran:set1_any;
      function nth_dim(i)
       {if(i < 0 || i >= n_dims)caml_invalid_argument("Bigarray.dim");
        return dims[i]}
      function fill(v)
       {if(data_type == 0)for(var i=0;i < data.length;i++)set_std_raw(i,v);
        if(data_type == 1)for(var i=0;i < data.length;i++)set_int64_raw(i,v);
        if(data_type == 2)for(var i=0;i < data.length;i++)set_complex_raw(i,v)}
      function blit(from)
       {if(n_dims != from.num_dims)
         caml_invalid_argument("Bigarray.blit: dimension mismatch");
        for(var i=0;i < n_dims;i++)
         if(dims[i] != from.nth_dim(i))
          caml_invalid_argument("Bigarray.blit: dimension mismatch");
        data.set(from.data);
        if(data_type != 0)data2.set(from.data2)}
      function sub(ofs,len)
       {var changed_dim,mul=1;
        if(layout == 0)
         {for(var i=1;i < n_dims;i++)mul = mul * dims[i];changed_dim = 0}
        else
         {for(var i=0;i < n_dims - 1;i++)mul = mul * dims[i];
          changed_dim = n_dims - 1;
          ofs = ofs - 1}
        if(ofs < 0 || len < 0 || ofs + len > dims[changed_dim])
         caml_invalid_argument("Bigarray.sub: bad sub-array");
        var
         new_data=data.subarray(ofs * mul,(ofs + len) * mul),
         new_data2=
          data_type == 0?null:data2.subarray(ofs * mul,(ofs + len) * mul),
         new_dims=[];
        for(var i=0;i < n_dims;i++)new_dims[i] = dims[i];
        new_dims[changed_dim] = len;
        return caml_ba_create_from
                (new_data,new_data2,data_type,kind,layout,new_dims)}
      function slice(vind)
       {var num_inds=vind.length,index=[],sub_dims=[],ofs;
        if(num_inds >= n_dims)
         caml_invalid_argument("Bigarray.slice: too many indices");
        if(layout == 0)
         {for(var i=0;i < num_inds;i++)index[i] = vind[i];
          for(;i < n_dims;i++)index[i] = 0;
          ofs = offset(index);
          sub_dims = dims.slice(num_inds)}
        else
         {for(var i=0;i < num_inds;i++)index[n_dims - num_inds + i] = vind[i];
          for(var i=0;i < n_dims - num_inds;i++)index[i] = 1;
          ofs = offset(index);
          sub_dims = dims.slice(0,num_inds)}
        var
         size=caml_ba_get_size(sub_dims),
         new_data=data.subarray(ofs,ofs + size),
         new_data2=data_type == 0?null:data2.subarray(ofs,ofs + size);
        return caml_ba_create_from
                (new_data,new_data2,data_type,kind,layout,sub_dims)}
      function reshape(vdim)
       {var new_dim=[],num_dims=vdim.length;
        if(num_dims < 1)
         caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
        var num_elts=1;
        for(var i=0;i < num_dims;i++)
         {new_dim[i] = vdim[i];
          if(new_dim[i] < 0)
           caml_invalid_argument("Bigarray.reshape: negative dimension");
          num_elts = num_elts * new_dim[i]}
        if(num_elts != size)
         caml_invalid_argument("Bigarray.reshape: size mismatch");
        return caml_ba_create_from(data,data2,data_type,kind,layout,new_dim)}
      function compare(b,total)
       {if(layout != b.layout)return b.layout - layout;
        if(n_dims != b.num_dims)return b.num_dims - n_dims;
        for(var i=0;i < n_dims;i++)
         if(nth_dim(i) != b.nth_dim(i))return nth_dim(i) < b.nth_dim(i)?- 1:1;
        switch(kind)
         {case 0:
          case 1:
          case 10:
          case 11:
           var x,y;
           for(var i=0;i < data.length;i++)
            {x = data[i];
             y = b.data[i];
             if(x < y)return - 1;
             if(x > y)return 1;
             if(x != y)
              if(x != y)
               {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}
             if(data2)
              {x = data2[i];
               y = b.data2[i];
               if(x < y)return - 1;
               if(x > y)return 1;
               if(x != y)
                if(x != y)
                 {if(! total)return NaN;
                  if(x == x)return 1;
                  if(y == y)return - 1}}}
           break;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 8:
          case 9:
          case 12:
           for(var i=0;i < data.length;i++)
            {if(data[i] < b.data[i])return - 1;
             if(data[i] > b.data[i])return 1}
           break;
          case 7:
           for(var i=0;i < data.length;i++)
            {if(data2[i] < b.data2[i])return - 1;
             if(data2[i] > b.data2[i])return 1;
             if(data[i] < b.data[i])return - 1;
             if(data[i] > b.data[i])return 1}
           break
          }
        return 0}
      return {data:data,
              data2:data2,
              data_type:data_type,
              num_dims:n_dims,
              nth_dim:nth_dim,
              kind:kind,
              layout:layout,
              size:size,
              sub:sub,
              slice:slice,
              blit:blit,
              fill:fill,
              reshape:reshape,
              get:get,
              get1:get1,
              set:set,
              set1:set1,
              compare:compare}}
    function bigstring_of_array_buffer(ab)
     {var ta=new (joo_global_object.Uint8Array)(ab);
      return caml_ba_create_from(ta,null,0,12,0,[ta.length])}
    function bigstring_destroy_stub(v_bstr)
     {if(v_bstr.data2 != null)
       caml_invalid_argument("bigstring_destroy: unsupported kind");
      if(v_bstr.hasOwnProperty("__is_deallocated"))
       caml_invalid_argument
        ("bigstring_destroy: bigstring is already deallocated");
      var
       destroyed_data=new (v_bstr.data.__proto__.constructor)(0),
       destroyed_bigstring=
        caml_ba_create_from
         (destroyed_data,null,v_bstr.data_type,v_bstr.kind,v_bstr.layout,[0]);
      destroyed_bigstring.__is_deallocated = true;
      Object.assign(v_bstr,destroyed_bigstring);
      return 0}
    function caml_raw_backtrace_length(){return 0}
    function caml_ba_uint8_get32(ba,i0)
     {var
       b1=ba.get1(i0),
       b2=ba.get1(i0 + 1) << 8,
       b3=ba.get1(i0 + 2) << 16,
       b4=ba.get1(i0 + 3) << 24;
      return b1 | b2 | b3 | b4}
    function bigstring_to_array_buffer(bs){return bs.data.buffer}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_ba_init(){return 0}
    function caml_final_release(){return 0}
    function caml_ba_get_generic(ba,index)
     {return ba.get(caml_js_from_array(index))}
    function BigStringReader(bs,i){this.s = bs;this.i = i}
    BigStringReader.prototype
    =
    {read8u:function(){return caml_ba_get_1(this.s,this.i++)},
     read8s:function(){return caml_ba_get_1(this.s,this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return caml_ba_get_1(s,i) << 8 | caml_ba_get_1(s,i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return caml_ba_get_1(s,i) << 24 >> 16 | caml_ba_get_1(s,i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (caml_ba_get_1(s,i)
               <<
               24
               |
               caml_ba_get_1(s,i + 1)
               <<
               16
               |
               caml_ba_get_1(s,i + 2)
               <<
               8
               |
               caml_ba_get_1(s,i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return caml_ba_get_1(s,i)
              <<
              24
              |
              caml_ba_get_1(s,i + 1)
              <<
              16
              |
              caml_ba_get_1(s,i + 2)
              <<
              8
              |
              caml_ba_get_1(s,i + 3)},
     readstr:
     function(len)
      {var i=this.i,arr=new Array(len);
       for(var j=0;j < len;j++)arr[j] = caml_ba_get_1(this.s,i + j);
       this.i = i + len;
       return caml_string_of_array(arr)}};
    function caml_get_exception_backtrace(){return 0}
    function raw_array_cons(a,x)
     {var l=a.length,b=new Array(l + 1);
      b[0] = x;
      for(var i=1;i <= l;i++)b[i] = a[i - 1];
      return b}
    function caml_js_to_array(a){return raw_array_cons(a,0)}
    function caml_mount_autoload(name,f)
     {var path=caml_make_path(name),name=path.join("/") + "/";
      jsoo_mount_point.push({path:name,device:new MlFakeDevice(name,f)});
      return 0}
    function caml_sys_close(fd){delete caml_global_data.fds[fd];return 0}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_int64_to_bytes(x)
     {return [x[3] >> 8,
              x[3] & 0xff,
              x[2] >> 16,
              x[2] >> 8 & 0xff,
              x[2] & 0xff,
              x[1] >> 16,
              x[1] >> 8 & 0xff,
              x[1] & 0xff]}
    function caml_bytes_set64(s,i,i64)
     {if(i >>> 0 >= s.l + 7)caml_string_bound_error();
      var a=caml_int64_to_bytes(i64);
      for(var j=0;j < 8;j++)caml_string_unsafe_set(s,i + 7 - j,a[j]);
      return 0}
    function caml_bytes_set16(s,i,i16)
     {if(i >>> 0 >= s.l + 1)caml_string_bound_error();
      var b2=0xFF & i16 >> 8,b1=0xFF & i16;
      caml_string_unsafe_set(s,i + 0,b1);
      caml_string_unsafe_set(s,i + 1,b2);
      return 0}
    function caml_string_set16(s,i,i16){return caml_bytes_set16(s,i,i16)}
    function caml_int64_bswap(x)
     {return [255,
              (x[3] & 0x0000ff00)
              >>
              8
              |
              (x[3] & 0x000000ff)
              <<
              8
              |
              x[2]
              &
              0x00ff0000,
              (x[2] & 0x0000ff00)
              >>
              8
              |
              (x[2] & 0x000000ff)
              <<
              8
              |
              x[1]
              &
              0x00ff0000,
              (x[1] & 0x0000ff00) >> 8 | (x[1] & 0x000000ff) << 8]}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_string=caml_fill_bytes;
    function caml_string_lessthan(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?1:0}
    function caml_string_greaterthan(s1,s2)
     {return caml_string_lessthan(s2,s1)}
    function caml_gc_major(){return 0}
    function caml_ephe_get_data_copy(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,caml_obj_dup(x[caml_ephe_data_offset])]}
    function caml_lex_array(s)
     {s = caml_jsbytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var c,state=start_state,buffer=caml_array_of_string(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return - base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        state
        =
        tbl.lex_check[base + c] == state
         ?tbl.lex_trans[base + c]
         :tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function caml_sys_get_argv()
     {var g=joo_global_object,main="a.out",args=[];
      if(g.process && g.process.argv && g.process.argv.length > 1)
       {var argv=g.process.argv;
        main = argv[1];
        args = raw_array_sub(argv,2,argv.length - 2)}
      var p=caml_js_to_string(main),args2=[0,p];
      for(var i=0;i < args.length;i++)args2.push(caml_js_to_string(args[i]));
      return [0,p,args2]}
    function caml_js_to_bool(x){return + x}
    function caml_sys_file_exists(name)
     {var root=resolve_fs_device(name);return root.device.exists(root.rest)}
    var caml_ephe_key_offset=3;
    function caml_weak_get(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_key");
      return x[caml_ephe_key_offset + i] === undefined
              ?0
              :x[caml_ephe_key_offset + i]}
    function caml_weak_get_copy(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_copy");
      var y=caml_weak_get(x,i);
      if(y === 0)return y;
      var z=y[1];
      if(z instanceof Array)return [0,caml_obj_dup(z)];
      return y}
    var caml_ephe_get_key_copy=caml_weak_get_copy;
    function caml_convert_raw_backtrace_slot()
     {caml_failwith("caml_convert_raw_backtrace_slot")}
    function caml_raw_backtrace_next_slot(){return 0}
    function caml_array_sub(a,i,len)
     {var a2=new Array(len + 1);
      a2[0] = 0;
      for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
      return a2}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    var caml_ba_views;
    function caml_ba_init_views()
     {if(! caml_ba_views)
       {var g=joo_global_object;
        caml_ba_views
        =
        [[g.Float32Array,
          g.Float64Array,
          g.Int8Array,
          g.Uint8Array,
          g.Int16Array,
          g.Uint16Array,
          g.Int32Array,
          g.Int32Array,
          g.Int32Array,
          g.Int32Array,
          g.Float32Array,
          g.Float64Array,
          g.Uint8Array],
         [0,0,0,0,0,0,0,1,0,0,2,2,0]]}}
    function caml_sys_const_ostype_cygwin(){return 0}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function caml_cosh_float(x){return (Math.exp(x) + Math.exp(- x)) / 2}
    function caml_weak_check(x,i)
     {return x[caml_ephe_key_offset + i]
              !==
              undefined
              &&
              x[caml_ephe_key_offset + i]
              !==
              0
              ?1
              :0}
    var caml_ephe_check_key=caml_weak_check;
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_ba_uint8_set64(ba,i0,v)
     {ba.set1(i0,v[1] & 0xff);
      ba.set1(i0 + 1,v[1] >> 8 & 0xff);
      ba.set1(i0 + 2,v[1] >> 16);
      ba.set1(i0 + 3,v[2] & 0xff);
      ba.set1(i0 + 4,v[2] >> 8 & 0xff);
      ba.set1(i0 + 5,v[2] >> 16);
      ba.set1(i0 + 6,v[3] & 0xff);
      ba.set1(i0 + 7,v[3] >> 8);
      return 0}
    function caml_lex_run_mem(s,i,mem,curr_pos)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 0xff)return;
        var src=s.charCodeAt(i);
        i++;
        mem[dst + 1] = src == 0xff?curr_pos:mem[src + 1]}}
    function caml_lex_run_tag(s,i,mem)
     {for(;;)
       {var dst=s.charCodeAt(i);
        i++;
        if(dst == 0xff)return;
        var src=s.charCodeAt(i);
        i++;
        mem[dst + 1] = src == 0xff?- 1:mem[src + 1]}}
    function caml_new_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_mem=10,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5,
       lex_base_code=6,
       lex_backtrk_code=7,
       lex_default_code=8,
       lex_trans_code=9,
       lex_check_code=10,
       lex_code=11;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      if(! tbl.lex_default_code)
       {tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
        tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
        tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
        tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
        tbl.lex_default_code = caml_lex_array(tbl[lex_default_code])}
      if(tbl.lex_code == null)
       tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
      var c,state=start_state,buffer=caml_array_of_string(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)
         {var pc_off=tbl.lex_base_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          return - base - 1}
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {var pc_off=tbl.lex_backtrk_code[state];
          caml_lex_run_tag(tbl.lex_code,pc_off,lexbuf[lex_mem]);
          lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        var pstate=state;
        state
        =
        tbl.lex_check[base + c] == state
         ?tbl.lex_trans[base + c]
         :tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         {var base_code=tbl.lex_base_code[pstate],pc_off;
          pc_off
          =
          tbl.lex_check_code[base_code + c] == pstate
           ?tbl.lex_trans_code[base_code + c]
           :tbl.lex_default_code[pstate];
          if(pc_off > 0)
           caml_lex_run_mem
            (tbl.lex_code,pc_off,lexbuf[lex_mem],lexbuf[lex_curr_pos]);
          if(c == 256)lexbuf[lex_eof_reached] = 0}}}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return [255,1,0,0x7ff0];
        return x > 0?[255,0,0,0x7ff0]:[255,0,0,0xfff0]}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return [255,r1,r2,r3]}
    var
     caml_output_val=
      function()
        {function Writer(){this.chunk = []}
         Writer.prototype
         =
         {chunk_idx:20,
          block_len:0,
          obj_counter:0,
          size_32:0,
          size_64:0,
          write:
          function(size,value)
           {for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xFF},
          write_code:
          function(size,code,value)
           {this.chunk[this.chunk_idx++] = code;
            for(var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xFF},
          finalize:
          function()
           {this.block_len = this.chunk_idx - 20;
            this.chunk_idx = 0;
            this.write(32,0x8495A6BE);
            this.write(32,this.block_len);
            this.write(32,this.obj_counter);
            this.write(32,this.size_32);
            this.write(32,this.size_64);
            return this.chunk}};
         return function(v)
          {var writer=new Writer(),stack=[];
           function extern_rec(v)
            {if(v instanceof Array && v[0] === (v[0] | 0))
              {if(v[0] == 255)
                {writer.write(8,0x12);
                 for(var i=0;i < 3;i++)writer.write(8,"_j\0".charCodeAt(i));
                 var b=caml_int64_to_bytes(v);
                 for(var i=0;i < 8;i++)writer.write(8,b[i]);
                 writer.size_32 += 4;
                 writer.size_64 += 3;
                 return}
               if(v[0] == 251)
                caml_failwith("output_value: abstract value (Abstract)");
               if(v[0] < 16 && v.length - 1 < 8)
                writer.write(8,0x80 + v[0] + (v.length - 1 << 4));
               else
                writer.write_code(32,0x08,v.length - 1 << 10 | v[0]);
               writer.size_32 += v.length;
               writer.size_64 += v.length;
               if(v.length > 1)stack.push(v,1)}
             else
              if(v instanceof MlBytes)
               {var len=caml_ml_string_length(v);
                if(len < 0x20)
                 writer.write(8,0x20 + len);
                else
                 if(len < 0x100)
                  writer.write_code(8,0x09,len);
                 else
                  writer.write_code(32,0x0A,len);
                for(var i=0;i < len;i++)
                 writer.write(8,caml_string_unsafe_get(v,i));
                writer.size_32 += 1 + ((len + 4) / 4 | 0);
                writer.size_64 += 1 + ((len + 8) / 8 | 0)}
              else
               if(v != (v | 0))
                {var type_of_v=typeof v;
                 caml_failwith
                  ("output_value: abstract value (" + type_of_v + ")")}
               else
                if(v >= 0 && v < 0x40)
                 writer.write(8,0X40 + v);
                else
                 if(v >= - (1 << 7) && v < 1 << 7)
                  writer.write_code(8,0x00,v);
                 else
                  if(v >= - (1 << 15) && v < 1 << 15)
                   writer.write_code(16,0x01,v);
                  else
                   writer.write_code(32,0x02,v)}
           extern_rec(v);
           while(stack.length > 0)
            {var i=stack.pop(),v=stack.pop();
             if(i + 1 < v.length)stack.push(v,i + 1);
             extern_rec(v[i])}
           writer.finalize();
           return writer.chunk}}
       ();
    function caml_js_from_float(x){return x}
    function caml_floatarray_create(len)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 254;
      for(var i=1;i < len;i++)b[i] = 0;
      return b}
    function caml_gc_stat(){return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_ml_seek_out_64(chanid,pos)
     {caml_ml_channels[chanid].offset = caml_int64_to_float(pos);return 0}
    function caml_gc_set(_control){return 0}
    function caml_js_get(o,f){return o[f]}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === null)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_gc_compaction(){return 0}
    function caml_ojs_new_arr(c,a)
     {switch(a.length)
       {case 0:return new c();
        case 1:return new c(a[0]);
        case 2:return new c(a[0],a[1]);
        case 3:return new c(a[0],a[1],a[2]);
        case 4:return new c(a[0],a[1],a[2],a[3]);
        case 5:return new c(a[0],a[1],a[2],a[3],a[4]);
        case 6:return new c(a[0],a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[0],a[1],a[2],a[3],a[4],a[5],a[6])
        }
      function F(){return c.apply(this,a)}
      F.prototype = c.prototype;
      return new F()}
    var
     caml_ephe_get_key=caml_weak_get,
     caml_js_regexps={amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};
    function caml_js_html_escape(s)
     {if(! caml_js_regexps.all.test(s))return s;
      return s.replace(caml_js_regexps.amp,"&amp;").replace
               (caml_js_regexps.lt,"&lt;").replace
              (caml_js_regexps.quot,"&quot;")}
    function caml_ml_close_channel(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_flush(chanid);
      chan.opened = false;
      chan.file.close();
      caml_sys_close(chan.fd);
      return 0}
    function win_cleanup(){}
    function caml_exn_with_js_backtrace(exn,force)
     {if(! exn.js_error || force || exn[0] == 248)
       exn.js_error
       =
       new (joo_global_object.Error)("Js exception containing backtrace");
      return exn}
    function caml_sys_isatty(_chan){return 0}
    function caml_ba_dim_2(ba){return ba.nth_dim(1)}
    function caml_js_wrap_meth_callback_arguments(f)
     {return function(){return caml_call_gen(f,[this,arguments])}}
    function unix_inet_addr_of_string(){return 0}
    function caml_sinh_float(x){return (Math.exp(x) - Math.exp(- x)) / 2}
    function caml_js_set(o,f,v){o[f] = v;return 0}
    function caml_ldexp_float(x,exp)
     {exp |= 0;
      if(exp > 1023)
       {exp -= 1023;
        x *= Math.pow(2,1023);
        if(exp > 1023){exp -= 1023;x *= Math.pow(2,1023)}}
      if(exp < - 1023){exp += 1023;x *= Math.pow(2,- 1023)}
      x *= Math.pow(2,exp);
      return x}
    function caml_js_wrap_callback_strict(arity,f)
     {return function()
       {var n=arguments.length;
        if(n == arity)return caml_call_gen(f,arguments);
        var args=new Array(arity);
        for(var i=0;i < n && i < arity;i++)args[i] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_array_get(array,index)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      return array[index + 1]}
    function caml_get_current_callstack(){return [0]}
    function caml_int64_mod(x,y)
     {if(caml_int64_is_zero(y))caml_raise_zero_divide();
      var sign=x[3];
      if(x[3] & 0x8000)x = caml_int64_neg(x);
      if(y[3] & 0x8000)y = caml_int64_neg(y);
      var r=caml_int64_udivmod(x,y)[2];
      if(sign & 0x8000)r = caml_int64_neg(r);
      return r}
    function caml_create_file_extern(name,content)
     {if(joo_global_object.caml_create_file)
       joo_global_object.caml_create_file(name,content);
      else
       {if(! joo_global_object.caml_fs_tmp)joo_global_object.caml_fs_tmp = [];
        joo_global_object.caml_fs_tmp.push({name:name,content:content})}
      return 0}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_int32_bswap(x)
     {return (x & 0x000000FF)
             <<
             24
             |
             (x & 0x0000FF00)
             <<
             8
             |
             (x & 0x00FF0000)
             >>>
             8
             |
             (x & 0xFF000000)
             >>>
             24}
    function caml_spacetime_only_works_for_native_code()
     {caml_failwith("Spacetime profiling only works for native code")}
    function win_startup(){}
    function caml_ml_seek_in_64(chanid,pos)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill != null)caml_raise_sys_error("Illegal seek");
      chan.offset = caml_int64_to_float(pos);
      return 0}
    function caml_ba_set_3(ba,i0,i1,i2,v){return ba.set([i0,i1,i2],v)}
    function caml_js_instanceof(o,c){return o instanceof c}
    function caml_hash_mix_float(h,v0)
     {var
       v=caml_int64_bits_of_float(v0),
       lo=v[1] | v[2] << 24,
       hi=v[2] >>> 8 | v[3] << 16;
      h = caml_hash_mix_int(h,lo);
      h = caml_hash_mix_int(h,hi);
      return h}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_int64_shift_left(x,s)
     {s = s & 63;
      if(s == 0)return x;
      if(s < 24)
       return [255,
               x[1] << s & 0xffffff,
               (x[2] << s | x[1] >> 24 - s) & 0xffffff,
               (x[3] << s | x[2] >> 24 - s) & 0xffff];
      if(s < 48)
       return [255,
               0,
               x[1] << s - 24 & 0xffffff,
               (x[2] << s - 24 | x[1] >> 48 - s) & 0xffff];
      return [255,0,0,x[1] << s - 48 & 0xffff]}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {return caml_call_gen(f,raw_array_cons(arguments,this))}}
    function caml_sys_const_int_size(){return 32}
    var caml_blit_bigstring_to_string=bigstring_blit_bigstring_bytes_stub;
    function caml_is_js(){return 1}
    function caml_string_set64(s,i,i64){return caml_bytes_set64(s,i,i64)}
    function caml_ba_dim_1(ba){return ba.nth_dim(0)}
    function caml_js_meth_call(o,f,args)
     {return o[f.toString()].apply(o,caml_js_from_array(args))}
    function caml_ba_map_file(vfd,kind,layout,shared,dims,pos)
     {caml_failwith("caml_ba_map_file not implemented")}
    function caml_ba_map_file_bytecode(argv,argn)
     {return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5])}
    function unix_localtime(t)
     {var
       d=new Date(t * 1000),
       d_num=d.getTime(),
       januaryfirst=new Date(d.getFullYear(),0,1).getTime(),
       doy=Math.floor((d_num - januaryfirst) / 86400000),
       jan=new Date(d.getFullYear(),0,1),
       jul=new Date(d.getFullYear(),6,1),
       stdTimezoneOffset=
        Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());
      return [0,
              d.getSeconds(),
              d.getMinutes(),
              d.getHours(),
              d.getDate(),
              d.getMonth(),
              d.getFullYear() - 1900,
              d.getDay(),
              doy,
              d.getTimezoneOffset() < stdTimezoneOffset | 0]}
    function caml_weak_create(n)
     {if(n < 0)caml_invalid_argument("Weak.create");
      var x=[251,"caml_ephe_list_head"];
      x.length = caml_ephe_key_offset + n;
      return x}
    var caml_ephe_create=caml_weak_create;
    function caml_js_to_byte_string(s){return caml_new_string(s)}
    function caml_tanh_float(x)
     {var y=Math.exp(x),z=Math.exp(- x);return (y - z) / (y + z)}
    var JSON=joo_global_object.JSON;
    if(typeof JSON !== "object")JSON = {};
    (function()
       {"use strict";
        var
         rx_one=/^[\],:{}\s]*$/,
         rx_two=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
         rx_three=
          /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
         rx_four=/(?:^|:|,)(?:\s*\[)+/g,
         rx_escapable=
          /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
         rx_dangerous=
          /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        function f(n){return n < 10?"0" + n:n}
        function this_value(){return this.valueOf()}
        if(typeof Date.prototype.toJSON !== "function")
         {Date.prototype.toJSON
          =
          function()
           {return isFinite(this.valueOf())
                    ?this.getUTCFullYear()
                     +
                     "-"
                     +
                     f(this.getUTCMonth() + 1)
                     +
                     "-"
                     +
                     f(this.getUTCDate())
                     +
                     "T"
                     +
                     f(this.getUTCHours())
                     +
                     ":"
                     +
                     f(this.getUTCMinutes())
                     +
                     ":"
                     +
                     f(this.getUTCSeconds())
                     +
                     "Z"
                    :null};
          Boolean.prototype.toJSON = this_value;
          Number.prototype.toJSON = this_value;
          String.prototype.toJSON = this_value}
        var gap,indent,meta,rep;
        function quote(string)
         {rx_escapable.lastIndex = 0;
          return rx_escapable.test(string)
                  ?'"'
                   +
                   string.replace
                    (rx_escapable,
                     function(a)
                      {var c=meta[a];
                       return typeof c === "string"
                               ?c
                               :"\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(- 4)})
                   +
                   '"'
                  :'"' + string + '"'}
        function str(key,holder)
         {var i,k,v,length,mind=gap,partial,value=holder[key];
          if
           (value
            &&
            typeof value
            ===
            "object"
            &&
            typeof value.toJSON
            ===
            "function")
           value = value.toJSON(key);
          if(typeof rep === "function")value = rep.call(holder,key,value);
          switch(typeof value)
           {case "string":return quote(value);
            case "number":return isFinite(value)?String(value):"null";
            case "boolean":
            case "null":return String(value);
            case "object":
             if(! value)return "null";
             gap += indent;
             partial = [];
             if(Object.prototype.toString.apply(value) === "[object Array]")
              {length = value.length;
               for(i = 0;i < length;i += 1)
                partial[i] = str(i,value) || "null";
               v
               =
               partial.length === 0
                ?"[]"
                :gap
                  ?"[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
                  :"[" + partial.join(",") + "]";
               gap = mind;
               return v}
             if(rep && typeof rep === "object")
              {length = rep.length;
               for(i = 0;i < length;i += 1)
                if(typeof rep[i] === "string")
                 {k = rep[i];
                  v = str(k,value);
                  if(v)partial.push(quote(k) + (gap?": ":":") + v)}}
             else
              for(k in value)
               if(Object.prototype.hasOwnProperty.call(value,k))
                {v = str(k,value);
                 if(v)partial.push(quote(k) + (gap?": ":":") + v)}
             v
             =
             partial.length === 0
              ?"{}"
              :gap
                ?"{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                :"{" + partial.join(",") + "}";
             gap = mind;
             return v
            }}
        if(typeof JSON.stringify !== "function")
         {meta
          =
          {"\b":"\\b",
           "\t":"\\t",
           "\n":"\\n",
           "\f":"\\f",
           "\r":"\\r",
           '"':'\\"',
           "\\":"\\\\"};
          JSON.stringify
          =
          function(value,replacer,space)
           {var i;
            gap = "";
            indent = "";
            if(typeof space === "number")
             for(i = 0;i < space;i += 1)indent += " ";
            else
             if(typeof space === "string")indent = space;
            rep = replacer;
            if
             (replacer
              &&
              typeof replacer
              !==
              "function"
              &&
              (typeof replacer
               !==
               "object"
               ||
               typeof replacer.length
               !==
               "number"))
             throw new Error("JSON.stringify");
            return str("",{"":value})}}
        if(typeof JSON.parse !== "function")
         JSON.parse
         =
         function(text,reviver)
          {var j;
           function walk(holder,key)
            {var k,v,value=holder[key];
             if(value && typeof value === "object")
              for(k in value)
               if(Object.prototype.hasOwnProperty.call(value,k))
                {v = walk(value,k);
                 if(v !== undefined)value[k] = v;else delete value[k]}
             return reviver.call(holder,key,value)}
           text = String(text);
           rx_dangerous.lastIndex = 0;
           if(rx_dangerous.test(text))
            text
            =
            text.replace
             (rx_dangerous,
              function(a)
               {return "\\u"
                       +
                       ("0000" + a.charCodeAt(0).toString(16)).slice(- 4)});
           if
            (rx_one.test
              (text.replace(rx_two,"@").replace(rx_three,"]").replace
                (rx_four,"")))
            {j = eval("(" + text + ")");
             return typeof reviver === "function"?walk({"":j},""):j}
           throw new SyntaxError("JSON.parse")}}
      ());
    function caml_json(){return JSON}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function unix_mktime(tm)
     {var
       d=new Date(tm[6] + 1900,tm[5],tm[4],tm[3],tm[2],tm[1]).getTime(),
       t=Math.floor(d / 1000),
       tm2=unix_localtime(t);
      return [0,t,tm2]}
    function caml_bytes_get64(s,i)
     {if(i >>> 0 >= s.l + 7)caml_string_bound_error();
      var a=new Array(8);
      for(var j=0;j < 8;j++)a[7 - j] = caml_string_unsafe_get(s,i + j);
      return caml_int64_of_bytes(a)}
    function caml_weak_set(x,i,v)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.set");
      x[caml_ephe_key_offset + i] = v;
      return 0}
    function caml_sys_remove(name)
     {var root=resolve_fs_device(name),ok=root.device.unlink(root.rest);
      if(ok == 0)caml_raise_no_such_file(name);
      return 0}
    function caml_unmount(name)
     {var path=caml_make_path(name),name=path.join("/") + "/",idx=- 1;
      for(var i=0;i < jsoo_mount_point.length;i++)
       if(jsoo_mount_point[i].path == name)idx = i;
      if(idx > - 1)jsoo_mount_point.splice(idx,1);
      return 0}
    function caml_string_get32(s,i)
     {if(i >>> 0 >= s.l + 3)caml_string_bound_error();
      var
       b1=caml_string_unsafe_get(s,i),
       b2=caml_string_unsafe_get(s,i + 1),
       b3=caml_string_unsafe_get(s,i + 2),
       b4=caml_string_unsafe_get(s,i + 3);
      return b4 << 24 | b3 << 16 | b2 << 8 | b1}
    function caml_hypot_float(x,y)
     {var
       x=Math.abs(x),
       y=Math.abs(y),
       a=Math.max(x,y),
       b=Math.min(x,y) / (a?a:1);
      return a * Math.sqrt(1 + b * b)}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_ml_pos_in_64(chanid)
     {return caml_int64_of_float(caml_ml_channels[chanid].offset)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_register_channel_for_spacetime(_channel){return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_ephe_unset_key(x,i){return caml_weak_set(x,i,0)}
    function caml_ml_pos_out(chanid){return caml_ml_channels[chanid].offset}
    function caml_spacetime_enabled(_unit){return 0}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_bytes_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_js_object(a)
     {var o={};
      for(var i=1;i < a.length;i++){var p=a[i];o[p[1].toString()] = p[2]}
      return o}
    function caml_runtime_parameters(_unit){return caml_new_string("")}
    function caml_ba_create(kind,layout,dims_ml)
     {caml_ba_init_views();
      var
       dims=caml_js_from_array(dims_ml),
       size=caml_ba_get_size(dims),
       view=caml_ba_views[0][kind];
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size),data_type=caml_ba_views[1][kind],data2=null;
      if(data_type != 0)data2 = new view(size);
      return caml_ba_create_from(data,data2,data_type,kind,layout,dims)}
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_weak_blit(a1,i1,a2,i2,len)
     {caml_array_blit
       (a1,caml_ephe_key_offset + i1 - 1,a2,caml_ephe_key_offset + i2 - 1,len);
      return 0}
    function caml_bytes_lessthan(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?1:0}
    function caml_gc_quick_stat(){return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
    function caml_ml_input_int(chanid)
     {var chan=caml_ml_channels[chanid],file=chan.file;
      while(chan.offset + 3 >= file.length())
       {var l=caml_ml_refill_input(chan);if(l == 0)caml_raise_end_of_file()}
      var
       o=chan.offset,
       r=
        file.read_one(o)
        <<
        24
        |
        file.read_one(o + 1)
        <<
        16
        |
        file.read_one(o + 2)
        <<
        8
        |
        file.read_one(o + 3);
      chan.offset += 4;
      return r}
    function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8}
    function caml_ml_set_binary_mode(chanid,mode)
     {var chan=caml_ml_channels[chanid],data=caml_global_data.fds[chan.fd];
      data.flags.text = ! mode;
      data.flags.binary = mode;
      return 0}
    function caml_final_register(){return 0}
    function caml_sys_getcwd(){return caml_new_string(caml_current_dir)}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_string_get16(s,i)
     {if(i >>> 0 >= s.l + 1)caml_string_bound_error();
      var b1=caml_string_unsafe_get(s,i),b2=caml_string_unsafe_get(s,i + 1);
      return b2 << 8 | b1}
    function caml_sys_const_big_endian(){return 0}
    function caml_ephe_unset_data(x,data)
     {x[caml_ephe_data_offset] = undefined;return 0}
    function caml_output_value_to_string(v,_fl)
     {return caml_string_of_array(caml_output_val(v))}
    function caml_output_value(chanid,v,_flags)
     {var s=caml_output_value_to_string(v);
      caml_ml_output(chanid,s,0,caml_ml_string_length(s));
      return 0}
    function caml_sys_system_command(cmd)
     {var cmd=cmd.toString();
      joo_global_object.console.log(cmd);
      if
       (typeof require
        !=
        "undefined"
        &&
        require("child_process")
        &&
        require("child_process").execSync)
       try {require("child_process").execSync(cmd);return 0}catch(e){return 1}
      else
       return 127}
    function caml_ba_get_3(ba,i0,i1,i2){return ba.get([i0,i1,i2])}
    var caml_ephe_blit_key=caml_weak_blit;
    function caml_js_error_of_exception(exn)
     {if(exn.js_error)return exn.js_error;return null}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_bytes_of_string(s){return s}
    function caml_hash_mix_int64(h,v)
     {var lo=v[1] | v[2] << 24,hi=v[2] >>> 8 | v[3] << 16;
      h = caml_hash_mix_int(h,lo);
      h = caml_hash_mix_int(h,hi);
      return h}
    function caml_hash_mix_string(h,v)
     {switch(v.t & 6)
       {default:caml_convert_string_to_bytes(v);case 0:
         h = caml_hash_mix_string_str(h,v.c);break;
        case 2:h = caml_hash_mix_string_arr(h,v.c)
        }
      return h}
    var HASH_QUEUE_SIZE=256;
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > HASH_QUEUE_SIZE)sz = HASH_QUEUE_SIZE;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v instanceof Array && v[0] === (v[0] | 0))
         switch(v[0])
          {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
           case 250:queue[--rd] = v[1];break;
           case 255:h = caml_hash_mix_int64(h,v);num--;break;
           default:
            var tag=v.length - 1 << 10 | v[0];
            h = caml_hash_mix_int(h,tag);
            for(i = 1,len = v.length;i < len;i++)
             {if(wr >= sz)break;queue[wr++] = v[i]}
            break}
        else
         if(v instanceof MlBytes)
          {h = caml_hash_mix_string(h,v);num--}
         else
          if(v === (v | 0))
           {h = caml_hash_mix_int(h,v + v + 1);num--}
          else
           if(v === + v)
            {h = caml_hash_mix_float(h,v);num--}
           else
            if(v && v.hash && typeof v.hash === "function")
             h = caml_hash_mix_int(h,v.hash())}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function bigstring_memcmp_stub(v_s1,v_s1_pos,v_s2,v_s2_pos,v_len)
     {for(var i=0;i < v_len;i++)
       {var
         a=caml_ba_get_1(v_s1,v_s1_pos + i),
         b=caml_ba_get_1(v_s2,v_s2_pos + i);
        if(a < b)return - 1;
        if(a > b)return 1}
      return 0}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlBytes?252:1000}
    function caml_js_export_var()
     {return typeof module !== "undefined" && module && module.exports
              ?module.exports
              :joo_global_object}
    function caml_frexp_float(x)
     {if(x == 0 || ! isFinite(x))return [0,x,0];
      var neg=x < 0;
      if(neg)x = - x;
      var exp=jsoo_floor_log2(x) + 1;
      x *= Math.pow(2,- exp);
      if(x < 0.5){x *= 2;exp -= 1}
      if(neg)x = - x;
      return [0,x,exp]}
    function caml_bytes_get32(s,i)
     {if(i >>> 0 >= s.l + 3)caml_string_bound_error();
      var
       b1=caml_string_unsafe_get(s,i),
       b2=caml_string_unsafe_get(s,i + 1),
       b3=caml_string_unsafe_get(s,i + 2),
       b4=caml_string_unsafe_get(s,i + 3);
      return b4 << 24 | b3 << 16 | b2 << 8 | b1}
    function bigstring_blit_bytes_bigstring_stub
     (v_str,v_src_pos,v_bstr,v_dst_pos,v_len)
     {for(var i=0;i < v_len;i++)
       caml_ba_set_1(v_bstr,v_dst_pos + i,caml_bytes_get(v_str,v_src_pos + i));
      return 0}
    function caml_copysign_float(x,y)
     {if(y == 0)y = 1 / y;x = Math.abs(x);return y < 0?- x:x}
    function caml_ba_set_generic(ba,index,v)
     {return ba.set(caml_js_from_array(index),v)}
    function caml_ephe_set_key(x,i,v){return caml_weak_set(x,i,[0,v])}
    function caml_ml_pos_out_64(chanid)
     {return caml_int64_of_float(caml_ml_channels[chanid].offset)}
    function caml_string_get64(s,i)
     {if(i >>> 0 >= s.l + 7)caml_string_bound_error();
      var a=new Array(8);
      for(var j=0;j < 8;j++)a[7 - j] = caml_string_unsafe_get(s,i + j);
      return caml_int64_of_bytes(a)}
    function caml_string_lessequal(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c <= s2.c?1:0}
    function caml_string_greaterequal(s1,s2)
     {return caml_string_lessequal(s2,s1)}
    function caml_nextafter_float(x,y)
     {if(isNaN(x) || isNaN(y))return NaN;
      if(x == y)return y;
      if(x == 0)return y < 0?- Math.pow(2,- 1074):Math.pow(2,- 1074);
      var bits=caml_int64_bits_of_float(x),one=caml_int64_of_int32(1);
      bits = x < y == x > 0?caml_int64_add(bits,one):caml_int64_sub(bits,one);
      return caml_int64_float_of_bits(bits)}
    function caml_ml_pos_in(chanid){return caml_ml_channels[chanid].offset}
    function caml_int64_and(x,y)
     {return [255,x[1] & y[1],x[2] & y[2],x[3] & y[3]]}
    function caml_sys_const_word_size(){return 32}
    function caml_set_static_env(k,v)
     {if(! joo_global_object.jsoo_static_env)
       joo_global_object.jsoo_static_env = {};
      joo_global_object.jsoo_static_env[k] = v;
      return 0}
    function caml_ba_change_layout(ba,layout)
     {if(ba.layout == layout)return ba;
      var dims=[];
      for(var i=0;i < ba.num_dims;i++)dims[i] = ba.nth_dim(i);
      return caml_ba_create_from
              (ba.data,ba.data2,ba.data_type,ba.kind,layout,dims)}
    function caml_input_value_from_bytes(s,ofs)
     {var reader=new MlBytesReader(s,typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    function caml_js_new(c,a)
     {switch(a.length)
       {case 1:return new c();
        case 2:return new c(a[1]);
        case 3:return new c(a[1],a[2]);
        case 4:return new c(a[1],a[2],a[3]);
        case 5:return new c(a[1],a[2],a[3],a[4]);
        case 6:return new c(a[1],a[2],a[3],a[4],a[5]);
        case 7:return new c(a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:return new c(a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
      function F(){return c.apply(this,caml_js_from_array(a))}
      F.prototype = c.prototype;
      return new F()}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    function bigstring_alloc(_,size){return caml_ba_create(12,0,[0,size])}
    function caml_js_from_string(s){return s.toString()}
    function caml_obj_truncate(x,s)
     {if(s <= 0 || s + 1 > x.length)caml_invalid_argument("Obj.truncate");
      if(x.length != s + 1)x.length = s + 1;
      return 0}
    function caml_ba_sub(ba,ofs,len){return ba.sub(ofs,len)}
    function caml_gc_full_major(){return 0}
    function caml_int64_is_minus_one(x)
     {return x[3] == 0xffff && (x[1] & x[2]) == 0xffffff}
    function caml_bytes_set32(s,i,i32)
     {if(i >>> 0 >= s.l + 3)caml_string_bound_error();
      var
       b4=0xFF & i32 >> 24,
       b3=0xFF & i32 >> 16,
       b2=0xFF & i32 >> 8,
       b1=0xFF & i32;
      caml_string_unsafe_set(s,i + 0,b1);
      caml_string_unsafe_set(s,i + 1,b2);
      caml_string_unsafe_set(s,i + 2,b3);
      caml_string_unsafe_set(s,i + 3,b4);
      return 0}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_runtime_variant(_unit){return caml_new_string("")}
    function caml_array_concat(l)
     {var a=[0];
      while(l !== 0)
       {var b=l[1];for(var i=1;i < b.length;i++)a.push(b[i]);l = l[2]}
      return a}
    function caml_ba_uint8_set32(ba,i0,v)
     {ba.set1(i0,v & 0xff);
      ba.set1(i0 + 1,v >>> 8 & 0xff);
      ba.set1(i0 + 2,v >>> 16 & 0xff);
      ba.set1(i0 + 3,v >>> 24 & 0xff);
      return 0}
    function caml_sys_const_ostype_unix(){return 1}
    function caml_ephe_set_data(x,data)
     {x[caml_ephe_data_offset] = data;return 0}
    function caml_make_float_vect(len)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 254;
      for(var i=1;i < len;i++)b[i] = 0;
      return b}
    function caml_signbit_float(x){if(x == 0)x = 1 / x;return x < 0?1:0}
    function caml_ml_seek_out(chanid,pos)
     {caml_ml_channels[chanid].offset = pos;return 0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_js_typeof(o){return typeof o}
    function caml_restore_raw_backtrace(exn,bt){return 0}
    function caml_js_wrap_meth_callback_unsafe(f)
     {return function(){f.apply(null,raw_array_cons(arguments,this))}}
    function caml_ba_dim_3(ba){return ba.nth_dim(2)}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_ephe_check_data(x)
     {return x[caml_ephe_data_offset] === undefined?0:1}
    function caml_log1p_float(x)
     {var y=1 + x,z=y - 1;return z == 0?x:x * Math.log(y) / z}
    function caml_bytes_get16(s,i)
     {if(i >>> 0 >= s.l + 1)caml_string_bound_error();
      var b1=caml_string_unsafe_get(s,i),b2=caml_string_unsafe_get(s,i + 1);
      return b2 << 8 | b1}
    function caml_int64_or(x,y)
     {return [255,x[1] | y[1],x[2] | y[2],x[3] | y[3]]}
    function caml_js_from_bool(x){return ! ! x}
    function caml_ml_set_channel_name(){return 0}
    function caml_lazy_make_forward(v){return [250,v]}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_js_on_ie()
     {var
       ua=
        joo_global_object.navigator?joo_global_object.navigator.userAgent:"";
      return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0}
    function caml_ba_layout(ba){return ba.layout}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
           for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
           var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_md5_chan(chanid,len)
     {var chan=caml_ml_channels[chanid],chan_len=chan.file.length();
      if(len < 0)len = chan_len - chan.offset;
      if(chan.offset + len > chan_len)caml_raise_end_of_file();
      var buf=caml_create_bytes(len);
      chan.file.read(chan.offset,buf,0,len);
      return caml_md5_string(buf,0,len)}
    function caml_int64_shift_right(x,s)
     {s = s & 63;
      if(s == 0)return x;
      var h=x[3] << 16 >> 16;
      if(s < 24)
       return [255,
               (x[1] >> s | x[2] << 24 - s) & 0xffffff,
               (x[2] >> s | h << 24 - s) & 0xffffff,
               x[3] << 16 >> s >>> 16];
      var sign=x[3] << 16 >> 31;
      if(s < 48)
       return [255,
               (x[2] >> s - 24 | x[3] << 48 - s) & 0xffffff,
               x[3] << 16 >> s - 24 >> 16 & 0xffffff,
               sign & 0xffff];
      return [255,
              x[3] << 16 >> s - 32 & 0xffffff,
              sign & 0xffffff,
              sign & 0xffff]}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_array_set(array,index,newval)
     {if(index < 0 || index >= array.length - 1)caml_array_bound_error();
      array[index + 1] = newval;
      return 0}
    function caml_bytes_greaterequal(s1,s2)
     {return caml_bytes_lessequal(s2,s1)}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_CamlinternalMod_update_mod(shape,real,x)
     {if(typeof shape === "number")
       switch(shape)
        {case 0:real.fun = x;break;case 1:default:caml_update_dummy(real,x)}
      else
       switch(shape[0])
        {case 0:
          for(var i=1;i < shape[1].length;i++)
           caml_CamlinternalMod_update_mod(shape[1][i],real[i],x[i]);
          break
         }
      return 0}
    function caml_ephe_get_data(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,x[caml_ephe_data_offset]]}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_ml_output_int(chanid,i)
     {var
       arr=[i >> 24 & 0xFF,i >> 16 & 0xFF,i >> 8 & 0xFF,i & 0xFF],
       s=caml_string_of_array(arr);
      caml_ml_output(chanid,s,0,4);
      return 0}
    var caml_initial_time=new Date().getTime() * 0.001;
    function caml_sys_time()
     {var now=new Date().getTime();return now * 0.001 - caml_initial_time}
    function caml_ml_channel_size(chanid)
     {var chan=caml_ml_channels[chanid];return chan.file.length()}
    function caml_array_append(a1,a2)
     {var l1=a1.length,l2=a2.length,l=l1 + l2 - 1,a=new Array(l);
      a[0] = 0;
      var i=1,j=1;
      for(;i < l1;i++)a[i] = a1[i];
      for(;i < l;i++,j++)a[i] = a2[j];
      return a}
    function caml_raw_backtrace_slot()
     {caml_invalid_argument
       ("Printexc.get_raw_backtrace_slot: index out of bounds")}
    function caml_string_of_bytes(s){return s}
    function caml_ml_set_channel_refill(chanid,f)
     {caml_ml_channels[chanid].refill = f;return 0}
    function caml_int64_is_min_int(x)
     {return x[3] == 0x8000 && (x[1] | x[2]) == 0}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_js_expr(s)
     {js_print_stderr("caml_js_expr: fallback to runtime evaluation");
      return eval(s.toString())}
    function caml_js_wrap_meth_callback_strict(arity,f)
     {return function()
       {var n=arguments.length;
        if(n == arity)return caml_call_gen(f,raw_array_cons(arguments,this));
        var args=new Array(arity + 1);
        args[0] = this;
        for(var i=1;i < n && i <= arity;i++)args[i] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_ml_runtime_warnings_enabled(_unit)
     {return caml_runtime_warnings}
    function caml_backtrace_status(){return 0}
    function caml_install_signal_handler(){return 0}
    function caml_ba_fill(ba,init){ba.fill(init);return 0}
    function caml_gc_get(){return [0,0,0,0,0,0,0,0,0]}
    function caml_output_value_to_bytes(v,_fl)
     {return caml_string_of_array(caml_output_val(v))}
    function caml_modf_float(x)
     {if(isFinite(x))
       {var neg=1 / x < 0;
        x = Math.abs(x);
        var i=Math.floor(x),f=x - i;
        if(neg){i = - i;f = - f}
        return [0,f,i]}
      if(isNaN(x))return [0,NaN,NaN];
      return [0,1 / x,x]}
    function caml_hash_univ_param(count,limit,obj)
     {var hash_accu=0;
      function hash_aux(obj)
       {limit--;
        if(count < 0 || limit < 0)return;
        if(obj instanceof Array && obj[0] === (obj[0] | 0))
         switch(obj[0])
          {case 248:count--;hash_accu = hash_accu * 65599 + obj[2] | 0;break;
           case 250:limit++;hash_aux(obj);break;
           case 255:
            count--;
            hash_accu = hash_accu * 65599 + obj[1] + (obj[2] << 24) | 0;
            break;
           default:
            count--;
            hash_accu = hash_accu * 19 + obj[0] | 0;
            for(var i=obj.length - 1;i > 0;i--)hash_aux(obj[i])}
        else
         if(obj instanceof MlBytes)
          {count--;
           switch(obj.t & 6)
            {default:caml_convert_string_to_bytes(obj);case 0:
              for(var b=obj.c,l=obj.l,i=0;i < l;i++)
               hash_accu = hash_accu * 19 + b.charCodeAt(i) | 0;
              break;
             case 2:
              for(var a=obj.c,l=obj.l,i=0;i < l;i++)
               hash_accu = hash_accu * 19 + a[i] | 0
             }}
         else
          if(obj === (obj | 0))
           {count--;hash_accu = hash_accu * 65599 + obj | 0}
          else
           if(obj === + obj)
            {count--;
             var p=caml_int64_to_bytes(caml_int64_bits_of_float(obj));
             for(var i=7;i >= 0;i--)hash_accu = hash_accu * 19 + p[i] | 0}
           else
            if(obj && obj.hash && typeof obj.hash === "function")
             hash_accu = hash_accu * 65599 + obj.hash() | 0}
      hash_aux(obj);
      return hash_accu & 0x3FFFFFFF}
    function caml_float_compare(x,y)
     {if(x === y)return 0;
      if(x < y)return - 1;
      if(x > y)return 1;
      if(x === x)return 1;
      if(y === y)return - 1;
      return 0}
    function caml_string_set32(s,i,i32){return caml_bytes_set32(s,i,i32)}
    function caml_parse_engine(tables,env,cmd,arg)
     {var
       ERRCODE=256,
       loop=6,
       testshift=7,
       shift=8,
       shift_recover=9,
       reduce=10,
       READ_TOKEN=0,
       RAISE_PARSE_ERROR=1,
       GROW_STACKS_1=2,
       GROW_STACKS_2=3,
       COMPUTE_SEMANTIC_ACTION=4,
       CALL_ERROR_FUNCTION=5,
       env_s_stack=1,
       env_v_stack=2,
       env_symb_start_stack=3,
       env_symb_end_stack=4,
       env_stacksize=5,
       env_stackbase=6,
       env_curr_char=7,
       env_lval=8,
       env_symb_start=9,
       env_symb_end=10,
       env_asp=11,
       env_rule_len=12,
       env_rule_number=13,
       env_sp=14,
       env_state=15,
       env_errflag=16,
       tbl_transl_const=2,
       tbl_transl_block=3,
       tbl_lhs=4,
       tbl_len=5,
       tbl_defred=6,
       tbl_dgoto=7,
       tbl_sindex=8,
       tbl_rindex=9,
       tbl_gindex=10,
       tbl_tablesize=11,
       tbl_table=12,
       tbl_check=13;
      if(! tables.dgoto)
       {tables.defred = caml_lex_array(tables[tbl_defred]);
        tables.sindex = caml_lex_array(tables[tbl_sindex]);
        tables.check = caml_lex_array(tables[tbl_check]);
        tables.rindex = caml_lex_array(tables[tbl_rindex]);
        tables.table = caml_lex_array(tables[tbl_table]);
        tables.len = caml_lex_array(tables[tbl_len]);
        tables.lhs = caml_lex_array(tables[tbl_lhs]);
        tables.gindex = caml_lex_array(tables[tbl_gindex]);
        tables.dgoto = caml_lex_array(tables[tbl_dgoto])}
      var
       res=0,
       n,
       n1,
       n2,
       state1,
       sp=env[env_sp],
       state=env[env_state],
       errflag=env[env_errflag];
      exit:
      for(;;)
       switch(cmd)
        {case 0:state = 0;errflag = 0;
         case 6:
          n = tables.defred[state];
          if(n != 0){cmd = reduce;break}
          if(env[env_curr_char] >= 0){cmd = testshift;break}
          res = READ_TOKEN;
          break exit;
         case 1:
          if(arg instanceof Array)
           {env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
            env[env_lval] = arg[1]}
          else
           {env[env_curr_char] = tables[tbl_transl_const][arg + 1];
            env[env_lval] = 0}
         case 7:
          n1 = tables.sindex[state];
          n2 = n1 + env[env_curr_char];
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
           {cmd = shift;break}
          n1 = tables.rindex[state];
          n2 = n1 + env[env_curr_char];
          if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
           {n = tables.table[n2];cmd = reduce;break}
          if(errflag <= 0){res = CALL_ERROR_FUNCTION;break exit}
         case 5:
          if(errflag < 3)
           {errflag = 3;
            for(;;)
             {state1 = env[env_s_stack][sp + 1];
              n1 = tables.sindex[state1];
              n2 = n1 + ERRCODE;
              if
               (n1
                !=
                0
                &&
                n2
                >=
                0
                &&
                n2
                <=
                tables[tbl_tablesize]
                &&
                tables.check[n2]
                ==
                ERRCODE)
               {cmd = shift_recover;break}
              else
               {if(sp <= env[env_stackbase])return RAISE_PARSE_ERROR;sp--}}}
          else
           {if(env[env_curr_char] == 0)return RAISE_PARSE_ERROR;
            env[env_curr_char] = - 1;
            cmd = loop;
            break}
         case 8:env[env_curr_char] = - 1;if(errflag > 0)errflag--;
         case 9:
          state = tables.table[n2];
          sp++;
          if(sp >= env[env_stacksize]){res = GROW_STACKS_1;break exit}
         case 2:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = env[env_lval];
          env[env_symb_start_stack][sp + 1] = env[env_symb_start];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end];
          cmd = loop;
          break;
         case 10:
          var m=tables.len[n];
          env[env_asp] = sp;
          env[env_rule_number] = n;
          env[env_rule_len] = m;
          sp = sp - m + 1;
          m = tables.lhs[n];
          state1 = env[env_s_stack][sp];
          n1 = tables.gindex[m];
          n2 = n1 + state1;
          state
          =
          n1
           !=
           0
           &&
           n2
           >=
           0
           &&
           n2
           <=
           tables[tbl_tablesize]
           &&
           tables.check[n2]
           ==
           state1
           ?tables.table[n2]
           :tables.dgoto[m];
          if(sp >= env[env_stacksize]){res = GROW_STACKS_2;break exit}
         case 3:res = COMPUTE_SEMANTIC_ACTION;break exit;
         case 4:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = arg;
          var asp=env[env_asp];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
          if(sp > asp)
           env[env_symb_start_stack][sp + 1]
           =
           env[env_symb_end_stack][asp + 1];
          cmd = loop;
          break;
         default:return RAISE_PARSE_ERROR}
      env[env_sp] = sp;
      env[env_state] = state;
      env[env_errflag] = errflag;
      return res}
    function raw_array_copy(a)
     {var l=a.length,b=new Array(l);
      for(var i=0;i < l;i++)b[i] = a[i];
      return b}
    function caml_output_value_to_buffer(s,ofs,len,v,_fl)
     {var t=caml_output_val(v);
      if(t.length > len)caml_failwith("Marshal.to_buffer: buffer overflow");
      caml_blit_bytes(t,0,s,ofs,t.length);
      return 0}
    function caml_pure_js_expr(s)
     {js_print_stderr("caml_pure_js_expr: fallback to runtime evaluation");
      return eval(s.toString())}
    function caml_blit_string(s1,i1,s2,i2,len)
     {return caml_blit_bytes(s1,i1,s2,i2,len)}
    function bigstring_blit_stub(s1,i1,s2,i2,len)
     {for(var i=0;i < len;i++)
       caml_ba_set_1(s2,i2 + i,caml_ba_get_1(s1,i1 + i));
      return 0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_int64_xor(x,y)
     {return [255,x[1] ^ y[1],x[2] ^ y[2],x[3] ^ y[3]]}
    function caml_bytes_greaterthan(s1,s2){return caml_bytes_lessthan(s2,s1)}
    function caml_read_file_content(name)
     {var root=resolve_fs_device(name);
      if(root.device.exists(root.rest))
       {var
         file=root.device.open(root.rest,{rdonly:1}),
         len=file.length(),
         buf=caml_create_bytes(len);
        file.read(0,buf,0,len);
        return buf}
      caml_raise_no_such_file(name)}
    function caml_ml_set_channel_output(chanid,f)
     {var chan=caml_ml_channels[chanid];
      caml_global_data.fds[chan.fd].output = f;
      return 0}
    function caml_js_to_float(x){return x}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_ba_dim(ba,dim){return ba.nth_dim(dim)}
    joo_global_object.jsoo_runtime
    =
    {caml_ephe_check_data:caml_ephe_check_data,
     caml_ephe_unset_data:caml_ephe_unset_data,
     caml_ephe_set_data:caml_ephe_set_data,
     caml_ephe_get_data_copy:caml_ephe_get_data_copy,
     caml_ephe_get_data:caml_ephe_get_data,
     caml_ephe_blit_data:caml_ephe_blit_data,
     caml_ephe_unset_key:caml_ephe_unset_key,
     caml_ephe_set_key:caml_ephe_set_key,
     caml_ephe_check_key:caml_ephe_check_key,
     caml_ephe_get_key_copy:caml_ephe_get_key_copy,
     caml_ephe_get_key:caml_ephe_get_key,
     caml_ephe_blit_key:caml_ephe_blit_key,
     caml_ephe_create:caml_ephe_create,
     caml_weak_blit:caml_weak_blit,
     caml_weak_check:caml_weak_check,
     caml_weak_get_copy:caml_weak_get_copy,
     caml_weak_get:caml_weak_get,
     caml_weak_set:caml_weak_set,
     caml_weak_create:caml_weak_create,
     caml_ephe_data_offset:caml_ephe_data_offset,
     caml_ephe_key_offset:caml_ephe_key_offset,
     caml_hash_mix_bigstring:caml_hash_mix_bigstring,
     bigstring_of_array_buffer:bigstring_of_array_buffer,
     bigstring_to_array_buffer:bigstring_to_array_buffer,
     bigstring_find:bigstring_find,
     bigstring_memcmp_stub:bigstring_memcmp_stub,
     bigstring_blit_stub:bigstring_blit_stub,
     caml_blit_string_to_bigstring:caml_blit_string_to_bigstring,
     bigstring_blit_bytes_bigstring_stub:bigstring_blit_bytes_bigstring_stub,
     bigstring_blit_string_bigstring_stub:bigstring_blit_string_bigstring_stub,
     caml_blit_bigstring_to_string:caml_blit_bigstring_to_string,
     bigstring_blit_bigstring_string_stub:bigstring_blit_bigstring_string_stub,
     bigstring_blit_bigstring_bytes_stub:bigstring_blit_bigstring_bytes_stub,
     bigstring_destroy_stub:bigstring_destroy_stub,
     bigstring_alloc:bigstring_alloc,
     caml_json:caml_json,
     JSON:JSON,
     caml_gc_get:caml_gc_get,
     caml_gc_set:caml_gc_set,
     caml_gc_stat:caml_gc_stat,
     caml_gc_quick_stat:caml_gc_quick_stat,
     caml_gc_counters:caml_gc_counters,
     caml_gc_compaction:caml_gc_compaction,
     caml_gc_full_major:caml_gc_full_major,
     caml_gc_major:caml_gc_major,
     caml_gc_minor:caml_gc_minor,
     caml_CamlinternalMod_update_mod:caml_CamlinternalMod_update_mod,
     caml_CamlinternalMod_init_mod:caml_CamlinternalMod_init_mod,
     caml_js_export_var:caml_js_export_var,
     caml_js_object:caml_js_object,
     caml_pure_js_expr:caml_pure_js_expr,
     caml_js_expr:caml_js_expr,
     caml_js_eval_string:caml_js_eval_string,
     caml_js_to_byte_string:caml_js_to_byte_string,
     caml_js_equals:caml_js_equals,
     caml_js_wrap_meth_callback_unsafe:caml_js_wrap_meth_callback_unsafe,
     caml_js_wrap_meth_callback_strict:caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_arguments:caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback:caml_js_wrap_meth_callback,
     caml_js_wrap_callback_strict:caml_js_wrap_callback_strict,
     caml_js_wrap_callback_arguments:caml_js_wrap_callback_arguments,
     caml_js_wrap_callback:caml_js_wrap_callback,
     caml_ojs_new_arr:caml_ojs_new_arr,
     caml_js_new:caml_js_new,
     caml_js_meth_call:caml_js_meth_call,
     caml_js_fun_call:caml_js_fun_call,
     caml_js_call:caml_js_call,
     caml_js_var:caml_js_var,
     caml_js_to_array:caml_js_to_array,
     caml_js_from_array:caml_js_from_array,
     caml_js_from_string:caml_js_from_string,
     caml_js_to_float:caml_js_to_float,
     caml_js_from_float:caml_js_from_float,
     caml_js_to_bool:caml_js_to_bool,
     caml_js_from_bool:caml_js_from_bool,
     js_print_stderr:js_print_stderr,
     js_print_stdout:js_print_stdout,
     caml_trampoline_return:caml_trampoline_return,
     caml_trampoline:caml_trampoline,
     caml_js_get_console:caml_js_get_console,
     caml_js_html_entities:caml_js_html_entities,
     caml_js_html_escape:caml_js_html_escape,
     caml_js_on_ie:caml_js_on_ie,
     caml_js_typeof:caml_js_typeof,
     caml_js_instanceof:caml_js_instanceof,
     caml_js_delete:caml_js_delete,
     caml_js_get:caml_js_get,
     caml_js_set:caml_js_set,
     caml_js_pure_expr:caml_js_pure_expr,
     MlNodeFile:MlNodeFile,
     MlNodeDevice:MlNodeDevice,
     fs_node_supported:fs_node_supported,
     MlFakeFile:MlFakeFile,
     MlFakeDevice:MlFakeDevice,
     caml_read_file_content:caml_read_file_content,
     caml_create_file:caml_create_file,
     caml_fs_init:caml_fs_init,
     caml_create_file_extern:caml_create_file_extern,
     caml_ba_map_file_bytecode:caml_ba_map_file_bytecode,
     caml_ba_map_file:caml_ba_map_file,
     caml_sys_rename:caml_sys_rename,
     caml_sys_is_directory:caml_sys_is_directory,
     caml_sys_remove:caml_sys_remove,
     caml_sys_read_directory:caml_sys_read_directory,
     caml_sys_file_exists:caml_sys_file_exists,
     caml_raise_not_a_dir:caml_raise_not_a_dir,
     caml_raise_no_such_file:caml_raise_no_such_file,
     caml_sys_chdir:caml_sys_chdir,
     caml_sys_getcwd:caml_sys_getcwd,
     caml_unmount:caml_unmount,
     caml_mount_autoload:caml_mount_autoload,
     resolve_fs_device:resolve_fs_device,
     caml_list_mount_point:caml_list_mount_point,
     jsoo_mount_point:jsoo_mount_point,
     caml_make_path:caml_make_path,
     MlFile:MlFile,
     caml_root:caml_root,
     caml_current_dir:caml_current_dir,
     caml_ml_output_int:caml_ml_output_int,
     caml_ml_pos_out_64:caml_ml_pos_out_64,
     caml_ml_pos_out:caml_ml_pos_out,
     caml_ml_seek_out_64:caml_ml_seek_out_64,
     caml_ml_seek_out:caml_ml_seek_out,
     caml_output_value:caml_output_value,
     caml_ml_output_char:caml_ml_output_char,
     caml_ml_output:caml_ml_output,
     caml_ml_output_bytes:caml_ml_output_bytes,
     caml_ml_flush:caml_ml_flush,
     caml_ml_input_scan_line:caml_ml_input_scan_line,
     caml_ml_pos_in_64:caml_ml_pos_in_64,
     caml_ml_pos_in:caml_ml_pos_in,
     caml_ml_seek_in_64:caml_ml_seek_in_64,
     caml_ml_seek_in:caml_ml_seek_in,
     caml_ml_input_int:caml_ml_input_int,
     caml_ml_input_char:caml_ml_input_char,
     caml_input_value:caml_input_value,
     caml_ml_input:caml_ml_input,
     caml_ml_may_refill_input:caml_ml_may_refill_input,
     caml_ml_refill_input:caml_ml_refill_input,
     caml_ml_set_channel_refill:caml_ml_set_channel_refill,
     caml_ml_set_channel_output:caml_ml_set_channel_output,
     caml_ml_channel_size_64:caml_ml_channel_size_64,
     caml_ml_channel_size:caml_ml_channel_size,
     caml_ml_close_channel:caml_ml_close_channel,
     caml_ml_set_binary_mode:caml_ml_set_binary_mode,
     caml_ml_open_descriptor_in:caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out:caml_ml_open_descriptor_out,
     caml_ml_out_channels_list:caml_ml_out_channels_list,
     caml_ml_channels:caml_ml_channels,
     caml_ml_set_channel_name:caml_ml_set_channel_name,
     caml_sys_open:caml_sys_open,
     caml_std_output:caml_std_output,
     caml_sys_close:caml_sys_close,
     caml_is_js:caml_is_js,
     caml_spacetime_only_works_for_native_code:
     caml_spacetime_only_works_for_native_code,
     caml_register_channel_for_spacetime:caml_register_channel_for_spacetime,
     caml_spacetime_enabled:caml_spacetime_enabled,
     caml_sys_isatty:caml_sys_isatty,
     caml_runtime_parameters:caml_runtime_parameters,
     caml_runtime_variant:caml_runtime_variant,
     caml_ml_runtime_warnings_enabled:caml_ml_runtime_warnings_enabled,
     caml_ml_enable_runtime_warnings:caml_ml_enable_runtime_warnings,
     caml_runtime_warnings:caml_runtime_warnings,
     caml_list_of_js_array:caml_list_of_js_array,
     caml_int64_bswap:caml_int64_bswap,
     caml_int32_bswap:caml_int32_bswap,
     caml_bswap16:caml_bswap16,
     caml_convert_raw_backtrace_slot:caml_convert_raw_backtrace_slot,
     caml_install_signal_handler:caml_install_signal_handler,
     caml_fresh_oo_id:caml_fresh_oo_id,
     caml_set_oo_id:caml_set_oo_id,
     caml_oo_last_id:caml_oo_last_id,
     unix_inet_addr_of_string:unix_inet_addr_of_string,
     caml_sys_get_argv:caml_sys_get_argv,
     caml_sys_exit:caml_sys_exit,
     caml_sys_getenv:caml_sys_getenv,
     caml_set_static_env:caml_set_static_env,
     caml_get_current_callstack:caml_get_current_callstack,
     caml_restore_raw_backtrace:caml_restore_raw_backtrace,
     caml_raw_backtrace_slot:caml_raw_backtrace_slot,
     caml_raw_backtrace_next_slot:caml_raw_backtrace_next_slot,
     caml_raw_backtrace_length:caml_raw_backtrace_length,
     caml_convert_raw_backtrace:caml_convert_raw_backtrace,
     caml_record_backtrace:caml_record_backtrace,
     caml_get_exception_raw_backtrace:caml_get_exception_raw_backtrace,
     caml_get_exception_backtrace:caml_get_exception_backtrace,
     caml_backtrace_status:caml_backtrace_status,
     caml_final_release:caml_final_release,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_register:caml_final_register,
     caml_get_public_method:caml_get_public_method,
     caml_array_blit:caml_array_blit,
     caml_array_concat:caml_array_concat,
     caml_array_append:caml_array_append,
     caml_array_sub:caml_array_sub,
     caml_sys_system_command:caml_sys_system_command,
     caml_sys_const_ostype_win32:caml_sys_const_ostype_win32,
     caml_sys_const_ostype_unix:caml_sys_const_ostype_unix,
     caml_sys_const_ostype_cygwin:caml_sys_const_ostype_cygwin,
     caml_sys_const_max_wosize:caml_sys_const_max_wosize,
     caml_sys_const_int_size:caml_sys_const_int_size,
     caml_sys_const_word_size:caml_sys_const_word_size,
     caml_sys_const_big_endian:caml_sys_const_big_endian,
     caml_sys_random_seed:caml_sys_random_seed,
     caml_sys_const_backend_type:caml_sys_const_backend_type,
     caml_sys_get_config:caml_sys_get_config,
     caml_sys_time:caml_sys_time,
     caml_hash:caml_hash,
     caml_hash_mix_string:caml_hash_mix_string,
     caml_hash_mix_string_arr:caml_hash_mix_string_arr,
     caml_hash_mix_string_str:caml_hash_mix_string_str,
     caml_hash_mix_int64:caml_hash_mix_int64,
     caml_hash_mix_float:caml_hash_mix_float,
     caml_hash_mix_final:caml_hash_mix_final,
     caml_hash_mix_int:caml_hash_mix_int,
     caml_hash_univ_param:caml_hash_univ_param,
     caml_format_float:caml_format_float,
     caml_format_int:caml_format_int,
     caml_finish_formatting:caml_finish_formatting,
     caml_parse_format:caml_parse_format,
     caml_is_printable:caml_is_printable,
     caml_float_of_string:caml_float_of_string,
     caml_int_of_string:caml_int_of_string,
     caml_parse_digit:caml_parse_digit,
     caml_parse_sign_and_base:caml_parse_sign_and_base,
     caml_lessthan:caml_lessthan,
     caml_lessequal:caml_lessequal,
     caml_greaterthan:caml_greaterthan,
     caml_greaterequal:caml_greaterequal,
     caml_notequal:caml_notequal,
     caml_equal:caml_equal,
     caml_int_compare:caml_int_compare,
     caml_compare:caml_compare,
     caml_compare_val:caml_compare_val,
     caml_floatarray_create:caml_floatarray_create,
     caml_make_float_vect:caml_make_float_vect,
     caml_make_vect:caml_make_vect,
     caml_check_bound:caml_check_bound,
     caml_array_get:caml_array_get,
     caml_array_set:caml_array_set,
     caml_mod:caml_mod,
     caml_div:caml_div,
     caml_mul:caml_mul,
     caml_lazy_make_forward:caml_lazy_make_forward,
     caml_obj_truncate:caml_obj_truncate,
     caml_obj_dup:caml_obj_dup,
     caml_obj_block:caml_obj_block,
     caml_obj_set_tag:caml_obj_set_tag,
     caml_obj_tag:caml_obj_tag,
     caml_obj_is_block:caml_obj_is_block,
     caml_update_dummy:caml_update_dummy,
     caml_array_bound_error:caml_array_bound_error,
     caml_raise_not_found:caml_raise_not_found,
     caml_raise_zero_divide:caml_raise_zero_divide,
     caml_raise_end_of_file:caml_raise_end_of_file,
     caml_invalid_argument:caml_invalid_argument,
     caml_js_error_of_exception:caml_js_error_of_exception,
     caml_exn_with_js_backtrace:caml_exn_with_js_backtrace,
     caml_wrap_exception:caml_wrap_exception,
     caml_failwith:caml_failwith,
     caml_raise_sys_error:caml_raise_sys_error,
     caml_raise_with_string:caml_raise_with_string,
     caml_raise_with_arg:caml_raise_with_arg,
     caml_return_exn_constant:caml_return_exn_constant,
     caml_raise_constant:caml_raise_constant,
     caml_get_global_data:caml_get_global_data,
     caml_register_global:caml_register_global,
     caml_global_data:caml_global_data,
     caml_named_value:caml_named_value,
     caml_register_named_value:caml_register_named_value,
     caml_named_values:caml_named_values,
     caml_call_gen:caml_call_gen,
     raw_array_append_one:raw_array_append_one,
     raw_array_cons:raw_array_cons,
     raw_array_copy:raw_array_copy,
     raw_array_sub:raw_array_sub,
     win_handle_fd:win_handle_fd,
     win_cleanup:win_cleanup,
     win_startup:win_startup,
     unix_mktime:unix_mktime,
     unix_localtime:unix_localtime,
     unix_gmtime:unix_gmtime,
     unix_time:unix_time,
     unix_gettimeofday:unix_gettimeofday,
     caml_ba_reshape:caml_ba_reshape,
     caml_ba_slice:caml_ba_slice,
     caml_ba_sub:caml_ba_sub,
     caml_ba_fill:caml_ba_fill,
     caml_ba_blit:caml_ba_blit,
     caml_ba_set_3:caml_ba_set_3,
     caml_ba_set_2:caml_ba_set_2,
     caml_ba_set_1:caml_ba_set_1,
     caml_ba_uint8_set64:caml_ba_uint8_set64,
     caml_ba_uint8_set32:caml_ba_uint8_set32,
     caml_ba_uint8_set16:caml_ba_uint8_set16,
     caml_ba_set_generic:caml_ba_set_generic,
     caml_ba_get_3:caml_ba_get_3,
     caml_ba_get_2:caml_ba_get_2,
     caml_ba_get_1:caml_ba_get_1,
     caml_ba_uint8_get64:caml_ba_uint8_get64,
     caml_ba_uint8_get32:caml_ba_uint8_get32,
     caml_ba_uint8_get16:caml_ba_uint8_get16,
     caml_ba_get_generic:caml_ba_get_generic,
     caml_ba_dim_3:caml_ba_dim_3,
     caml_ba_dim_2:caml_ba_dim_2,
     caml_ba_dim_1:caml_ba_dim_1,
     caml_ba_dim:caml_ba_dim,
     caml_ba_num_dims:caml_ba_num_dims,
     caml_ba_layout:caml_ba_layout,
     caml_ba_kind:caml_ba_kind,
     caml_ba_change_layout:caml_ba_change_layout,
     caml_ba_create:caml_ba_create,
     caml_ba_create_from:caml_ba_create_from,
     caml_ba_views:caml_ba_views,
     caml_ba_get_size:caml_ba_get_size,
     caml_ba_init_views:caml_ba_init_views,
     caml_ba_init:caml_ba_init,
     caml_set_parser_trace:caml_set_parser_trace,
     caml_parse_engine:caml_parse_engine,
     caml_new_lex_engine:caml_new_lex_engine,
     caml_lex_engine:caml_lex_engine,
     caml_lex_array:caml_lex_array,
     caml_output_value_to_buffer:caml_output_value_to_buffer,
     caml_output_value_to_bytes:caml_output_value_to_bytes,
     caml_output_value_to_string:caml_output_value_to_string,
     caml_output_val:caml_output_val,
     caml_marshal_data_size:caml_marshal_data_size,
     caml_input_value_from_reader:caml_input_value_from_reader,
     caml_input_value_from_bytes:caml_input_value_from_bytes,
     caml_input_value_from_string:caml_input_value_from_string,
     caml_float_of_bytes:caml_float_of_bytes,
     BigStringReader:BigStringReader,
     MlBytesReader:MlBytesReader,
     caml_marshal_constants:caml_marshal_constants,
     caml_md5_string:caml_md5_string,
     caml_md5_chan:caml_md5_chan,
     caml_int64_to_bytes:caml_int64_to_bytes,
     caml_int64_of_bytes:caml_int64_of_bytes,
     caml_int64_of_string:caml_int64_of_string,
     caml_int64_format:caml_int64_format,
     caml_int64_of_float:caml_int64_of_float,
     caml_int64_to_float:caml_int64_to_float,
     caml_int64_to_int32:caml_int64_to_int32,
     caml_int64_of_int32:caml_int64_of_int32,
     caml_int64_mod:caml_int64_mod,
     caml_int64_div:caml_int64_div,
     caml_int64_udivmod:caml_int64_udivmod,
     caml_int64_lsr1:caml_int64_lsr1,
     caml_int64_lsl1:caml_int64_lsl1,
     caml_int64_shift_right:caml_int64_shift_right,
     caml_int64_shift_right_unsigned:caml_int64_shift_right_unsigned,
     caml_int64_shift_left:caml_int64_shift_left,
     caml_int64_xor:caml_int64_xor,
     caml_int64_or:caml_int64_or,
     caml_int64_and:caml_int64_and,
     caml_int64_is_minus_one:caml_int64_is_minus_one,
     caml_int64_is_min_int:caml_int64_is_min_int,
     caml_int64_is_negative:caml_int64_is_negative,
     caml_int64_is_zero:caml_int64_is_zero,
     caml_int64_mul:caml_int64_mul,
     caml_int64_sub:caml_int64_sub,
     caml_int64_add:caml_int64_add,
     caml_int64_neg:caml_int64_neg,
     caml_int64_compare:caml_int64_compare,
     caml_int64_ult:caml_int64_ult,
     caml_int64_ucompare:caml_int64_ucompare,
     caml_int64_offset:caml_int64_offset,
     caml_tanh_float:caml_tanh_float,
     caml_sinh_float:caml_sinh_float,
     caml_cosh_float:caml_cosh_float,
     caml_log10_float:caml_log10_float,
     caml_hypot_float:caml_hypot_float,
     caml_log1p_float:caml_log1p_float,
     caml_expm1_float:caml_expm1_float,
     caml_signbit_float:caml_signbit_float,
     caml_copysign_float:caml_copysign_float,
     caml_float_compare:caml_float_compare,
     caml_frexp_float:caml_frexp_float,
     caml_ldexp_float:caml_ldexp_float,
     caml_modf_float:caml_modf_float,
     caml_classify_float:caml_classify_float,
     caml_int32_float_of_bits:caml_int32_float_of_bits,
     caml_trunc_float:caml_trunc_float,
     caml_nextafter_float:caml_nextafter_float,
     caml_int64_float_of_bits:caml_int64_float_of_bits,
     caml_hexstring_of_float:caml_hexstring_of_float,
     caml_int32_bits_of_float:caml_int32_bits_of_float,
     caml_int64_bits_of_float:caml_int64_bits_of_float,
     jsoo_floor_log2:jsoo_floor_log2,
     caml_bytes_of_string:caml_bytes_of_string,
     caml_string_of_bytes:caml_string_of_bytes,
     caml_ml_bytes_length:caml_ml_bytes_length,
     caml_ml_string_length:caml_ml_string_length,
     caml_blit_string:caml_blit_string,
     caml_blit_bytes:caml_blit_bytes,
     caml_fill_string:caml_fill_string,
     caml_fill_bytes:caml_fill_bytes,
     caml_bytes_greaterthan:caml_bytes_greaterthan,
     caml_string_greaterthan:caml_string_greaterthan,
     caml_bytes_greaterequal:caml_bytes_greaterequal,
     caml_string_greaterequal:caml_string_greaterequal,
     caml_bytes_lessthan:caml_bytes_lessthan,
     caml_string_lessthan:caml_string_lessthan,
     caml_bytes_lessequal:caml_bytes_lessequal,
     caml_string_lessequal:caml_string_lessequal,
     caml_bytes_notequal:caml_bytes_notequal,
     caml_string_notequal:caml_string_notequal,
     caml_bytes_equal:caml_bytes_equal,
     caml_string_equal:caml_string_equal,
     caml_bytes_compare:caml_bytes_compare,
     caml_string_compare:caml_string_compare,
     caml_string_of_array:caml_string_of_array,
     caml_new_string:caml_new_string,
     caml_create_bytes:caml_create_bytes,
     caml_create_string:caml_create_string,
     caml_js_to_string:caml_js_to_string,
     caml_jsbytes_of_string:caml_jsbytes_of_string,
     caml_array_of_string:caml_array_of_string,
     caml_convert_string_to_array:caml_convert_string_to_array,
     caml_convert_string_to_bytes:caml_convert_string_to_bytes,
     MlBytes:MlBytes,
     caml_bytes_set:caml_bytes_set,
     caml_string_set64:caml_string_set64,
     caml_bytes_set64:caml_bytes_set64,
     caml_string_set32:caml_string_set32,
     caml_bytes_set32:caml_bytes_set32,
     caml_string_set16:caml_string_set16,
     caml_bytes_set16:caml_bytes_set16,
     caml_string_set:caml_string_set,
     caml_bytes_get:caml_bytes_get,
     caml_bytes_get64:caml_bytes_get64,
     caml_string_get64:caml_string_get64,
     caml_bytes_get32:caml_bytes_get32,
     caml_string_get32:caml_string_get32,
     caml_bytes_get16:caml_bytes_get16,
     caml_string_get16:caml_string_get16,
     caml_string_get:caml_string_get,
     caml_string_bound_error:caml_string_bound_error,
     caml_string_unsafe_set:caml_string_unsafe_set,
     caml_bytes_unsafe_set:caml_bytes_unsafe_set,
     caml_bytes_unsafe_get:caml_bytes_unsafe_get,
     caml_string_unsafe_get:caml_string_unsafe_get,
     caml_to_js_string:caml_to_js_string,
     caml_is_ascii:caml_is_ascii,
     caml_utf16_of_utf8:caml_utf16_of_utf8,
     caml_utf8_of_utf16:caml_utf8_of_utf16,
     caml_subarray_to_string:caml_subarray_to_string,
     caml_str_repeat:caml_str_repeat};
    caml_fs_init();
    caml_register_global
     (0,[248,caml_new_string("Out_of_memory"),0],"Out_of_memory");
    caml_register_global(1,[248,caml_new_string("Sys_error"),-1],"Sys_error");
    caml_register_global(2,[248,caml_new_string("Failure"),-2],"Failure");
    caml_register_global
     (3,[248,caml_new_string("Invalid_argument"),-3],"Invalid_argument");
    caml_register_global
     (4,[248,caml_new_string("End_of_file"),-4],"End_of_file");
    caml_register_global
     (5,[248,caml_new_string("Division_by_zero"),-5],"Division_by_zero");
    caml_register_global(6,[248,caml_new_string("Not_found"),-6],"Not_found");
    caml_register_global
     (7,[248,caml_new_string("Match_failure"),-7],"Match_failure");
    caml_register_global
     (8,[248,caml_new_string("Stack_overflow"),-8],"Stack_overflow");
    caml_register_global
     (9,[248,caml_new_string("Sys_blocked_io"),-9],"Sys_blocked_io");
    caml_register_global
     (10,[248,caml_new_string("Assert_failure"),-10],"Assert_failure");
    caml_register_global
     (11,
      [248,caml_new_string("Undefined_recursive_module"),-11],
      "Undefined_recursive_module");
    return}
  (function(){return this}()));


//# 1 ".js/stdlib/stdlib.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_array_concat=runtime.caml_array_concat,
     caml_array_sub=runtime.caml_array_sub,
     caml_ba_change_layout=runtime.caml_ba_change_layout,
     caml_ba_create=runtime.caml_ba_create,
     caml_ba_dim_1=runtime.caml_ba_dim_1,
     caml_ba_dim_2=runtime.caml_ba_dim_2,
     caml_ba_kind=runtime.caml_ba_kind,
     caml_ba_num_dims=runtime.caml_ba_num_dims,
     caml_ba_reshape=runtime.caml_ba_reshape,
     caml_ba_slice=runtime.caml_ba_slice,
     caml_blit_bytes=runtime.caml_blit_bytes,
     caml_blit_string=runtime.caml_blit_string,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_of_string=runtime.caml_bytes_of_string,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_equal=runtime.caml_equal,
     caml_fill_bytes=runtime.caml_fill_bytes,
     caml_float_compare=runtime.caml_float_compare,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_format_float=runtime.caml_format_float,
     caml_format_int=runtime.caml_format_int,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_get_exception_raw_backtrace=runtime.caml_get_exception_raw_backtrace,
     caml_get_public_method=runtime.caml_get_public_method,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_hash=runtime.caml_hash,
     caml_input_value=runtime.caml_input_value,
     caml_int64_add=runtime.caml_int64_add,
     caml_int64_compare=runtime.caml_int64_compare,
     caml_int64_float_of_bits=runtime.caml_int64_float_of_bits,
     caml_int64_format=runtime.caml_int64_format,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_of_string=runtime.caml_int64_of_string,
     caml_int64_or=runtime.caml_int64_or,
     caml_int64_shift_left=runtime.caml_int64_shift_left,
     caml_int64_sub=runtime.caml_int64_sub,
     caml_int_compare=runtime.caml_int_compare,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_lessequal=runtime.caml_lessequal,
     caml_make_vect=runtime.caml_make_vect,
     caml_marshal_data_size=runtime.caml_marshal_data_size,
     caml_md5_string=runtime.caml_md5_string,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_channel_size=runtime.caml_ml_channel_size,
     caml_ml_channel_size_64=runtime.caml_ml_channel_size_64,
     caml_ml_close_channel=runtime.caml_ml_close_channel,
     caml_ml_flush=runtime.caml_ml_flush,
     caml_ml_input=runtime.caml_ml_input,
     caml_ml_input_char=runtime.caml_ml_input_char,
     caml_ml_input_int=runtime.caml_ml_input_int,
     caml_ml_open_descriptor_in=runtime.caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out=runtime.caml_ml_open_descriptor_out,
     caml_ml_output=runtime.caml_ml_output,
     caml_ml_output_bytes=runtime.caml_ml_output_bytes,
     caml_ml_output_char=runtime.caml_ml_output_char,
     caml_ml_output_int=runtime.caml_ml_output_int,
     caml_ml_pos_in=runtime.caml_ml_pos_in,
     caml_ml_pos_out=runtime.caml_ml_pos_out,
     caml_ml_seek_in=runtime.caml_ml_seek_in,
     caml_ml_seek_out=runtime.caml_ml_seek_out,
     caml_ml_set_binary_mode=runtime.caml_ml_set_binary_mode,
     caml_ml_set_channel_name=runtime.caml_ml_set_channel_name,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_mul=runtime.caml_mul,
     caml_new_string=runtime.caml_new_string,
     caml_notequal=runtime.caml_notequal,
     caml_obj_block=runtime.caml_obj_block,
     caml_obj_set_tag=runtime.caml_obj_set_tag,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_obj_truncate=runtime.caml_obj_truncate,
     caml_output_value=runtime.caml_output_value,
     caml_register_global=runtime.caml_register_global,
     caml_register_named_value=runtime.caml_register_named_value,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_spacetime_enabled=runtime.caml_spacetime_enabled,
     caml_spacetime_only_works_for_native_code=
      runtime.caml_spacetime_only_works_for_native_code,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_bytes=runtime.caml_string_of_bytes,
     caml_string_unsafe_get=runtime.caml_string_unsafe_get,
     caml_sys_getenv=runtime.caml_sys_getenv,
     caml_sys_open=runtime.caml_sys_open,
     caml_sys_random_seed=runtime.caml_sys_random_seed,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_weak_blit=runtime.caml_weak_blit,
     caml_weak_check=runtime.caml_weak_check,
     caml_weak_create=runtime.caml_weak_create,
     caml_weak_get=runtime.caml_weak_get,
     caml_weak_get_copy=runtime.caml_weak_get_copy,
     caml_weak_set=runtime.caml_weak_set,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$0=caml_new_string("%,"),
     cst_really_input=caml_new_string("really_input"),
     cst_input=caml_new_string("input"),
     cst_output_substring=caml_new_string("output_substring"),
     cst_output=caml_new_string("output"),
     cst_12g=caml_new_string("%.12g"),
     cst=caml_new_string("."),
     cst_false$1=caml_new_string("false"),
     cst_true$1=caml_new_string("true"),
     cst_false$0=caml_new_string("false"),
     cst_true$0=caml_new_string("true"),
     cst_bool_of_string=caml_new_string("bool_of_string"),
     cst_true=caml_new_string("true"),
     cst_false=caml_new_string("false"),
     cst_char_of_int=caml_new_string("char_of_int"),
     cst_Stdlib_Pervasives_Exit=caml_new_string("Stdlib.Pervasives.Exit"),
     cst$1=caml_new_string("\\\\"),
     cst$2=caml_new_string("\\'"),
     cst_b=caml_new_string("\\b"),
     cst_t=caml_new_string("\\t"),
     cst_n=caml_new_string("\\n"),
     cst_r=caml_new_string("\\r"),
     cst_Char_chr=caml_new_string("Char.chr"),
     cst_is_not_a_latin1_character=
      caml_new_string(" is not a latin1 character"),
     cst_04X=caml_new_string("%04X"),
     cst_U=caml_new_string("U+"),
     cst_is_not_an_Unicode_scalar_value=
      caml_new_string(" is not an Unicode scalar value"),
     cst_X=caml_new_string("%X"),
     err_no_pred=caml_new_string("U+0000 has no predecessor"),
     err_no_succ=caml_new_string("U+10FFFF has no successor"),
     cst_Stdlib_Sys_Break=caml_new_string("Stdlib.Sys.Break"),
     ocaml_version=caml_new_string("4.07.0"),
     cst_List_map2=caml_new_string("List.map2"),
     cst_List_iter2=caml_new_string("List.iter2"),
     cst_List_fold_left2=caml_new_string("List.fold_left2"),
     cst_List_fold_right2=caml_new_string("List.fold_right2"),
     cst_List_for_all2=caml_new_string("List.for_all2"),
     cst_List_exists2=caml_new_string("List.exists2"),
     cst_List_combine=caml_new_string("List.combine"),
     cst_List_rev_map2=caml_new_string("List.rev_map2"),
     cst_List_init=caml_new_string("List.init"),
     cst_List_nth$0=caml_new_string("List.nth"),
     cst_nth=caml_new_string("nth"),
     cst_List_nth=caml_new_string("List.nth"),
     cst_tl=caml_new_string("tl"),
     cst_hd=caml_new_string("hd"),
     cst_Bytes_of_seq_cannot_grow_bytes=
      caml_new_string("Bytes.of_seq: cannot grow bytes"),
     cst_String_rcontains_from_Bytes_rcontains_from=
      caml_new_string("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes_contains_from=
      caml_new_string("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Bytes_rindex_from_opt=
      caml_new_string("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_rindex_from=
      caml_new_string("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Bytes_index_from_opt=
      caml_new_string("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_index_from=
      caml_new_string("String.index_from / Bytes.index_from"),
     cst_Bytes_concat=caml_new_string("Bytes.concat"),
     cst_String_blit_Bytes_blit_string=
      caml_new_string("String.blit / Bytes.blit_string"),
     cst_Bytes_blit=caml_new_string("Bytes.blit"),
     cst_String_fill_Bytes_fill=caml_new_string("String.fill / Bytes.fill"),
     cst_Bytes_extend=caml_new_string("Bytes.extend"),
     cst_String_sub_Bytes_sub=caml_new_string("String.sub / Bytes.sub"),
     cst_String_rcontains_from_Bytes_rcontains_from$0=
      caml_new_string("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes_contains_from$0=
      caml_new_string("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Bytes_rindex_from_opt$0=
      caml_new_string("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_rindex_from$0=
      caml_new_string("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Bytes_index_from_opt$0=
      caml_new_string("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_index_from$0=
      caml_new_string("String.index_from / Bytes.index_from"),
     cst$4=caml_new_string(""),
     cst$3=caml_new_string(""),
     cst_String_concat=caml_new_string("String.concat"),
     cst_Sort_array=caml_new_string("Sort.array"),
     cst_Marshal_from_bytes=caml_new_string("Marshal.from_bytes"),
     cst_Marshal_from_bytes$0=caml_new_string("Marshal.from_bytes"),
     cst_Marshal_data_size=caml_new_string("Marshal.data_size"),
     cst_Marshal_to_buffer_substring_out_of_bounds=
      caml_new_string("Marshal.to_buffer: substring out of bounds"),
     cst_Obj_extension_constructor$0=
      caml_new_string("Obj.extension_constructor"),
     cst_Obj_extension_constructor=
      caml_new_string("Obj.extension_constructor"),
     cst_Array_map2_arrays_must_have_the_same_length=
      caml_new_string("Array.map2: arrays must have the same length"),
     cst_Array_iter2_arrays_must_have_the_same_length=
      caml_new_string("Array.iter2: arrays must have the same length"),
     cst_Array_blit=caml_new_string("Array.blit"),
     cst_Array_fill=caml_new_string("Array.fill"),
     cst_Array_sub=caml_new_string("Array.sub"),
     cst_Array_init=caml_new_string("Array.init"),
     cst_Stdlib_Array_Bottom=caml_new_string("Stdlib.Array.Bottom"),
     cst_d=caml_new_string("%d"),
     cst_d$0=caml_new_string("%d"),
     zero$0=[255,0,0,0],
     one$0=[255,1,0,0],
     minus_one$0=[255,16777215,16777215,65535],
     min_int$1=[255,0,0,32768],
     max_int$1=[255,16777215,16777215,32767],
     cst_d$1=caml_new_string("%d"),
     cst_Lexing_lex_refill_cannot_grow_buffer=
      caml_new_string("Lexing.lex_refill: cannot grow buffer"),
     dummy_pos=[0,caml_new_string(""),0,0,-1],
     zero_pos=[0,caml_new_string(""),1,0,0],
     cst_syntax_error=caml_new_string("syntax error"),
     cst_Stdlib_Parsing_YYexit=caml_new_string("Stdlib.Parsing.YYexit"),
     cst_Stdlib_Parsing_Parse_error=
      caml_new_string("Stdlib.Parsing.Parse_error"),
     cst_Set_remove_min_elt=caml_new_string("Set.remove_min_elt"),
     cst_Set_bal=caml_new_string("Set.bal"),
     cst_Set_bal$0=caml_new_string("Set.bal"),
     cst_Set_bal$1=caml_new_string("Set.bal"),
     cst_Set_bal$2=caml_new_string("Set.bal"),
     cst_Map_remove_min_elt=caml_new_string("Map.remove_min_elt"),
     cst_Map_bal=caml_new_string("Map.bal"),
     cst_Map_bal$0=caml_new_string("Map.bal"),
     cst_Map_bal$1=caml_new_string("Map.bal"),
     cst_Map_bal$2=caml_new_string("Map.bal"),
     cst_Stdlib_Stack_Empty=caml_new_string("Stdlib.Stack.Empty"),
     cst_Stdlib_Queue_Empty=caml_new_string("Stdlib.Queue.Empty"),
     cst_CamlinternalLazy_Undefined=
      caml_new_string("CamlinternalLazy.Undefined"),
     cst_count=caml_new_string("{count = "),
     cst_data=caml_new_string("; data = "),
     cst$5=caml_new_string("}"),
     cst_Sempty=caml_new_string("Sempty"),
     cst_Scons=caml_new_string("Scons ("),
     cst$6=caml_new_string(", "),
     cst$7=caml_new_string(")"),
     cst_Sapp=caml_new_string("Sapp ("),
     cst$8=caml_new_string(", "),
     cst$9=caml_new_string(")"),
     cst_Slazy=caml_new_string("Slazy"),
     cst_Sgen=caml_new_string("Sgen"),
     cst_Sbuffio=caml_new_string("Sbuffio"),
     cst_Stdlib_Stream_Failure=caml_new_string("Stdlib.Stream.Failure"),
     cst_Stdlib_Stream_Error=caml_new_string("Stdlib.Stream.Error"),
     cst_Buffer_truncate=caml_new_string("Buffer.truncate"),
     cst_Buffer_add_channel=caml_new_string("Buffer.add_channel"),
     cst_Buffer_add_substring_add_subbytes=
      caml_new_string("Buffer.add_substring/add_subbytes"),
     cst_Buffer_add_cannot_grow_buffer=
      caml_new_string("Buffer.add: cannot grow buffer"),
     cst_Buffer_nth=caml_new_string("Buffer.nth"),
     cst_Buffer_blit=caml_new_string("Buffer.blit"),
     cst_Buffer_sub=caml_new_string("Buffer.sub"),
     cst_c=caml_new_string("%c"),
     cst_s=caml_new_string("%s"),
     cst_i=caml_new_string("%i"),
     cst_li=caml_new_string("%li"),
     cst_ni=caml_new_string("%ni"),
     cst_Li=caml_new_string("%Li"),
     cst_f=caml_new_string("%f"),
     cst_B=caml_new_string("%B"),
     cst$20=caml_new_string("%{"),
     cst$21=caml_new_string("%}"),
     cst$22=caml_new_string("%("),
     cst$23=caml_new_string("%)"),
     cst_a=caml_new_string("%a"),
     cst_t$0=caml_new_string("%t"),
     cst$24=caml_new_string("%?"),
     cst_r$0=caml_new_string("%r"),
     cst_r$1=caml_new_string("%_r"),
     cst_u$0=caml_new_string("%u"),
     cst_Printf_bad_conversion=caml_new_string("Printf: bad conversion %["),
     cst_Printf_bad_conversion$0=caml_new_string("Printf: bad conversion %_"),
     cst$28=caml_new_string("@{"),
     cst$29=caml_new_string("@["),
     cst$30=caml_new_string("@{"),
     cst$31=caml_new_string("@["),
     cst$32=caml_new_string("@{"),
     cst$33=caml_new_string("@["),
     cst_0=caml_new_string("0"),
     cst_padding=caml_new_string("padding"),
     cst_precision=caml_new_string("precision"),
     cst$38=caml_new_string("'*'"),
     cst$36=caml_new_string("'-'"),
     cst_0$2=caml_new_string("'0'"),
     cst$37=caml_new_string("'*'"),
     cst_0$0=caml_new_string("0"),
     cst_0$1=caml_new_string("0"),
     cst_precision$0=caml_new_string("precision"),
     cst_precision$1=caml_new_string("precision"),
     cst$39=caml_new_string("'+'"),
     cst$40=caml_new_string("'#'"),
     cst$41=caml_new_string("' '"),
     cst_padding$0=caml_new_string("`padding'"),
     cst_precision$2=caml_new_string("`precision'"),
     cst$42=caml_new_string("'+'"),
     cst$43=caml_new_string("'_'"),
     sub_format=[0,0,caml_new_string("")],
     formatting_lit=[0,caml_new_string("@;"),1,0],
     cst_digit=caml_new_string("digit"),
     cst_character=caml_new_string("character ')'"),
     cst_character$0=caml_new_string("character '}'"),
     cst$47=caml_new_string("'#'"),
     cst$46=caml_new_string("'+'"),
     cst$45=caml_new_string("'+'"),
     cst$44=caml_new_string("' '"),
     cst$50=caml_new_string("'+'"),
     cst$49=caml_new_string("'+'"),
     cst$48=caml_new_string("' '"),
     cst_non_zero_widths_are_unsupported_for_c_conversions=
      caml_new_string("non-zero widths are unsupported for %c conversions"),
     cst_unexpected_end_of_format=caml_new_string("unexpected end of format"),
     cst$34=caml_new_string(""),
     cst$35=caml_new_string(""),
     cst_b$0=caml_new_string("b"),
     cst_h=caml_new_string("h"),
     cst_hov=caml_new_string("hov"),
     cst_hv=caml_new_string("hv"),
     cst_v=caml_new_string("v"),
     cst_nan=caml_new_string("nan"),
     cst$27=caml_new_string("."),
     cst_neg_infinity=caml_new_string("neg_infinity"),
     cst_infinity=caml_new_string("infinity"),
     cst_12g$0=caml_new_string("%.12g"),
     cst_nd=caml_new_string("%nd"),
     cst_nd$0=caml_new_string("%+nd"),
     cst_nd$1=caml_new_string("% nd"),
     cst_ni$0=caml_new_string("%ni"),
     cst_ni$1=caml_new_string("%+ni"),
     cst_ni$2=caml_new_string("% ni"),
     cst_nx=caml_new_string("%nx"),
     cst_nx$0=caml_new_string("%#nx"),
     cst_nX=caml_new_string("%nX"),
     cst_nX$0=caml_new_string("%#nX"),
     cst_no=caml_new_string("%no"),
     cst_no$0=caml_new_string("%#no"),
     cst_nu=caml_new_string("%nu"),
     cst_ld=caml_new_string("%ld"),
     cst_ld$0=caml_new_string("%+ld"),
     cst_ld$1=caml_new_string("% ld"),
     cst_li$0=caml_new_string("%li"),
     cst_li$1=caml_new_string("%+li"),
     cst_li$2=caml_new_string("% li"),
     cst_lx=caml_new_string("%lx"),
     cst_lx$0=caml_new_string("%#lx"),
     cst_lX=caml_new_string("%lX"),
     cst_lX$0=caml_new_string("%#lX"),
     cst_lo=caml_new_string("%lo"),
     cst_lo$0=caml_new_string("%#lo"),
     cst_lu=caml_new_string("%lu"),
     cst_Ld=caml_new_string("%Ld"),
     cst_Ld$0=caml_new_string("%+Ld"),
     cst_Ld$1=caml_new_string("% Ld"),
     cst_Li$0=caml_new_string("%Li"),
     cst_Li$1=caml_new_string("%+Li"),
     cst_Li$2=caml_new_string("% Li"),
     cst_Lx=caml_new_string("%Lx"),
     cst_Lx$0=caml_new_string("%#Lx"),
     cst_LX=caml_new_string("%LX"),
     cst_LX$0=caml_new_string("%#LX"),
     cst_Lo=caml_new_string("%Lo"),
     cst_Lo$0=caml_new_string("%#Lo"),
     cst_Lu=caml_new_string("%Lu"),
     cst_d$2=caml_new_string("%d"),
     cst_d$3=caml_new_string("%+d"),
     cst_d$4=caml_new_string("% d"),
     cst_i$0=caml_new_string("%i"),
     cst_i$1=caml_new_string("%+i"),
     cst_i$2=caml_new_string("% i"),
     cst_x=caml_new_string("%x"),
     cst_x$0=caml_new_string("%#x"),
     cst_X$0=caml_new_string("%X"),
     cst_X$1=caml_new_string("%#X"),
     cst_o=caml_new_string("%o"),
     cst_o$0=caml_new_string("%#o"),
     cst_u=caml_new_string("%u"),
     cst$25=caml_new_string("%!"),
     cst$26=caml_new_string("@{"),
     cst_0c=caml_new_string("0c"),
     cst$19=caml_new_string("%%"),
     cst$11=caml_new_string("@]"),
     cst$12=caml_new_string("@}"),
     cst$13=caml_new_string("@?"),
     cst$14=caml_new_string("@\n"),
     cst$15=caml_new_string("@."),
     cst$16=caml_new_string("@@"),
     cst$17=caml_new_string("@%"),
     cst$18=caml_new_string("@"),
     cst$10=caml_new_string(".*"),
     cst_CamlinternalFormat_Type_mismatch=
      caml_new_string("CamlinternalFormat.Type_mismatch"),
     cst$58=caml_new_string(""),
     cst$59=caml_new_string("\n"),
     cst_a_boolean=caml_new_string("a boolean"),
     cst_an_integer=caml_new_string("an integer"),
     cst_an_integer$0=caml_new_string("an integer"),
     cst_a_float=caml_new_string("a float"),
     cst_a_float$0=caml_new_string("a float"),
     cst$55=caml_new_string(""),
     cst$56=caml_new_string(" "),
     cst$57=caml_new_string(""),
     cst_one_of=caml_new_string("one of: "),
     cst_Arg_Expand_is_is_only_allowed_with_Arg_parse_and_expand_argv_dynamic=
      caml_new_string
       ("Arg.Expand is is only allowed with Arg.parse_and_expand_argv_dynamic"),
     cst_no_argument=caml_new_string("no argument"),
     cst$54=caml_new_string("(?)"),
     cst_help$3=caml_new_string("--help"),
     cst_help$4=caml_new_string("-help"),
     cst_help$2=caml_new_string("-help"),
     cst_Display_this_list_of_options=
      caml_new_string(" Display this list of options"),
     cst_help=caml_new_string("-help"),
     cst_help$1=caml_new_string("--help"),
     cst_Display_this_list_of_options$0=
      caml_new_string(" Display this list of options"),
     cst_help$0=caml_new_string("--help"),
     cst$51=caml_new_string("}"),
     cst$52=caml_new_string("|"),
     cst$53=caml_new_string("{"),
     cst_none=caml_new_string("<none>"),
     cst_Stdlib_Arg_Bad=caml_new_string("Stdlib.Arg.Bad"),
     cst_Stdlib_Arg_Help=caml_new_string("Stdlib.Arg.Help"),
     cst_Stdlib_Arg_Stop=caml_new_string("Stdlib.Arg.Stop"),
     cst$61=caml_new_string(""),
     cst_Program_not_linked_with_g_cannot_print_stack_backtrace=
      caml_new_string
       ("(Program not linked with -g, cannot print stack backtrace)\n"),
     cst_Raised_at=caml_new_string("Raised at"),
     cst_Re_raised_at=caml_new_string("Re-raised at"),
     cst_Raised_by_primitive_operation_at=
      caml_new_string("Raised by primitive operation at"),
     cst_Called_from=caml_new_string("Called from"),
     cst_inlined=caml_new_string(" (inlined)"),
     cst$64=caml_new_string(""),
     partial=[4,0,0,0,0],
     cst_Out_of_memory=caml_new_string("Out of memory"),
     cst_Stack_overflow=caml_new_string("Stack overflow"),
     cst_Pattern_matching_failed=caml_new_string("Pattern matching failed"),
     cst_Assertion_failed=caml_new_string("Assertion failed"),
     cst_Undefined_recursive_module=
      caml_new_string("Undefined recursive module"),
     cst$62=caml_new_string(""),
     cst$63=caml_new_string(""),
     cst$60=caml_new_string("_"),
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     cst_Digest_from_hex$0=caml_new_string("Digest.from_hex"),
     cst_Digest_from_hex=caml_new_string("Digest.from_hex"),
     cst_Digest_to_hex=caml_new_string("Digest.to_hex"),
     cst_Digest_substring=caml_new_string("Digest.substring"),
     cst_Random_int64=caml_new_string("Random.int64"),
     cst_Random_int32=caml_new_string("Random.int32"),
     cst_Random_int=caml_new_string("Random.int"),
     cst_x$1=caml_new_string("x"),
     cst_OCAMLRUNPARAM=caml_new_string("OCAMLRUNPARAM"),
     cst_CAMLRUNPARAM=caml_new_string("CAMLRUNPARAM"),
     cst$65=caml_new_string(""),
     cst_Weak_Make_hash_bucket_cannot_grow_more=
      caml_new_string("Weak.Make: hash bucket cannot grow more"),
     cst_Weak_fill=caml_new_string("Weak.fill"),
     cst$71=caml_new_string("."),
     cst$69=caml_new_string(">"),
     cst$70=caml_new_string("</"),
     cst$67=caml_new_string(">"),
     cst$68=caml_new_string("<"),
     cst$66=caml_new_string("\n"),
     cst_Stdlib_Format_Empty_queue=
      caml_new_string("Stdlib.Format.Empty_queue"),
     cst_end_of_input_not_found=caml_new_string("end of input not found"),
     cst_scanf_bad_conversion_a=caml_new_string('scanf: bad conversion "%a"'),
     cst_scanf_bad_conversion_t=caml_new_string('scanf: bad conversion "%t"'),
     cst_scanf_missing_reader=caml_new_string("scanf: missing reader"),
     cst_scanf_bad_conversion_custom_converter=
      caml_new_string('scanf: bad conversion "%?" (custom converter)'),
     cst_scanf_bad_conversion=caml_new_string('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$1=caml_new_string('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$0=caml_new_string('scanf: bad conversion "%-"'),
     cst_scanf_bad_conversion$2=caml_new_string('scanf: bad conversion "%*"'),
     cst$75=caml_new_string('"'),
     cst$76=caml_new_string('"'),
     cst$74=caml_new_string('"'),
     cst_in_format=caml_new_string(' in format "'),
     cst_an=caml_new_string("an"),
     cst_x$2=caml_new_string("x"),
     cst_nfinity=caml_new_string("nfinity"),
     cst_digits=caml_new_string("digits"),
     cst_decimal_digits=caml_new_string("decimal digits"),
     cst_0b=caml_new_string("0b"),
     cst_0o=caml_new_string("0o"),
     cst_0u=caml_new_string("0u"),
     cst_0x=caml_new_string("0x"),
     cst_false$2=caml_new_string("false"),
     cst_true$2=caml_new_string("true"),
     cst_not_a_valid_float_in_hexadecimal_notation=
      caml_new_string("not a valid float in hexadecimal notation"),
     cst_no_dot_or_exponent_part_found_in_float_token=
      caml_new_string("no dot or exponent part found in float token"),
     cst$73=caml_new_string("-"),
     cst_unnamed_function=caml_new_string("unnamed function"),
     cst_unnamed_character_string=caml_new_string("unnamed character string"),
     cst_unnamed_Pervasives_input_channel=
      caml_new_string("unnamed Pervasives input channel"),
     cst$72=caml_new_string("-"),
     cst_Stdlib_Scanf_Scan_failure=
      caml_new_string("Stdlib.Scanf.Scan_failure"),
     cst_binary=caml_new_string("binary"),
     cst_octal=caml_new_string("octal"),
     cst_hexadecimal=caml_new_string("hexadecimal"),
     cst_a_Char=caml_new_string("a Char"),
     cst_a_String=caml_new_string("a String"),
     cst$77=caml_new_string(""),
     cst$78=caml_new_string(""),
     cst$79=caml_new_string(""),
     cst$80=caml_new_string(""),
     cst$81=caml_new_string(""),
     cst$83=caml_new_string(""),
     cst$82=caml_new_string(""),
     cst_Illegal_character=caml_new_string("Illegal character "),
     cst_Filename_chop_extension=caml_new_string("Filename.chop_extension"),
     cst$94=caml_new_string(""),
     cst_Filename_chop_suffix=caml_new_string("Filename.chop_suffix"),
     cst$93=caml_new_string(""),
     cst$91=caml_new_string("./"),
     cst$90=caml_new_string(".\\"),
     cst$89=caml_new_string("../"),
     cst$88=caml_new_string("..\\"),
     cst$87=caml_new_string("./"),
     cst$86=caml_new_string("../"),
     cst$85=caml_new_string(""),
     cst$84=caml_new_string(""),
     current_dir_name=caml_new_string("."),
     parent_dir_name=caml_new_string(".."),
     dir_sep=caml_new_string("/"),
     cst_TMPDIR=caml_new_string("TMPDIR"),
     cst_tmp=caml_new_string("/tmp"),
     quotequote=caml_new_string("'\\''"),
     current_dir_name$0=caml_new_string("."),
     parent_dir_name$0=caml_new_string(".."),
     dir_sep$0=caml_new_string("\\"),
     cst_TEMP=caml_new_string("TEMP"),
     cst$92=caml_new_string("."),
     current_dir_name$1=caml_new_string("."),
     parent_dir_name$1=caml_new_string(".."),
     dir_sep$1=caml_new_string("/"),
     cst_Cygwin=caml_new_string("Cygwin"),
     cst_Win32=caml_new_string("Win32"),
     zero$2=[254,0.,0.],
     one$2=[254,1.,0.],
     i=[254,0.,1.],
     cst_Series_is_closed$0=caml_new_string("Series is closed"),
     cst_Series_is_closed=caml_new_string("Series is closed"),
     cst_Bigarray_array3_of_genarray=
      caml_new_string("Bigarray.array3_of_genarray"),
     cst_Bigarray_array2_of_genarray=
      caml_new_string("Bigarray.array2_of_genarray"),
     cst_Bigarray_array1_of_genarray=
      caml_new_string("Bigarray.array1_of_genarray"),
     cst_Bigarray_array0_of_genarray=
      caml_new_string("Bigarray.array0_of_genarray"),
     cst_Bigarray_Array3_of_array_non_cubic_data=
      caml_new_string("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array3_of_array_non_cubic_data$0=
      caml_new_string("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array2_of_array_non_rectangular_data=
      caml_new_string("Bigarray.Array2.of_array: non-rectangular data"),
     End_of_file=global_data.End_of_file,
     Sys_error=global_data.Sys_error,
     Failure=global_data.Failure,
     Invalid_argument=global_data.Invalid_argument,
     Not_found=global_data.Not_found,
     Assert_failure=global_data.Assert_failure,
     Out_of_memory=global_data.Out_of_memory,
     Stack_overflow=global_data.Stack_overflow,
     Match_failure=global_data.Match_failure,
     Undefined_recursive_module=global_data.Undefined_recursive_module,
     _m_=[0,0,[0,6,0]],
     _l_=[0,0,[0,7,0]],
     _k_=[0,1,[0,3,[0,4,[0,6,0]]]],
     _j_=[0,1,[0,3,[0,4,[0,7,0]]]],
     _h_=[0,1],
     _i_=[0,0],
     _a_=[255,0,0,32752],
     _b_=[255,0,0,65520],
     _c_=[255,1,0,32752],
     _d_=[255,16777215,16777215,32751],
     _e_=[255,0,0,16],
     _f_=[255,0,0,15536],
     _t_=[0,0,0],
     _u_=[0,caml_new_string("list.ml"),268,11],
     _J_=[0,caml_new_string("array.ml"),233,4],
     _N_=[255,16777215,16777215,65535],
     _M_=[255,0,0,0],
     _L_=[255,1,0,0],
     _K_=[255,1,0,0],
     _O_=[0,0,0,0],
     _P_=[0,0,0],
     _Q_=[0,caml_new_string("set.ml"),514,18],
     _R_=[0,0,0,0],
     _S_=[0,caml_new_string("map.ml"),397,10],
     _T_=[0,0,0],
     _U_=[0,caml_new_string("stream.ml"),53,12],
     _V_=[0,0],
     _W_=[0,caml_new_string("stream.ml"),82,12],
     _ab_=[0,caml_new_string("buffer.ml"),205,9],
     _aa_=[0,caml_new_string("buffer.ml"),141,19],
     _$_=[0,caml_new_string("buffer.ml"),159,8],
     ___=[0,caml_new_string("buffer.ml"),120,19],
     _Z_=[0,caml_new_string("buffer.ml"),138,8],
     _Y_=[0,caml_new_string("buffer.ml"),84,19],
     _X_=[0,caml_new_string("buffer.ml"),117,8],
     _ac_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _an_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _af_=[0,caml_new_string("camlinternalFormat.ml"),811,21],
     _ao_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _ag_=[0,caml_new_string("camlinternalFormat.ml"),815,21],
     _ap_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _ah_=[0,caml_new_string("camlinternalFormat.ml"),819,19],
     _aq_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _ai_=[0,caml_new_string("camlinternalFormat.ml"),823,22],
     _ar_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     _aj_=[0,caml_new_string("camlinternalFormat.ml"),828,30],
     _al_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _ad_=[0,caml_new_string("camlinternalFormat.ml"),833,26],
     _am_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _ae_=[0,caml_new_string("camlinternalFormat.ml"),843,28],
     _ak_=[0,caml_new_string("camlinternalFormat.ml"),847,23],
     _as_=[0,caml_new_string("camlinternalFormat.ml"),1525,4],
     _at_=[0,caml_new_string("camlinternalFormat.ml"),1593,39],
     _au_=[0,caml_new_string("camlinternalFormat.ml"),1616,31],
     _av_=[0,caml_new_string("camlinternalFormat.ml"),1617,31],
     _aw_=[0,caml_new_string("camlinternalFormat.ml"),1797,8],
     _a0_=
      [0,
       [11,
        caml_new_string("bad input: format type mismatch between "),
        [3,0,[11,caml_new_string(" and "),[3,0,0]]]],
       caml_new_string("bad input: format type mismatch between %S and %S")],
     _aZ_=
      [0,
       [11,
        caml_new_string("bad input: format type mismatch between "),
        [3,0,[11,caml_new_string(" and "),[3,0,0]]]],
       caml_new_string("bad input: format type mismatch between %S and %S")],
     _aC_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,0,0,0,[11,caml_new_string(", duplicate flag "),[1,0]]]]]],
       caml_new_string
        ("invalid format %S: at character number %d, duplicate flag %C")],
     _aD_=[0,1,0],
     _aE_=[0,0],
     _aG_=[1,0],
     _aF_=[1,1],
     _aI_=[1,1],
     _aH_=[1,1],
     _aM_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", flag "),
            [1,
             [11,
              caml_new_string(" is only allowed after the '"),
              [12,
               37,
               [11,caml_new_string("', before padding and precision"),0]]]]]]]]],
       caml_new_string
        ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
     _aJ_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(', invalid conversion "'),
            [12,37,[0,[12,34,0]]]]]]]],
       caml_new_string
        ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
     _aK_=[0,0],
     _aL_=[0,0],
     _aN_=[0,[12,64,0]],
     _aO_=[0,caml_new_string("@ "),1,0],
     _aP_=[0,caml_new_string("@,"),0,0],
     _aQ_=[2,60],
     _aR_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": '"),
          [12,
           37,
           [11,
            caml_new_string("' alone is not accepted in character sets, use "),
            [12,
             37,
             [12,
              37,
              [11,
               caml_new_string(" instead at position "),
               [4,0,0,0,[12,46,0]]]]]]]]]],
       caml_new_string
        ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
     _aS_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": integer "),
          [4,
           0,
           0,
           0,
           [11,caml_new_string(" is greater than the limit "),[4,0,0,0,0]]]]]],
       caml_new_string
        ("invalid format %S: integer %d is greater than the limit %d")],
     _aT_=[0,caml_new_string("camlinternalFormat.ml"),2811,11],
     _aU_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(': unclosed sub-format, expected "'),
          [12,
           37,
           [0,[11,caml_new_string('" at character number '),[4,0,0,0,0]]]]]]],
       caml_new_string
        ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
     _aV_=[0,caml_new_string("camlinternalFormat.ml"),2873,34],
     _aW_=[0,caml_new_string("camlinternalFormat.ml"),2906,28],
     _aX_=[0,caml_new_string("camlinternalFormat.ml"),2940,25],
     _aY_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", "),
            [2,
             0,
             [11,
              caml_new_string(" is incompatible with '"),
              [0,[11,caml_new_string("' in sub-format "),[3,0,0]]]]]]]]]],
       caml_new_string
        ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
     _aB_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", "),
            [2,0,[11,caml_new_string(" expected, read "),[1,0]]]]]]]],
       caml_new_string
        ("invalid format %S: at character number %d, %s expected, read %C")],
     _aA_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", '"),
            [0,[11,caml_new_string("' without "),[2,0,0]]]]]]]],
       caml_new_string
        ("invalid format %S: at character number %d, '%c' without %s")],
     _az_=
      [0,
       [11,
        caml_new_string("invalid format "),
        [3,
         0,
         [11,
          caml_new_string(": at character number "),
          [4,0,0,0,[11,caml_new_string(", "),[2,0,0]]]]]],
       caml_new_string("invalid format %S: at character number %d, %s")],
     _ay_=
      [0,
       [11,caml_new_string("invalid box description "),[3,0,0]],
       caml_new_string("invalid box description %S")],
     _ax_=[0,0,4],
     _bk_=[0,[2,0,[0,0]],caml_new_string("%s%c")],
     _be_=[0,[2,0,0],caml_new_string("%s")],
     _bf_=[0,[2,0,0],caml_new_string("%s")],
     _bc_=[0,[2,0,0],caml_new_string("%s")],
     _bd_=[0,[2,0,0],caml_new_string("%s")],
     _ba_=[0,[2,0,0],caml_new_string("%s")],
     _bb_=[0,[2,0,0],caml_new_string("%s")],
     _a6_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(": unknown option '"),
         [2,0,[11,caml_new_string("'.\n"),0]]]],
       caml_new_string("%s: unknown option '%s'.\n")],
     _a9_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(": wrong argument '"),
         [2,
          0,
          [11,
           caml_new_string("'; option '"),
           [2,
            0,
            [11,
             caml_new_string("' expects "),
             [2,0,[11,caml_new_string(".\n"),0]]]]]]]],
       caml_new_string("%s: wrong argument '%s'; option '%s' expects %s.\n")],
     _a__=
      [0,
       [2,
        0,
        [11,
         caml_new_string(": option '"),
         [2,0,[11,caml_new_string("' needs an argument.\n"),0]]]],
       caml_new_string("%s: option '%s' needs an argument.\n")],
     _a$_=
      [0,
       [2,0,[11,caml_new_string(": "),[2,0,[11,caml_new_string(".\n"),0]]]],
       caml_new_string("%s: %s.\n")],
     _a7_=[0,caml_new_string("-help")],
     _a8_=[0,caml_new_string("--help")],
     _a5_=[0,[2,0,0],caml_new_string("%s")],
     _a4_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _a3_=[0,caml_new_string("-help")],
     _a1_=
      [0,
       [11,caml_new_string("  "),[2,0,[12,32,[2,0,[12,10,0]]]]],
       caml_new_string("  %s %s\n")],
     _a2_=
      [0,
       [11,caml_new_string("  "),[2,0,[12,32,[2,0,[2,0,[12,10,0]]]]]],
       caml_new_string("  %s %s%s\n")],
     _bp_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _by_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _bw_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _bx_=
      [0,
       [11,
        caml_new_string
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_new_string
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bu_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(' file "'),
         [2,
          0,
          [12,
           34,
           [2,
            0,
            [11,
             caml_new_string(", line "),
             [4,
              0,
              0,
              0,
              [11,caml_new_string(", characters "),[4,0,0,0,[12,45,partial]]]]]]]]]],
       caml_new_string('%s file "%s"%s, line %d, characters %d-%d')],
     _bv_=
      [0,
       [2,0,[11,caml_new_string(" unknown location"),0]],
       caml_new_string("%s unknown location")],
     _bt_=
      [0,
       [11,caml_new_string("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_new_string("Uncaught exception: %s\n")],
     _bs_=
      [0,
       [11,caml_new_string("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_new_string("Uncaught exception: %s\n")],
     _bq_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _br_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bo_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bn_=[0,[3,0,0],caml_new_string("%S")],
     _bH_=
      [0,
       [11,caml_new_string("minor_collections: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("minor_collections: %d\n")],
     _bI_=
      [0,
       [11,caml_new_string("major_collections: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("major_collections: %d\n")],
     _bJ_=
      [0,
       [11,caml_new_string("compactions:       "),[4,0,0,0,[12,10,0]]],
       caml_new_string("compactions:       %d\n")],
     _bK_=[0,[12,10,0],caml_new_string("\n")],
     _bL_=[0,[8,0,0,[0,0],0],caml_new_string("%.0f")],
     _bM_=
      [0,
       [11,caml_new_string("minor_words:    "),[8,0,[1,1],[0,0],[12,10,0]]],
       caml_new_string("minor_words:    %*.0f\n")],
     _bN_=
      [0,
       [11,caml_new_string("promoted_words: "),[8,0,[1,1],[0,0],[12,10,0]]],
       caml_new_string("promoted_words: %*.0f\n")],
     _bO_=
      [0,
       [11,caml_new_string("major_words:    "),[8,0,[1,1],[0,0],[12,10,0]]],
       caml_new_string("major_words:    %*.0f\n")],
     _bP_=[0,[12,10,0],caml_new_string("\n")],
     _bQ_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bR_=
      [0,
       [11,caml_new_string("top_heap_words: "),[4,0,[1,1],0,[12,10,0]]],
       caml_new_string("top_heap_words: %*d\n")],
     _bS_=
      [0,
       [11,caml_new_string("heap_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_new_string("heap_words:     %*d\n")],
     _bT_=
      [0,
       [11,caml_new_string("live_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_new_string("live_words:     %*d\n")],
     _bU_=
      [0,
       [11,caml_new_string("free_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_new_string("free_words:     %*d\n")],
     _bV_=
      [0,
       [11,caml_new_string("largest_free:   "),[4,0,[1,1],0,[12,10,0]]],
       caml_new_string("largest_free:   %*d\n")],
     _bW_=
      [0,
       [11,caml_new_string("fragments:      "),[4,0,[1,1],0,[12,10,0]]],
       caml_new_string("fragments:      %*d\n")],
     _bX_=[0,[12,10,0],caml_new_string("\n")],
     _bY_=
      [0,
       [11,caml_new_string("live_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("live_blocks: %d\n")],
     _bZ_=
      [0,
       [11,caml_new_string("free_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("free_blocks: %d\n")],
     _b0_=
      [0,
       [11,caml_new_string("heap_chunks: "),[4,0,0,0,[12,10,0]]],
       caml_new_string("heap_chunks: %d\n")],
     _b3_=[255,1,0,0],
     _b4_=[255,0,0,0],
     _b5_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _b9_=[0,0],
     _b8_=[0,caml_new_string("hashtbl.ml"),108,23],
     _b$_=[3,0,3],
     _b__=[0,caml_new_string("")],
     _cr_=[0,91],
     _cq_=[0,123],
     _cs_=[0,caml_new_string("scanf.ml"),1455,13],
     _ct_=[0,[3,0,[10,0]],caml_new_string("%S%!")],
     _cp_=[0,37,caml_new_string("")],
     _co_=
      [0,
       [11,
        caml_new_string("scanf: bad input at char number "),
        [4,3,0,0,[11,caml_new_string(": "),[2,0,0]]]],
       caml_new_string("scanf: bad input at char number %i: %s")],
     _cn_=
      [0,
       [11,
        caml_new_string("the character "),
        [1,[11,caml_new_string(" cannot start a boolean"),0]]],
       caml_new_string("the character %C cannot start a boolean")],
     _cm_=
      [0,
       [11,caml_new_string("bad character hexadecimal encoding \\"),[0,[0,0]]],
       caml_new_string("bad character hexadecimal encoding \\%c%c")],
     _cl_=
      [0,
       [11,caml_new_string("bad character decimal encoding \\"),[0,[0,[0,0]]]],
       caml_new_string("bad character decimal encoding \\%c%c%c")],
     _ck_=
      [0,
       [11,
        caml_new_string("character "),
        [1,
         [11,
          caml_new_string(" is not a valid "),
          [2,0,[11,caml_new_string(" digit"),0]]]]],
       caml_new_string("character %C is not a valid %s digit")],
     _cj_=
      [0,
       [11,
        caml_new_string("character "),
        [1,[11,caml_new_string(" is not a decimal digit"),0]]],
       caml_new_string("character %C is not a decimal digit")],
     _ci_=[0,caml_new_string("scanf.ml"),555,9],
     _ch_=
      [0,
       [11,caml_new_string("invalid boolean '"),[2,0,[12,39,0]]],
       caml_new_string("invalid boolean '%s'")],
     _cg_=
      [0,
       [11,
        caml_new_string("looking for "),
        [1,[11,caml_new_string(", found "),[1,0]]]],
       caml_new_string("looking for %C, found %C")],
     _cf_=
      [0,
       [11,
        caml_new_string("scanning of "),
        [2,
         0,
         [11,
          caml_new_string
           (" failed: premature end of file occurred before end of token"),
          0]]],
       caml_new_string
        ("scanning of %s failed: premature end of file occurred before end of token")],
     _ce_=
      [0,
       [11,
        caml_new_string("scanning of "),
        [2,
         0,
         [11,
          caml_new_string
           (" failed: the specified length was too short for token"),
          0]]],
       caml_new_string
        ("scanning of %s failed: the specified length was too short for token")],
     _cd_=
      [0,
       [11,caml_new_string("illegal escape character "),[1,0]],
       caml_new_string("illegal escape character %C")],
     _cA_=[0,caml_new_string("camlinternalOO.ml"),438,17],
     _cz_=[0,caml_new_string("camlinternalOO.ml"),420,13],
     _cy_=[0,caml_new_string("camlinternalOO.ml"),417,13],
     _cx_=[0,caml_new_string("camlinternalOO.ml"),414,13],
     _cw_=[0,caml_new_string("camlinternalOO.ml"),411,13],
     _cv_=[0,caml_new_string("camlinternalOO.ml"),408,13],
     _cu_=[0,caml_new_string("camlinternalOO.ml"),281,50],
     _cD_=[0,0],
     _cC_=[0,0],
     _cB_=[0,0],
     _cH_=[0,7,0],
     _cG_=[0,1,[0,3,[0,5,0]]],
     _cF_=[0,[2,0,[4,6,[0,2,6],0,[2,0,0]]],caml_new_string("%s%06x%s")],
     _cI_=[254,0.,0.];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    var CamlinternalFormatBasics=[0,concat_fmtty,erase_rel,concat_fmt];
    caml_register_global
     (646,CamlinternalFormatBasics,"CamlinternalFormatBasics");
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=[248,cst_Stdlib_Pervasives_Exit,caml_fresh_oo_id(0)];
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function lnot(x){return x ^ -1}
    var
     infinity=caml_int64_float_of_bits(_a_),
     neg_infinity=caml_int64_float_of_bits(_b_),
     nan=caml_int64_float_of_bits(_c_),
     max_float=caml_int64_float_of_bits(_d_),
     min_float=caml_int64_float_of_bits(_e_),
     epsilon_float=caml_int64_float_of_bits(_f_),
     max_int=2147483647,
     min_int=-2147483648;
    function _g_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function char_of_int(n)
     {if(0 <= n)if(! (255 < n))return n;return invalid_arg(cst_char_of_int)}
    function string_of_bool(b){return b?cst_true:cst_false}
    function bool_of_string(param)
     {return caml_string_notequal(param,cst_false$0)
              ?caml_string_notequal(param,cst_true$0)
                ?invalid_arg(cst_bool_of_string)
                :1
              :0}
    function bool_of_string_opt(param)
     {return caml_string_notequal(param,cst_false$1)
              ?caml_string_notequal(param,cst_true$1)?0:_h_
              :_i_}
    function string_of_int(n){return caml_new_string("" + n)}
    function int_of_string_opt(s)
     {try
       {var _y9_=[0,caml_int_of_string(s)];return _y9_}
      catch(_y__)
       {_y__ = caml_wrap_exception(_y__);
        if(_y__[1] === Failure)return 0;
        throw _y__}}
    function valid_float_lexem(s)
     {var l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return _g_(s,cst);
        var
         match=caml_string_get(s,i),
         switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function string_of_float(f)
     {return valid_float_lexem(caml_format_float(cst_12g,f))}
    function float_of_string_opt(s)
     {try
       {var _y7_=[0,caml_float_of_string(s)];return _y7_}
      catch(_y8_)
       {_y8_ = caml_wrap_exception(_y8_);
        if(_y8_[1] === Failure)return 0;
        throw _y8_}}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    var
     stdin=caml_ml_open_descriptor_in(0),
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function open_out_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_out(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_out(name){return open_out_gen(_j_,438,name)}
    function open_out_bin(name){return open_out_gen(_k_,438,name)}
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_y6_)
             {_y6_ = caml_wrap_exception(_y6_);
              if(_y6_[1] !== Sys_error)throw _y6_}
            var param$0=l;
            continue}
          return 0}}
      return iter(runtime.caml_ml_out_channels_list(0))}
    function output_bytes(oc,s)
     {return caml_ml_output_bytes(oc,s,0,caml_ml_bytes_length(s))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function output(oc,s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_bytes_length(s) - len | 0) < ofs))
         return caml_ml_output_bytes(oc,s,ofs,len);
      return invalid_arg(cst_output)}
    function output_substring(oc,s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_string_length(s) - len | 0) < ofs))
         return caml_ml_output(oc,s,ofs,len);
      return invalid_arg(cst_output_substring)}
    function output_value(chan,v){return caml_output_value(chan,v,0)}
    function close_out(oc){caml_ml_flush(oc);return caml_ml_close_channel(oc)}
    function close_out_noerr(oc)
     {try {caml_ml_flush(oc)}catch(_y5_){}
      try
       {var _y3_=caml_ml_close_channel(oc);return _y3_}
      catch(_y4_){return 0}}
    function open_in_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_in(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_in(name){return open_in_gen(_l_,0,name)}
    function open_in_bin(name){return open_in_gen(_m_,0,name)}
    function input(ic,s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_bytes_length(s) - len | 0) < ofs))
         return caml_ml_input(ic,s,ofs,len);
      return invalid_arg(cst_input)}
    function unsafe_really_input(ic,s,ofs,len)
     {var ofs$0=ofs,len$0=len;
      for(;;)
       {if(0 < len$0)
         {var r=caml_ml_input(ic,s,ofs$0,len$0);
          if(0 === r)throw End_of_file;
          var len$1=len$0 - r | 0,ofs$1=ofs$0 + r | 0,ofs$0=ofs$1,len$0=len$1;
          continue}
        return 0}}
    function really_input(ic,s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_bytes_length(s) - len | 0) < ofs))
         return unsafe_really_input(ic,s,ofs,len);
      return invalid_arg(cst_really_input)}
    function really_input_string(ic,len)
     {var s=caml_create_bytes(len);
      really_input(ic,s,0,len);
      return caml_string_of_bytes(s)}
    function input_line(chan)
     {function build_result(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1],len=caml_ml_bytes_length(hd);
            caml_blit_bytes(hd,0,buf,pos$0 - len | 0,len);
            var pos$1=pos$0 - len | 0,pos$0=pos$1,param$0=tl;
            continue}
          return buf}}
      var accu=0,len=0;
      for(;;)
       {var n=runtime.caml_ml_input_scan_line(chan);
        if(0 === n)
         {if(! accu)throw End_of_file;
          var _y2_=build_result(caml_create_bytes(len),len,accu)}
        else
         {if(! (0 < n))
           {var beg=caml_create_bytes(- n | 0);
            caml_ml_input(chan,beg,0,- n | 0);
            var len$1=len - n | 0,accu$0=[0,beg,accu],accu=accu$0,len=len$1;
            continue}
          var res=caml_create_bytes(n - 1 | 0);
          caml_ml_input(chan,res,0,n - 1 | 0);
          caml_ml_input_char(chan);
          if(accu)
           var
            len$0=(len + n | 0) - 1 | 0,
            _y2_=build_result(caml_create_bytes(len$0),len$0,[0,res,accu]);
          else
           var _y2_=res}
        return caml_string_of_bytes(_y2_)}}
    function close_in_noerr(ic)
     {try
       {var _y0_=caml_ml_close_channel(ic);return _y0_}
      catch(_y1_){return 0}}
    function print_char(c){return caml_ml_output_char(stdout,c)}
    function print_string(s){return output_string(stdout,s)}
    function print_bytes(s){return output_bytes(stdout,s)}
    function print_int(i)
     {return output_string(stdout,caml_new_string("" + i))}
    function print_float(f){return output_string(stdout,string_of_float(f))}
    function print_endline(s)
     {output_string(stdout,s);
      caml_ml_output_char(stdout,10);
      return caml_ml_flush(stdout)}
    function print_newline(param)
     {caml_ml_output_char(stdout,10);return caml_ml_flush(stdout)}
    function prerr_char(c){return caml_ml_output_char(stderr,c)}
    function prerr_string(s){return output_string(stderr,s)}
    function prerr_bytes(s){return output_bytes(stderr,s)}
    function prerr_int(i)
     {return output_string(stderr,caml_new_string("" + i))}
    function prerr_float(f){return output_string(stderr,string_of_float(f))}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    function prerr_newline(param)
     {caml_ml_output_char(stderr,10);return caml_ml_flush(stderr)}
    function read_line(param){caml_ml_flush(stdout);return input_line(stdin)}
    function read_int(param){return caml_int_of_string(read_line(0))}
    function read_int_opt(param){return int_of_string_opt(read_line(0))}
    function read_float(param){return caml_float_of_string(read_line(0))}
    function read_float_opt(param){return float_of_string_opt(read_line(0))}
    var LargeFile=[0];
    function string_of_format(param){var str=param[2];return str}
    function _n_(param,_yY_)
     {var
       str2=_yY_[2],
       fmt2=_yY_[1],
       str1=param[2],
       fmt1=param[1],
       _yZ_=_g_(str1,_g_(cst$0,str2));
      return [0,concat_fmt(fmt1,fmt2),_yZ_]}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {var g=exit_function[1],f_already_ran=[0,0];
      exit_function[1]
      =
      function(param)
       {if(1 - f_already_ran[1]){f_already_ran[1] = 1;caml_call1(f,0)}
        return caml_call1(g,0)};
      return 0}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function exit(retcode)
     {do_at_exit(0);return runtime.caml_sys_exit(retcode)}
    var
     _o_=
      [0,
       invalid_arg,
       failwith,
       Exit,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       _g_,
       char_of_int,
       string_of_bool,
       bool_of_string,
       bool_of_string_opt,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_int_opt,
       read_float,
       read_float_opt,
       open_out,
       open_out_bin,
       open_out_gen,
       caml_ml_flush,
       flush_all,
       caml_ml_output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       caml_ml_output_char,
       caml_ml_output_int,
       output_value,
       caml_ml_seek_out,
       caml_ml_pos_out,
       caml_ml_channel_size,
       close_out,
       close_out_noerr,
       caml_ml_set_binary_mode,
       open_in,
       open_in_bin,
       open_in_gen,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       caml_ml_input_int,
       caml_input_value,
       caml_ml_seek_in,
       caml_ml_pos_in,
       caml_ml_channel_size,
       caml_ml_close_channel,
       close_in_noerr,
       caml_ml_set_binary_mode,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       _n_,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit],
     Stdlib=
      [0,
       _o_,
       invalid_arg,
       failwith,
       Exit,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       _g_,
       char_of_int,
       string_of_bool,
       bool_of_string,
       bool_of_string_opt,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_int_opt,
       read_float,
       read_float_opt,
       open_out,
       open_out_bin,
       open_out_gen,
       caml_ml_flush,
       flush_all,
       caml_ml_output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       caml_ml_output_char,
       caml_ml_output_int,
       output_value,
       caml_ml_seek_out,
       caml_ml_pos_out,
       caml_ml_channel_size,
       close_out,
       close_out_noerr,
       caml_ml_set_binary_mode,
       open_in,
       open_in_bin,
       open_in_gen,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       caml_ml_input_int,
       caml_input_value,
       caml_ml_seek_in,
       caml_ml_pos_in,
       caml_ml_channel_size,
       caml_ml_close_channel,
       close_in_noerr,
       caml_ml_set_binary_mode,
       LargeFile,
       string_of_format,
       _n_,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0];
    caml_register_global(651,Stdlib,"Stdlib");
    function empty(param){return 0}
    function return$0(x,param){return [0,x,empty]}
    function map(f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var
         next=match[2],
         x=match[1],
         _yW_=function(_yX_){return map(f,next,_yX_)};
        return [0,caml_call1(f,x),_yW_]}
      return 0}
    function filter_map(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1],match$0=caml_call1(f,x);
          if(match$0)
           {var y=match$0[1];
            return [0,y,function(_yV_){return filter_map(f,next,_yV_)}]}
          var seq$0=next;
          continue}
        return 0}}
    function filter(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1];
          if(caml_call1(f,x))
           return [0,x,function(_yU_){return filter(f,next,_yU_)}];
          var seq$0=next;
          continue}
        return 0}}
    function flat_map$0(counter,f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var next=match[2],x=match[1],_yT_=caml_call1(f,x),_yS_=0;
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return flat_map_app$0(counter$0,f,_yT_,next,_yS_)}
        return caml_trampoline_return(flat_map_app$0,[0,f,_yT_,next,_yS_])}
      return 0}
    function flat_map_app$0(counter,f,seq,tail,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var next=match[2],x=match[1];
        return [0,x,function(_yR_){return flat_map_app(f,next,tail,_yR_)}]}
      var _yQ_=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return flat_map$0(counter$0,f,tail,_yQ_)}
      return caml_trampoline_return(flat_map$0,[0,f,tail,_yQ_])}
    function flat_map(f,seq,param)
     {return caml_trampoline(flat_map$0(0,f,seq,param))}
    function flat_map_app(f,seq,tail,param)
     {return caml_trampoline(flat_map_app$0(0,f,seq,tail,param))}
    function fold_left(f,acc,seq)
     {var acc$0=acc,seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var
           next=match[2],
           x=match[1],
           acc$1=caml_call2(f,acc$0,x),
           acc$0=acc$1,
           seq$0=next;
          continue}
        return acc$0}}
    function iter(f,seq)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1];
          caml_call1(f,x);
          var seq$0=next;
          continue}
        return 0}}
    var
     Stdlib_seq=
      [0,empty,return$0,map,filter,filter_map,flat_map,fold_left,iter];
    caml_register_global(652,Stdlib_seq,"Stdlib__seq");
    function chr(n)
     {if(0 <= n)if(! (255 < n))return n;return invalid_arg(cst_Char_chr)}
    function escaped(c)
     {if(40 <= c)
       {if(92 === c)return cst$1;var switch$0=127 <= c?0:1}
      else
       if(32 <= c)
        {if(39 <= c)return cst$2;var switch$0=1}
       else
        if(14 <= c)
         var switch$0=0;
        else
         switch(c)
          {case 8:return cst_b;
           case 9:return cst_t;
           case 10:return cst_n;
           case 13:return cst_r;
           default:var switch$0=0}
      if(switch$0)
       {var s$0=caml_create_bytes(1);
        caml_bytes_unsafe_set(s$0,0,c);
        return caml_string_of_bytes(s$0)}
      var s=caml_create_bytes(4);
      caml_bytes_unsafe_set(s,0,92);
      caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
      caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
      caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
      return caml_string_of_bytes(s)}
    function lowercase(c)
     {var switch$0=65 <= c?90 < c?0:1:0;
      if(! switch$0)
       {var switch$1=192 <= c?214 < c?0:1:0;
        if(! switch$1)
         {var switch$2=216 <= c?222 < c?1:0:1;if(switch$2)return c}}
      return c + 32 | 0}
    function uppercase(c)
     {var switch$0=97 <= c?122 < c?0:1:0;
      if(! switch$0)
       {var switch$1=224 <= c?246 < c?0:1:0;
        if(! switch$1)
         {var switch$2=248 <= c?254 < c?1:0:1;if(switch$2)return c}}
      return c - 32 | 0}
    function lowercase_ascii(c)
     {if(65 <= c)if(! (90 < c))return c + 32 | 0;return c}
    function uppercase_ascii(c)
     {if(97 <= c)if(! (122 < c))return c - 32 | 0;return c}
    function compare(c1,c2){return c1 - c2 | 0}
    function equal(c1,c2){return 0 === (c1 - c2 | 0)?1:0}
    var
     Stdlib_char=
      [0,
       chr,
       escaped,
       lowercase,
       uppercase,
       lowercase_ascii,
       uppercase_ascii,
       compare,
       equal];
    caml_register_global(653,Stdlib_char,"Stdlib__char");
    var
     min$0=0,
     max$0=1114111,
     lo_bound=55295,
     hi_bound=57344,
     bom=65279,
     rep=65533;
    function succ(u)
     {return u === 55295
              ?hi_bound
              :u === 1114111?invalid_arg(err_no_succ):u + 1 | 0}
    function pred(u)
     {return u === 57344?lo_bound:u === 0?invalid_arg(err_no_pred):u - 1 | 0}
    function is_valid(i)
     {var _yM_=0 <= i?1:0,_yN_=_yM_?i <= 55295?1:0:_yM_;
      if(_yN_)
       var _yO_=_yN_;
      else
       var _yP_=57344 <= i?1:0,_yO_=_yP_?i <= 1114111?1:0:_yP_;
      return _yO_}
    function of_int(i)
     {return is_valid(i)
              ?i
              :invalid_arg
                (_g_
                  (caml_format_int(cst_X,i),
                   cst_is_not_an_Unicode_scalar_value))}
    function is_char(u){return u < 256?1:0}
    function of_char(c){return c}
    function to_char(u)
     {return 255 < u
              ?invalid_arg
                (_g_
                  (cst_U,
                   _g_
                    (caml_format_int(cst_04X,u),cst_is_not_a_latin1_character)))
              :u}
    function unsafe_to_char(_yL_){return _yL_}
    function equal$0(_yK_,_yJ_){return _yK_ === _yJ_?1:0}
    var compare$0=caml_int_compare;
    function hash(_yI_){return _yI_}
    function _p_(_yH_){return _yH_}
    var
     Stdlib_uchar=
      [0,
       min$0,
       max$0,
       bom,
       rep,
       succ,
       pred,
       is_valid,
       of_int,
       function(_yG_){return _yG_},
       _p_,
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal$0,
       compare$0,
       hash];
    caml_register_global(654,Stdlib_uchar,"Stdlib__uchar");
    var
     match=runtime.caml_sys_get_argv(0),
     _q_=match[2],
     match$0=runtime.caml_sys_get_config(0),
     os_type=match$0[1],
     match$1=runtime.caml_sys_const_backend_type(0),
     unix=runtime.caml_sys_const_ostype_unix(0),
     win32=runtime.caml_sys_const_ostype_win32(0),
     cygwin=runtime.caml_sys_const_ostype_cygwin(0),
     max_array_length=runtime.caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0,
     _r_=match[1],
     big_endian=0,
     size=32,
     int_size=32;
    function getenv_opt(s)
     {try
       {var _yE_=[0,caml_sys_getenv(s)];return _yE_}
      catch(_yF_)
       {_yF_ = caml_wrap_exception(_yF_);
        if(_yF_ === Not_found)return 0;
        throw _yF_}}
    var interactive=[0,0];
    function set_signal(sig_num,sig_beh){return 0}
    var
     Break=[248,cst_Stdlib_Sys_Break,caml_fresh_oo_id(0)],
     sigabrt=-1,
     sigalrm=-2,
     sigfpe=-3,
     sighup=-4,
     sigill=-5,
     sigint=-6,
     sigkill=-7,
     sigpipe=-8,
     sigquit=-9,
     sigsegv=-10,
     sigterm=-11,
     sigusr1=-12,
     sigusr2=-13,
     sigchld=-14,
     sigcont=-15,
     sigstop=-16,
     sigtstp=-17,
     sigttin=-18,
     sigttou=-19,
     sigvtalrm=-20,
     sigprof=-21,
     sigbus=-22,
     sigpoll=-23,
     sigsys=-24,
     sigtrap=-25,
     sigurg=-26,
     sigxcpu=-27,
     sigxfsz=-28;
    function catch_break(on){return on?0:0}
    var
     Stdlib_sys=
      [0,
       _q_,
       _r_,
       getenv_opt,
       interactive,
       os_type,
       match$1,
       unix,
       win32,
       cygwin,
       size,
       int_size,
       big_endian,
       max_string_length,
       max_array_length,
       set_signal,
       sigabrt,
       sigalrm,
       sigfpe,
       sighup,
       sigill,
       sigint,
       sigkill,
       sigpipe,
       sigquit,
       sigsegv,
       sigterm,
       sigusr1,
       sigusr2,
       sigchld,
       sigcont,
       sigstop,
       sigtstp,
       sigttin,
       sigttou,
       sigvtalrm,
       sigprof,
       sigbus,
       sigpoll,
       sigsys,
       sigtrap,
       sigurg,
       sigxcpu,
       sigxfsz,
       Break,
       catch_break,
       ocaml_version,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled];
    caml_register_global(656,Stdlib_sys,"Stdlib__sys");
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function cons(a,l){return [0,a,l]}
    function hd(param)
     {if(param){var a=param[1];return a}return failwith(cst_hd)}
    function tl(param)
     {if(param){var l=param[2];return l}return failwith(cst_tl)}
    function nth(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return a;
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return failwith(cst_nth)}}
      return invalid_arg(cst_List_nth)}
    function nth_opt(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return [0,a];
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return 0}}
      return invalid_arg(cst_List_nth$0)}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function rev(l){return rev_append(l,0)}
    function init_aux(i,n,f)
     {if(n <= i)return 0;
      var r=caml_call1(f,i);
      return [0,r,init_aux(i + 1 | 0,n,f)]}
    var rev_init_threshold=typeof match$1 === "number"?10000:50;
    function init(len,f)
     {if(0 <= len)
       {if(rev_init_threshold < len)
         {var acc=0,i=0;
          for(;;)
           {if(len <= i)return rev(acc);
            var i$0=i + 1 | 0,acc$0=[0,caml_call1(f,i),acc],acc=acc$0,i=i$0;
            continue}}
        return init_aux(0,len,f)}
      return invalid_arg(cst_List_init)}
    function flatten(param)
     {if(param){var r=param[2],l=param[1];return append(l,flatten(r))}
      return 0}
    function map$0(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map$0(f,l)]}
      return 0}
    function _s_(i,f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call2(f,i,a);
        return [0,r,_s_(i + 1 | 0,f,l)]}
      return 0}
    function mapi(f,l){return _s_(0,f,l)}
    function rev_map(f,param)
     {var accu=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           a=param$0[1],
           accu$0=[0,caml_call1(f,a),accu],
           accu=accu$0,
           param$0=l;
          continue}
        return accu}}
    function iter$0(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function iteri(f,l$0)
     {var i=0,param=l$0;
      for(;;)
       {if(param)
         {var l=param[2],a=param[1];
          caml_call2(f,i,a);
          var i$0=i + 1 | 0,i=i$0,param=l;
          continue}
        return 0}}
    function fold_left$0(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function fold_right(f,l,accu)
     {if(l){var l$0=l[2],a=l[1];return caml_call2(f,a,fold_right(f,l$0,accu))}
      return accu}
    function map2(f,l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1],r=caml_call2(f,a1,a2);
          return [0,r,map2(f,l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_map2)}
    function rev_map2(f,l1,l2)
     {var accu=0,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$0=[0,caml_call2(f,a1,a2),accu],
             accu=accu$0,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu;
        return invalid_arg(cst_List_rev_map2)}}
    function iter2(f,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var l2$1=l2$0[2],a2=l2$0[1],l1$1=l1$0[2],a1=l1$0[1];
            caml_call2(f,a1,a2);
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_iter2)}}
    function fold_left2(f,accu,l1,l2)
     {var accu$0=accu,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$1=caml_call3(f,accu$0,a1,a2),
             accu$0=accu$1,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu$0;
        return invalid_arg(cst_List_fold_left2)}}
    function fold_right2(f,l1,l2,accu)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return caml_call3(f,a1,a2,fold_right2(f,l1$0,l2$0,accu))}}
      else
       if(! l2)return accu;
      return invalid_arg(cst_List_fold_right2)}
    function for_all(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_yD_=caml_call1(p,a);
          if(_yD_){var param$0=l;continue}
          return _yD_}
        return 1}}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_yC_=caml_call1(p,a);
          if(_yC_)return _yC_;
          var param$0=l;
          continue}
        return 0}}
    function for_all2(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _yB_=caml_call2(p,a1,a2);
            if(_yB_){var l1$0=l1$1,l2$0=l2$1;continue}
            return _yB_}}
        else
         if(! l2$0)return 1;
        return invalid_arg(cst_List_for_all2)}}
    function exists2(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _yA_=caml_call2(p,a1,a2);
            if(_yA_)return _yA_;
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_exists2)}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_yz_=0 === caml_compare(a,x)?1:0;
          if(_yz_)return _yz_;
          var param$0=l;
          continue}
        return 0}}
    function memq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_yy_=a === x?1:0;
          if(_yy_)return _yy_;
          var param$0=l;
          continue}
        return 0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assoc_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assq_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function mem_assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           match=param$0[1],
           a=match[1],
           _yx_=0 === caml_compare(a,x)?1:0;
          if(_yx_)return _yx_;
          var param$0=l;
          continue}
        return 0}}
    function mem_assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],a=match[1],_yw_=a === x?1:0;
          if(_yw_)return _yw_;
          var param$0=l;
          continue}
        return 0}}
    function remove_assoc(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return 0 === caml_compare(a,x)?l:[0,pair,remove_assoc(x,l)]}
      return 0}
    function remove_assq(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return a === x?l:[0,pair,remove_assq(x,l)]}
      return 0}
    function find(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function find_opt(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return [0,x];
          var param$0=l;
          continue}
        return 0}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function partition(p,param)
     {var yes=0,no=0,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))
           {var yes$0=[0,x,yes],yes=yes$0,param$0=l;continue}
          var no$0=[0,x,no],no=no$0,param$0=l;
          continue}
        var _yv_=rev(no);
        return [0,rev(yes),_yv_]}}
    function split(param)
     {if(param)
       {var
         l=param[2],
         match=param[1],
         y=match[2],
         x=match[1],
         match$0=split(l),
         ry=match$0[2],
         rx=match$0[1];
        return [0,[0,x,rx],[0,y,ry]]}
      return _t_}
    function combine(l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return [0,[0,a1,a2],combine(l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_combine)}
    function merge(cmp,l1,match)
     {if(l1)
       {if(match)
         {var t2=match[2],h2=match[1],t1=l1[2],h1=l1[1];
          return 0 < caml_call2(cmp,h1,h2)
                  ?[0,h2,merge(cmp,l1,t2)]
                  :[0,h1,merge(cmp,t1,match)]}
        return l1}
      return match}
    function chop(k,l)
     {var k$0=k,l$0=l;
      for(;;)
       {if(0 === k$0)return l$0;
        if(l$0){var l$1=l$0[2],k$1=k$0 - 1 | 0,k$0=k$1,l$0=l$1;continue}
        throw [0,Assert_failure,_u_]}}
    function fast_sort(cmp,l)
     {function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _ys_=l[2];
            if(_ys_)
             {var x2=_ys_[1],x1=l[1];
              return 0 < caml_call2(cmp,x1,x2)?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
        else
         if(3 === n)
          if(l)
           {var _yt_=l[2];
            if(_yt_)
             {var _yu_=_yt_[2];
              if(_yu_)
               {var x3=_yu_[1],x2$0=_yt_[1],x1$0=l[1];
                return 0 < caml_call2(cmp,x1$0,x2$0)
                        ?0 < caml_call2(cmp,x1$0,x3)
                          ?0 < caml_call2(cmp,x2$0,x3)
                            ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                            :[0,x2$0,[0,x3,[0,x1$0,0]]]
                          :[0,x2$0,[0,x1$0,[0,x3,0]]]
                        :0 < caml_call2(cmp,x2$0,x3)
                          ?0 < caml_call2(cmp,x1$0,x3)
                            ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                            :[0,x1$0,[0,x3,[0,x2$0,0]]]
                          :[0,x1$0,[0,x2$0,[0,x3,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=chop(n1,l),
         l1$0=rev_sort(n1,l),
         l2$1=rev_sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h1,accu],l1=t1,accu=accu$0;continue}
              var accu$1=[0,h2,accu],l2=t2,accu=accu$1;
              continue}
            return rev_append(l1,accu)}
          return rev_append(l2,accu)}}
      function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _yp_=l[2];
            if(_yp_)
             {var x2=_yp_[1],x1=l[1];
              return 0 < caml_call2(cmp,x1,x2)?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
        else
         if(3 === n)
          if(l)
           {var _yq_=l[2];
            if(_yq_)
             {var _yr_=_yq_[2];
              if(_yr_)
               {var x3=_yr_[1],x2$0=_yq_[1],x1$0=l[1];
                return 0 < caml_call2(cmp,x1$0,x2$0)
                        ?0 < caml_call2(cmp,x2$0,x3)
                          ?[0,x1$0,[0,x2$0,[0,x3,0]]]
                          :0 < caml_call2(cmp,x1$0,x3)
                            ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                            :[0,x3,[0,x1$0,[0,x2$0,0]]]
                        :0 < caml_call2(cmp,x1$0,x3)
                          ?[0,x2$0,[0,x1$0,[0,x3,0]]]
                          :0 < caml_call2(cmp,x2$0,x3)
                            ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                            :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=chop(n1,l),
         l1$0=sort(n1,l),
         l2$1=sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h2,accu],l2=t2,accu=accu$0;continue}
              var accu$1=[0,h1,accu],l1=t1,accu=accu$1;
              continue}
            return rev_append(l1,accu)}
          return rev_append(l2,accu)}}
      var len=length(l);
      return 2 <= len?sort(len,l):l}
    function sort_uniq(cmp,l)
     {function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _ym_=l[2];
            if(_ym_)
             {var x2=_ym_[1],x1=l[1],c$0=caml_call2(cmp,x1,x2);
              return 0 === c$0
                      ?[0,x1,0]
                      :0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]]}}}
        else
         if(3 === n)
          if(l)
           {var _yn_=l[2];
            if(_yn_)
             {var _yo_=_yn_[2];
              if(_yo_)
               {var
                 x3=_yo_[1],
                 x2$0=_yn_[1],
                 x1$0=l[1],
                 c$1=caml_call2(cmp,x1$0,x2$0);
                if(0 === c$1)
                 {var c$2=caml_call2(cmp,x2$0,x3);
                  return 0 === c$2
                          ?[0,x2$0,0]
                          :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]]}
                if(0 <= c$1)
                 {var c$3=caml_call2(cmp,x1$0,x3);
                  if(0 === c$3)return [0,x2$0,[0,x1$0,0]];
                  if(0 <= c$3)
                   {var c$4=caml_call2(cmp,x2$0,x3);
                    return 0 === c$4
                            ?[0,x2$0,[0,x1$0,0]]
                            :0 <= c$4
                              ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                              :[0,x2$0,[0,x3,[0,x1$0,0]]]}
                  return [0,x2$0,[0,x1$0,[0,x3,0]]]}
                var c$5=caml_call2(cmp,x2$0,x3);
                if(0 === c$5)return [0,x1$0,[0,x2$0,0]];
                if(0 <= c$5)
                 {var c$6=caml_call2(cmp,x1$0,x3);
                  return 0 === c$6
                          ?[0,x1$0,[0,x2$0,0]]
                          :0 <= c$6
                            ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                            :[0,x1$0,[0,x3,[0,x2$0,0]]]}
                return [0,x1$0,[0,x2$0,[0,x3,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=chop(n1,l),
         l1$0=rev_sort(n1,l),
         l2$1=rev_sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
              continue}
            return rev_append(l1,accu)}
          return rev_append(l2,accu)}}
      function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _yj_=l[2];
            if(_yj_)
             {var x2=_yj_[1],x1=l[1],c$0=caml_call2(cmp,x1,x2);
              return 0 === c$0
                      ?[0,x1,0]
                      :0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]]}}}
        else
         if(3 === n)
          if(l)
           {var _yk_=l[2];
            if(_yk_)
             {var _yl_=_yk_[2];
              if(_yl_)
               {var
                 x3=_yl_[1],
                 x2$0=_yk_[1],
                 x1$0=l[1],
                 c$1=caml_call2(cmp,x1$0,x2$0);
                if(0 === c$1)
                 {var c$2=caml_call2(cmp,x2$0,x3);
                  return 0 === c$2
                          ?[0,x2$0,0]
                          :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]]}
                if(0 < c$1)
                 {var c$3=caml_call2(cmp,x2$0,x3);
                  if(0 === c$3)return [0,x1$0,[0,x2$0,0]];
                  if(0 < c$3)return [0,x1$0,[0,x2$0,[0,x3,0]]];
                  var c$4=caml_call2(cmp,x1$0,x3);
                  return 0 === c$4
                          ?[0,x1$0,[0,x2$0,0]]
                          :0 < c$4
                            ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                            :[0,x3,[0,x1$0,[0,x2$0,0]]]}
                var c$5=caml_call2(cmp,x1$0,x3);
                if(0 === c$5)return [0,x2$0,[0,x1$0,0]];
                if(0 < c$5)return [0,x2$0,[0,x1$0,[0,x3,0]]];
                var c$6=caml_call2(cmp,x2$0,x3);
                return 0 === c$6
                        ?[0,x2$0,[0,x1$0,0]]
                        :0 < c$6
                          ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                          :[0,x3,[0,x2$0,[0,x1$0,0]]]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         l2$0=chop(n1,l),
         l1$0=sort(n1,l),
         l2$1=sort(n2,l2$0),
         l1=l1$0,
         l2=l2$1,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 <= c){var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
              continue}
            return rev_append(l1,accu)}
          return rev_append(l2,accu)}}
      var len=length(l);
      return 2 <= len?sort(len,l):l}
    function compare_lengths(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0){var l2$1=l2$0[2],l1$1=l1$0[2],l1$0=l1$1,l2$0=l2$1;continue}
          return 1}
        return l2$0?-1:0}}
    function compare_length_with(l,n)
     {var l$0=l,n$0=n;
      for(;;)
       {if(l$0)
         {var l$1=l$0[2];
          if(0 < n$0){var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;continue}
          return 1}
        return 0 === n$0?0:0 < n$0?-1:1}}
    function to_seq(l)
     {function aux(l,param)
       {if(l)
         {var tail=l[2],x=l[1];
          return [0,x,function(_yi_){return aux(tail,_yi_)}]}
        return 0}
      return function(_yh_){return aux(l,_yh_)}}
    function of_seq(seq)
     {function direct(depth,seq)
       {if(0 === depth)
         {var _yg_=0;
          return rev(fold_left(function(acc,x){return [0,x,acc]},_yg_,seq))}
        var match=caml_call1(seq,0);
        if(match)
         {var next=match[2],x=match[1];
          return [0,x,direct(depth - 1 | 0,next)]}
        return 0}
      return direct(500,seq)}
    var
     include=
      [0,
       length,
       compare_lengths,
       compare_length_with,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       iter$0,
       iteri,
       map$0,
       mapi,
       rev_map,
       fold_left$0,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_all,
       find_all,
       partition,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
    caml_register_global(658,include,"Stdlib__list");
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function init$0(n,f)
     {var s=caml_create_bytes(n),_ye_=n - 1 | 0,_yd_=0;
      if(! (_ye_ < 0))
       {var i=_yd_;
        for(;;)
         {caml_bytes_unsafe_set(s,i,caml_call1(f,i));
          var _yf_=i + 1 | 0;
          if(_ye_ !== i){var i=_yf_;continue}
          break}}
      return s}
    var empty$0=caml_create_bytes(0);
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function to_string(b){return caml_string_of_bytes(copy(b))}
    function of_string(s){return copy(caml_bytes_of_string(s))}
    function sub(s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_bytes_length(s) - len | 0) < ofs))
         {var r=caml_create_bytes(len);
          caml_blit_bytes(s,ofs,r,0,len);
          return r}
      return invalid_arg(cst_String_sub_Bytes_sub)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function _v_(a,b)
     {var
       c=a + b | 0,
       _yc_=b < 0?1:0,
       match=c < 0?1:0,
       switch$0=
        0 === (a < 0?1:0)
         ?0 === _yc_?0 === match?0:1:0
         :0 === _yc_?0:0 === match?1:0;
      return switch$0?invalid_arg(cst_Bytes_extend):c}
    function extend(s,left,right)
     {var
       len=_v_(_v_(caml_ml_bytes_length(s),left),right),
       r=caml_create_bytes(len);
      if(0 <= left)
       var srcoff=0,dstoff=left;
      else
       var srcoff=- left | 0,dstoff=0;
      var cpylen=min(caml_ml_bytes_length(s) - srcoff | 0,len - dstoff | 0);
      if(0 < cpylen)caml_blit_bytes(s,srcoff,r,dstoff,cpylen);
      return r}
    function fill(s,ofs,len,c)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_bytes_length(s) - len | 0) < ofs))
         return caml_fill_bytes(s,ofs,len,c);
      return invalid_arg(cst_String_fill_Bytes_fill)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_Bytes_blit)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_String_blit_Bytes_blit_string)}
    function iter$1(f,a)
     {var _ya_=caml_ml_bytes_length(a) - 1 | 0,_x$_=0;
      if(! (_ya_ < 0))
       {var i=_x$_;
        for(;;)
         {caml_call1(f,caml_bytes_unsafe_get(a,i));
          var _yb_=i + 1 | 0;
          if(_ya_ !== i){var i=_yb_;continue}
          break}}
      return 0}
    function iteri$0(f,a)
     {var _x9_=caml_ml_bytes_length(a) - 1 | 0,_x8_=0;
      if(! (_x9_ < 0))
       {var i=_x8_;
        for(;;)
         {caml_call2(f,i,caml_bytes_unsafe_get(a,i));
          var _x__=i + 1 | 0;
          if(_x9_ !== i){var i=_x__;continue}
          break}}
      return 0}
    function concat(sep,l)
     {if(l)
       {var seplen=caml_ml_bytes_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _x3_=param[2],_x4_=param[1];
            if(_x3_)
             {var
               x=(caml_ml_bytes_length(_x4_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(cst_Bytes_concat),
               acc=acc$0,
               param=_x3_;
              continue}
            var _x7_=caml_ml_bytes_length(_x4_) + acc | 0}
          else
           var _x7_=acc;
          var dst=caml_create_bytes(_x7_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _x5_=param$0[2],_x6_=param$0[1];
              if(_x5_)
               {caml_blit_bytes(_x6_,0,dst,pos,caml_ml_bytes_length(_x6_));
                caml_blit_bytes
                 (sep,0,dst,pos + caml_ml_bytes_length(_x6_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_bytes_length(_x6_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=_x5_;
                continue}
              caml_blit_bytes(_x6_,0,dst,pos,caml_ml_bytes_length(_x6_));
              return dst}
            return dst}}}
      return empty$0}
    function cat(s1,s2)
     {var
       l1=caml_ml_bytes_length(s1),
       l2=caml_ml_bytes_length(s2),
       r=caml_create_bytes(l1 + l2 | 0);
      caml_blit_bytes(s1,0,r,0,l1);
      caml_blit_bytes(s2,0,r,l1,l2);
      return r}
    function is_space(param)
     {var
       _x2_=param - 9 | 0,
       switch$0=4 < _x2_ >>> 0?23 === _x2_?1:0:2 === _x2_?0:1;
      return switch$0?1:0}
    function trim(s)
     {var len=caml_ml_bytes_length(s),i=[0,0];
      for(;;)
       {if(i[1] < len)
         if(is_space(caml_bytes_unsafe_get(s,i[1]))){i[1]++;continue}
        var j=[0,len - 1 | 0];
        for(;;)
         {if(i[1] <= j[1])
           if(is_space(caml_bytes_unsafe_get(s,j[1]))){j[1] += -1;continue}
          return i[1] <= j[1]?sub(s,i[1],(j[1] - i[1] | 0) + 1 | 0):empty$0}}}
    function escaped$0(s)
     {var n=[0,0],_xV_=caml_ml_bytes_length(s) - 1 | 0,_xU_=0;
      if(! (_xV_ < 0))
       {var i$0=_xU_;
        for(;;)
         {var match=caml_bytes_unsafe_get(s,i$0);
          if(32 <= match)
           {var _xZ_=match - 34 | 0;
            if(58 < _xZ_ >>> 0)
             if(93 <= _xZ_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_xZ_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1)var _x0_=1,switch$0=2}
          else
           var switch$0=11 <= match?13 === match?1:0:8 <= match?1:0;
          switch(switch$0){case 0:var _x0_=4;break;case 1:var _x0_=2;break}
          n[1] = n[1] + _x0_ | 0;
          var _x1_=i$0 + 1 | 0;
          if(_xV_ !== i$0){var i$0=_x1_;continue}
          break}}
      if(n[1] === caml_ml_bytes_length(s))return copy(s);
      var s$0=caml_create_bytes(n[1]);
      n[1] = 0;
      var _xX_=caml_ml_bytes_length(s) - 1 | 0,_xW_=0;
      if(! (_xX_ < 0))
       {var i=_xW_;
        for(;;)
         {var c=caml_bytes_unsafe_get(s,i);
          if(35 <= c)
           var switch$2=92 === c?1:127 <= c?0:2;
          else
           if(32 <= c)
            var switch$2=34 <= c?1:2;
           else
            if(14 <= c)
             var switch$2=0;
            else
             switch(c)
              {case 8:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],98);
                var switch$2=3;
                break;
               case 9:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],116);
                var switch$2=3;
                break;
               case 10:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],110);
                var switch$2=3;
                break;
               case 13:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],114);
                var switch$2=3;
                break;
               default:var switch$2=0}
          switch(switch$2)
           {case 0:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c / 100 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c % 10 | 0) | 0);
             break;
            case 1:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],c);
             break;
            case 2:caml_bytes_unsafe_set(s$0,n[1],c);break
            }
          n[1]++;
          var _xY_=i + 1 | 0;
          if(_xX_ !== i){var i=_xY_;continue}
          break}}
      return s$0}
    function map$1(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_xS_=l - 1 | 0,_xR_=0;
      if(! (_xS_ < 0))
       {var i=_xR_;
        for(;;)
         {caml_bytes_unsafe_set(r,i,caml_call1(f,caml_bytes_unsafe_get(s,i)));
          var _xT_=i + 1 | 0;
          if(_xS_ !== i){var i=_xT_;continue}
          break}}
      return r}
    function mapi$0(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_xP_=l - 1 | 0,_xO_=0;
      if(! (_xP_ < 0))
       {var i=_xO_;
        for(;;)
         {caml_bytes_unsafe_set
           (r,i,caml_call2(f,i,caml_bytes_unsafe_get(s,i)));
          var _xQ_=i + 1 | 0;
          if(_xP_ !== i){var i=_xQ_;continue}
          break}}
      return r}
    function uppercase_ascii$0(s){return map$1(uppercase_ascii,s)}
    function lowercase_ascii$0(s){return map$1(lowercase_ascii,s)}
    function apply1(f,s)
     {if(0 === caml_ml_bytes_length(s))return s;
      var r=copy(s);
      caml_bytes_unsafe_set(r,0,caml_call1(f,caml_bytes_unsafe_get(s,0)));
      return r}
    function capitalize_ascii(s){return apply1(uppercase_ascii,s)}
    function uncapitalize_ascii(s){return apply1(lowercase_ascii,s)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index(s,c){return index_rec(s,caml_ml_bytes_length(s),0,c)}
    function index_rec_opt(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_opt(s,c)
     {return index_rec_opt(s,caml_ml_bytes_length(s),0,c)}
    function index_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i)if(! (l < i))return index_rec(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_index_from)}
    function index_from_opt(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i)if(! (l < i))return index_rec_opt(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Bytes_index_from_opt)}
    function rindex_rec(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function rindex(s,c)
     {return rindex_rec(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from(s,i,c)
     {if(-1 <= i)if(! (caml_ml_bytes_length(s) <= i))return rindex_rec(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_rindex_from)}
    function rindex_rec_opt(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        return 0}}
    function rindex_opt(s,c)
     {return rindex_rec_opt(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from_opt(s,i,c)
     {if(-1 <= i)
       if(! (caml_ml_bytes_length(s) <= i))return rindex_rec_opt(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Bytes_rindex_from_opt)}
    function contains_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i)
       if(! (l < i))
        try
         {index_rec(s,l,i,c);var _xM_=1;return _xM_}
        catch(_xN_)
         {_xN_ = caml_wrap_exception(_xN_);
          if(_xN_ === Not_found)return 0;
          throw _xN_}
      return invalid_arg(cst_String_contains_from_Bytes_contains_from)}
    function contains(s,c){return contains_from(s,0,c)}
    function rcontains_from(s,i,c)
     {if(0 <= i)
       if(! (caml_ml_bytes_length(s) <= i))
        try
         {rindex_rec(s,i,c);var _xK_=1;return _xK_}
        catch(_xL_)
         {_xL_ = caml_wrap_exception(_xL_);
          if(_xL_ === Not_found)return 0;
          throw _xL_}
      return invalid_arg(cst_String_rcontains_from_Bytes_rcontains_from)}
    var compare$1=runtime.caml_bytes_compare;
    function uppercase$0(s){return map$1(uppercase,s)}
    function lowercase$0(s){return map$1(lowercase,s)}
    function capitalize(s){return apply1(uppercase,s)}
    function uncapitalize(s){return apply1(lowercase,s)}
    function to_seq$0(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_xI_=i + 1 | 0;
        return [0,x,function(_xJ_){return aux(_xI_,_xJ_)}]}
      var _xG_=0;
      return function(_xH_){return aux(_xG_,_xH_)}}
    function to_seqi(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_xE_=i + 1 | 0;
        return [0,[0,i,x],function(_xF_){return aux(_xE_,_xF_)}]}
      var _xC_=0;
      return function(_xD_){return aux(_xC_,_xD_)}}
    function of_seq$0(i)
     {var n=[0,0],buf=[0,make(256,0)];
      iter
       (function(c)
         {if(n[1] === caml_ml_bytes_length(buf[1]))
           {var
             new_len=
              min(2 * caml_ml_bytes_length(buf[1]) | 0,max_string_length);
            if(caml_ml_bytes_length(buf[1]) === new_len)
             failwith(cst_Bytes_of_seq_cannot_grow_bytes);
            var new_buf=make(new_len,0);
            blit(buf[1],0,new_buf,0,n[1]);
            buf[1] = new_buf}
          caml_bytes_set(buf[1],n[1],c);
          n[1]++;
          return 0},
        i);
      return sub(buf[1],0,n[1])}
    var
     unsafe_of_string=caml_bytes_of_string,
     unsafe_to_string=caml_string_of_bytes,
     equal$1=runtime.caml_bytes_equal,
     include$0=
      [0,
       make,
       init$0,
       empty$0,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat,
       cat,
       iter$1,
       iteri$0,
       map$1,
       mapi$0,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase$0,
       lowercase$0,
       capitalize,
       uncapitalize,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$1,
       equal$1,
       unsafe_to_string,
       unsafe_of_string,
       to_seq$0,
       to_seqi,
       of_seq$0];
    caml_register_global(659,include$0,"Stdlib__bytes");
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function init$1(n,f){return caml_string_of_bytes(init$0(n,f))}
    function copy$0(s)
     {return caml_string_of_bytes(copy(caml_bytes_of_string(s)))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function concat$0(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _xx_=param[2],_xy_=param[1];
            if(_xx_)
             {var
               x=(caml_ml_string_length(_xy_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(cst_String_concat),
               acc=acc$0,
               param=_xx_;
              continue}
            var _xB_=caml_ml_string_length(_xy_) + acc | 0}
          else
           var _xB_=acc;
          var dst=caml_create_bytes(_xB_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _xz_=param$0[2],_xA_=param$0[1];
              if(_xz_)
               {caml_blit_string(_xA_,0,dst,pos,caml_ml_string_length(_xA_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_xA_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_xA_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=_xz_;
                continue}
              caml_blit_string(_xA_,0,dst,pos,caml_ml_string_length(_xA_))}
            return caml_string_of_bytes(dst)}}}
      return cst$3}
    function iter$2(f,s)
     {var _xv_=caml_ml_string_length(s) - 1 | 0,_xu_=0;
      if(! (_xv_ < 0))
       {var i=_xu_;
        for(;;)
         {caml_call1(f,caml_string_unsafe_get(s,i));
          var _xw_=i + 1 | 0;
          if(_xv_ !== i){var i=_xw_;continue}
          break}}
      return 0}
    function iteri$1(f,s)
     {var _xs_=caml_ml_string_length(s) - 1 | 0,_xr_=0;
      if(! (_xs_ < 0))
       {var i=_xr_;
        for(;;)
         {caml_call2(f,i,caml_string_unsafe_get(s,i));
          var _xt_=i + 1 | 0;
          if(_xs_ !== i){var i=_xt_;continue}
          break}}
      return 0}
    function map$2(f,s)
     {return caml_string_of_bytes(map$1(f,caml_bytes_of_string(s)))}
    function mapi$1(f,s)
     {return caml_string_of_bytes(mapi$0(f,caml_bytes_of_string(s)))}
    function is_space$0(param)
     {var
       _xq_=param - 9 | 0,
       switch$0=4 < _xq_ >>> 0?23 === _xq_?1:0:2 === _xq_?0:1;
      return switch$0?1:0}
    function trim$0(s)
     {if(caml_string_equal(s,cst$4))return s;
      if(! is_space$0(caml_string_unsafe_get(s,0)))
       if
        (!
         is_space$0
          (caml_string_unsafe_get(s,caml_ml_string_length(s) - 1 | 0)))
        return s;
      return caml_string_of_bytes(trim(caml_bytes_of_string(s)))}
    function escaped$1(s)
     {var n=caml_ml_string_length(s),i=0;
      for(;;)
       {if(n <= i)return s;
        var
         match=caml_string_unsafe_get(s,i),
         _xp_=match - 32 | 0,
         switch$0=
          59 < _xp_ >>> 0?33 < (_xp_ - 61 | 0) >>> 0?1:0:2 === _xp_?1:0;
        if(switch$0)
         return caml_string_of_bytes(escaped$0(caml_bytes_of_string(s)));
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function index_rec$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index$0(s,c){return index_rec$0(s,caml_ml_string_length(s),0,c)}
    function index_rec_opt$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_opt$0(s,c)
     {return index_rec_opt$0(s,caml_ml_string_length(s),0,c)}
    function index_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)if(! (l < i))return index_rec$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_index_from$0)}
    function index_from_opt$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)if(! (l < i))return index_rec_opt$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Bytes_index_from_opt$0)}
    function rindex_rec$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_string_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function rindex$0(s,c)
     {return rindex_rec$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from$0(s,i,c)
     {if(-1 <= i)
       if(! (caml_ml_string_length(s) <= i))return rindex_rec$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_rindex_from$0)}
    function rindex_rec_opt$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        return 0}}
    function rindex_opt$0(s,c)
     {return rindex_rec_opt$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from_opt$0(s,i,c)
     {if(-1 <= i)
       if(! (caml_ml_string_length(s) <= i))return rindex_rec_opt$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Bytes_rindex_from_opt$0)}
    function contains_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(! (l < i))
        try
         {index_rec$0(s,l,i,c);var _xn_=1;return _xn_}
        catch(_xo_)
         {_xo_ = caml_wrap_exception(_xo_);
          if(_xo_ === Not_found)return 0;
          throw _xo_}
      return invalid_arg(cst_String_contains_from_Bytes_contains_from$0)}
    function contains$0(s,c){return contains_from$0(s,0,c)}
    function rcontains_from$0(s,i,c)
     {if(0 <= i)
       if(! (caml_ml_string_length(s) <= i))
        try
         {rindex_rec$0(s,i,c);var _xl_=1;return _xl_}
        catch(_xm_)
         {_xm_ = caml_wrap_exception(_xm_);
          if(_xm_ === Not_found)return 0;
          throw _xm_}
      return invalid_arg(cst_String_rcontains_from_Bytes_rcontains_from$0)}
    function uppercase_ascii$1(s)
     {return caml_string_of_bytes(uppercase_ascii$0(caml_bytes_of_string(s)))}
    function lowercase_ascii$1(s)
     {return caml_string_of_bytes(lowercase_ascii$0(caml_bytes_of_string(s)))}
    function capitalize_ascii$0(s)
     {return caml_string_of_bytes(capitalize_ascii(caml_bytes_of_string(s)))}
    function uncapitalize_ascii$0(s)
     {return caml_string_of_bytes(uncapitalize_ascii(caml_bytes_of_string(s)))}
    var compare$2=caml_string_compare;
    function split_on_char(sep,s)
     {var
       r=[0,0],
       j=[0,caml_ml_string_length(s)],
       _xh_=caml_ml_string_length(s) - 1 | 0;
      if(! (_xh_ < 0))
       {var i=_xh_;
        for(;;)
         {if(caml_string_unsafe_get(s,i) === sep)
           {var _xj_=r[1];
            r[1] = [0,sub$0(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_xj_];
            j[1] = i}
          var _xk_=i - 1 | 0;
          if(0 !== i){var i=_xk_;continue}
          break}}
      var _xi_=r[1];
      return [0,sub$0(s,0,j[1]),_xi_]}
    function uppercase$1(s)
     {return caml_string_of_bytes(uppercase$0(caml_bytes_of_string(s)))}
    function lowercase$1(s)
     {return caml_string_of_bytes(lowercase$0(caml_bytes_of_string(s)))}
    function capitalize$0(s)
     {return caml_string_of_bytes(capitalize(caml_bytes_of_string(s)))}
    function uncapitalize$0(s)
     {return caml_string_of_bytes(uncapitalize(caml_bytes_of_string(s)))}
    function to_seq$1(s){return to_seq$0(caml_bytes_of_string(s))}
    function to_seqi$0(s){return to_seqi(caml_bytes_of_string(s))}
    function of_seq$1(g){return caml_string_of_bytes(of_seq$0(g))}
    var
     equal$2=caml_string_equal,
     include$1=
      [0,
       make$0,
       init$1,
       copy$0,
       sub$0,
       fill,
       blit$0,
       concat$0,
       iter$2,
       iteri$1,
       map$2,
       mapi$1,
       trim$0,
       escaped$1,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       contains$0,
       contains_from$0,
       rcontains_from$0,
       uppercase$1,
       lowercase$1,
       capitalize$0,
       uncapitalize$0,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       compare$2,
       equal$2,
       split_on_char,
       to_seq$1,
       to_seqi$0,
       of_seq$1];
    caml_register_global(660,include$1,"Stdlib__string");
    function merge$0(order,l1,l2)
     {if(l1)
       {var t1=l1[2],h1=l1[1];
        if(l2)
         {var t2=l2[2],h2=l2[1];
          return caml_call2(order,h1,h2)
                  ?[0,h1,merge$0(order,t1,l2)]
                  :[0,h2,merge$0(order,l1,t2)]}
        return l1}
      return l2}
    function list(order,l)
     {function initlist(param)
       {if(param)
         {var _xd_=param[2],_xe_=param[1];
          if(_xd_)
           {var
             rest=_xd_[2],
             e2=_xd_[1],
             _xf_=initlist(rest),
             _xg_=
              caml_call2(order,_xe_,e2)?[0,_xe_,[0,e2,0]]:[0,e2,[0,_xe_,0]];
            return [0,_xg_,_xf_]}
          return [0,[0,_xe_,0],0]}
        return 0}
      function merge2(x)
       {if(x)
         {var _xb_=x[2];
          if(_xb_)
           {var rest=_xb_[2],l2=_xb_[1],l1=x[1],_xc_=merge2(rest);
            return [0,merge$0(order,l1,l2),_xc_]}}
        return x}
      var llist$1=initlist(l),llist=llist$1;
      for(;;)
       {if(llist)
         {if(llist[2]){var llist$0=merge2(llist),llist=llist$0;continue}
          var l$0=llist[1];
          return l$0}
        return 0}}
    function swap(arr,i,j)
     {var tmp=arr[i + 1];arr[i + 1] = arr[j + 1];return arr[j + 1] = tmp}
    function array(cmp,arr)
     {function qsort(lo,hi)
       {var lo$0=lo,hi$0=hi;
        a:
        for(;;)
         {var _w__=6 <= (hi$0 - lo$0 | 0)?1:0;
          if(_w__)
           {var mid=(lo$0 + hi$0 | 0) >>> 1 | 0;
            if(caml_call2(cmp,arr[mid + 1],arr[lo$0 + 1]))swap(arr,mid,lo$0);
            if(caml_call2(cmp,arr[hi$0 + 1],arr[mid + 1]))
             {swap(arr,mid,hi$0);
              if(caml_call2(cmp,arr[mid + 1],arr[lo$0 + 1]))swap(arr,mid,lo$0)}
            var
             pivot=arr[mid + 1],
             i=[0,lo$0 + 1 | 0],
             j=[0,hi$0 - 1 | 0],
             _w$_=1 - caml_call2(cmp,pivot,arr[hi$0 + 1]),
             _xa_=_w$_ || 1 - caml_call2(cmp,arr[lo$0 + 1],pivot);
            if(_xa_)throw [0,Invalid_argument,cst_Sort_array];
            b:
            for(;;)
             {if(i[1] < j[1])
               for(;;)
                {if(caml_call2(cmp,pivot,arr[i[1] + 1]))
                  for(;;)
                   {if(caml_call2(cmp,arr[j[1] + 1],pivot))
                     {if(i[1] < j[1])swap(arr,i[1],j[1]);
                      i[1]++;
                      j[1] += -1;
                      continue b}
                    j[1] += -1;
                    continue}
                 i[1]++;
                 continue}
              if((j[1] - lo$0 | 0) <= (hi$0 - i[1] | 0))
               {qsort(lo$0,j[1]);var lo$1=i[1],lo$0=lo$1;continue a}
              qsort(i[1],hi$0);
              var hi$1=j[1],hi$0=hi$1;
              continue a}}
          return _w__}}
      qsort(0,arr.length - 1 - 1 | 0);
      var _w8_=arr.length - 1 - 1 | 0,_w7_=1;
      if(! (_w8_ < 1))
       {var i=_w7_;
        for(;;)
         {var val_i=arr[i + 1];
          if(1 - caml_call2(cmp,arr[(i - 1 | 0) + 1],val_i))
           {arr[i + 1] = arr[(i - 1 | 0) + 1];
            var j=[0,i - 1 | 0];
            for(;;)
             {if(1 <= j[1])
               if(! caml_call2(cmp,arr[(j[1] - 1 | 0) + 1],val_i))
                {arr[j[1] + 1] = arr[(j[1] - 1 | 0) + 1];j[1] += -1;continue}
              arr[j[1] + 1] = val_i;
              break}}
          var _w9_=i + 1 | 0;
          if(_w8_ !== i){var i=_w9_;continue}
          break}}
      return 0}
    var Stdlib_sort=[0,list,array,merge$0];
    caml_register_global(661,Stdlib_sort,"Stdlib__sort");
    function to_buffer(buff,ofs,len,v,flags)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_bytes_length(buff) - len | 0) < ofs))
         return runtime.caml_output_value_to_buffer(buff,ofs,len,v,flags);
      return invalid_arg(cst_Marshal_to_buffer_substring_out_of_bounds)}
    var header_size=20;
    function data_size(buff,ofs)
     {if(0 <= ofs)
       if(! ((caml_ml_bytes_length(buff) - 20 | 0) < ofs))
        return caml_marshal_data_size(buff,ofs);
      return invalid_arg(cst_Marshal_data_size)}
    function total_size(buff,ofs){return 20 + data_size(buff,ofs) | 0}
    function from_bytes(buff,ofs)
     {if(0 <= ofs)
       if(! ((caml_ml_bytes_length(buff) - 20 | 0) < ofs))
        {var len=caml_marshal_data_size(buff,ofs);
         return (caml_ml_bytes_length(buff) - (20 + len | 0) | 0) < ofs
                 ?invalid_arg(cst_Marshal_from_bytes$0)
                 :runtime.caml_input_value_from_bytes(buff,ofs)}
      return invalid_arg(cst_Marshal_from_bytes)}
    function from_string(buff,ofs)
     {return from_bytes(caml_bytes_of_string(buff),ofs)}
    var
     Stdlib_marshal=
      [0,
       caml_output_value,
       to_buffer,
       caml_input_value,
       from_bytes,
       from_string,
       header_size,
       data_size,
       total_size];
    caml_register_global(662,Stdlib_marshal,"Stdlib__marshal");
    function is_block(a){return 1 - (typeof a === "number"?1:0)}
    var
     double_field=runtime.caml_array_get,
     set_double_field=runtime.caml_array_set;
    function marshal(obj){return runtime.caml_output_value_to_bytes(obj,0)}
    function unmarshal(str,pos)
     {var _w6_=pos + total_size(str,pos) | 0;
      return [0,from_bytes(str,pos),_w6_]}
    var
     first_non_constant_constructor_tag=0,
     last_non_constant_constructor_tag=245,
     lazy_tag=246,
     closure_tag=247,
     object_tag=248,
     infix_tag=249,
     forward_tag=250,
     no_scan_tag=251,
     abstract_tag=251,
     string_tag=252,
     double_tag=253,
     double_array_tag=254,
     custom_tag=255,
     int_tag=1000,
     out_of_heap_tag=1001,
     unaligned_tag=1002;
    function extension_constructor(x)
     {if(is_block(x))
       if(caml_obj_tag(x) !== 248)
        if(1 <= x.length - 1)var slot=x[1],switch$0=1;else var switch$0=0;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var slot=x;
      if(is_block(slot))
       if(caml_obj_tag(slot) === 248)
        var name=slot[1],switch$1=1;
       else
        var switch$1=0;
      else
       var switch$1=0;
      if(! switch$1)var name=invalid_arg(cst_Obj_extension_constructor$0);
      return caml_obj_tag(name) === 252
              ?slot
              :invalid_arg(cst_Obj_extension_constructor)}
    function extension_name(slot){return slot[1]}
    function extension_id(slot){return slot[2]}
    function length$0(x){return x.length - 1 - 2 | 0}
    var _w_=runtime.caml_ephe_blit_data,_x_=runtime.caml_ephe_check_data;
    function _y_(_w5_){return runtime.caml_ephe_unset_data(_w5_)}
    var
     _z_=runtime.caml_ephe_set_data,
     _A_=runtime.caml_ephe_get_data_copy,
     _B_=runtime.caml_ephe_get_data;
    function _C_(_w4_,_w3_,_w2_,_w1_,_w0_)
     {return runtime.caml_ephe_blit_key(_w4_,_w3_,_w2_,_w1_,_w0_)}
    function _D_(_wZ_,_wY_){return runtime.caml_ephe_check_key(_wZ_,_wY_)}
    var _E_=runtime.caml_ephe_unset_key,_F_=runtime.caml_ephe_set_key;
    function _G_(_wX_,_wW_){return runtime.caml_ephe_get_key_copy(_wX_,_wW_)}
    function _H_(_wV_,_wU_){return runtime.caml_ephe_get_key(_wV_,_wU_)}
    var
     _I_=
      [0,
       function(_wT_){return runtime.caml_ephe_create(_wT_)},
       length$0,
       _H_,
       _G_,
       _F_,
       _E_,
       _D_,
       _C_,
       _B_,
       _A_,
       _z_,
       _y_,
       _x_,
       _w_],
     Stdlib_obj=
      [0,
       is_block,
       double_field,
       set_double_field,
       first_non_constant_constructor_tag,
       last_non_constant_constructor_tag,
       lazy_tag,
       closure_tag,
       object_tag,
       infix_tag,
       forward_tag,
       no_scan_tag,
       abstract_tag,
       string_tag,
       double_tag,
       double_array_tag,
       custom_tag,
       custom_tag,
       int_tag,
       out_of_heap_tag,
       unaligned_tag,
       extension_constructor,
       extension_name,
       extension_id,
       marshal,
       unmarshal,
       _I_];
    caml_register_global(663,Stdlib_obj,"Stdlib__obj");
    var
     infinity$0=_o_[10],
     neg_infinity$0=_o_[11],
     nan$0=_o_[12],
     max_float$0=_o_[13],
     min_float$0=_o_[14],
     epsilon=_o_[15],
     of_string_opt=_o_[24],
     to_string$0=_o_[23],
     pi=3.14159265358979312;
    function equal$3(x,y){return 0 === caml_float_compare(x,y)?1:0}
    function hash$0(x){return caml_hash(10,100,0,x)}
    var
     Array=[0],
     Stdlib_float=
      [0,
       infinity$0,
       neg_infinity$0,
       nan$0,
       pi,
       max_float$0,
       min_float$0,
       epsilon,
       of_string_opt,
       to_string$0,
       caml_float_compare,
       equal$3,
       hash$0,
       Array];
    caml_register_global(664,Stdlib_float,"Stdlib__float");
    var make_float=runtime.caml_make_float_vect,Floatarray=[0];
    function init$2(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_wR_=l - 1 | 0,_wQ_=1;
        if(! (_wR_ < 1))
         {var i=_wQ_;
          for(;;)
           {res[i + 1] = caml_call1(f,i);
            var _wS_=i + 1 | 0;
            if(_wR_ !== i){var i=_wS_;continue}
            break}}
        return res}
      return invalid_arg(cst_Array_init)}
    function create_matrix(sx,sy,init)
     {var res=caml_make_vect(sx,[0]),_wO_=sx - 1 | 0,_wN_=0;
      if(! (_wO_ < 0))
       {var x=_wN_;
        for(;;)
         {res[x + 1] = caml_make_vect(sy,init);
          var _wP_=x + 1 | 0;
          if(_wO_ !== x){var x=_wP_;continue}
          break}}
      return res}
    function copy$1(a)
     {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
    function append$0(a1,a2)
     {var l1=a1.length - 1;
      return 0 === l1
              ?copy$1(a2)
              :0 === a2.length - 1
                ?caml_array_sub(a1,0,l1)
                :runtime.caml_array_append(a1,a2)}
    function sub$1(a,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((a.length - 1 - len | 0) < ofs))
         return caml_array_sub(a,ofs,len);
      return invalid_arg(cst_Array_sub)}
    function fill$0(a,ofs,len,v)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((a.length - 1 - len | 0) < ofs))
         {var _wL_=(ofs + len | 0) - 1 | 0;
          if(! (_wL_ < ofs))
           {var i=ofs;
            for(;;)
             {a[i + 1] = v;
              var _wM_=i + 1 | 0;
              if(_wL_ !== i){var i=_wM_;continue}
              break}}
          return 0}
      return invalid_arg(cst_Array_fill)}
    function blit$1(a1,ofs1,a2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((a1.length - 1 - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((a2.length - 1 - len | 0) < ofs2))
           return runtime.caml_array_blit(a1,ofs1,a2,ofs2,len);
      return invalid_arg(cst_Array_blit)}
    function iter$3(f,a)
     {var _wJ_=a.length - 1 - 1 | 0,_wI_=0;
      if(! (_wJ_ < 0))
       {var i=_wI_;
        for(;;)
         {caml_call1(f,a[i + 1]);
          var _wK_=i + 1 | 0;
          if(_wJ_ !== i){var i=_wK_;continue}
          break}}
      return 0}
    function iter2$0(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Array_iter2_arrays_must_have_the_same_length);
      var _wG_=a.length - 1 - 1 | 0,_wF_=0;
      if(! (_wG_ < 0))
       {var i=_wF_;
        for(;;)
         {caml_call2(f,a[i + 1],b[i + 1]);
          var _wH_=i + 1 | 0;
          if(_wG_ !== i){var i=_wH_;continue}
          break}}
      return 0}
    function map$3(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_wD_=l - 1 | 0,_wC_=1;
      if(! (_wD_ < 1))
       {var i=_wC_;
        for(;;)
         {r[i + 1] = caml_call1(f,a[i + 1]);
          var _wE_=i + 1 | 0;
          if(_wD_ !== i){var i=_wE_;continue}
          break}}
      return r}
    function map2$0(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)
       return invalid_arg(cst_Array_map2_arrays_must_have_the_same_length);
      if(0 === la)return [0];
      var r=caml_make_vect(la,caml_call2(f,a[1],b[1])),_wA_=la - 1 | 0,_wz_=1;
      if(! (_wA_ < 1))
       {var i=_wz_;
        for(;;)
         {r[i + 1] = caml_call2(f,a[i + 1],b[i + 1]);
          var _wB_=i + 1 | 0;
          if(_wA_ !== i){var i=_wB_;continue}
          break}}
      return r}
    function iteri$2(f,a)
     {var _wx_=a.length - 1 - 1 | 0,_ww_=0;
      if(! (_wx_ < 0))
       {var i=_ww_;
        for(;;)
         {caml_call2(f,i,a[i + 1]);
          var _wy_=i + 1 | 0;
          if(_wx_ !== i){var i=_wy_;continue}
          break}}
      return 0}
    function mapi$2(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call2(f,0,a[1])),_wu_=l - 1 | 0,_wt_=1;
      if(! (_wu_ < 1))
       {var i=_wt_;
        for(;;)
         {r[i + 1] = caml_call2(f,i,a[i + 1]);
          var _wv_=i + 1 | 0;
          if(_wu_ !== i){var i=_wv_;continue}
          break}}
      return r}
    function to_list(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 <= i)
         {var res$0=[0,a[i + 1],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
        return res}}
    function list_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[2],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function of_list(l)
     {if(l)
       {var
         tl=l[2],
         hd=l[1],
         a=caml_make_vect(list_length(0,l),hd),
         i=1,
         param=tl;
        for(;;)
         {if(param)
           {var tl$0=param[2],hd$0=param[1];
            a[i + 1] = hd$0;
            var i$0=i + 1 | 0,i=i$0,param=tl$0;
            continue}
          return a}}
      return [0]}
    function fold_left$1(f,x,a)
     {var r=[0,x],_wr_=a.length - 1 - 1 | 0,_wq_=0;
      if(! (_wr_ < 0))
       {var i=_wq_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[i + 1]);
          var _ws_=i + 1 | 0;
          if(_wr_ !== i){var i=_ws_;continue}
          break}}
      return r[1]}
    function fold_right$0(f,a,x)
     {var r=[0,x],_wo_=a.length - 1 - 1 | 0;
      if(! (_wo_ < 0))
       {var i=_wo_;
        for(;;)
         {r[1] = caml_call2(f,a[i + 1],r[1]);
          var _wp_=i - 1 | 0;
          if(0 !== i){var i=_wp_;continue}
          break}}
      return r[1]}
    function exists$0(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[i + 1]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function for_all$0(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(caml_call1(p,a[i + 1])){var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function mem$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_compare(a[i + 1],x))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function memq$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(x === a[i + 1])return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    var Bottom=[248,cst_Stdlib_Array_Bottom,caml_fresh_oo_id(0)];
    function sort(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {var _wh_=i31 + 1 | 0,_wi_=caml_check_bound(a,_wh_)[_wh_ + 1];
          if(caml_call2(cmp,caml_check_bound(a,i31)[i31 + 1],_wi_) < 0)
           x[1] = i31 + 1 | 0;
          var
           _wj_=i31 + 2 | 0,
           _wk_=caml_check_bound(a,_wj_)[_wj_ + 1],
           _wl_=x[1];
          if(caml_call2(cmp,caml_check_bound(a,_wl_)[_wl_ + 1],_wk_) < 0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if((i31 + 1 | 0) < l)
         {var _wm_=i31 + 1 | 0,_wn_=caml_check_bound(a,_wm_)[_wm_ + 1];
          if(! (0 <= caml_call2(cmp,caml_check_bound(a,i31)[i31 + 1],_wn_)))
           return i31 + 1 | 0}
        if(i31 < l)return i31;
        throw [0,Bottom,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_check_bound(a,j)[j + 1],e))
           {var _wg_=caml_check_bound(a,j)[j + 1];
            caml_check_bound(a,i$0)[i$0 + 1] = _wg_;
            var i$0=j;
            continue}
          return caml_check_bound(a,i$0)[i$0 + 1] = e}}
      function trickle(l,i,e)
       {try
         {var _wf_=trickledown(l,i,e);return _wf_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom)
           {var i$0=exn[2];return caml_check_bound(a,i$0)[i$0 + 1] = e}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0),_we_=caml_check_bound(a,i$1)[i$1 + 1];
          caml_check_bound(a,i$0)[i$0 + 1] = _we_;
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _wd_=bubbledown(l,i);return _wd_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_v7_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_v7_ < 0))
       {var i$2=_v7_;
        for(;;)
         {trickle(l,i$2,caml_check_bound(a,i$2)[i$2 + 1]);
          var _wc_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_wc_;continue}
          break}}
      var _v8_=l - 1 | 0;
      if(! (_v8_ < 2))
       {var i$0=_v8_;
        a:
        for(;;)
         {var
           e$0=caml_check_bound(a,i$0)[i$0 + 1],
           _wa_=caml_check_bound(a,0)[1];
          caml_check_bound(a,i$0)[i$0 + 1] = _wa_;
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_J_];
            if
             (0 <= caml_call2(cmp,caml_check_bound(a,father)[father + 1],e$0))
             caml_check_bound(a,i)[i + 1] = e$0;
            else
             {var _v6_=caml_check_bound(a,father)[father + 1];
              caml_check_bound(a,i)[i + 1] = _v6_;
              if(0 < father){var i=father;continue}
              caml_check_bound(a,0)[1] = e$0}
            var _wb_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_wb_;continue a}
            break}
          break}}
      var _v9_=1 < l?1:0;
      if(_v9_)
       {var e=caml_check_bound(a,1)[2],_v__=caml_check_bound(a,0)[1];
        caml_check_bound(a,1)[2] = _v__;
        var _v$_=caml_check_bound(a,0)[1] = e}
      else
       var _v$_=_v9_;
      return _v$_}
    function fast_sort$0(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_check_bound(src2,src2ofs)[src2ofs + 1],
         s1$1=caml_check_bound(a,src1ofs)[src1ofs + 1],
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_check_bound(dst,d)[d + 1] = s2;
            var i2$0=i2 + 1 | 0;
            if(i2$0 < src2r)
             {var
               d$0=d + 1 | 0,
               s2$0=caml_check_bound(src2,i2$0)[i2$0 + 1],
               i2=i2$0,
               s2=s2$0,
               d=d$0;
              continue}
            return blit$1(a,i1,dst,d + 1 | 0,src1r - i1 | 0)}
          caml_check_bound(dst,d)[d + 1] = s1;
          var i1$0=i1 + 1 | 0;
          if(i1$0 < src1r)
           {var
             d$1=d + 1 | 0,
             s1$0=caml_check_bound(a,i1$0)[i1$0 + 1],
             i1=i1$0,
             s1=s1$0,
             d=d$1;
            continue}
          return blit$1(src2,i2,dst,d + 1 | 0,src2r - i2 | 0)}}
      function isortto(srcofs,dst,dstofs,len)
       {var _vY_=len - 1 | 0,_vX_=0;
        if(! (_vY_ < 0))
         {var i=_vX_;
          a:
          for(;;)
           {var
             _vZ_=srcofs + i | 0,
             e=caml_check_bound(a,_vZ_)[_vZ_ + 1],
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if(dstofs <= j[1])
               {var _v0_=j[1];
                if(0 < caml_call2(cmp,caml_check_bound(dst,_v0_)[_v0_ + 1],e))
                 {var
                   _v1_=j[1],
                   _v2_=caml_check_bound(dst,_v1_)[_v1_ + 1],
                   _v3_=j[1] + 1 | 0;
                  caml_check_bound(dst,_v3_)[_v3_ + 1] = _v2_;
                  j[1] += -1;
                  continue}}
              var _v4_=j[1] + 1 | 0;
              caml_check_bound(dst,_v4_)[_v4_ + 1] = e;
              var _v5_=i + 1 | 0;
              if(_vY_ !== i){var i=_v5_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var
       l1=l / 2 | 0,
       l2=l - l1 | 0,
       t=caml_make_vect(l2,caml_check_bound(a,0)[1]);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$2(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[i + 1],_vV_=i + 1 | 0;
          return [0,x,function(_vW_){return aux(_vV_,_vW_)}]}
        return 0}
      var _vT_=0;
      return function(_vU_){return aux(_vT_,_vU_)}}
    function to_seqi$1(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[i + 1],_vR_=i + 1 | 0;
          return [0,[0,i,x],function(_vS_){return aux(_vR_,_vS_)}]}
        return 0}
      var _vP_=0;
      return function(_vQ_){return aux(_vP_,_vQ_)}}
    function of_seq$2(i$2)
     {var _vO_=0,l=fold_left(function(acc,x){return [0,x,acc]},_vO_,i$2);
      if(l)
       {var
         tl=l[2],
         hd=l[1],
         len=list_length(0,l),
         a=caml_make_vect(len,hd),
         i$1=len - 1 | 0,
         i=i$1,
         param=tl;
        for(;;)
         {if(param)
           {var tl$0=param[2],hd$0=param[1];
            a[i + 1] = hd$0;
            var i$0=i - 1 | 0,i=i$0,param=tl$0;
            continue}
          return a}}
      return [0]}
    var
     concat$1=caml_array_concat,
     include$2=
      [0,
       make_float,
       init$2,
       create_matrix,
       create_matrix,
       append$0,
       concat$1,
       sub$1,
       copy$1,
       fill$0,
       blit$1,
       to_list,
       of_list,
       iter$3,
       iteri$2,
       map$3,
       mapi$2,
       fold_left$1,
       fold_right$0,
       iter2$0,
       map2$0,
       for_all$0,
       exists$0,
       mem$0,
       memq$0,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$2,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(665,include$2,"Stdlib__array");
    var zero=0,one=1,minus_one=-1;
    function succ$0(n){return n + 1 | 0}
    function pred$0(n){return n - 1 | 0}
    function abs$0(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$0=-2147483648,max_int$0=2147483647;
    function lognot(n){return n ^ -1}
    function to_string$1(n){return caml_format_int(cst_d,n)}
    function of_string_opt$0(s)
     {try
       {var _vM_=[0,caml_int_of_string(s)];return _vM_}
      catch(_vN_)
       {_vN_ = caml_wrap_exception(_vN_);
        if(_vN_[1] === Failure)return 0;
        throw _vN_}}
    var compare$3=caml_int_compare;
    function equal$4(x,y){return 0 === caml_int_compare(x,y)?1:0}
    var
     Stdlib_int32=
      [0,
       zero,
       one,
       minus_one,
       succ$0,
       pred$0,
       abs$0,
       max_int$0,
       min_int$0,
       lognot,
       of_string_opt$0,
       to_string$1,
       compare$3,
       equal$4];
    caml_register_global(666,Stdlib_int32,"Stdlib__int32");
    function succ$1(n){return caml_int64_add(n,_K_)}
    function pred$1(n){return caml_int64_sub(n,_L_)}
    function abs$1(n)
     {return caml_greaterequal(n,_M_)?n:runtime.caml_int64_neg(n)}
    function lognot$0(n){return runtime.caml_int64_xor(n,_N_)}
    function to_string$2(n){return caml_int64_format(cst_d$0,n)}
    function of_string_opt$1(s)
     {try
       {var _vK_=[0,caml_int64_of_string(s)];return _vK_}
      catch(_vL_)
       {_vL_ = caml_wrap_exception(_vL_);
        if(_vL_[1] === Failure)return 0;
        throw _vL_}}
    var compare$4=caml_int64_compare;
    function equal$5(x,y){return 0 === caml_int64_compare(x,y)?1:0}
    var
     Stdlib_int64=
      [0,
       zero$0,
       one$0,
       minus_one$0,
       succ$1,
       pred$1,
       abs$1,
       max_int$1,
       min_int$1,
       lognot$0,
       of_string_opt$1,
       to_string$2,
       compare$4,
       equal$5];
    caml_register_global(667,Stdlib_int64,"Stdlib__int64");
    var zero$1=0,one$1=1,minus_one$1=-1;
    function succ$2(n){return n + 1 | 0}
    function pred$2(n){return n - 1 | 0}
    function abs$2(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$2=-2147483648,max_int$2=2147483647;
    function lognot$1(n){return n ^ -1}
    function to_string$3(n){return caml_format_int(cst_d$1,n)}
    function of_string_opt$2(s)
     {try
       {var _vI_=[0,caml_int_of_string(s)];return _vI_}
      catch(_vJ_)
       {_vJ_ = caml_wrap_exception(_vJ_);
        if(_vJ_[1] === Failure)return 0;
        throw _vJ_}}
    var compare$5=caml_int_compare;
    function equal$6(x,y){return 0 === caml_int_compare(x,y)?1:0}
    var
     Stdlib_nativeint=
      [0,
       zero$1,
       one$1,
       minus_one$1,
       succ$2,
       pred$2,
       abs$2,
       size,
       max_int$2,
       min_int$2,
       lognot$1,
       of_string_opt$2,
       to_string$3,
       compare$5,
       equal$6];
    caml_register_global(668,Stdlib_nativeint,"Stdlib__nativeint");
    function engine(tbl,state,buf)
     {var result=runtime.caml_lex_engine(tbl,state,buf);
      if(0 <= result)
       {buf[11] = buf[12];
        var _vH_=buf[12];
        buf[12] = [0,_vH_[1],_vH_[2],_vH_[3],buf[4] + buf[6] | 0]}
      return result}
    function new_engine(tbl,state,buf)
     {var result=runtime.caml_new_lex_engine(tbl,state,buf);
      if(0 <= result)
       {buf[11] = buf[12];
        var _vG_=buf[12];
        buf[12] = [0,_vG_[1],_vG_[2],_vG_[3],buf[4] + buf[6] | 0]}
      return result}
    function from_function(f)
     {var
       aux_buffer=caml_create_bytes(512),
       _vu_=[0],
       _vv_=0,
       _vw_=0,
       _vx_=0,
       _vy_=0,
       _vz_=0,
       _vA_=0,
       _vB_=0,
       _vC_=caml_create_bytes(1024);
      return [0,
              function(lexbuf)
               {var
                 read=
                  caml_call2(f,aux_buffer,caml_ml_bytes_length(aux_buffer)),
                 n=0 < read?read:(lexbuf[9] = 1,0);
                if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0))
                 {if
                   (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                    <=
                    caml_ml_bytes_length(lexbuf[2]))
                   blit
                    (lexbuf[2],lexbuf[5],lexbuf[2],0,lexbuf[3] - lexbuf[5] | 0);
                  else
                   {var
                     newlen=
                      min
                       (2 * caml_ml_bytes_length(lexbuf[2]) | 0,max_string_length);
                    if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                     failwith(cst_Lexing_lex_refill_cannot_grow_buffer);
                    var newbuf=caml_create_bytes(newlen);
                    blit(lexbuf[2],lexbuf[5],newbuf,0,lexbuf[3] - lexbuf[5] | 0);
                    lexbuf[2] = newbuf}
                  var s=lexbuf[5];
                  lexbuf[4] = lexbuf[4] + s | 0;
                  lexbuf[6] = lexbuf[6] - s | 0;
                  lexbuf[5] = 0;
                  lexbuf[7] = lexbuf[7] - s | 0;
                  lexbuf[3] = lexbuf[3] - s | 0;
                  var t=lexbuf[10],_vE_=t.length - 1 - 1 | 0,_vD_=0;
                  if(! (_vE_ < 0))
                   {var i=_vD_;
                    for(;;)
                     {var v=caml_check_bound(t,i)[i + 1];
                      if(0 <= v)caml_check_bound(t,i)[i + 1] = v - s | 0;
                      var _vF_=i + 1 | 0;
                      if(_vE_ !== i){var i=_vF_;continue}
                      break}}}
                blit(aux_buffer,0,lexbuf[2],lexbuf[3],n);
                lexbuf[3] = lexbuf[3] + n | 0;
                return 0},
              _vC_,
              _vB_,
              _vA_,
              _vz_,
              _vy_,
              _vx_,
              _vw_,
              _vv_,
              _vu_,
              zero_pos,
              zero_pos]}
    function from_channel(ic)
     {return from_function(function(buf,n){return input(ic,buf,0,n)})}
    function from_string$0(s)
     {var
       _vl_=[0],
       _vm_=1,
       _vn_=0,
       _vo_=0,
       _vp_=0,
       _vq_=0,
       _vr_=0,
       _vs_=caml_ml_string_length(s),
       _vt_=of_string(s);
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _vt_,
              _vs_,
              _vr_,
              _vq_,
              _vp_,
              _vo_,
              _vn_,
              _vm_,
              _vl_,
              zero_pos,
              zero_pos]}
    function lexeme(lexbuf)
     {var len=lexbuf[6] - lexbuf[5] | 0;
      return sub_string(lexbuf[2],lexbuf[5],len)}
    function sub_lexeme(lexbuf,i1,i2)
     {var len=i2 - i1 | 0;return sub_string(lexbuf[2],i1,len)}
    function sub_lexeme_opt(lexbuf,i1,i2)
     {if(0 <= i1){var len=i2 - i1 | 0;return [0,sub_string(lexbuf[2],i1,len)]}
      return 0}
    function sub_lexeme_char(lexbuf,i){return caml_bytes_get(lexbuf[2],i)}
    function sub_lexeme_char_opt(lexbuf,i)
     {return 0 <= i?[0,caml_bytes_get(lexbuf[2],i)]:0}
    function lexeme_char(lexbuf,i)
     {return caml_bytes_get(lexbuf[2],lexbuf[5] + i | 0)}
    function lexeme_start(lexbuf){return lexbuf[11][4]}
    function lexeme_end(lexbuf){return lexbuf[12][4]}
    function lexeme_start_p(lexbuf){return lexbuf[11]}
    function lexeme_end_p(lexbuf){return lexbuf[12]}
    function new_line(lexbuf)
     {var lcp=lexbuf[12];
      lexbuf[12] = [0,lcp[1],lcp[2] + 1 | 0,lcp[4],lcp[4]];
      return 0}
    function flush_input(lb)
     {lb[6] = 0;
      lb[4] = 0;
      var _vk_=lb[12];
      lb[12] = [0,_vk_[1],_vk_[2],_vk_[3],0];
      lb[3] = 0;
      return 0}
    var
     Stdlib_lexing=
      [0,
       dummy_pos,
       from_channel,
       from_string$0,
       from_function,
       lexeme,
       lexeme_char,
       lexeme_start,
       lexeme_end,
       lexeme_start_p,
       lexeme_end_p,
       new_line,
       flush_input,
       sub_lexeme,
       sub_lexeme_opt,
       sub_lexeme_char,
       sub_lexeme_char_opt,
       engine,
       new_engine];
    caml_register_global(669,Stdlib_lexing,"Stdlib__lexing");
    var
     YYexit=[248,cst_Stdlib_Parsing_YYexit,caml_fresh_oo_id(0)],
     Parse_error=[248,cst_Stdlib_Parsing_Parse_error,caml_fresh_oo_id(0)],
     env=
      [0,
       caml_make_vect(100,0),
       caml_make_vect(100,0),
       caml_make_vect(100,dummy_pos),
       caml_make_vect(100,dummy_pos),
       100,
       0,
       0,
       0,
       dummy_pos,
       dummy_pos,
       0,
       0,
       0,
       0,
       0,
       0];
    function grow_stacks(param)
     {var
       oldsize=env[5],
       newsize=oldsize * 2 | 0,
       new_s=caml_make_vect(newsize,0),
       new_v=caml_make_vect(newsize,0),
       new_start=caml_make_vect(newsize,dummy_pos),
       new_end=caml_make_vect(newsize,dummy_pos);
      blit$1(env[1],0,new_s,0,oldsize);
      env[1] = new_s;
      blit$1(env[2],0,new_v,0,oldsize);
      env[2] = new_v;
      blit$1(env[3],0,new_start,0,oldsize);
      env[3] = new_start;
      blit$1(env[4],0,new_end,0,oldsize);
      env[4] = new_end;
      env[5] = newsize;
      return 0}
    function clear_parser(param)
     {fill$0(env[2],0,env[5],0);env[8] = 0;return 0}
    var current_lookahead_fun=[0,function(param){return 0}];
    function yyparse(tables,start,lexer,lexbuf)
     {var
       init_asp=env[11],
       init_sp=env[14],
       init_stackbase=env[6],
       init_state=env[15],
       init_curr_char=env[7],
       init_lval=env[8],
       init_errflag=env[16];
      env[6] = env[14] + 1 | 0;
      env[7] = start;
      env[10] = lexbuf[12];
      try
       {var cmd=0,arg=0;
        for(;;)
         {var match=runtime.caml_parse_engine(tables,env,cmd,arg);
          switch(match)
           {case 0:
             var arg$0=caml_call1(lexer,lexbuf);
             env[9] = lexbuf[11];
             env[10] = lexbuf[12];
             var cmd=1,arg=arg$0;
             continue;
            case 1:throw Parse_error;
            case 2:grow_stacks(0);var cmd=2,arg=0;continue;
            case 3:grow_stacks(0);var cmd=3,arg=0;continue;
            case 4:
             try
              {var
                _vf_=env[13],
                _vg_=
                 caml_call1(caml_check_bound(tables[1],_vf_)[_vf_ + 1],env),
                _vh_=4,
                cmd$0=_vh_,
                arg$1=_vg_}
             catch(_vj_)
              {_vj_ = caml_wrap_exception(_vj_);
               if(_vj_ !== Parse_error)throw _vj_;
               var cmd$0=5,arg$1=0}
             var cmd=cmd$0,arg=arg$1;
             continue;
            default:
             caml_call1(tables[14],cst_syntax_error);var cmd=5,arg=0;continue}}}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var curr_char=env[7];
        env[11] = init_asp;
        env[14] = init_sp;
        env[6] = init_stackbase;
        env[15] = init_state;
        env[7] = init_curr_char;
        env[8] = init_lval;
        env[16] = init_errflag;
        if(exn[1] === YYexit){var v=exn[2];return v}
        current_lookahead_fun[1]
        =
        function(tok)
         {if(is_block(tok))
           {var _vi_=caml_obj_tag(tok);
            return caml_check_bound(tables[3],_vi_)[_vi_ + 1] === curr_char
                    ?1
                    :0}
          return caml_check_bound(tables[2],tok)[tok + 1] === curr_char?1:0};
        throw exn}}
    function peek_val(env,n)
     {var _ve_=env[11] - n | 0;return caml_check_bound(env[2],_ve_)[_ve_ + 1]}
    function symbol_start_pos(param)
     {var i=env[12];
      for(;;)
       {if(0 < i)
         {var
           _vb_=(env[11] - i | 0) + 1 | 0,
           st=caml_check_bound(env[3],_vb_)[_vb_ + 1],
           _vc_=(env[11] - i | 0) + 1 | 0,
           en=caml_check_bound(env[4],_vc_)[_vc_ + 1];
          if(caml_notequal(st,en))return st;
          var i$0=i - 1 | 0,i=i$0;
          continue}
        var _vd_=env[11];
        return caml_check_bound(env[4],_vd_)[_vd_ + 1]}}
    function symbol_end_pos(param)
     {var _va_=env[11];return caml_check_bound(env[4],_va_)[_va_ + 1]}
    function rhs_start_pos(n)
     {var _u$_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[3],_u$_)[_u$_ + 1]}
    function rhs_end_pos(n)
     {var _u__=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[4],_u__)[_u__ + 1]}
    function symbol_start(param){return symbol_start_pos(0)[4]}
    function symbol_end(param){return symbol_end_pos(0)[4]}
    function rhs_start(n){return rhs_start_pos(n)[4]}
    function rhs_end(n){return rhs_end_pos(n)[4]}
    function is_current_lookahead(tok)
     {return caml_call1(current_lookahead_fun[1],tok)}
    function parse_error(param){return 0}
    var
     Stdlib_parsing=
      [0,
       symbol_start,
       symbol_end,
       rhs_start,
       rhs_end,
       symbol_start_pos,
       symbol_end_pos,
       rhs_start_pos,
       rhs_end_pos,
       clear_parser,
       Parse_error,
       function(_u9_){return runtime.caml_set_parser_trace(_u9_)},
       YYexit,
       yyparse,
       peek_val,
       is_current_lookahead,
       parse_error];
    caml_register_global(670,Stdlib_parsing,"Stdlib__parsing");
    var
     Stdlib_set=
      [0,
       function(Ord)
        {function height(param){if(param){var h=param[4];return h}return 0}
         function create(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           var _u8_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_u8_]}
         function bal(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[3],lv=l[2],ll=l[1],_u3_=height(lr);
               if(_u3_ <= height(ll))return create(ll,lv,create(lr,v,r));
               if(lr)
                {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_u4_=create(lrr,v,r);
                 return create(create(ll,lv,lrl),lrv,_u4_)}
               return invalid_arg(cst_Set_bal)}
             return invalid_arg(cst_Set_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[3],rv=r[2],rl=r[1],_u5_=height(rl);
               if(_u5_ <= height(rr))return create(create(l,v,rl),rv,rr);
               if(rl)
                {var rlr=rl[3],rlv=rl[2],rll=rl[1],_u6_=create(rlr,rv,rr);
                 return create(create(l,v,rll),rlv,_u6_)}
               return invalid_arg(cst_Set_bal$1)}
             return invalid_arg(cst_Set_bal$2)}
           var _u7_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_u7_]}
         function add(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return t;
             if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
             var ll=add(x,l);
             return l === ll?t:bal(ll,v,r)}
           return [0,0,x,0,1]}
         function singleton(x){return [0,0,x,0,1]}
         function add_min_element(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1];
             return bal(add_min_element(x,l),v,r)}
           return singleton(x)}
         function add_max_element(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1];
             return bal(l,v,add_max_element(x,r))}
           return singleton(x)}
         function join(l,v,r)
          {if(l)
            {if(r)
              {var
                rh=r[4],
                rr=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[4],
                lr=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?bal(ll,lv,join(lr,v,r))
                       :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
             return add_max_element(v,l)}
           return add_min_element(v,r)}
         function min_elt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _u2_=param$0[1];
               if(_u2_){var param$0=_u2_;continue}
               var v=param$0[2];
               return v}
             throw Not_found}}
         function min_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _u1_=param$0[1];
               if(_u1_){var param$0=_u1_;continue}
               var v=param$0[2];
               return [0,v]}
             return 0}}
         function max_elt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _uZ_=param$0[3],_u0_=param$0[2];
               if(_uZ_){var param$0=_uZ_;continue}
               return _u0_}
             throw Not_found}}
         function max_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _uX_=param$0[3],_uY_=param$0[2];
               if(_uX_){var param$0=_uX_;continue}
               return [0,_uY_]}
             return 0}}
         function remove_min_elt(param)
          {if(param)
            {var _uW_=param[1];
             if(_uW_)
              {var r=param[3],v=param[2];return bal(remove_min_elt(_uW_),v,r)}
             var r$0=param[3];
             return r$0}
           return invalid_arg(cst_Set_remove_min_elt)}
         function concat(t,match)
          {if(t)
            {if(match)
              {var _uV_=remove_min_elt(match);
               return join(t,min_elt(match),_uV_)}
             return t}
           return match}
         function split(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,l,1,r];
             if(0 <= c)
              {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,join(l,v,lr),pres,rr]}
             var
              match$0=split(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,join(rl,v,r)]}
           return _O_}
         var empty=0;
         function is_empty(param){return param?0:1}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v),
                _uU_=0 === c?1:0;
               if(_uU_)return _uU_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function remove(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)
              {if(l)
                {if(r)
                  {var _uT_=remove_min_elt(r);return bal(l,min_elt(r),_uT_)}
                 return l}
               return r}
             if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
             var ll=remove(x,l);
             return l === ll?t:bal(ll,v,r)}
           return 0}
         function union(t1,match)
          {if(t1)
            {if(match)
              {var
                h2=match[4],
                r2=match[3],
                v2=match[2],
                l2=match[1],
                h1=t1[4],
                r1=t1[3],
                v1=t1[2],
                l1=t1[1];
               if(h2 <= h1)
                {if(1 === h2)return add(v2,t1);
                 var
                  match$0=split(v1,match),
                  r2$0=match$0[3],
                  l2$0=match$0[1],
                  _uR_=union(r1,r2$0);
                 return join(union(l1,l2$0),v1,_uR_)}
               if(1 === h1)return add(v1,match);
               var
                match$1=split(v2,t1),
                r1$0=match$1[3],
                l1$0=match$1[1],
                _uS_=union(r1$0,r2);
               return join(union(l1$0,l2),v2,_uS_)}
             return t1}
           return match}
         function inter(s1,match)
          {if(s1)
            {if(match)
              {var
                r1=s1[3],
                v1=s1[2],
                l1=s1[1],
                _uN_=split(v1,match),
                _uO_=_uN_[1];
               if(0 === _uN_[2])
                {var r2=_uN_[3],_uP_=inter(r1,r2);
                 return concat(inter(l1,_uO_),_uP_)}
               var r2$0=_uN_[3],_uQ_=inter(r1,r2$0);
               return join(inter(l1,_uO_),v1,_uQ_)}
             return 0}
           return 0}
         function diff(t1,match)
          {if(t1)
            {if(match)
              {var
                r1=t1[3],
                v1=t1[2],
                l1=t1[1],
                _uJ_=split(v1,match),
                _uK_=_uJ_[1];
               if(0 === _uJ_[2])
                {var r2=_uJ_[3],_uL_=diff(r1,r2);
                 return join(diff(l1,_uK_),v1,_uL_)}
               var r2$0=_uJ_[3],_uM_=diff(r1,r2$0);
               return concat(diff(l1,_uK_),_uM_)}
             return t1}
           return 0}
         function cons_enum(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                s$1=s$0[1],
                e$1=[0,v,r,e$0],
                s$0=s$1,
                e$0=e$1;
               continue}
             return e$0}}
         function compare(s1,s2)
          {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[3],
                  r2=e2[2],
                  v2=e2[1],
                  e1$0=e1[3],
                  r1=e1[2],
                  v1=e1[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var
                    e2$1=cons_enum(r2,e2$0),
                    e1$1=cons_enum(r1,e1$0),
                    e1=e1$1,
                    e2=e2$1;
                   continue}
                 return c}
               return 1}
             return e2?-1:0}}
         function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
         function subset(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0)
              {if(s2$0)
                {var
                  r2=s2$0[3],
                  v2=s2$0[2],
                  l2=s2$0[1],
                  r1=s1$0[3],
                  v1=s1$0[2],
                  l1=s1$0[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var _uG_=subset(l1,l2);
                   if(_uG_){var s1$0=r1,s2$0=r2;continue}
                   return _uG_}
                 if(0 <= c)
                  {var _uH_=subset([0,0,v1,r1,0],r2);
                   if(_uH_){var s1$0=l1;continue}
                   return _uH_}
                 var _uI_=subset([0,l1,v1,0,0],l2);
                 if(_uI_){var s1$0=r1;continue}
                 return _uI_}
               return 0}
             return 1}}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[3],v=param$0[2],l=param$0[1];
               iter(f,l);
               caml_call1(f,v);
               var param$0=r;
               continue}
             return 0}}
         function fold(f,s,accu)
          {var s$0=s,accu$0=accu;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                l=s$0[1],
                accu$1=caml_call2(f,v,fold(f,l,accu$0)),
                s$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _uD_=caml_call1(p,v);
               if(_uD_)
                {var _uE_=for_all(p,l);
                 if(_uE_){var param$0=r;continue}
                 var _uF_=_uE_}
               else
                var _uF_=_uD_;
               return _uF_}
             return 1}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _uA_=caml_call1(p,v);
               if(_uA_)
                var _uB_=_uA_;
               else
                {var _uC_=exists(p,l);
                 if(! _uC_){var param$0=r;continue}
                 var _uB_=_uC_}
               return _uB_}
             return 0}}
         function filter(p,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              l$0=filter(p,l),
              pv=caml_call1(p,v),
              r$0=filter(p,r);
             if(pv){if(l === l$0)if(r === r$0)return t;return join(l$0,v,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function partition(p,param)
          {if(param)
            {var
              r=param[3],
              v=param[2],
              l=param[1],
              match=partition(p,l),
              lf=match[2],
              lt=match[1],
              pv=caml_call1(p,v),
              match$0=partition(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pv){var _uy_=concat(lf,rf);return [0,join(lt,v,rt),_uy_]}
             var _uz_=join(lf,v,rf);
             return [0,concat(lt,rt),_uz_]}
           return _P_}
         function cardinal(param)
          {if(param)
            {var r=param[3],l=param[1],_ux_=cardinal(r);
             return (cardinal(l) + 1 | 0) + _ux_ | 0}
           return 0}
         function elements_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,v,elements_aux(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function elements(s){return elements_aux(0,s)}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return v;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=l;continue}
                     var param=r;
                     continue}
                   return v0}}
               var param$1=r$0;
               continue}
             throw Not_found}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=l;continue}
                     var param=r;
                     continue}
                   return [0,v0]}}
               var param$1=r$0;
               continue}
             return 0}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=r;continue}
                     var param=l;
                     continue}
                   return v0}}
               var param$1=l$0;
               continue}
             throw Not_found}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=r;continue}
                     var param=l;
                     continue}
                   return [0,v0]}}
               var param$1=l$0;
               continue}
             return 0}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return [0,v];
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function map(f,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              l$0=map(f,l),
              v$0=caml_call1(f,v),
              r$0=map(f,r);
             if(l === l$0)if(v === v$0)if(r === r$0)return t;
             if(0 === l$0)
              var switch$0=0;
             else
              var
               _uw_=max_elt(l$0),
               switch$0=0 <= caml_call2(Ord[1],_uw_,v$0)?1:0;
             if(! switch$0)
              {if(0 === r$0)
                var switch$1=0;
               else
                var
                 _uv_=min_elt(r$0),
                 switch$1=0 <= caml_call2(Ord[1],v$0,_uv_)?1:0;
               if(! switch$1)return join(l$0,v$0,r$0)}
             return union(l$0,add(v$0,r$0))}
           return 0}
         function of_list(l)
          {if(l)
            {var _uk_=l[2],_ul_=l[1];
             if(_uk_)
              {var _um_=_uk_[2],_un_=_uk_[1];
               if(_um_)
                {var _uo_=_um_[2],_up_=_um_[1];
                 if(_uo_)
                  {var _uq_=_uo_[2],_ur_=_uo_[1];
                   if(_uq_)
                    {if(_uq_[2])
                      {var
                        l$0=sort_uniq(Ord[1],l),
                        sub=
                         function(n,l)
                          {if(! (3 < n >>> 0))
                            switch(n)
                             {case 0:return [0,0,l];
                              case 1:
                               if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                               break;
                              case 2:
                               if(l)
                                {var _us_=l[2];
                                 if(_us_)
                                  {var l$4=_us_[2],x1=_us_[1],x0$0=l[1];
                                   return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                               break;
                              default:
                               if(l)
                                {var _ut_=l[2];
                                 if(_ut_)
                                  {var _uu_=_ut_[2];
                                   if(_uu_)
                                    {var l$5=_uu_[2],x2=_uu_[1],x1$0=_ut_[1],x0$1=l[1];
                                     return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                           var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                           if(l$0)
                            {var
                              l$1=l$0[2],
                              mid=l$0[1],
                              match$0=sub((n - nl | 0) - 1 | 0,l$1),
                              l$2=match$0[2],
                              right=match$0[1];
                             return [0,create(left,mid,right),l$2]}
                           throw [0,Assert_failure,_Q_]};
                       return sub(length(l$0),l$0)[1]}
                     var x4=_uq_[1];
                     return add(x4,add(_ur_,add(_up_,add(_un_,singleton(_ul_)))))}
                   return add(_ur_,add(_up_,add(_un_,singleton(_ul_))))}
                 return add(_up_,add(_un_,singleton(_ul_)))}
               return add(_un_,singleton(_ul_))}
             return singleton(_ul_)}
           return empty}
         function add_seq(i,m)
          {return fold_left(function(s,x){return add(x,s)},m,i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(c)
            {var rest=c[3],t=c[2],x=c[1],_ui_=cons_enum(t,rest);
             return [0,x,function(_uj_){return seq_of_enum(_ui_,_uj_)}]}
           return 0}
         function to_seq(c)
          {var _ug_=cons_enum(c,0);
           return function(_uh_){return seq_of_enum(_ug_,_uh_)}}
         function to_seq_from(low,s)
          {var s$0=s,c=0;
           for(;;)
            {if(s$0)
              {var r=s$0[3],v=s$0[2],l=s$0[1],n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,r,c],s$0=l,c=c$0;continue}
                 var s$0=r;
                 continue}
               var _ue_=[0,v,r,c]}
             else
              var _ue_=c;
             return function(_uf_){return seq_of_enum(_ue_,_uf_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 singleton,
                 remove,
                 union,
                 inter,
                 diff,
                 compare,
                 equal,
                 subset,
                 iter,
                 map,
                 fold,
                 for_all,
                 exists,
                 filter,
                 partition,
                 cardinal,
                 elements,
                 min_elt,
                 min_elt_opt,
                 max_elt,
                 max_elt_opt,
                 min_elt,
                 min_elt_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 of_list,
                 to_seq_from,
                 to_seq,
                 add_seq,
                 of_seq]}];
    caml_register_global(671,Stdlib_set,"Stdlib__set");
    var
     Stdlib_map=
      [0,
       function(Ord)
        {function height(param){if(param){var h=param[5];return h}return 0}
         function create(l,x,d,r)
          {var hl=height(l),hr=height(r),_ud_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_ud_]}
         function singleton(x,d){return [0,0,x,d,0,1]}
         function bal(l,x,d,r)
          {if(l)var h=l[5],hl=h;else var hl=0;
           if(r)var h$0=r[5],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_t__=height(lr);
               if(_t__ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
               if(lr)
                {var
                  lrr=lr[4],
                  lrd=lr[3],
                  lrv=lr[2],
                  lrl=lr[1],
                  _t$_=create(lrr,x,d,r);
                 return create(create(ll,lv,ld,lrl),lrv,lrd,_t$_)}
               return invalid_arg(cst_Map_bal)}
             return invalid_arg(cst_Map_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_ua_=height(rl);
               if(_ua_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
               if(rl)
                {var
                  rlr=rl[4],
                  rld=rl[3],
                  rlv=rl[2],
                  rll=rl[1],
                  _ub_=create(rlr,rv,rd,rr);
                 return create(create(l,x,d,rll),rlv,rld,_ub_)}
               return invalid_arg(cst_Map_bal$1)}
             return invalid_arg(cst_Map_bal$2)}
           var _uc_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_uc_]}
         var empty=0;
         function is_empty(param){return param?0:1}
         function add(x,data,m)
          {if(m)
            {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return d === data?m:[0,l,x,data,r,h];
             if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=add(x,data,l);
             return l === ll?m:bal(ll,v,d,r)}
           return [0,0,x,data,0,1]}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return d;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                     var param=r;
                     continue}
                   return [0,v0,d0]}}
               var param$1=r$0;
               continue}
             throw Not_found}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                     var param=r;
                     continue}
                   return [0,[0,v0,d0]]}}
               var param$1=r$0;
               continue}
             return 0}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                     var param=l;
                     continue}
                   return [0,v0,d0]}}
               var param$1=l$0;
               continue}
             throw Not_found}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                     var param=l;
                     continue}
                   return [0,[0,v0,d0]]}}
               var param$1=l$0;
               continue}
             return 0}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return [0,d];
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v),
                _t9_=0 === c?1:0;
               if(_t9_)return _t9_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function min_binding(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _t8_=param$0[1];
               if(_t8_){var param$0=_t8_;continue}
               var d=param$0[3],v=param$0[2];
               return [0,v,d]}
             throw Not_found}}
         function min_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _t7_=param$0[1];
               if(_t7_){var param$0=_t7_;continue}
               var d=param$0[3],v=param$0[2];
               return [0,[0,v,d]]}
             return 0}}
         function max_binding(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _t4_=param$0[4],_t5_=param$0[3],_t6_=param$0[2];
               if(_t4_){var param$0=_t4_;continue}
               return [0,_t6_,_t5_]}
             throw Not_found}}
         function max_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _t1_=param$0[4],_t2_=param$0[3],_t3_=param$0[2];
               if(_t1_){var param$0=_t1_;continue}
               return [0,[0,_t3_,_t2_]]}
             return 0}}
         function remove_min_binding(param)
          {if(param)
            {var _t0_=param[1];
             if(_t0_)
              {var r=param[4],d=param[3],v=param[2];
               return bal(remove_min_binding(_t0_),v,d,r)}
             var r$0=param[4];
             return r$0}
           return invalid_arg(cst_Map_remove_min_elt)}
         function _tD_(t,match)
          {if(t)
            {if(match)
              {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
               return bal(t,x,d,remove_min_binding(match))}
             return t}
           return match}
         function remove(x,m)
          {if(m)
            {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return _tD_(l,r);
             if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=remove(x,l);
             return l === ll?m:bal(ll,v,d,r)}
           return 0}
         function update(x,f,m)
          {if(m)
            {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)
              {var match=caml_call1(f,[0,d]);
               if(match)
                {var data=match[1];return d === data?m:[0,l,x,data,r,h]}
               return _tD_(l,r)}
             if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=update(x,f,l);
             return l === ll?m:bal(ll,v,d,r)}
           var match$0=caml_call1(f,0);
           if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
           return 0}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
               iter(f,l);
               caml_call2(f,v,d);
               var param$0=r;
               continue}
             return 0}}
         function map(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=map(f,l),
              d$0=caml_call1(f,d),
              r$0=map(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function mapi(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=mapi(f,l),
              d$0=caml_call2(f,v,d),
              r$0=mapi(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function fold(f,m,accu)
          {var m$0=m,accu$0=accu;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
                m$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _tX_=caml_call2(p,v,d);
               if(_tX_)
                {var _tY_=for_all(p,l);
                 if(_tY_){var param$0=r;continue}
                 var _tZ_=_tY_}
               else
                var _tZ_=_tX_;
               return _tZ_}
             return 1}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _tU_=caml_call2(p,v,d);
               if(_tU_)
                var _tV_=_tU_;
               else
                {var _tW_=exists(p,l);
                 if(! _tW_){var param$0=r;continue}
                 var _tV_=_tW_}
               return _tV_}
             return 0}}
         function add_min_binding(k,x,param)
          {if(param)
            {var r=param[4],d=param[3],v=param[2],l=param[1];
             return bal(add_min_binding(k,x,l),v,d,r)}
           return singleton(k,x)}
         function add_max_binding(k,x,param)
          {if(param)
            {var r=param[4],d=param[3],v=param[2],l=param[1];
             return bal(l,v,d,add_max_binding(k,x,r))}
           return singleton(k,x)}
         function join(l,v,d,r)
          {if(l)
            {if(r)
              {var
                rh=r[5],
                rr=r[4],
                rd=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[5],
                lr=l[4],
                ld=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?bal(ll,lv,ld,join(lr,v,d,r))
                       :(lh + 2 | 0) < rh
                         ?bal(join(l,v,d,rl),rv,rd,rr)
                         :create(l,v,d,r)}
             return add_max_binding(v,d,l)}
           return add_min_binding(v,d,r)}
         function concat(t,match)
          {if(t)
            {if(match)
              {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
               return join(t,x,d,remove_min_binding(match))}
             return t}
           return match}
         function concat_or_join(t1,v,d,t2)
          {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
         function split(x,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,l,[0,d],r];
             if(0 <= c)
              {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,join(l,v,d,lr),pres,rr]}
             var
              match$0=split(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,join(rl,v,d,r)]}
           return _R_}
         function merge(f,s1,s2)
          {if(s1)
            {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
             if(height(s2) <= h1)
              {var
                match=split(v1,s2),
                r2=match[3],
                d2=match[2],
                l2=match[1],
                _tQ_=merge(f,r1,r2),
                _tR_=caml_call3(f,v1,[0,d1],d2);
               return concat_or_join(merge(f,l1,l2),v1,_tR_,_tQ_)}}
           else
            if(! s2)return 0;
           if(s2)
            {var
              r2$0=s2[4],
              d2$0=s2[3],
              v2=s2[2],
              l2$0=s2[1],
              match$0=split(v2,s1),
              r1$0=match$0[3],
              d1$0=match$0[2],
              l1$0=match$0[1],
              _tS_=merge(f,r1$0,r2$0),
              _tT_=caml_call3(f,v2,d1$0,[0,d2$0]);
             return concat_or_join(merge(f,l1$0,l2$0),v2,_tT_,_tS_)}
           throw [0,Assert_failure,_S_]}
         function union(f,s1,s2)
          {if(s1)
            {if(s2)
              {var
                h2=s2[5],
                r2=s2[4],
                d2=s2[3],
                v2=s2[2],
                l2=s2[1],
                h1=s1[5],
                r1=s1[4],
                d1=s1[3],
                v1=s1[2],
                l1=s1[1];
               if(h2 <= h1)
                {var
                  match=split(v1,s2),
                  r2$0=match[3],
                  d2$0=match[2],
                  l2$0=match[1],
                  l=union(f,l1,l2$0),
                  r=union(f,r1,r2$0);
                 if(d2$0)
                  {var d2$1=d2$0[1];
                   return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
                 return join(l,v1,d1,r)}
               var
                match$0=split(v2,s1),
                r1$0=match$0[3],
                d1$0=match$0[2],
                l1$0=match$0[1],
                l$0=union(f,l1$0,l2),
                r$0=union(f,r1$0,r2);
               if(d1$0)
                {var d1$1=d1$0[1];
                 return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
               return join(l$0,v2,d2,r$0)}
             var s=s1}
           else
            var s=s2;
           return s}
         function filter(p,m)
          {if(m)
            {var
              r=m[4],
              d=m[3],
              v=m[2],
              l=m[1],
              l$0=filter(p,l),
              pvd=caml_call2(p,v,d),
              r$0=filter(p,r);
             if(pvd)
              {if(l === l$0)if(r === r$0)return m;return join(l$0,v,d,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function partition(p,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              match=partition(p,l),
              lf=match[2],
              lt=match[1],
              pvd=caml_call2(p,v,d),
              match$0=partition(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pvd){var _tO_=concat(lf,rf);return [0,join(lt,v,d,rt),_tO_]}
             var _tP_=join(lf,v,d,rf);
             return [0,concat(lt,rt),_tP_]}
           return _T_}
         function cons_enum(m,e)
          {var m$0=m,e$0=e;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                m$1=m$0[1],
                e$1=[0,v,d,r,e$0],
                m$0=m$1,
                e$0=e$1;
               continue}
             return e$0}}
         function compare(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var c$0=caml_call2(cmp,d1,d2);
                   if(0 === c$0)
                    {var
                      e2$1=cons_enum(r2,e2$0),
                      e1$1=cons_enum(r1,e1$0),
                      e1=e1$1,
                      e2=e2$1;
                     continue}
                   return c$0}
                 return c}
               return 1}
             return e2?-1:0}}
         function equal(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  _tL_=0 === caml_call2(Ord[1],v1,v2)?1:0;
                 if(_tL_)
                  {var _tM_=caml_call2(cmp,d1,d2);
                   if(_tM_)
                    {var
                      e2$1=cons_enum(r2,e2$0),
                      e1$1=cons_enum(r1,e1$0),
                      e1=e1$1,
                      e2=e2$1;
                     continue}
                   var _tN_=_tM_}
                 else
                  var _tN_=_tL_;
                 return _tN_}
               return 0}
             return e2?0:1}}
         function cardinal(param)
          {if(param)
            {var r=param[4],l=param[1],_tK_=cardinal(r);
             return (cardinal(l) + 1 | 0) + _tK_ | 0}
           return 0}
         function bindings_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function bindings(s){return bindings_aux(0,s)}
         function add_seq(i,m)
          {return fold_left
                   (function(m,param)
                     {var v=param[2],k=param[1];return add(k,v,m)},
                    m,
                    i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(c)
            {var rest=c[4],t=c[3],v=c[2],k=c[1],_tI_=cons_enum(t,rest);
             return [0,[0,k,v],function(_tJ_){return seq_of_enum(_tI_,_tJ_)}]}
           return 0}
         function to_seq(m)
          {var _tG_=cons_enum(m,0);
           return function(_tH_){return seq_of_enum(_tG_,_tH_)}}
         function to_seq_from(low,m)
          {var m$0=m,c=0;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
                 var m$0=r;
                 continue}
               var _tE_=[0,v,d,r,c]}
             else
              var _tE_=c;
             return function(_tF_){return seq_of_enum(_tE_,_tF_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 update,
                 singleton,
                 remove,
                 merge,
                 union,
                 compare,
                 equal,
                 iter,
                 fold,
                 for_all,
                 exists,
                 filter,
                 partition,
                 cardinal,
                 bindings,
                 min_binding,
                 min_binding_opt,
                 max_binding,
                 max_binding_opt,
                 min_binding,
                 min_binding_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 map,
                 mapi,
                 to_seq,
                 to_seq_from,
                 add_seq,
                 of_seq]}];
    caml_register_global(672,Stdlib_map,"Stdlib__map");
    var Empty=[248,cst_Stdlib_Stack_Empty,caml_fresh_oo_id(0)];
    function create(param){return [0,0,0]}
    function clear(s){s[1] = 0;s[2] = 0;return 0}
    function copy$2(s){return [0,s[1],s[2]]}
    function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
    function pop(s)
     {var _tC_=s[1];
      if(_tC_)
       {var tl=_tC_[2],hd=_tC_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return hd}
      throw Empty}
    function top(s)
     {var _tB_=s[1];if(_tB_){var hd=_tB_[1];return hd}throw Empty}
    function is_empty(s){return 0 === s[1]?1:0}
    function length$1(s){return s[2]}
    function iter$4(f,s){return iter$0(f,s[1])}
    function fold(f,acc,s){return fold_left$0(f,acc,s[1])}
    function to_seq$3(s){return to_seq(s[1])}
    function add_seq(q,i){return iter(function(x){return push(x,q)},i)}
    function of_seq$3(g){var s=create(0);add_seq(s,g);return s}
    var
     Stdlib_stack=
      [0,
       Empty,
       create,
       push,
       pop,
       top,
       clear,
       copy$2,
       is_empty,
       length$1,
       iter$4,
       fold,
       to_seq$3,
       add_seq,
       of_seq$3];
    caml_register_global(673,Stdlib_stack,"Stdlib__stack");
    var Empty$0=[248,cst_Stdlib_Queue_Empty,caml_fresh_oo_id(0)];
    function create$0(param){return [0,0,0,0]}
    function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
    function add(x,q)
     {var cell=[0,x,0],_tA_=q[3];
      return _tA_
              ?(q[1] = q[1] + 1 | 0,_tA_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function peek(q)
     {var _tz_=q[2];if(_tz_){var content=_tz_[1];return content}throw Empty$0}
    function take(q)
     {var _tw_=q[2];
      if(_tw_)
       {var _tx_=_tw_[1],_ty_=_tw_[2];
        return _ty_?(q[1] = q[1] - 1 | 0,q[2] = _ty_,_tx_):(clear$0(q),_tx_)}
      throw Empty$0}
    function copy$3(q)
     {var q_res=[0,q[1],0,0],prev=0,cell=q[2];
      for(;;)
       {if(cell)
         {var content=cell[1],next=cell[2],res=[0,content,0];
          if(prev)prev[2] = res;else q_res[2] = res;
          var prev=res,cell=next;
          continue}
        q_res[3] = prev;
        return q_res}}
    function is_empty$0(q){return 0 === q[1]?1:0}
    function length$2(q){return q[1]}
    function iter$5(f,q)
     {var cell=q[2];
      for(;;)
       {if(cell)
         {var content=cell[1],next=cell[2];
          caml_call1(f,content);
          var cell=next;
          continue}
        return 0}}
    function fold$0(f,accu$1,q)
     {var accu=accu$1,cell=q[2];
      for(;;)
       {if(cell)
         {var
           content=cell[1],
           next=cell[2],
           accu$0=caml_call2(f,accu,content),
           accu=accu$0,
           cell=next;
          continue}
        return accu}}
    function transfer(q1,q2)
     {var _tu_=0 < q1[1]?1:0;
      if(_tu_)
       {var _tv_=q2[3];
        return _tv_
                ?(q2[1]
                  =
                  q2[1]
                  +
                  q1[1]
                  |
                  0,
                  _tv_[2]
                  =
                  q1[2],
                  q2[3]
                  =
                  q1[3],
                  clear$0(q1))
                :(q2[1] = q1[1],q2[2] = q1[2],q2[3] = q1[3],clear$0(q1))}
      return _tu_}
    function to_seq$4(q)
     {function aux(c,param)
       {if(c)
         {var x=c[1],next=c[2];
          return [0,x,function(_tt_){return aux(next,_tt_)}]}
        return 0}
      var _tr_=q[2];
      return function(_ts_){return aux(_tr_,_ts_)}}
    function add_seq$0(q,i){return iter(function(x){return add(x,q)},i)}
    function of_seq$4(g){var q=create$0(0);add_seq$0(q,g);return q}
    var
     Stdlib_queue=
      [0,
       Empty$0,
       create$0,
       add,
       add,
       take,
       take,
       peek,
       peek,
       clear$0,
       copy$3,
       is_empty$0,
       length$2,
       iter$5,
       fold$0,
       transfer,
       to_seq$4,
       add_seq$0,
       of_seq$4];
    caml_register_global(674,Stdlib_queue,"Stdlib__queue");
    var Undefined=[248,cst_CamlinternalLazy_Undefined,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function force_val_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      var result=caml_call1(closure,0);
      blk[1] = result;
      caml_obj_set_tag(blk,250);
      return result}
    function force(lzv)
     {var t=caml_obj_tag(lzv);
      return t === 250?lzv[1]:t !== 246?lzv:force_lazy_block(lzv)}
    function force_val(lzv)
     {var t=caml_obj_tag(lzv);
      return t === 250?lzv[1]:t !== 246?lzv:force_val_lazy_block(lzv)}
    var
     CamlinternalLazy=
      [0,Undefined,force_lazy_block,force_val_lazy_block,force,force_val];
    caml_register_global(675,CamlinternalLazy,"CamlinternalLazy");
    function from_fun(f){var x=caml_obj_block(246,1);x[1] = f;return x}
    function from_val(v)
     {var t=caml_obj_tag(v);
      if(t !== 250)if(t !== 246)if(t !== 253)return v;
      return runtime.caml_lazy_make_forward(v)}
    function is_val(l){return caml_obj_tag(l) !== 246?1:0}
    var
     Stdlib_lazy=
      [0,
       Undefined,
       force_val,
       from_fun,
       from_val,
       is_val,
       from_fun,
       from_val,
       is_val];
    caml_register_global(676,Stdlib_lazy,"Stdlib__lazy");
    var
     Failure$0=[248,cst_Stdlib_Stream_Failure,caml_fresh_oo_id(0)],
     Error=[248,cst_Stdlib_Stream_Error,caml_fresh_oo_id(0)];
    function count(param)
     {if(param){var match=param[1],count=match[1];return count}return 0}
    function data(param)
     {if(param){var match=param[1],data=match[2];return data}return 0}
    function fill_buff(b)
     {b[3] = input(b[1],b[2],0,caml_ml_bytes_length(b[2]));b[4] = 0;return 0}
    function get_data(count,d)
     {var d$0=d;
      for(;;)
       {if(typeof d$0 !== "number")
         switch(d$0[0])
          {case 1:
            var d2=d$0[2],d1=d$0[1],match=get_data(count,d1);
            if(typeof match === "number")
             {var d$0=d2;continue}
            else
             {if(0 === match[0])
               {var d11=match[2],a=match[1];return [0,a,[1,d11,d2]]}
              throw [0,Assert_failure,_U_]}
           case 2:
            var
             f=d$0[1],
             _tn_=caml_obj_tag(f),
             d$1=250 === _tn_?f[1]:246 === _tn_?force_lazy_block(f):f,
             d$0=d$1;
            continue;
           case 3:
            var _to_=d$0[1],_tp_=_to_[1];
            if(_tp_)
             {var _tq_=_tp_[1];
              if(_tq_){var a$0=_tq_[1];_to_[1] = 0;return [0,a$0,d$0]}
              return 0}
            var match$0=caml_call1(_to_[2],count);
            if(match$0){var a$1=match$0[1];return [0,a$1,d$0]}
            _to_[1] = _V_;
            return 0;
           case 4:
            var b=d$0[1];
            if(b[3] <= b[4])fill_buff(b);
            if(0 === b[3])return 0;
            var r=caml_bytes_unsafe_get(b[2],b[4]);
            b[4] = b[4] + 1 | 0;
            return [0,r,d$0]
           }
        return d$0}}
    function peek_data(s)
     {for(;;)
       {var _ti_=s[2];
        if(typeof _ti_ === "number")
         return 0;
        else
         switch(_ti_[0])
          {case 0:var a=_ti_[1];return [0,a];
           case 1:
            var d=get_data(s[1],s[2]);
            if(typeof d === "number")
             return 0;
            else
             {if(0 === d[0]){var a$0=d[1];s[2] = d;return [0,a$0]}
              throw [0,Assert_failure,_W_]}
           case 2:
            var
             f=_ti_[1],
             _tj_=caml_obj_tag(f),
             _tk_=250 === _tj_?f[1]:246 === _tj_?force_lazy_block(f):f;
            s[2] = _tk_;
            continue;
           case 3:
            var _tl_=_ti_[1],_tm_=_tl_[1];
            if(_tm_){var a$1=_tm_[1];return a$1}
            var x=caml_call1(_tl_[2],s[1]);
            _tl_[1] = [0,x];
            return x;
           default:
            var b=_ti_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :[0,caml_bytes_unsafe_get(b[2],b[4])]}}}
    function peek$0(param)
     {if(param){var s=param[1];return peek_data(s)}return 0}
    function junk_data(s)
     {for(;;)
       {var _tg_=s[2];
        if(typeof _tg_ !== "number")
         switch(_tg_[0])
          {case 0:var d=_tg_[2];s[1] = s[1] + 1 | 0;s[2] = d;return 0;
           case 3:
            var _th_=_tg_[1];
            if(_th_[1]){s[1] = s[1] + 1 | 0;_th_[1] = 0;return 0}
            break;
           case 4:
            var b=_tg_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :(s[1] = s[1] + 1 | 0,b[4] = b[4] + 1 | 0,0)
           }
        var match=peek_data(s);
        if(match)continue;
        return 0}}
    function junk(param)
     {if(param){var data=param[1];return junk_data(data)}return 0}
    function nget_data(n,s)
     {if(0 < n)
       {var match=peek_data(s);
        if(match)
         {var a=match[1];
          junk_data(s);
          var
           match$0=nget_data(n - 1 | 0,s),
           k=match$0[3],
           d=match$0[2],
           al=match$0[1];
          return [0,[0,a,al],[0,a,d],k + 1 | 0]}
        return [0,0,s[2],0]}
      return [0,0,s[2],0]}
    function npeek(n,param)
     {if(param)
       {var
         d$0=param[1],
         match=nget_data(n,d$0),
         len=match[3],
         d=match[2],
         al=match[1];
        d$0[1] = d$0[1] - len | 0;
        d$0[2] = d;
        return al}
      return 0}
    function next(s)
     {var match=peek$0(s);
      if(match){var a=match[1];junk(s);return a}
      throw Failure$0}
    function empty$1(s){var match=peek$0(s);if(match)throw Failure$0;return 0}
    function iter$6(f,strm)
     {for(;;)
       {var match=peek$0(strm);
        if(match){var a=match[1];junk(strm);caml_call1(f,a);continue}
        return 0}}
    function from(f){return [0,[0,0,[3,[0,0,f]]]]}
    function of_list$0(l)
     {var _tf_=0;
      return [0,[0,0,fold_right(function(x,l){return [0,x,l]},l,_tf_)]]}
    function of_string$0(s)
     {var count=[0,0];
      return from
              (function(param)
                {var c=count[1];
                 return c < caml_ml_string_length(s)
                         ?(count[1]++,[0,caml_string_get(s,c)])
                         :0})}
    function of_bytes(s)
     {var count=[0,0];
      return from
              (function(param)
                {var c=count[1];
                 return c < caml_ml_bytes_length(s)
                         ?(count[1]++,[0,caml_bytes_get(s,c)])
                         :0})}
    function of_channel(ic)
     {return [0,[0,0,[4,[0,ic,caml_create_bytes(4096),0,0]]]]}
    function iapp(i,s){var _te_=data(s);return [0,[0,0,[1,data(i),_te_]]]}
    function icons(i,s){return [0,[0,0,[0,i,data(s)]]]}
    function ising(i){return [0,[0,0,[0,i,0]]]}
    function lapp(f,s)
     {return [0,
              [0,
               0,
               [2,
                [246,
                 function(_tc_)
                  {var _td_=data(s);return [1,data(caml_call1(f,0)),_td_]}]]]]}
    function lcons(f,s)
     {return [0,
              [0,
               0,
               [2,
                [246,
                 function(_ta_)
                  {var _tb_=data(s);return [0,caml_call1(f,0),_tb_]}]]]]}
    function lsing(f)
     {return [0,[0,0,[2,[246,function(_s$_){return [0,caml_call1(f,0),0]}]]]]}
    var sempty=0;
    function slazy(f)
     {return [0,[0,0,[2,[246,function(_s__){return data(caml_call1(f,0))}]]]]}
    function dump(f,s)
     {print_string(cst_count);
      print_int(count(s));
      print_string(cst_data);
      dump_data(f,data(s));
      print_string(cst$5);
      return print_newline(0)}
    function dump_data(f,param)
     {if(typeof param === "number")
       return print_string(cst_Sempty);
      else
       switch(param[0])
        {case 0:
          var d=param[2],a=param[1];
          print_string(cst_Scons);
          caml_call1(f,a);
          print_string(cst$6);
          dump_data(f,d);
          return print_string(cst$7);
         case 1:
          var d2=param[2],d1=param[1];
          print_string(cst_Sapp);
          dump_data(f,d1);
          print_string(cst$8);
          dump_data(f,d2);
          return print_string(cst$9);
         case 2:return print_string(cst_Slazy);
         case 3:return print_string(cst_Sgen);
         default:return print_string(cst_Sbuffio)}}
    var
     Stdlib_stream=
      [0,
       Failure$0,
       Error,
       from,
       of_list$0,
       of_string$0,
       of_bytes,
       of_channel,
       iter$6,
       next,
       empty$1,
       peek$0,
       junk,
       count,
       npeek,
       iapp,
       icons,
       ising,
       lapp,
       lcons,
       lsing,
       sempty,
       slazy,
       dump];
    caml_register_global(677,Stdlib_stream,"Stdlib__stream");
    function create$1(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function to_bytes(b){return sub(b[1],0,b[2])}
    function sub$2(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((b[2] - len | 0) < ofs))return sub_string(b[1],ofs,len);
      return invalid_arg(cst_Buffer_sub)}
    function blit$2(src,srcoff,dst,dstoff,len)
     {if(0 <= len)
       if(0 <= srcoff)
        if(! ((src[2] - len | 0) < srcoff))
         if(0 <= dstoff)
          if(! ((caml_ml_bytes_length(dst) - len | 0) < dstoff))
           return caml_blit_bytes(src[1],srcoff,dst,dstoff,len);
      return invalid_arg(cst_Buffer_blit)}
    function nth$0(b,ofs)
     {if(0 <= ofs)if(! (b[2] <= ofs))return caml_bytes_unsafe_get(b[1],ofs);
      return invalid_arg(cst_Buffer_nth)}
    function length$3(b){return b[2]}
    function clear$1(b){b[2] = 0;return 0}
    function reset(b)
     {b[2] = 0;b[1] = b[4];b[3] = caml_ml_bytes_length(b[1]);return 0}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((b[2] + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(cst_Buffer_add_cannot_grow_buffer);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_utf_8_uchar(b,u)
     {if(0 <= u)
       {if(127 < u)
         {if(2047 < u)
           {if(65535 < u)
             {if(1114111 < u)throw [0,Assert_failure,_X_];
              var pos=b[2];
              if(b[3] < (pos + 4 | 0))resize(b,4);
              caml_bytes_unsafe_set(b[1],pos,240 | u >>> 18 | 0);
              caml_bytes_unsafe_set
               (b[1],pos + 1 | 0,128 | (u >>> 12 | 0) & 63);
              caml_bytes_unsafe_set(b[1],pos + 2 | 0,128 | (u >>> 6 | 0) & 63);
              caml_bytes_unsafe_set(b[1],pos + 3 | 0,128 | u & 63);
              b[2] = pos + 4 | 0;
              return 0}
            var pos$0=b[2];
            if(b[3] < (pos$0 + 3 | 0))resize(b,3);
            caml_bytes_unsafe_set(b[1],pos$0,224 | u >>> 12 | 0);
            caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,128 | (u >>> 6 | 0) & 63);
            caml_bytes_unsafe_set(b[1],pos$0 + 2 | 0,128 | u & 63);
            b[2] = pos$0 + 3 | 0;
            return 0}
          var pos$1=b[2];
          if(b[3] < (pos$1 + 2 | 0))resize(b,2);
          caml_bytes_unsafe_set(b[1],pos$1,192 | u >>> 6 | 0);
          caml_bytes_unsafe_set(b[1],pos$1 + 1 | 0,128 | u & 63);
          b[2] = pos$1 + 2 | 0;
          return 0}
        return add_char(b,u)}
      throw [0,Assert_failure,_Y_]}
    function add_utf_16be_uchar(b,u)
     {if(0 <= u)
       {if(65535 < u)
         {if(1114111 < u)throw [0,Assert_failure,_Z_];
          var
           u$0=u - 65536 | 0,
           hi=55296 | u$0 >>> 10 | 0,
           lo=56320 | u$0 & 1023,
           pos=b[2];
          if(b[3] < (pos + 4 | 0))resize(b,4);
          caml_bytes_unsafe_set(b[1],pos,hi >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 1 | 0,hi & 255);
          caml_bytes_unsafe_set(b[1],pos + 2 | 0,lo >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 3 | 0,lo & 255);
          b[2] = pos + 4 | 0;
          return 0}
        var pos$0=b[2];
        if(b[3] < (pos$0 + 2 | 0))resize(b,2);
        caml_bytes_unsafe_set(b[1],pos$0,u >>> 8 | 0);
        caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,u & 255);
        b[2] = pos$0 + 2 | 0;
        return 0}
      throw [0,Assert_failure,___]}
    function add_utf_16le_uchar(b,u)
     {if(0 <= u)
       {if(65535 < u)
         {if(1114111 < u)throw [0,Assert_failure,_$_];
          var
           u$0=u - 65536 | 0,
           hi=55296 | u$0 >>> 10 | 0,
           lo=56320 | u$0 & 1023,
           pos=b[2];
          if(b[3] < (pos + 4 | 0))resize(b,4);
          caml_bytes_unsafe_set(b[1],pos,hi & 255);
          caml_bytes_unsafe_set(b[1],pos + 1 | 0,hi >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 2 | 0,lo & 255);
          caml_bytes_unsafe_set(b[1],pos + 3 | 0,lo >>> 8 | 0);
          b[2] = pos + 4 | 0;
          return 0}
        var pos$0=b[2];
        if(b[3] < (pos$0 + 2 | 0))resize(b,2);
        caml_bytes_unsafe_set(b[1],pos$0,u & 255);
        caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,u >>> 8 | 0);
        b[2] = pos$0 + 2 | 0;
        return 0}
      throw [0,Assert_failure,_aa_]}
    function add_substring(b,s,offset,len)
     {var _s7_=offset < 0?1:0;
      if(_s7_)
       var _s8_=_s7_;
      else
       var
        _s9_=len < 0?1:0,
        _s8_=_s9_ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
      if(_s8_)invalid_arg(cst_Buffer_add_substring_add_subbytes);
      var new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,offset,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_subbytes(b,s,offset,len)
     {return add_substring(b,caml_string_of_bytes(s),offset,len)}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_bytes(b,s){return add_string(b,caml_string_of_bytes(s))}
    function add_buffer(b,bs){return add_subbytes(b,bs[1],0,bs[2])}
    function add_channel(b,ic,len$1)
     {var _s5_=len$1 < 0?1:0,_s6_=_s5_ || (max_string_length < len$1?1:0);
      if(_s6_)invalid_arg(cst_Buffer_add_channel);
      if(b[3] < (b[2] + len$1 | 0))resize(b,len$1);
      var len=len$1;
      for(;;)
       {var _s4_=0 < len?1:0;
        if(_s4_)
         {var n=input(ic,b[1],b[2],len);
          b[2] = b[2] + n | 0;
          if(0 === n)throw End_of_file;
          var len$0=len - n | 0,len=len$0;
          continue}
        return _s4_}}
    function output_buffer(oc,b){return output(oc,b[1],0,b[2])}
    function add_substitute(b,f,s)
     {var lim$1=caml_ml_string_length(s),previous=32,i$7=0;
      for(;;)
       {if(i$7 < lim$1)
         {var current=caml_string_get(s,i$7);
          if(36 === current)
           {if(92 === previous)
             {add_char(b,current);
              var i$8=i$7 + 1 | 0,previous=32,i$7=i$8;
              continue}
            var start=i$7 + 1 | 0;
            if(lim$1 <= start)throw Not_found;
            var opening=caml_string_get(s,start);
            if(40 === opening)
             var switch$0=0;
            else
             if(123 === opening)
              var switch$0=0;
             else
              {var i$6=start + 1 | 0,lim$0=caml_ml_string_length(s),i$3=i$6;
               for(;;)
                {if(lim$0 <= i$3)
                  var stop=lim$0;
                 else
                  {var
                    match=caml_string_get(s,i$3),
                    switch$1=
                     91 <= match
                      ?97 <= match?123 <= match?0:1:95 === match?1:0
                      :58 <= match?65 <= match?1:0:48 <= match?1:0;
                   if(switch$1){var i$4=i$3 + 1 | 0,i$3=i$4;continue}
                   var stop=i$3}
                 var
                  match$0=[0,sub$0(s,start,stop - start | 0),stop],
                  switch$0=1;
                 break}}
            if(! switch$0)
             {var i$5=start + 1 | 0,k$2=0;
              if(40 === opening)
               var _s2_=41;
              else
               {if(123 !== opening)throw [0,Assert_failure,_ab_];var _s2_=125}
              var lim=caml_ml_string_length(s),k=k$2,i=i$5;
              for(;;)
               {if(lim <= i)throw Not_found;
                if(caml_string_get(s,i) === opening)
                 {var i$0=i + 1 | 0,k$0=k + 1 | 0,k=k$0,i=i$0;continue}
                if(caml_string_get(s,i) !== _s2_)
                 {var i$2=i + 1 | 0,i=i$2;continue}
                if(0 !== k)
                 {var i$1=i + 1 | 0,k$1=k - 1 | 0,k=k$1,i=i$1;continue}
                var
                 match$0=
                  [0,sub$0(s,i$5,(i - start | 0) - 1 | 0),i + 1 | 0];
                break}}
            var next_i=match$0[2],ident=match$0[1];
            add_string(b,caml_call1(f,ident));
            var previous=32,i$7=next_i;
            continue}
          if(92 === previous)
           {add_char(b,92);
            add_char(b,current);
            var i$9=i$7 + 1 | 0,previous=32,i$7=i$9;
            continue}
          if(92 === current)
           {var i$10=i$7 + 1 | 0,previous=current,i$7=i$10;continue}
          add_char(b,current);
          var i$11=i$7 + 1 | 0,previous=current,i$7=i$11;
          continue}
        var _s3_=92 === previous?1:0;
        return _s3_?add_char(b,previous):_s3_}}
    function truncate(b,len)
     {if(0 <= len)if(! (b[2] < len)){b[2] = len;return 0}
      return invalid_arg(cst_Buffer_truncate)}
    function to_seq$5(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_get(b[1],i),_s0_=i + 1 | 0;
        return [0,x,function(_s1_){return aux(_s0_,_s1_)}]}
      var _sY_=0;
      return function(_sZ_){return aux(_sY_,_sZ_)}}
    function to_seqi$2(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_get(b[1],i),_sW_=i + 1 | 0;
        return [0,[0,i,x],function(_sX_){return aux(_sW_,_sX_)}]}
      var _sU_=0;
      return function(_sV_){return aux(_sU_,_sV_)}}
    function add_seq$1(b,seq)
     {return iter(function(_sT_){return add_char(b,_sT_)},seq)}
    function of_seq$5(i){var b=create$1(32);add_seq$1(b,i);return b}
    var
     Stdlib_buffer=
      [0,
       create$1,
       contents,
       to_bytes,
       sub$2,
       blit$2,
       nth$0,
       length$3,
       clear$1,
       reset,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       output_buffer,
       truncate,
       to_seq$5,
       to_seqi$2,
       add_seq$1,
       of_seq$5];
    caml_register_global(678,Stdlib_buffer,"Stdlib__buffer");
    function create_char_set(param){return make(32,0)}
    function add_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return caml_bytes_set
              (char_set,
               str_ind,
               char_of_int(caml_bytes_get(char_set,str_ind) | mask))}
    function freeze_char_set(char_set){return to_string(char_set)}
    function rev_char_set(char_set)
     {var char_set$0=create_char_set(0),i=0;
      for(;;)
       {caml_bytes_set
         (char_set$0,i,char_of_int(caml_string_get(char_set,i) ^ 255));
        var _sS_=i + 1 | 0;
        if(31 !== i){var i=_sS_;continue}
        return caml_string_of_bytes(char_set$0)}}
    function is_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return 0 !== (caml_string_get(char_set,str_ind) & mask)?1:0}
    function pad_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return [0,1,width]}return 0}
    function param_format_of_ignored_format(ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return [0,[0,fmt]];
         case 1:return [0,[1,fmt]];
         case 2:return [0,[19,fmt]];
         default:return [0,[22,fmt]]}
      else
       switch(ign[0])
        {case 0:var pad_opt=ign[1];return [0,[2,pad_of_pad_opt(pad_opt),fmt]];
         case 1:
          var pad_opt$0=ign[1];return [0,[3,pad_of_pad_opt(pad_opt$0),fmt]];
         case 2:
          var pad_opt$1=ign[2],iconv=ign[1];
          return [0,[4,iconv,pad_of_pad_opt(pad_opt$1),0,fmt]];
         case 3:
          var pad_opt$2=ign[2],iconv$0=ign[1];
          return [0,[5,iconv$0,pad_of_pad_opt(pad_opt$2),0,fmt]];
         case 4:
          var pad_opt$3=ign[2],iconv$1=ign[1];
          return [0,[6,iconv$1,pad_of_pad_opt(pad_opt$3),0,fmt]];
         case 5:
          var pad_opt$4=ign[2],iconv$2=ign[1];
          return [0,[7,iconv$2,pad_of_pad_opt(pad_opt$4),0,fmt]];
         case 6:
          var prec_opt=ign[2],pad_opt$5=ign[1];
          if(prec_opt)var ndec=prec_opt[1],_sR_=[0,ndec];else var _sR_=0;
          return [0,[8,0,pad_of_pad_opt(pad_opt$5),_sR_,fmt]];
         case 7:
          var pad_opt$6=ign[1];return [0,[9,pad_of_pad_opt(pad_opt$6),fmt]];
         case 8:
          var fmtty=ign[2],pad_opt$7=ign[1];
          return [0,[13,pad_opt$7,fmtty,fmt]];
         case 9:
          var fmtty$0=ign[2],pad_opt$8=ign[1];
          return [0,[14,pad_opt$8,fmtty$0,fmt]];
         case 10:
          var char_set=ign[2],width_opt=ign[1];
          return [0,[20,width_opt,char_set,fmt]];
         default:var counter=ign[1];return [0,[21,counter,fmt]]}}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _sP_=len < min_len?1:0;
      if(_sP_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _sQ_=0}
      else
       var _sQ_=_sP_;
      return _sQ_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function char_of_iconv(iconv)
     {switch(iconv)
       {case 12:return 117;
        case 6:
        case 7:return 120;
        case 8:
        case 9:return 88;
        case 10:
        case 11:return 111;
        case 0:
        case 1:
        case 2:return 100;
        default:return 105}}
    function char_of_fconv(fconv)
     {switch(fconv)
       {case 15:return 70;
        case 0:
        case 1:
        case 2:return 102;
        case 3:
        case 4:
        case 5:return 101;
        case 6:
        case 7:
        case 8:return 69;
        case 9:
        case 10:
        case 11:return 103;
        case 12:
        case 13:
        case 14:return 71;
        case 16:
        case 17:
        case 18:return 104;
        default:return 72}}
    function bprint_padty(buf,padty)
     {switch(padty)
       {case 0:return buffer_add_char(buf,45);
        case 1:return 0;
        default:return buffer_add_char(buf,48)}}
    function bprint_ignored_flag(buf,ign_flag)
     {return ign_flag?buffer_add_char(buf,95):ign_flag}
    function bprint_pad_opt(buf,pad_opt)
     {if(pad_opt)
       {var width=pad_opt[1];
        return buffer_add_string(buf,caml_new_string("" + width))}
      return 0}
    function bprint_padding(buf,pad)
     {if(typeof pad === "number")
       return 0;
      else
       {if(0 === pad[0])
         {var n=pad[2],padty=pad[1];
          bprint_padty(buf,padty);
          return buffer_add_string(buf,caml_new_string("" + n))}
        var padty$0=pad[1];
        bprint_padty(buf,padty$0);
        return buffer_add_char(buf,42)}}
    function bprint_precision(buf,prec)
     {if(typeof prec === "number")
       return 0 === prec?0:buffer_add_string(buf,cst$10);
      var n=prec[1];
      buffer_add_char(buf,46);
      return buffer_add_string(buf,caml_new_string("" + n))}
    function bprint_iconv_flag(buf,iconv)
     {switch(iconv)
       {case 1:
        case 4:return buffer_add_char(buf,43);
        case 2:
        case 5:return buffer_add_char(buf,32);
        case 7:
        case 9:
        case 11:return buffer_add_char(buf,35);
        default:return 0}}
    function bprint_altint_fmt(buf,ign_flag,iconv,pad,prec,c)
     {buffer_add_char(buf,37);
      bprint_ignored_flag(buf,ign_flag);
      bprint_iconv_flag(buf,iconv);
      bprint_padding(buf,pad);
      bprint_precision(buf,prec);
      buffer_add_char(buf,c);
      return buffer_add_char(buf,char_of_iconv(iconv))}
    function bprint_fconv_flag(buf,fconv)
     {switch(fconv)
       {case 1:
        case 4:
        case 7:
        case 10:
        case 13:
        case 17:
        case 20:return buffer_add_char(buf,43);
        case 2:
        case 5:
        case 8:
        case 11:
        case 14:
        case 18:
        case 21:return buffer_add_char(buf,32);
        default:return 0}}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return cst$11;
         case 1:return cst$12;
         case 2:return cst$13;
         case 3:return cst$14;
         case 4:return cst$15;
         case 5:return cst$16;
         default:return cst$17}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return _g_(cst$18,make$0(1,c))}}
    function string_of_formatting_gen(formatting_gen)
     {if(0 === formatting_gen[0])
       {var match=formatting_gen[1],str=match[2];return str}
      var match$0=formatting_gen[1],str$0=match$0[2];
      return str$0}
    function bprint_char_literal(buf,chr)
     {return 37 === chr?buffer_add_string(buf,cst$19):buffer_add_char(buf,chr)}
    function bprint_string_literal(buf,str)
     {var _sN_=caml_ml_string_length(str) - 1 | 0,_sM_=0;
      if(! (_sN_ < 0))
       {var i=_sM_;
        for(;;)
         {bprint_char_literal(buf,caml_string_get(str,i));
          var _sO_=i + 1 | 0;
          if(_sN_ !== i){var i=_sO_;continue}
          break}}
      return 0}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,cst_c);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,cst_s);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,cst_i);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,cst_li);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,cst_ni);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,cst_Li);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,cst_f);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,cst_B);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,cst$20);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,cst$21);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,cst$22);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,cst$23);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,cst_a);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,cst_t$0);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,cst$24);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,cst_r$0);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,cst_r$1);
           var fmtty$0=rest$13;
           continue}}
    function int_of_custom_arity(param)
     {if(param){var x=param[1];return 1 + int_of_custom_arity(x) | 0}return 0}
    function string_of_fmt(fmt$1)
     {var buf=buffer_create(16),fmt=fmt$1,ign_flag=0;
      a:
      for(;;)
       if(typeof fmt === "number")
        return buffer_contents(buf);
       else
        switch(fmt[0])
         {case 0:
           var rest=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,99);
           var fmt=rest,ign_flag=0;
           continue;
          case 1:
           var rest$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,67);
           var fmt=rest$0,ign_flag=0;
           continue;
          case 2:
           var rest$1=fmt[2],pad=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad);
           buffer_add_char(buf,115);
           var fmt=rest$1,ign_flag=0;
           continue;
          case 3:
           var rest$2=fmt[2],pad$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad$0);
           buffer_add_char(buf,83);
           var fmt=rest$2,ign_flag=0;
           continue;
          case 4:
           var rest$3=fmt[4],prec=fmt[3],pad$1=fmt[2],iconv=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_iconv_flag(buf,iconv);
           bprint_padding(buf,pad$1);
           bprint_precision(buf,prec);
           buffer_add_char(buf,char_of_iconv(iconv));
           var fmt=rest$3,ign_flag=0;
           continue;
          case 5:
           var rest$4=fmt[4],prec$0=fmt[3],pad$2=fmt[2],iconv$0=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$0,pad$2,prec$0,108);
           var fmt=rest$4,ign_flag=0;
           continue;
          case 6:
           var rest$5=fmt[4],prec$1=fmt[3],pad$3=fmt[2],iconv$1=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$1,pad$3,prec$1,110);
           var fmt=rest$5,ign_flag=0;
           continue;
          case 7:
           var rest$6=fmt[4],prec$2=fmt[3],pad$4=fmt[2],iconv$2=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$2,pad$4,prec$2,76);
           var fmt=rest$6,ign_flag=0;
           continue;
          case 8:
           var rest$7=fmt[4],prec$3=fmt[3],pad$5=fmt[2],fconv=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_fconv_flag(buf,fconv);
           bprint_padding(buf,pad$5);
           bprint_precision(buf,prec$3);
           buffer_add_char(buf,char_of_fconv(fconv));
           var fmt=rest$7,ign_flag=0;
           continue;
          case 9:
           var rest$8=fmt[2],pad$6=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad$6);
           buffer_add_char(buf,66);
           var fmt=rest$8,ign_flag=0;
           continue;
          case 10:
           var rest$9=fmt[1];
           buffer_add_string(buf,cst$25);
           var fmt=rest$9;
           continue;
          case 11:
           var rest$10=fmt[2],str=fmt[1];
           bprint_string_literal(buf,str);
           var fmt=rest$10;
           continue;
          case 12:
           var rest$11=fmt[2],chr$0=fmt[1];
           bprint_char_literal(buf,chr$0);
           var fmt=rest$11;
           continue;
          case 13:
           var rest$12=fmt[3],fmtty=fmt[2],pad_opt=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,pad_opt);
           buffer_add_char(buf,123);
           bprint_fmtty(buf,fmtty);
           buffer_add_char(buf,37);
           buffer_add_char(buf,125);
           var fmt=rest$12,ign_flag=0;
           continue;
          case 14:
           var rest$13=fmt[3],fmtty$0=fmt[2],pad_opt$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,pad_opt$0);
           buffer_add_char(buf,40);
           bprint_fmtty(buf,fmtty$0);
           buffer_add_char(buf,37);
           buffer_add_char(buf,41);
           var fmt=rest$13,ign_flag=0;
           continue;
          case 15:
           var rest$14=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,97);
           var fmt=rest$14,ign_flag=0;
           continue;
          case 16:
           var rest$15=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,116);
           var fmt=rest$15,ign_flag=0;
           continue;
          case 17:
           var rest$16=fmt[2],fmting_lit=fmt[1];
           bprint_string_literal(buf,string_of_formatting_lit(fmting_lit));
           var fmt=rest$16;
           continue;
          case 18:
           var rest$17=fmt[2],fmting_gen=fmt[1];
           bprint_string_literal(buf,cst$26);
           bprint_string_literal(buf,string_of_formatting_gen(fmting_gen));
           var fmt=rest$17;
           continue;
          case 19:
           var rest$18=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,114);
           var fmt=rest$18,ign_flag=0;
           continue;
          case 20:
           var rest$19=fmt[3],char_set=fmt[2],width_opt=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,width_opt);
           var
            print_char=
             function(buf,i)
              {var c=char_of_int(i);
               return 37 === c
                       ?(buffer_add_char(buf,37),buffer_add_char(buf,37))
                       :64 === c
                         ?(buffer_add_char(buf,37),buffer_add_char(buf,64))
                         :buffer_add_char(buf,c)};
           buffer_add_char(buf,91);
           var
            _sC_=
             is_in_char_set(char_set,0)
              ?(buffer_add_char(buf,94),rev_char_set(char_set))
              :char_set,
            is_alone$0=
             function(_sH_)
              {function is_alone(c)
                {var
                  after=chr(c + 1 | 0),
                  before=chr(c - 1 | 0),
                  _sI_=is_in_char_set(_sH_,c);
                 if(_sI_)
                  var
                   _sJ_=is_in_char_set(_sH_,before),
                   _sK_=_sJ_?is_in_char_set(_sH_,after):_sJ_,
                   _sL_=1 - _sK_;
                 else
                  var _sL_=_sI_;
                 return _sL_}
               return is_alone},
            is_alone=is_alone$0(_sC_);
           if(is_alone(93))buffer_add_char(buf,93);
           var i=1;
           b:
           for(;;)
            {if(i < 256)
              {if(! is_in_char_set(_sC_,char_of_int(i)))
                {var i$0=i + 1 | 0,i=i$0;continue}
               var match=char_of_int(i),switcher=match - 45 | 0;
               if(48 < switcher >>> 0)
                var switch$0=210 <= switcher?(print_char(buf,255),1):0;
               else
                {var switcher$0=switcher - 1 | 0;
                 if(46 < switcher$0 >>> 0){var i$2=i + 1 | 0,i=i$2;continue}
                 var switch$0=0}
               if(! switch$0)
                {var i$1=i + 1 | 0;
                 if(! is_in_char_set(_sC_,char_of_int(i$1)))
                  {print_char(buf,i$1 - 1 | 0);
                   var i$6=i$1 + 1 | 0,i=i$6;
                   continue}
                 var match$0=char_of_int(i$1),switcher$1=match$0 - 45 | 0;
                 if(48 < switcher$1 >>> 0)
                  var
                   switch$1=
                    210 <= switcher$1
                     ?(print_char(buf,254),print_char(buf,255),1)
                     :0;
                 else
                  {var switcher$2=switcher$1 - 1 | 0;
                   if(46 < switcher$2 >>> 0)
                    {if(! is_in_char_set(_sC_,char_of_int(i$1 + 1 | 0)))
                      {print_char(buf,i$1 - 1 | 0);
                       var i$5=i$1 + 1 | 0,i=i$5;
                       continue}
                     var switch$1=0}
                   else
                    var switch$1=0}
                 if(! switch$1)
                  {if(! is_in_char_set(_sC_,char_of_int(i$1 + 1 | 0)))
                    {print_char(buf,i$1 - 1 | 0);
                     print_char(buf,i$1);
                     var i$4=i$1 + 2 | 0,i=i$4;
                     continue}
                   var j=i$1 + 2 | 0,i$3=i$1 - 1 | 0,j$0=j;
                   for(;;)
                    {if(256 !== j$0)
                      if(is_in_char_set(_sC_,char_of_int(j$0)))
                       {var j$1=j$0 + 1 | 0,j$0=j$1;continue}
                     print_char(buf,i$3);
                     print_char(buf,45);
                     print_char(buf,j$0 - 1 | 0);
                     if(j$0 < 256){var i$7=j$0 + 1 | 0,i=i$7;continue b}
                     break}}}}
             if(is_alone(45))buffer_add_char(buf,45);
             buffer_add_char(buf,93);
             var fmt=rest$19,ign_flag=0;
             continue a}
          case 21:
           var rest$20=fmt[2],counter=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           switch(counter)
            {case 0:var _sD_=108;break;
             case 1:var _sD_=110;break;
             default:var _sD_=78}
           buffer_add_char(buf,_sD_);
           var fmt=rest$20,ign_flag=0;
           continue;
          case 22:
           var rest$21=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_string_literal(buf,cst_0c);
           var fmt=rest$21,ign_flag=0;
           continue;
          case 23:
           var
            rest$22=fmt[2],
            ign=fmt[1],
            match$1=param_format_of_ignored_format(ign,rest$22),
            fmt$0=match$1[1],
            fmt=fmt$0,
            ign_flag=1;
           continue;
          default:
           var
            rest$23=fmt[3],
            arity=fmt[1],
            _sF_=int_of_custom_arity(arity),
            _sE_=1;
           if(! (_sF_ < 1))
            {var i$8=_sE_;
             for(;;)
              {buffer_add_char(buf,37);
               bprint_ignored_flag(buf,ign_flag);
               buffer_add_char(buf,63);
               var _sG_=i$8 + 1 | 0;
               if(_sF_ !== i$8){var i$8=_sG_;continue}
               break}}
           var fmt=rest$23,ign_flag=0;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _se_=function(param){return 0},
         _sf_=function(param){return 0},
         _sg_=function(param){return 0};
        return [0,function(param){return 0},_sg_,_sf_,_se_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _sh_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_sh_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _si_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _si_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _sj_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _sj_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _sk_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _sk_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _sl_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _sl_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _sm_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _sm_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _sn_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _sn_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _so_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _so_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _sp_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _sp_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _sq_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _sr_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _ss_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _ss_,
                  _sr_,
                  _sq_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _st_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _st_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _su_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _su_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _sv_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _sv_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _sw_=function(param){caml_call1(de$12,0);return 0},
           _sx_=function(param){caml_call1(ed$12,0);return 0},
           _sy_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _sy_,
                  _sx_,
                  _sw_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _sz_=function(param){caml_call1(de$13,0);return 0},
           _sA_=function(param){caml_call1(ed$13,0);return 0},
           _sB_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _sB_,
                  _sA_,
                  _sz_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_ac_]}
      else
       switch(ty1[0])
        {case 0:
          var _rX_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_rX_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _rY_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_rY_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _rZ_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_rZ_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _r0_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_r0_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _r1_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_r1_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _r2_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_r2_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _r3_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_r3_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _r4_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_r4_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _r5_=ty1[2],_r6_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_r7_=trans(_r5_,rest2$7);
              return [8,trans(_r6_,ty2),_r7_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_al_];
          break;
         case 9:
          var _r8_=ty1[3],_r9_=ty1[2],_r__=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_r9_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_r__,ty22,trans(_r8_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_am_];
          break;
         case 10:
          var _r$_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_r$_,rest2$9)]}
          throw [0,Assert_failure,_an_];
         case 11:
          var _sa_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_sa_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_ao_];
          break;
         case 12:
          var _sb_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_sb_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_ap_];
          break;
         case 13:
          var _sc_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_sc_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_aq_];
          break;
         default:
          var _sd_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_sd_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_ar_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_af_];
        case 1:throw [0,Assert_failure,_ag_];
        case 2:throw [0,Assert_failure,_ah_];
        case 3:throw [0,Assert_failure,_ai_];
        case 4:throw [0,Assert_failure,_aj_];
        case 5:throw [0,Assert_failure,_ad_];
        case 6:throw [0,Assert_failure,_ae_];
        default:throw [0,Assert_failure,_ak_]}}
    function fmtty_of_padding_fmtty(pad,fmtty)
     {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
    function fmtty_of_custom(arity,fmtty)
     {if(arity)
       {var arity$0=arity[1];return [12,fmtty_of_custom(arity$0,fmtty)]}
      return fmtty}
    function fmtty_of_fmt(fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];return [0,fmtty_of_fmt(rest)];
          case 1:var rest$0=fmtty$0[1];return [0,fmtty_of_fmt(rest$0)];
          case 2:
           var rest$1=fmtty$0[2],pad=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad,[1,fmtty_of_fmt(rest$1)]);
          case 3:
           var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$0,[1,fmtty_of_fmt(rest$2)]);
          case 4:
           var
            rest$3=fmtty$0[4],
            prec=fmtty$0[3],
            pad$1=fmtty$0[2],
            ty_rest=fmtty_of_fmt(rest$3),
            prec_ty=fmtty_of_precision_fmtty(prec,[2,ty_rest]);
           return fmtty_of_padding_fmtty(pad$1,prec_ty);
          case 5:
           var
            rest$4=fmtty$0[4],
            prec$0=fmtty$0[3],
            pad$2=fmtty$0[2],
            ty_rest$0=fmtty_of_fmt(rest$4),
            prec_ty$0=fmtty_of_precision_fmtty(prec$0,[3,ty_rest$0]);
           return fmtty_of_padding_fmtty(pad$2,prec_ty$0);
          case 6:
           var
            rest$5=fmtty$0[4],
            prec$1=fmtty$0[3],
            pad$3=fmtty$0[2],
            ty_rest$1=fmtty_of_fmt(rest$5),
            prec_ty$1=fmtty_of_precision_fmtty(prec$1,[4,ty_rest$1]);
           return fmtty_of_padding_fmtty(pad$3,prec_ty$1);
          case 7:
           var
            rest$6=fmtty$0[4],
            prec$2=fmtty$0[3],
            pad$4=fmtty$0[2],
            ty_rest$2=fmtty_of_fmt(rest$6),
            prec_ty$2=fmtty_of_precision_fmtty(prec$2,[5,ty_rest$2]);
           return fmtty_of_padding_fmtty(pad$4,prec_ty$2);
          case 8:
           var
            rest$7=fmtty$0[4],
            prec$3=fmtty$0[3],
            pad$5=fmtty$0[2],
            ty_rest$3=fmtty_of_fmt(rest$7),
            prec_ty$3=fmtty_of_precision_fmtty(prec$3,[6,ty_rest$3]);
           return fmtty_of_padding_fmtty(pad$5,prec_ty$3);
          case 9:
           var rest$8=fmtty$0[2],pad$6=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$6,[7,fmtty_of_fmt(rest$8)]);
          case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
          case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
          case 13:
           var rest$9=fmtty$0[3],ty=fmtty$0[2];
           return [8,ty,fmtty_of_fmt(rest$9)];
          case 14:
           var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
           return [9,ty$0,ty$0,fmtty_of_fmt(rest$10)];
          case 15:var rest$11=fmtty$0[1];return [10,fmtty_of_fmt(rest$11)];
          case 16:var rest$12=fmtty$0[1];return [11,fmtty_of_fmt(rest$12)];
          case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
          case 18:
           var
            rest$13=fmtty$0[2],
            fmting_gen=fmtty$0[1],
            _rV_=fmtty_of_fmt(rest$13);
           if(0 === fmting_gen[0])
            var match=fmting_gen[1],fmt=match[1],_rW_=fmtty_of_fmt(fmt);
           else
            var
             match$0=fmting_gen[1],
             fmt$0=match$0[1],
             _rW_=fmtty_of_fmt(fmt$0);
           return concat_fmtty(_rW_,_rV_);
          case 19:var rest$14=fmtty$0[1];return [13,fmtty_of_fmt(rest$14)];
          case 20:var rest$15=fmtty$0[3];return [1,fmtty_of_fmt(rest$15)];
          case 21:var rest$16=fmtty$0[2];return [2,fmtty_of_fmt(rest$16)];
          case 22:var rest$17=fmtty$0[1];return [0,fmtty_of_fmt(rest$17)];
          case 23:
           var rest$18=fmtty$0[2],ign=fmtty$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:return [14,fmtty_of_fmt(rest$18)];
              default:var fmtty$0=rest$18;continue}
           else
            switch(ign[0])
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:var fmtty$0=rest$18;continue;
              case 3:var fmtty$0=rest$18;continue;
              case 4:var fmtty$0=rest$18;continue;
              case 5:var fmtty$0=rest$18;continue;
              case 6:var fmtty$0=rest$18;continue;
              case 7:var fmtty$0=rest$18;continue;
              case 8:var fmtty$0=rest$18;continue;
              case 9:
               var fmtty$5=ign[2];
               return concat_fmtty(fmtty$5,fmtty_of_fmt(rest$18));
              case 10:var fmtty$0=rest$18;continue;
              default:var fmtty$0=rest$18;continue}
          default:
           var rest$19=fmtty$0[3],arity=fmtty$0[1];
           return fmtty_of_custom(arity,fmtty_of_fmt(rest$19))}}
    function fmtty_of_precision_fmtty(prec,fmtty)
     {return typeof prec === "number"?0 === prec?fmtty:[2,fmtty]:fmtty}
    var
     Type_mismatch=
      [248,cst_CamlinternalFormat_Type_mismatch,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _rU_=match[2];
        if(typeof _rU_ !== "number" && 2 === _rU_[0])
         {var rest$0=_rU_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_format(fmt,fmtty)
     {var _rT_=type_format_gen(fmt,fmtty);
      if(typeof _rT_[2] === "number"){var fmt$0=_rT_[1];return fmt$0}
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _ro_=type_padding(pad,fmtty),
           _rp_=_ro_[2],
           _rq_=_ro_[1];
          if(typeof _rp_ !== "number" && 1 === _rp_[0])
           {var
             fmtty_rest$1=_rp_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_rq_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _rr_=type_padding(pad$0,fmtty),
           _rs_=_rr_[2],
           _rt_=_rr_[1];
          if(typeof _rs_ !== "number" && 1 === _rs_[0])
           {var
             fmtty_rest$2=_rs_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_rt_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _ru_=type_padprec(pad$1,prec,fmtty),
           _rv_=_ru_[3],
           _rw_=_ru_[2],
           _rx_=_ru_[1];
          if(typeof _rv_ !== "number" && 2 === _rv_[0])
           {var
             fmtty_rest$3=_rv_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_rx_,_rw_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _ry_=type_padprec(pad$2,prec$0,fmtty),
           _rz_=_ry_[3],
           _rA_=_ry_[2],
           _rB_=_ry_[1];
          if(typeof _rz_ !== "number" && 3 === _rz_[0])
           {var
             fmtty_rest$4=_rz_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_rB_,_rA_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _rC_=type_padprec(pad$3,prec$1,fmtty),
           _rD_=_rC_[3],
           _rE_=_rC_[2],
           _rF_=_rC_[1];
          if(typeof _rD_ !== "number" && 4 === _rD_[0])
           {var
             fmtty_rest$5=_rD_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_rF_,_rE_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _rG_=type_padprec(pad$4,prec$2,fmtty),
           _rH_=_rG_[3],
           _rI_=_rG_[2],
           _rJ_=_rG_[1];
          if(typeof _rH_ !== "number" && 5 === _rH_[0])
           {var
             fmtty_rest$6=_rH_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_rJ_,_rI_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _rK_=type_padprec(pad$5,prec$3,fmtty),
           _rL_=_rK_[3],
           _rM_=_rK_[2],
           _rN_=_rK_[1];
          if(typeof _rL_ !== "number" && 6 === _rL_[0])
           {var
             fmtty_rest$7=_rL_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_rN_,_rM_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           _rO_=type_padding(pad$6,fmtty),
           _rP_=_rO_[2],
           _rQ_=_rO_[1];
          if(typeof _rP_ !== "number" && 7 === _rP_[0])
           {var
             fmtty_rest$8=_rP_[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,_rQ_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _rR_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_rR_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _rS_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_rS_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_rS_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _rm_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_rm_))
             throw Type_mismatch;
            var _rn_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_rn_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function recast(fmt,fmtty){return type_format(fmt,erase_rel(symm(fmtty)))}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _rl_=2 === padty$0?48:32,res=make(width$0,_rl_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(! switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(! switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(! switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return caml_string_of_bytes(res$1)}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return caml_string_of_bytes(res$0)}
          var switch$0=1}}
      if(! switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var
       str$0=escaped$1(str),
       l=caml_ml_string_length(str$0),
       res=make(l + 2 | 0,34);
      caml_blit_string(str$0,0,res,1,l);
      return caml_string_of_bytes(res)}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _rk_=cst_d$2;break;
        case 1:var _rk_=cst_d$3;break;
        case 2:var _rk_=cst_d$4;break;
        case 3:var _rk_=cst_i$0;break;
        case 4:var _rk_=cst_i$1;break;
        case 5:var _rk_=cst_i$2;break;
        case 6:var _rk_=cst_x;break;
        case 7:var _rk_=cst_x$0;break;
        case 8:var _rk_=cst_X$0;break;
        case 9:var _rk_=cst_X$1;break;
        case 10:var _rk_=cst_o;break;
        case 11:var _rk_=cst_o$0;break;
        default:var _rk_=cst_u}
      return caml_format_int(_rk_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _rj_=cst_ld;break;
        case 1:var _rj_=cst_ld$0;break;
        case 2:var _rj_=cst_ld$1;break;
        case 3:var _rj_=cst_li$0;break;
        case 4:var _rj_=cst_li$1;break;
        case 5:var _rj_=cst_li$2;break;
        case 6:var _rj_=cst_lx;break;
        case 7:var _rj_=cst_lx$0;break;
        case 8:var _rj_=cst_lX;break;
        case 9:var _rj_=cst_lX$0;break;
        case 10:var _rj_=cst_lo;break;
        case 11:var _rj_=cst_lo$0;break;
        default:var _rj_=cst_lu}
      return caml_format_int(_rj_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _ri_=cst_nd;break;
        case 1:var _ri_=cst_nd$0;break;
        case 2:var _ri_=cst_nd$1;break;
        case 3:var _ri_=cst_ni$0;break;
        case 4:var _ri_=cst_ni$1;break;
        case 5:var _ri_=cst_ni$2;break;
        case 6:var _ri_=cst_nx;break;
        case 7:var _ri_=cst_nx$0;break;
        case 8:var _ri_=cst_nX;break;
        case 9:var _ri_=cst_nX$0;break;
        case 10:var _ri_=cst_no;break;
        case 11:var _ri_=cst_no$0;break;
        default:var _ri_=cst_nu}
      return caml_format_int(_ri_,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _rh_=cst_Ld;break;
        case 1:var _rh_=cst_Ld$0;break;
        case 2:var _rh_=cst_Ld$1;break;
        case 3:var _rh_=cst_Li$0;break;
        case 4:var _rh_=cst_Li$1;break;
        case 5:var _rh_=cst_Li$2;break;
        case 6:var _rh_=cst_Lx;break;
        case 7:var _rh_=cst_Lx$0;break;
        case 8:var _rh_=cst_LX;break;
        case 9:var _rh_=cst_LX$0;break;
        case 10:var _rh_=cst_Lo;break;
        case 11:var _rh_=cst_Lo$0;break;
        default:var _rh_=cst_Lu}
      return caml_int64_format(_rh_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(! switch$0)var sign=45;
        var str=runtime.caml_hexstring_of_float(x,prec$0,sign);
        return 19 <= fconv?uppercase_ascii$1(str):str}
      if(15 === fconv)
       var _re_=cst_12g$0;
      else
       {var prec=abs(prec$0),symb=char_of_fconv(fconv),buf=buffer_create(16);
        buffer_add_char(buf,37);
        bprint_fconv_flag(buf,fconv);
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _re_=buffer_contents(buf)}
      var str$0=caml_format_float(_re_,x);
      if(15 === fconv)
       {var
         len=caml_ml_string_length(str$0),
         match$0=runtime.caml_classify_float(x);
        if(3 === match$0)return x < 0.?cst_neg_infinity:cst_infinity;
        if(4 <= match$0)return cst_nan;
        var i=0;
        for(;;)
         {if(i === len)
           var _rg_=0;
          else
           {var
             match=caml_string_get(str$0,i),
             _rf_=match - 46 | 0,
             switch$1=
              23 < _rf_ >>> 0?55 === _rf_?1:0:21 < (_rf_ - 1 | 0) >>> 0?1:0;
            if(! switch$1){var i$0=i + 1 | 0,i=i$0;continue}
            var _rg_=1}
          return _rg_?str$0:_g_(str$0,cst$27)}}
      return str$0}
    function string_of_fmtty(fmtty)
     {var buf=buffer_create(16);
      bprint_fmtty(buf,fmtty);
      return buffer_contents(buf)}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _rb_=pad[2],_rc_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_rc_,_rb_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_rc_,_rb_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_rc_,_rb_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _rd_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_rd_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_rd_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_rd_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var
              str=escaped(c),
              l=caml_ml_string_length(str),
              res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _q__=pad$5[2],_q$_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_q$_,_q__,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_q$_,_q__,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_q$_,_q__,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _ra_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_ra_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_ra_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_ra_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,o,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
            ty=string_of_fmtty(sub_fmtty);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,o,acc$0,concat_fmt(recast(fmt,fmtty),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _q8_=fmt$0[1];
           if(0 === _q8_[0])
            {var
              rest$13=fmt$0[2],
              match=_q8_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_q8_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_as_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,cst_Printf_bad_conversion];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(cst_u$0,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return make_ignored_param$0(counter$1,k$0,o,acc$0,ign,rest$18)}
           return caml_trampoline_return
                   (make_ignored_param$0,[0,k$0,o,acc$0,ign,rest$18]);
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _q9_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_q9_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_q9_])}}
    function make_ignored_param$0(counter,k,o,acc,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return make_invalid_arg(counter$0,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return make_invalid_arg(counter$1,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 2:throw [0,Assert_failure,_at_];
         default:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return make_invalid_arg(counter$2,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return make_invalid_arg(counter$3,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return make_invalid_arg(counter$4,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 2:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return make_invalid_arg(counter$5,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 3:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return make_invalid_arg(counter$6,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 4:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return make_invalid_arg(counter$7,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 5:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return make_invalid_arg(counter$8,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 6:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return make_invalid_arg(counter$9,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 7:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return make_invalid_arg(counter$10,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 8:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return make_invalid_arg(counter$11,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         case 9:
          var fmtty=ign[2];
          if(counter < 50)
           {var counter$14=counter + 1 | 0;
            return make_from_fmtty$0(counter$14,k,o,acc,fmtty,fmt)}
          return caml_trampoline_return
                  (make_from_fmtty$0,[0,k,o,acc,fmtty,fmt]);
         case 10:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return make_invalid_arg(counter$12,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt]);
         default:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return make_invalid_arg(counter$13,k,o,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_q7_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_au_];
         default:throw [0,Assert_failure,_av_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _q6_=[8,acc,cst_Printf_bad_conversion$0];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_q6_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_q6_,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _q5_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_q5_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_q5_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_ignored_param(k,o,acc,ign,fmt)
     {return caml_trampoline(make_ignored_param$0(0,k,o,acc,ign,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function fn_of_padding_precision(k,o,fmt,pad,prec)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(0 === prec)
           {var _qB_=make_iprintf(k,o,fmt);return function(_qT_){return _qB_}}
          var _qC_=make_iprintf(k,o,fmt),_qD_=function(_qS_){return _qC_};
          return function(_qR_){return _qD_}}
        var _qE_=make_iprintf(k,o,fmt);
        return function(_qQ_){return _qE_}}
      else
       {if(0 === pad[0])
         {if(typeof prec === "number")
           {if(0 === prec)
             {var _qF_=make_iprintf(k,o,fmt);
              return function(_q4_){return _qF_}}
            var _qG_=make_iprintf(k,o,fmt),_qH_=function(_q3_){return _qG_};
            return function(_q2_){return _qH_}}
          var _qI_=make_iprintf(k,o,fmt);
          return function(_q1_){return _qI_}}
        if(typeof prec === "number")
         {if(0 === prec)
           {var _qJ_=make_iprintf(k,o,fmt),_qK_=function(_q0_){return _qJ_};
            return function(_qZ_){return _qK_}}
          var
           _qL_=make_iprintf(k,o,fmt),
           _qM_=function(_qY_){return _qL_},
           _qN_=function(_qX_){return _qM_};
          return function(_qW_){return _qN_}}
        var _qO_=make_iprintf(k,o,fmt),_qP_=function(_qV_){return _qO_};
        return function(_qU_){return _qP_}}}
    function make_iprintf$0(counter,k,o,fmt)
     {var k$0=k,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,o);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1],_pS_=make_iprintf(k$0,o,rest);
           return function(_qA_){return _pS_};
          case 1:
           var rest$0=fmt$0[1],_pT_=make_iprintf(k$0,o,rest$0);
           return function(_qz_){return _pT_};
          case 2:
           var _pU_=fmt$0[1];
           if(typeof _pU_ === "number")
            {var rest$1=fmt$0[2],_pV_=make_iprintf(k$0,o,rest$1);
             return function(_qv_){return _pV_}}
           else
            {if(0 === _pU_[0])
              {var rest$2=fmt$0[2],_pW_=make_iprintf(k$0,o,rest$2);
               return function(_qy_){return _pW_}}
             var
              rest$3=fmt$0[2],
              _pX_=make_iprintf(k$0,o,rest$3),
              _pY_=function(_qx_){return _pX_};
             return function(_qw_){return _pY_}}
          case 3:
           var _pZ_=fmt$0[1];
           if(typeof _pZ_ === "number")
            {var rest$4=fmt$0[2],_p0_=make_iprintf(k$0,o,rest$4);
             return function(_qr_){return _p0_}}
           else
            {if(0 === _pZ_[0])
              {var rest$5=fmt$0[2],_p1_=make_iprintf(k$0,o,rest$5);
               return function(_qu_){return _p1_}}
             var
              rest$6=fmt$0[2],
              _p2_=make_iprintf(k$0,o,rest$6),
              _p3_=function(_qt_){return _p2_};
             return function(_qs_){return _p3_}}
          case 4:
           var rest$7=fmt$0[4],prec=fmt$0[3],pad=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$7,pad,prec);
          case 5:
           var rest$8=fmt$0[4],prec$0=fmt$0[3],pad$0=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$8,pad$0,prec$0);
          case 6:
           var rest$9=fmt$0[4],prec$1=fmt$0[3],pad$1=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$9,pad$1,prec$1);
          case 7:
           var rest$10=fmt$0[4],prec$2=fmt$0[3],pad$2=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$10,pad$2,prec$2);
          case 8:
           var rest$11=fmt$0[4],prec$3=fmt$0[3],pad$3=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$11,pad$3,prec$3);
          case 9:
           var _p4_=fmt$0[1];
           if(typeof _p4_ === "number")
            {var rest$12=fmt$0[2],_p5_=make_iprintf(k$0,o,rest$12);
             return function(_qn_){return _p5_}}
           else
            {if(0 === _p4_[0])
              {var rest$13=fmt$0[2],_p6_=make_iprintf(k$0,o,rest$13);
               return function(_qq_){return _p6_}}
             var
              rest$14=fmt$0[2],
              _p7_=make_iprintf(k$0,o,rest$14),
              _p8_=function(_qp_){return _p7_};
             return function(_qo_){return _p8_}}
          case 10:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 11:var fmt$2=fmt$0[2],fmt$0=fmt$2;continue;
          case 12:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 13:
           var rest$15=fmt$0[3],_p9_=make_iprintf(k$0,o,rest$15);
           return function(_qm_){return _p9_};
          case 14:
           var rest$16=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_iprintf(k$0,o,concat_fmt(recast(fmt,fmtty),rest$16))};
          case 15:
           var
            rest$17=fmt$0[1],
            _p__=make_iprintf(k$0,o,rest$17),
            _p$_=function(_ql_){return _p__};
           return function(_qk_){return _p$_};
          case 16:
           var rest$18=fmt$0[1],_qa_=make_iprintf(k$0,o,rest$18);
           return function(_qj_){return _qa_};
          case 17:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 18:
           var _qb_=fmt$0[1];
           if(0 === _qb_[0])
            {var
              rest$19=fmt$0[2],
              match=_qb_[1],
              fmt$5=match[1],
              k$3=
               function(k,rest)
                {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
              k$1=k$3(k$0,rest$19),
              k$0=k$1,
              fmt$0=fmt$5;
             continue}
           var
            rest$20=fmt$0[2],
            match$0=_qb_[1],
            fmt$6=match$0[1],
            k$4=
             function(k,rest)
              {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
            k$2=k$4(k$0,rest$20),
            k$0=k$2,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_aw_];
          case 20:
           var rest$21=fmt$0[3],_qc_=make_iprintf(k$0,o,rest$21);
           return function(_qi_){return _qc_};
          case 21:
           var rest$22=fmt$0[2],_qd_=make_iprintf(k$0,o,rest$22);
           return function(_qh_){return _qd_};
          case 22:
           var rest$23=fmt$0[1],_qe_=make_iprintf(k$0,o,rest$23);
           return function(_qg_){return _qe_};
          case 23:
           var rest$24=fmt$0[2],ign=fmt$0[1],_qf_=0;
           return make_ignored_param
                   (function(x,param){return caml_call1(k$0,x)},
                    o,
                    _qf_,
                    ign,
                    rest$24);
          default:
           var rest$25=fmt$0[3],arity=fmt$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return fn_of_custom_arity$0(counter$0,k$0,o,rest$25,arity)}
           return caml_trampoline_return
                   (fn_of_custom_arity$0,[0,k$0,o,rest$25,arity])}}
    function fn_of_custom_arity$0(counter,k,o,fmt,param)
     {if(param)
       {var arity=param[1],_pQ_=fn_of_custom_arity(k,o,fmt,arity);
        return function(_pR_){return _pQ_}}
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_iprintf$0(counter$0,k,o,fmt)}
      return caml_trampoline_return(make_iprintf$0,[0,k,o,fmt])}
    function make_iprintf(k,o,fmt)
     {return caml_trampoline(make_iprintf$0(0,k,o,fmt))}
    function fn_of_custom_arity(k,o,fmt,param)
     {return caml_trampoline(fn_of_custom_arity$0(0,k,o,fmt,param))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _pO_=acc$0[2],_pP_=acc$0[1];
           if(0 === _pO_[0])
            {var acc$1=_pO_[1];
             output_acc(o,_pP_);
             output_string(o,cst$28);
             var acc$0=acc$1;
             continue}
           var acc$2=_pO_[1];
           output_acc(o,_pP_);
           output_string(o,cst$29);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function bufput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           bufput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _pM_=acc$0[2],_pN_=acc$0[1];
           if(0 === _pM_[0])
            {var acc$1=_pM_[1];
             bufput_acc(b,_pN_);
             add_string(b,cst$30);
             var acc$0=acc$1;
             continue}
           var acc$2=_pM_[1];
           bufput_acc(b,_pN_);
           add_string(b,cst$31);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           bufput_acc(b,p$2);
           return caml_call1(f,b);
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           bufput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           bufput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];bufput_acc(b,p$1);return add_char(b,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _pK_=acc$0[2],_pL_=acc$0[1];
           if(0 === _pK_[0])
            {var acc$1=_pK_[1];
             strput_acc(b,_pL_);
             add_string(b,cst$32);
             var acc$0=acc$1;
             continue}
           var acc$2=_pK_[1];
           strput_acc(b,_pL_);
           add_string(b,cst$33);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function failwith_message(param)
     {var fmt=param[1],buf=create$1(256);
      function k(param,acc)
       {strput_acc(buf,acc);return failwith(contents(buf))}
      return make_printf(k,0,0,fmt)}
    function open_box_of_string(str)
     {if(caml_string_equal(str,cst$34))return _ax_;
      var len=caml_ml_string_length(str);
      function invalid_box(param)
       {return caml_call1(failwith_message(_ay_),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match)if(32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switcher=match - 97 | 0;
          if(25 < switcher >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var
           match=caml_string_get(str,j$0),
           switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=sub$0(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _pI_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
          indent=_pI_}
       catch(_pJ_)
        {_pJ_ = caml_wrap_exception(_pJ_);
         if(_pJ_[1] !== Failure)throw _pJ_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      if(caml_string_notequal(box_name,cst$35))
       if(caml_string_notequal(box_name,cst_b$0))
        if(caml_string_notequal(box_name,cst_h))
         if(caml_string_notequal(box_name,cst_hov))
          if(caml_string_notequal(box_name,cst_hv))
           if(caml_string_notequal(box_name,cst_v))
            var box_type=invalid_box(0),switch$0=1;
           else
            var box_type=1,switch$0=1;
          else
           var box_type=2,switch$0=1;
         else
          var box_type=3,switch$0=1;
        else
         var box_type=0,switch$0=1;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var box_type=4;
      return [0,indent,box_type]}
    function make_padding_fmt_ebb(pad,fmt)
     {if(typeof pad === "number")
       return [0,0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],fmt]}}
    function make_padprec_fmt_ebb(pad,prec,fmt)
     {if(typeof prec === "number")
       var match=0 === prec?[0,0,fmt]:[0,1,fmt];
      else
       var p=prec[1],match=[0,[0,p],fmt];
      var prec$0=match[1];
      if(typeof pad === "number")
       return [0,0,prec$0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],prec$0,fmt]}}
    function fmt_ebb_of_string(legacy_behavior,str)
     {if(legacy_behavior)
       var flag=legacy_behavior[1],legacy_behavior$0=flag;
      else
       var legacy_behavior$0=1;
      function invalid_format_message(str_ind,msg)
       {return caml_call3(failwith_message(_az_),str,str_ind,msg)}
      function unexpected_end_of_format(end_ind)
       {return invalid_format_message(end_ind,cst_unexpected_end_of_format)}
      function invalid_format_without(str_ind,c,s)
       {return caml_call4(failwith_message(_aA_),str,str_ind,c,s)}
      function expected_character(str_ind,expected,read)
       {return caml_call4(failwith_message(_aB_),str,str_ind,expected,read)}
      function add_literal(lit_start,str_ind,fmt)
       {var size=str_ind - lit_start | 0;
        return 0 === size
                ?[0,fmt]
                :1 === size
                  ?[0,[12,caml_string_get(str,lit_start),fmt]]
                  :[0,[11,sub$0(str,lit_start,size),fmt]]}
      function parse(lit_start,end_ind)
       {var str_ind=lit_start;
        for(;;)
         {if(str_ind === end_ind)return add_literal(lit_start,str_ind,0);
          var match=caml_string_get(str,str_ind);
          if(37 === match)
           {var str_ind$2=str_ind + 1 | 0;
            if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
            var
             match$1=caml_string_get(str,str_ind$2),
             _pH_=
              95 === match$1
               ?parse_flags(str_ind,str_ind$2 + 1 | 0,end_ind,1)
               :parse_flags(str_ind,str_ind$2,end_ind,0),
             fmt_rest=_pH_[1];
            return add_literal(lit_start,str_ind,fmt_rest)}
          if(64 === match)
           {var str_ind$0=str_ind + 1 | 0;
            if(str_ind$0 === end_ind)
             var match$0=_aN_;
            else
             {var c=caml_string_get(str,str_ind$0);
              if(65 <= c)
               if(94 <= c)
                {var switcher=c - 123 | 0;
                 if(2 < switcher >>> 0)
                  var switch$0=0;
                 else
                  switch(switcher)
                   {case 0:
                     var
                      match$0=parse_tag(1,str_ind$0 + 1 | 0,end_ind),
                      switch$0=1;
                     break;
                    case 1:var switch$0=0;break;
                    default:
                     var
                      match$3=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$2=match$3[1],
                      match$0=[0,[17,1,fmt_rest$2]],
                      switch$0=1}}
               else
                if(91 <= c)
                 {var switcher$0=c - 91 | 0;
                  switch(switcher$0)
                   {case 0:
                     var
                      match$0=parse_tag(0,str_ind$0 + 1 | 0,end_ind),
                      switch$0=1;
                     break;
                    case 1:var switch$0=0;break;
                    default:
                     var
                      match$4=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$3=match$4[1],
                      match$0=[0,[17,0,fmt_rest$3]],
                      switch$0=1}}
                else
                 var switch$0=0;
              else
               if(10 === c)
                var
                 match$5=parse(str_ind$0 + 1 | 0,end_ind),
                 fmt_rest$4=match$5[1],
                 match$0=[0,[17,3,fmt_rest$4]],
                 switch$0=1;
               else
                if(32 <= c)
                 {var switcher$1=c - 32 | 0;
                  switch(switcher$1)
                   {case 0:
                     var
                      match$6=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$5=match$6[1],
                      match$0=[0,[17,_aO_,fmt_rest$5]],
                      switch$0=1;
                     break;
                    case 5:
                     if((str_ind$0 + 1 | 0) < end_ind)
                      if(37 === caml_string_get(str,str_ind$0 + 1 | 0))
                       var
                        match$7=parse(str_ind$0 + 2 | 0,end_ind),
                        fmt_rest$6=match$7[1],
                        match$0=[0,[17,6,fmt_rest$6]],
                        switch$0=1,
                        switch$1=0;
                      else
                       var switch$1=1;
                     else
                      var switch$1=1;
                     if(switch$1)
                      var
                       match$8=parse(str_ind$0,end_ind),
                       fmt_rest$7=match$8[1],
                       match$0=[0,[12,64,fmt_rest$7]],
                       switch$0=1;
                     break;
                    case 12:
                     var
                      match$9=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$8=match$9[1],
                      match$0=[0,[17,_aP_,fmt_rest$8]],
                      switch$0=1;
                     break;
                    case 14:
                     var
                      match$10=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$9=match$10[1],
                      match$0=[0,[17,4,fmt_rest$9]],
                      switch$0=1;
                     break;
                    case 27:
                     var
                      match$0=parse_good_break(str_ind$0 + 1 | 0,end_ind),
                      switch$0=1;
                     break;
                    case 28:
                     var
                      match$0=parse_magic_size(str_ind$0 + 1 | 0,end_ind),
                      switch$0=1;
                     break;
                    case 31:
                     var
                      match$11=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$10=match$11[1],
                      match$0=[0,[17,2,fmt_rest$10]],
                      switch$0=1;
                     break;
                    case 32:
                     var
                      match$12=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$11=match$12[1],
                      match$0=[0,[17,5,fmt_rest$11]],
                      switch$0=1;
                     break;
                    default:var switch$0=0}}
                else
                 var switch$0=0;
              if(! switch$0)
               var
                match$2=parse(str_ind$0 + 1 | 0,end_ind),
                fmt_rest$1=match$2[1],
                match$0=[0,[17,[2,c],fmt_rest$1]]}
            var fmt_rest$0=match$0[1];
            return add_literal(lit_start,str_ind,fmt_rest$0)}
          var str_ind$1=str_ind + 1 | 0,str_ind=str_ind$1;
          continue}}
      function parse_conversion
       (pct_ind,str_ind,end_ind,plus,hash,space,ign,pad,prec,padprec,symb)
       {var
         plus_used=[0,0],
         hash_used=[0,0],
         space_used=[0,0],
         ign_used=[0,0],
         pad_used=[0,0],
         prec_used=[0,0];
        function get_plus(param){plus_used[1] = 1;return plus}
        function get_hash(param){hash_used[1] = 1;return hash}
        function get_space(param){space_used[1] = 1;return space}
        function get_ign(param){ign_used[1] = 1;return ign}
        function get_pad(param){pad_used[1] = 1;return pad}
        function get_prec(param){prec_used[1] = 1;return prec}
        function get_padprec(param){pad_used[1] = 1;return padprec}
        function get_int_pad(param)
         {var pad=get_pad(0),match=get_prec(0);
          if(typeof match === "number")if(0 === match)return pad;
          if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var n=pad[2];
                return legacy_behavior$0
                        ?[0,1,n]
                        :incompatible_flag(pct_ind,str_ind,48,cst_precision$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_aH_
                      :incompatible_flag(pct_ind,str_ind,48,cst_precision$1)
                    :pad}}
        function check_no_0(symb,pad)
         {if(typeof pad === "number")
           return pad;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var width=pad[2];
                return legacy_behavior$0
                        ?[0,1,width]
                        :incompatible_flag(pct_ind,str_ind,symb,cst_0$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_aI_
                      :incompatible_flag(pct_ind,str_ind,symb,cst_0$1)
                    :pad}}
        function opt_of_pad(c,pad)
         {if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             switch(pad[1])
              {case 0:
                var width=pad[2];
                return legacy_behavior$0
                        ?[0,width]
                        :incompatible_flag(pct_ind,str_ind,c,cst$36);
               case 1:var width$0=pad[2];return [0,width$0];
               default:
                var width$1=pad[2];
                return legacy_behavior$0
                        ?[0,width$1]
                        :incompatible_flag(pct_ind,str_ind,c,cst_0$2)}
            return incompatible_flag(pct_ind,str_ind,c,cst$37)}}
        function get_pad_opt(c){return opt_of_pad(c,get_pad(0))}
        function get_padprec_opt(c){return opt_of_pad(c,get_padprec(0))}
        if(124 <= symb)
         var switch$0=0;
        else
         switch(symb)
          {case 33:
            var
             match$6=parse(str_ind,end_ind),
             fmt_rest$5=match$6[1],
             fmt_result=[0,[10,fmt_rest$5]],
             switch$0=1;
            break;
           case 40:
            var
             sub_end=search_subformat_end(str_ind,end_ind,41),
             match$8=parse(sub_end + 2 | 0,end_ind),
             fmt_rest$7=match$8[1],
             match$9=parse(str_ind,sub_end),
             sub_fmt=match$9[1],
             sub_fmtty=fmtty_of_fmt(sub_fmt);
            if(get_ign(0))
             var
              ignored$2=[9,get_pad_opt(95),sub_fmtty],
              _pg_=[0,[23,ignored$2,fmt_rest$7]];
            else
             var _pg_=[0,[14,get_pad_opt(40),sub_fmtty,fmt_rest$7]];
            var fmt_result=_pg_,switch$0=1;
            break;
           case 44:var fmt_result=parse(str_ind,end_ind),switch$0=1;break;
           case 67:
            var
             match$12=parse(str_ind,end_ind),
             fmt_rest$10=match$12[1],
             _pi_=get_ign(0)?[0,[23,1,fmt_rest$10]]:[0,[1,fmt_rest$10]],
             fmt_result=_pi_,
             switch$0=1;
            break;
           case 78:
            var
             match$16=parse(str_ind,end_ind),
             fmt_rest$14=match$16[1],
             counter$0=2;
            if(get_ign(0))
             var ignored$6=[11,counter$0],_po_=[0,[23,ignored$6,fmt_rest$14]];
            else
             var _po_=[0,[21,counter$0,fmt_rest$14]];
            var fmt_result=_po_,switch$0=1;
            break;
           case 83:
            var
             pad$6=check_no_0(symb,get_padprec(0)),
             match$17=parse(str_ind,end_ind),
             fmt_rest$15=match$17[1];
            if(get_ign(0))
             var
              ignored$7=[1,get_padprec_opt(95)],
              _pp_=[0,[23,ignored$7,fmt_rest$15]];
            else
             var
              match$18=make_padding_fmt_ebb(pad$6,fmt_rest$15),
              fmt_rest$16=match$18[2],
              pad$7=match$18[1],
              _pp_=[0,[3,pad$7,fmt_rest$16]];
            var fmt_result=_pp_,switch$0=1;
            break;
           case 91:
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var
             char_set=create_char_set(0),
             add_char=function(c){return add_in_char_set(char_set,c)},
             add_range=
              function(c$0,c)
               {if(! (c < c$0))
                 {var i=c$0;
                  for(;;)
                   {add_in_char_set(char_set,char_of_int(i));
                    var _pG_=i + 1 | 0;
                    if(c !== i){var i=_pG_;continue}
                    break}}
                return 0},
             fail_single_percent=
              function(str_ind)
               {return caml_call2(failwith_message(_aR_),str,str_ind)},
             parse_char_set_content=
              function(counter,str_ind,end_ind)
               {var str_ind$0=str_ind;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c=caml_string_get(str,str_ind$0);
                  if(45 === c)
                   {add_char(45);
                    var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                    continue}
                  if(93 === c)return str_ind$0 + 1 | 0;
                  var _pF_=str_ind$0 + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return parse_char_set_after_char$0(counter$0,_pF_,end_ind,c)}
                  return caml_trampoline_return
                          (parse_char_set_after_char$0,[0,_pF_,end_ind,c])}},
             parse_char_set_after_char$0=
              function(counter,str_ind,end_ind,c)
               {var str_ind$0=str_ind,c$0=c;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c$1=caml_string_get(str,str_ind$0);
                  if(46 <= c$1)
                   if(64 === c$1)
                    var switch$0=0;
                   else
                    {if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}
                     var switch$0=1}
                  else
                   if(37 === c$1)
                    var switch$0=0;
                   else
                    {if(45 <= c$1)
                      {var str_ind$2=str_ind$0 + 1 | 0;
                       if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
                       var c$2=caml_string_get(str,str_ind$2);
                       if(37 === c$2)
                        {if((str_ind$2 + 1 | 0) === end_ind)
                          unexpected_end_of_format(end_ind);
                         var c$3=caml_string_get(str,str_ind$2 + 1 | 0);
                         if(37 !== c$3)
                          if(64 !== c$3)return fail_single_percent(str_ind$2);
                         add_range(c$0,c$3);
                         var _pD_=str_ind$2 + 2 | 0;
                         if(counter < 50)
                          {var counter$2=counter + 1 | 0;
                           return parse_char_set_content(counter$2,_pD_,end_ind)}
                         return caml_trampoline_return
                                 (parse_char_set_content,[0,_pD_,end_ind])}
                       if(93 === c$2)
                        {add_char(c$0);add_char(45);return str_ind$2 + 1 | 0}
                       add_range(c$0,c$2);
                       var _pE_=str_ind$2 + 1 | 0;
                       if(counter < 50)
                        {var counter$1=counter + 1 | 0;
                         return parse_char_set_content(counter$1,_pE_,end_ind)}
                       return caml_trampoline_return
                               (parse_char_set_content,[0,_pE_,end_ind])}
                     var switch$0=1}
                  if(! switch$0)
                   if(37 === c$0)
                    {add_char(c$1);
                     var _pC_=str_ind$0 + 1 | 0;
                     if(counter < 50)
                      {var counter$0=counter + 1 | 0;
                       return parse_char_set_content(counter$0,_pC_,end_ind)}
                     return caml_trampoline_return
                             (parse_char_set_content,[0,_pC_,end_ind])}
                  if(37 === c$0)fail_single_percent(str_ind$0);
                  add_char(c$0);
                  var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1;
                  continue}},
             parse_char_set_after_char=
              function(str_ind,end_ind,c)
               {return caml_trampoline
                        (parse_char_set_after_char$0(0,str_ind,end_ind,c))};
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var match$31=caml_string_get(str,str_ind);
            if(94 === match$31)
             var str_ind$0=str_ind + 1 | 0,str_ind$1=str_ind$0,reverse=1;
            else
             var str_ind$1=str_ind,reverse=0;
            if(str_ind$1 === end_ind)unexpected_end_of_format(end_ind);
            var
             c=caml_string_get(str,str_ind$1),
             next_ind=parse_char_set_after_char(str_ind$1 + 1 | 0,end_ind,c),
             char_set$0=freeze_char_set(char_set),
             char_set$1=reverse?rev_char_set(char_set$0):char_set$0,
             match$21=parse(next_ind,end_ind),
             fmt_rest$19=match$21[1];
            if(get_ign(0))
             var
              ignored$9=[10,get_pad_opt(95),char_set$1],
              _pu_=[0,[23,ignored$9,fmt_rest$19]];
            else
             var _pu_=[0,[20,get_pad_opt(91),char_set$1,fmt_rest$19]];
            var fmt_result=_pu_,switch$0=1;
            break;
           case 97:
            var
             match$22=parse(str_ind,end_ind),
             fmt_rest$20=match$22[1],
             fmt_result=[0,[15,fmt_rest$20]],
             switch$0=1;
            break;
           case 99:
            var
             char_format=
              function(fmt_rest)
               {return get_ign(0)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
             match$23=parse(str_ind,end_ind),
             fmt_rest$21=match$23[1],
             match$24=get_pad_opt(99);
            if(match$24)
             {if(0 === match$24[1])
               var
                _pv_=get_ign(0)?[0,[23,3,fmt_rest$21]]:[0,[22,fmt_rest$21]],
                _pw_=_pv_;
              else
               var
                _pw_=
                 legacy_behavior$0
                  ?char_format(fmt_rest$21)
                  :invalid_format_message
                    (str_ind,
                     cst_non_zero_widths_are_unsupported_for_c_conversions);
              var _px_=_pw_}
            else
             var _px_=char_format(fmt_rest$21);
            var fmt_result=_px_,switch$0=1;
            break;
           case 114:
            var
             match$25=parse(str_ind,end_ind),
             fmt_rest$22=match$25[1],
             _py_=get_ign(0)?[0,[23,2,fmt_rest$22]]:[0,[19,fmt_rest$22]],
             fmt_result=_py_,
             switch$0=1;
            break;
           case 115:
            var
             pad$9=check_no_0(symb,get_padprec(0)),
             match$26=parse(str_ind,end_ind),
             fmt_rest$23=match$26[1];
            if(get_ign(0))
             var
              ignored$10=[0,get_padprec_opt(95)],
              _pz_=[0,[23,ignored$10,fmt_rest$23]];
            else
             var
              match$27=make_padding_fmt_ebb(pad$9,fmt_rest$23),
              fmt_rest$24=match$27[2],
              pad$10=match$27[1],
              _pz_=[0,[2,pad$10,fmt_rest$24]];
            var fmt_result=_pz_,switch$0=1;
            break;
           case 116:
            var
             match$28=parse(str_ind,end_ind),
             fmt_rest$25=match$28[1],
             fmt_result=[0,[16,fmt_rest$25]],
             switch$0=1;
            break;
           case 123:
            var
             sub_end$0=search_subformat_end(str_ind,end_ind,125),
             match$29=parse(str_ind,sub_end$0),
             sub_fmt$0=match$29[1],
             match$30=parse(sub_end$0 + 2 | 0,end_ind),
             fmt_rest$26=match$30[1],
             sub_fmtty$0=fmtty_of_fmt(sub_fmt$0);
            if(get_ign(0))
             var
              ignored$11=[8,get_pad_opt(95),sub_fmtty$0],
              _pA_=[0,[23,ignored$11,fmt_rest$26]];
            else
             var _pA_=[0,[13,get_pad_opt(123),sub_fmtty$0,fmt_rest$26]];
            var fmt_result=_pA_,switch$0=1;
            break;
           case 66:
           case 98:
            var
             pad$3=check_no_0(symb,get_padprec(0)),
             match$10=parse(str_ind,end_ind),
             fmt_rest$8=match$10[1];
            if(get_ign(0))
             var
              ignored$3=[7,get_padprec_opt(95)],
              _ph_=[0,[23,ignored$3,fmt_rest$8]];
            else
             var
              match$11=make_padding_fmt_ebb(pad$3,fmt_rest$8),
              fmt_rest$9=match$11[2],
              pad$4=match$11[1],
              _ph_=[0,[9,pad$4,fmt_rest$9]];
            var fmt_result=_ph_,switch$0=1;
            break;
           case 37:
           case 64:
            var
             match$7=parse(str_ind,end_ind),
             fmt_rest$6=match$7[1],
             fmt_result=[0,[12,symb,fmt_rest$6]],
             switch$0=1;
            break;
           case 76:
           case 108:
           case 110:
            if(str_ind === end_ind)
             var switch$1=1;
            else
             {var symb$0=caml_string_get(str,str_ind),_pB_=symb$0 - 88 | 0;
              if(32 < _pB_ >>> 0)
               var switch$2=0;
              else
               switch(_pB_)
                {case 0:
                 case 12:
                 case 17:
                 case 23:
                 case 29:
                 case 32:var _pn_=1,switch$2=1;break;
                 default:var switch$2=0}
              if(! switch$2)var _pn_=0;
              if(_pn_)var switch$0=0,switch$1=0;else var switch$1=1}
            if(switch$1)
             {var match$15=parse(str_ind,end_ind),fmt_rest$13=match$15[1];
              if(108 <= symb)
               if(111 <= symb)
                var switch$3=0;
               else
                {var switcher$0=symb - 108 | 0;
                 switch(switcher$0)
                  {case 0:var counter=0,switch$3=1;break;
                   case 1:var switch$3=0;break;
                   default:var counter=1,switch$3=1}}
              else
               if(76 === symb)var counter=2,switch$3=1;else var switch$3=0;
              if(! switch$3)throw [0,Assert_failure,_aV_];
              if(get_ign(0))
               var ignored$5=[11,counter],_pm_=[0,[23,ignored$5,fmt_rest$13]];
              else
               var _pm_=[0,[21,counter,fmt_rest$13]];
              var fmt_result=_pm_,switch$0=1}
            break;
           case 32:
           case 35:
           case 43:
           case 45:
           case 95:
            var
             fmt_result=caml_call3(failwith_message(_aM_),str,pct_ind,symb),
             switch$0=1;
            break;
           case 88:
           case 100:
           case 105:
           case 111:
           case 117:
           case 120:
            var
             _pq_=get_space(0),
             _pr_=get_hash(0),
             iconv$2=
              compute_int_conv(pct_ind,str_ind,get_plus(0),_pr_,_pq_,symb),
             match$19=parse(str_ind,end_ind),
             fmt_rest$17=match$19[1];
            if(get_ign(0))
             var
              ignored$8=[2,iconv$2,get_pad_opt(95)],
              _ps_=[0,[23,ignored$8,fmt_rest$17]];
            else
             var
              _pt_=get_prec(0),
              match$20=make_padprec_fmt_ebb(get_int_pad(0),_pt_,fmt_rest$17),
              fmt_rest$18=match$20[3],
              prec$4=match$20[2],
              pad$8=match$20[1],
              _ps_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$18]];
            var fmt_result=_ps_,switch$0=1;
            break;
           case 69:
           case 70:
           case 71:
           case 72:
           case 101:
           case 102:
           case 103:
           case 104:
            var
             space$1=get_space(0),
             plus$2=get_plus(0),
             plus$3=plus$2,
             space$2=space$1;
            for(;;)
             {if(0 === plus$3)
               if(0 === space$2)
                {if(73 <= symb)
                  {var switcher$1=symb - 101 | 0;
                   if(3 < switcher$1 >>> 0)
                    var switch$4=0;
                   else
                    switch(switcher$1)
                     {case 0:var fconv=3,switch$4=1;break;
                      case 1:var fconv=0,switch$4=1;break;
                      case 2:var fconv=9,switch$4=1;break;
                      default:var fconv=16,switch$4=1}}
                 else
                  if(69 <= symb)
                   {var switcher$2=symb - 69 | 0;
                    switch(switcher$2)
                     {case 0:var fconv=6,switch$4=1;break;
                      case 1:var fconv=15,switch$4=1;break;
                      case 2:var fconv=12,switch$4=1;break;
                      default:var fconv=19,switch$4=1}}
                  else
                   var switch$4=0;
                 if(! switch$4)throw [0,Assert_failure,_aX_]}
               else
                {if(73 <= symb)
                  {var switcher$3=symb - 101 | 0;
                   if(3 < switcher$3 >>> 0)
                    var switch$5=0;
                   else
                    switch(switcher$3)
                     {case 0:var fconv=5,switch$5=1;break;
                      case 1:var fconv=2,switch$5=1;break;
                      case 2:var fconv=11,switch$5=1;break;
                      default:var fconv=18,switch$5=1}}
                 else
                  if(69 <= symb)
                   {var switcher$4=symb - 69 | 0;
                    switch(switcher$4)
                     {case 0:var fconv=8,switch$5=1;break;
                      case 1:var switch$5=0;break;
                      case 2:var fconv=14,switch$5=1;break;
                      default:var fconv=21,switch$5=1}}
                  else
                   var switch$5=0;
                 if(! switch$5)
                  {if(legacy_behavior$0){var space$2=0;continue}
                   var fconv=incompatible_flag(pct_ind,str_ind,symb,cst$48)}}
              else
               if(0 === space$2)
                {if(73 <= symb)
                  {var switcher$5=symb - 101 | 0;
                   if(3 < switcher$5 >>> 0)
                    var switch$6=0;
                   else
                    switch(switcher$5)
                     {case 0:var fconv=4,switch$6=1;break;
                      case 1:var fconv=1,switch$6=1;break;
                      case 2:var fconv=10,switch$6=1;break;
                      default:var fconv=17,switch$6=1}}
                 else
                  if(69 <= symb)
                   {var switcher$6=symb - 69 | 0;
                    switch(switcher$6)
                     {case 0:var fconv=7,switch$6=1;break;
                      case 1:var switch$6=0;break;
                      case 2:var fconv=13,switch$6=1;break;
                      default:var fconv=20,switch$6=1}}
                  else
                   var switch$6=0;
                 if(! switch$6)
                  {if(legacy_behavior$0){var plus$3=0;continue}
                   var fconv=incompatible_flag(pct_ind,str_ind,symb,cst$49)}}
               else
                {if(legacy_behavior$0){var space$2=0;continue}
                 var fconv=incompatible_flag(pct_ind,str_ind,32,cst$50)}
              var match$13=parse(str_ind,end_ind),fmt_rest$11=match$13[1];
              if(get_ign(0))
               {var match=get_prec(0);
                if(typeof match === "number")
                 var
                  _pj_=
                   0 === match?0:incompatible_flag(pct_ind,str_ind,95,cst$38);
                else
                 var ndec=match[1],_pj_=[0,ndec];
                var
                 ignored$4=[6,get_pad_opt(95),_pj_],
                 _pk_=[0,[23,ignored$4,fmt_rest$11]]}
              else
               var
                _pl_=get_prec(0),
                match$14=make_padprec_fmt_ebb(get_pad(0),_pl_,fmt_rest$11),
                fmt_rest$12=match$14[3],
                prec$3=match$14[2],
                pad$5=match$14[1],
                _pk_=[0,[8,fconv,pad$5,prec$3,fmt_rest$12]];
              var fmt_result=_pk_,switch$0=1;
              break}
            break;
           default:var switch$0=0}
        if(! switch$0)
         {if(108 <= symb)
           if(111 <= symb)
            var switch$7=0;
           else
            {var switcher=symb - 108 | 0;
             switch(switcher)
              {case 0:
                var
                 _o2_=caml_string_get(str,str_ind),
                 _o3_=get_space(0),
                 _o4_=get_hash(0),
                 iconv=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_o4_,_o3_,_o2_),
                 match$0=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest=match$0[1];
                if(get_ign(0))
                 var
                  ignored=[3,iconv,get_pad_opt(95)],
                  _o5_=[0,[23,ignored,fmt_rest]];
                else
                 var
                  _o7_=get_prec(0),
                  match$1=make_padprec_fmt_ebb(get_int_pad(0),_o7_,fmt_rest),
                  fmt_rest$0=match$1[3],
                  prec$0=match$1[2],
                  pad$0=match$1[1],
                  _o5_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
                var _o6_=_o5_,switch$8=1;
                break;
               case 1:var switch$7=0,switch$8=0;break;
               default:
                var
                 _o8_=caml_string_get(str,str_ind),
                 _o9_=get_space(0),
                 _o__=get_hash(0),
                 iconv$0=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_o__,_o9_,_o8_),
                 match$2=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest$1=match$2[1];
                if(get_ign(0))
                 var
                  ignored$0=[4,iconv$0,get_pad_opt(95)],
                  _o$_=[0,[23,ignored$0,fmt_rest$1]];
                else
                 var
                  _pa_=get_prec(0),
                  match$3=make_padprec_fmt_ebb(get_int_pad(0),_pa_,fmt_rest$1),
                  fmt_rest$2=match$3[3],
                  prec$1=match$3[2],
                  pad$1=match$3[1],
                  _o$_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
                var _o6_=_o$_,switch$8=1}
             if(switch$8)var fmt_result=_o6_,switch$7=1}
          else
           if(76 === symb)
            {var
              _pb_=caml_string_get(str,str_ind),
              _pc_=get_space(0),
              _pd_=get_hash(0),
              iconv$1=
               compute_int_conv
                (pct_ind,str_ind + 1 | 0,get_plus(0),_pd_,_pc_,_pb_),
              match$4=parse(str_ind + 1 | 0,end_ind),
              fmt_rest$3=match$4[1];
             if(get_ign(0))
              var
               ignored$1=[5,iconv$1,get_pad_opt(95)],
               _pe_=[0,[23,ignored$1,fmt_rest$3]];
             else
              var
               _pf_=get_prec(0),
               match$5=make_padprec_fmt_ebb(get_int_pad(0),_pf_,fmt_rest$3),
               fmt_rest$4=match$5[3],
               prec$2=match$5[2],
               pad$2=match$5[1],
               _pe_=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
             var fmt_result=_pe_,switch$7=1}
           else
            var switch$7=0;
          if(! switch$7)
           var
            fmt_result=
             caml_call3(failwith_message(_aJ_),str,str_ind - 1 | 0,symb)}
        if(1 - legacy_behavior$0)
         {var _oT_=1 - plus_used[1],plus$0=_oT_?plus:_oT_;
          if(plus$0)incompatible_flag(pct_ind,str_ind,symb,cst$39);
          var _oU_=1 - hash_used[1],hash$0=_oU_?hash:_oU_;
          if(hash$0)incompatible_flag(pct_ind,str_ind,symb,cst$40);
          var _oV_=1 - space_used[1],space$0=_oV_?space:_oV_;
          if(space$0)incompatible_flag(pct_ind,str_ind,symb,cst$41);
          var _oW_=1 - pad_used[1],_oX_=_oW_?caml_notequal([0,pad],_aK_):_oW_;
          if(_oX_)incompatible_flag(pct_ind,str_ind,symb,cst_padding$0);
          var
           _oY_=1 - prec_used[1],
           _oZ_=_oY_?caml_notequal([0,prec],_aL_):_oY_;
          if(_oZ_)
           {var _o0_=ign?95:symb;
            incompatible_flag(pct_ind,str_ind,_o0_,cst_precision$2)}
          var plus$1=ign?plus:ign;
          if(plus$1)incompatible_flag(pct_ind,str_ind,95,cst$42)}
        var _o1_=1 - ign_used[1],ign$0=_o1_?ign:_o1_;
        if(ign$0)
         {var
           switch$9=
            38 <= symb
             ?44 === symb?0:64 === symb?0:1
             :33 === symb?0:37 <= symb?0:1,
           switch$10=switch$9?0:legacy_behavior$0?1:0;
          if(! switch$10)incompatible_flag(pct_ind,str_ind,symb,cst$43)}
        return fmt_result}
      function parse_after_precision
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,match)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_conv(padprec)
         {return parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   match,
                   padprec,
                   caml_string_get(str,str_ind))}
        if(typeof pad === "number")
         {if(typeof match === "number")if(0 === match)return parse_conv(0);
          if(0 === minus)
           {if(typeof match === "number")return parse_conv(_aF_);
            var n=match[1];
            return parse_conv([0,1,n])}
          if(typeof match === "number")return parse_conv(_aG_);
          var n$0=match[1];
          return parse_conv([0,0,n$0])}
        return parse_conv(pad)}
      function parse_after_padding
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var symb=caml_string_get(str,str_ind);
        if(46 === symb)
         {var str_ind$0=str_ind + 1 | 0;
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           parse_literal=
            function(minus,str_ind)
             {var
               match=parse_positive(str_ind,end_ind,0),
               prec=match[2],
               new_ind=match[1];
              return parse_after_precision
                      (pct_ind,
                       new_ind,
                       end_ind,
                       minus,
                       plus,
                       hash,
                       space,
                       ign,
                       pad,
                       [0,prec])},
           symb$0=caml_string_get(str,str_ind$0);
          if(48 <= symb$0)
           {if(! (58 <= symb$0))return parse_literal(minus,str_ind$0)}
          else
           if(42 <= symb$0)
            {var switcher=symb$0 - 42 | 0;
             switch(switcher)
              {case 0:
                return parse_after_precision
                        (pct_ind,
                         str_ind$0 + 1 | 0,
                         end_ind,
                         minus,
                         plus,
                         hash,
                         space,
                         ign,
                         pad,
                         1);
               case 1:
               case 3:
                if(legacy_behavior$0)
                 {var
                   _oS_=str_ind$0 + 1 | 0,
                   minus$0=minus || (45 === symb$0?1:0);
                  return parse_literal(minus$0,_oS_)}
                break
               }}
          return legacy_behavior$0
                  ?parse_after_precision
                    (pct_ind,
                     str_ind$0,
                     end_ind,
                     minus,
                     plus,
                     hash,
                     space,
                     ign,
                     pad,
                     _aE_)
                  :invalid_format_without(str_ind$0 - 1 | 0,46,cst_precision)}
        return parse_conversion
                (pct_ind,
                 str_ind + 1 | 0,
                 end_ind,
                 plus,
                 hash,
                 space,
                 ign,
                 pad,
                 0,
                 pad,
                 symb)}
      function parse_flags(pct_ind,str_ind,end_ind,ign)
       {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],hash=[0,0];
        function set_flag(str_ind,flag)
         {var _oP_=flag[1],_oQ_=_oP_?1 - legacy_behavior$0:_oP_;
          if(_oQ_)
           {var _oR_=caml_string_get(str,str_ind);
            caml_call3(failwith_message(_aC_),str,str_ind,_oR_)}
          flag[1] = 1;
          return 0}
        var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var match=caml_string_get(str,str_ind$0),switcher=match - 32 | 0;
          if(! (16 < switcher >>> 0))
           switch(switcher)
            {case 0:
              set_flag(str_ind$0,space);
              var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
              continue;
             case 3:
              set_flag(str_ind$0,hash);
              var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
              continue;
             case 11:
              set_flag(str_ind$0,plus);
              var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
              continue;
             case 13:
              set_flag(str_ind$0,minus);
              var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
              continue;
             case 16:
              set_flag(str_ind$0,zero);
              var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
              continue
             }
          var
           _oK_=space[1],
           _oL_=hash[1],
           _oM_=plus[1],
           _oN_=minus[1],
           _oO_=zero[1];
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           padty=
            0 === _oO_
             ?0 === _oN_?1:0
             :0 === _oN_
               ?2
               :legacy_behavior$0
                 ?0
                 :incompatible_flag(pct_ind,str_ind$0,45,cst_0),
           match$0=caml_string_get(str,str_ind$0);
          if(48 <= match$0)
           {if(! (58 <= match$0))
             {var
               match$1=parse_positive(str_ind$0,end_ind,0),
               width=match$1[2],
               new_ind=match$1[1];
              return parse_after_padding
                      (pct_ind,
                       new_ind,
                       end_ind,
                       _oN_,
                       _oM_,
                       _oL_,
                       _oK_,
                       ign,
                       [0,padty,width])}}
          else
           if(42 === match$0)
            return parse_after_padding
                    (pct_ind,
                     str_ind$0 + 1 | 0,
                     end_ind,
                     _oN_,
                     _oM_,
                     _oL_,
                     _oK_,
                     ign,
                     [1,padty]);
          switch(padty)
           {case 0:
             if(1 - legacy_behavior$0)
              invalid_format_without(str_ind$0 - 1 | 0,45,cst_padding);
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_oN_,_oM_,_oL_,_oK_,ign,0);
            case 1:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_oN_,_oM_,_oL_,_oK_,ign,0);
            default:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_oN_,_oM_,_oL_,_oK_,ign,_aD_)}}}
      function parse_tag(is_open_tag,str_ind,end_ind)
       {try
         {if(str_ind === end_ind)throw Not_found;
          var match$0=caml_string_get(str,str_ind);
          if(60 === match$0)
           {var ind=index_from$0(str,str_ind + 1 | 0,62);
            if(end_ind <= ind)throw Not_found;
            var
             sub_str=sub$0(str,str_ind,(ind - str_ind | 0) + 1 | 0),
             match$1=parse(ind + 1 | 0,end_ind),
             fmt_rest$0=match$1[1],
             match$2=parse(str_ind,ind + 1 | 0),
             sub_fmt=match$2[1],
             sub_format$0=[0,sub_fmt,sub_str];
            if(is_open_tag)
             var formatting$0=[0,sub_format$0];
            else
             {if(typeof sub_fmt === "number")
               var switch$0=0;
              else
               if(11 === sub_fmt[0])
                if(typeof sub_fmt[2] === "number")
                 {var str$0=sub_fmt[1];
                  try
                   {open_box_of_string(str$0);var switch$1=1}
                  catch(_oJ_)
                   {_oJ_ = caml_wrap_exception(_oJ_);
                    if(_oJ_[1] !== Failure)throw _oJ_;
                    var switch$0=1,switch$1=0}
                  if(switch$1)var switch$0=1}
                else
                 var switch$0=0;
               else
                var switch$0=0;
              var formatting$0=[1,sub_format$0]}
            var _oH_=[0,[18,formatting$0,fmt_rest$0]];
            return _oH_}
          throw Not_found}
        catch(_oI_)
         {_oI_ = caml_wrap_exception(_oI_);
          if(_oI_ === Not_found)
           {var
             match=parse(str_ind,end_ind),
             fmt_rest=match[1],
             formatting=is_open_tag?[0,sub_format]:[1,sub_format];
            return [0,[18,formatting,fmt_rest]]}
          throw _oI_}}
      function parse_good_break(str_ind,end_ind)
       {try
         {var
           _oA_=str_ind === end_ind?1:0,
           _oB_=_oA_ || (60 !== caml_string_get(str,str_ind)?1:0);
          if(_oB_)throw Not_found;
          var
           str_ind_1=parse_spaces(str_ind + 1 | 0,end_ind),
           match$0=caml_string_get(str,str_ind_1),
           switch$0=48 <= match$0?58 <= match$0?0:1:45 === match$0?1:0;
          if(! switch$0)throw Not_found;
          var
           match$1=parse_integer(str_ind_1,end_ind),
           width=match$1[2],
           str_ind_2=match$1[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind),
           match$2=caml_string_get(str,str_ind_3),
           switcher=match$2 - 45 | 0;
          if(12 < switcher >>> 0)
           if(17 === switcher)
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _oC_=[0,s,width,0],
             _oD_=str_ind_3 + 1 | 0,
             next_ind=_oD_,
             formatting_lit$0=_oC_,
             switch$1=1;
           else
            var switch$1=0;
          else
           {var switcher$0=switcher - 1 | 0;
            if(1 < switcher$0 >>> 0)
             {var
               match$3=parse_integer(str_ind_3,end_ind),
               offset=match$3[2],
               str_ind_4=match$3[1],
               str_ind_5=parse_spaces(str_ind_4,end_ind);
              if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
              var
               s$0=
                sub$0(str,str_ind - 2 | 0,(str_ind_5 - str_ind | 0) + 3 | 0),
               _oE_=[0,s$0,width,offset],
               _oF_=str_ind_5 + 1 | 0,
               next_ind=_oF_,
               formatting_lit$0=_oE_,
               switch$1=1}
            else
             var switch$1=0}
          if(! switch$1)throw Not_found}
        catch(_oG_)
         {_oG_ = caml_wrap_exception(_oG_);
          if(_oG_ !== Not_found)if(_oG_[1] !== Failure)throw _oG_;
          var next_ind=str_ind,formatting_lit$0=formatting_lit}
        var match=parse(next_ind,end_ind),fmt_rest=match[1];
        return [0,[17,formatting_lit$0,fmt_rest]]}
      function parse_magic_size(str_ind,end_ind)
       {try
         {var
           str_ind_1=parse_spaces(str_ind,end_ind),
           match$2=caml_string_get(str,str_ind_1),
           switch$0=48 <= match$2?58 <= match$2?0:1:45 === match$2?1:0;
          if(switch$0)
           {var
             match$3=parse_integer(str_ind_1,end_ind),
             size=match$3[2],
             str_ind_2=match$3[1],
             str_ind_3=parse_spaces(str_ind_2,end_ind);
            if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _oy_=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
          else
           var _oy_=0;
          var _ox_=_oy_}
        catch(_oz_)
         {_oz_ = caml_wrap_exception(_oz_);
          if(_oz_ !== Not_found)if(_oz_[1] !== Failure)throw _oz_;
          var _ox_=0}
        if(_ox_)
         {var
           match=_ox_[1],
           formatting_lit=match[2],
           next_ind=match[1],
           match$0=parse(next_ind,end_ind),
           fmt_rest=match$0[1];
          return [0,[17,formatting_lit,fmt_rest]]}
        var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
        return [0,[17,_aQ_,fmt_rest$0]]}
      function parse_spaces(str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          if(32 === caml_string_get(str,str_ind$0))
           {var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;continue}
          return str_ind$0}}
      function parse_positive(str_ind,end_ind,acc)
       {var str_ind$0=str_ind,acc$0=acc;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind$0),switcher=c - 48 | 0;
          if(9 < switcher >>> 0)return [0,str_ind$0,acc$0];
          var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
          if(max_string_length < acc$1)
           return caml_call3
                   (failwith_message(_aS_),str,acc$1,max_string_length);
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1;
          continue}}
      function parse_integer(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(! (58 <= match))return parse_positive(str_ind,end_ind,0)}
        else
         if(45 === match)
          {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
           var c=caml_string_get(str,str_ind + 1 | 0),switcher=c - 48 | 0;
           if(9 < switcher >>> 0)
            return expected_character(str_ind + 1 | 0,cst_digit,c);
           var
            match$0=parse_positive(str_ind + 1 | 0,end_ind,0),
            n=match$0[2],
            next_ind=match$0[1];
           return [0,next_ind,- n | 0]}
        throw [0,Assert_failure,_aT_]}
      function search_subformat_end(str_ind,end_ind,c)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)
           caml_call3(failwith_message(_aU_),str,c,end_ind);
          var match=caml_string_get(str,str_ind$0);
          if(37 === match)
           {if((str_ind$0 + 1 | 0) === end_ind)
             unexpected_end_of_format(end_ind);
            if(caml_string_get(str,str_ind$0 + 1 | 0) === c)return str_ind$0;
            var match$0=caml_string_get(str,str_ind$0 + 1 | 0);
            if(95 <= match$0)
             {if(123 <= match$0)
               {if(! (126 <= match$0))
                 {var switcher=match$0 - 123 | 0;
                  switch(switcher)
                   {case 0:
                     var
                      sub_end=search_subformat_end(str_ind$0 + 2 | 0,end_ind,125),
                      str_ind$2=sub_end + 2 | 0,
                      str_ind$0=str_ind$2;
                     continue;
                    case 1:break;
                    default:
                     return expected_character
                             (str_ind$0 + 1 | 0,cst_character,125)}}}
              else
               if(! (96 <= match$0))
                {if((str_ind$0 + 2 | 0) === end_ind)
                  unexpected_end_of_format(end_ind);
                 var match$1=caml_string_get(str,str_ind$0 + 2 | 0);
                 if(40 === match$1)
                  {var
                    sub_end$0=search_subformat_end(str_ind$0 + 3 | 0,end_ind,41),
                    str_ind$3=sub_end$0 + 2 | 0,
                    str_ind$0=str_ind$3;
                   continue}
                 if(123 === match$1)
                  {var
                    sub_end$1=
                     search_subformat_end(str_ind$0 + 3 | 0,end_ind,125),
                    str_ind$4=sub_end$1 + 2 | 0,
                    str_ind$0=str_ind$4;
                   continue}
                 var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
                 continue}}
            else
             {if(40 === match$0)
               {var
                 sub_end$2=search_subformat_end(str_ind$0 + 2 | 0,end_ind,41),
                 str_ind$6=sub_end$2 + 2 | 0,
                 str_ind$0=str_ind$6;
                continue}
              if(41 === match$0)
               return expected_character(str_ind$0 + 1 | 0,cst_character$0,41)}
            var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1;
            continue}
          var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;
          continue}}
      function incompatible_flag(pct_ind,str_ind,symb,option)
       {var subfmt=sub$0(str,pct_ind,str_ind - pct_ind | 0);
        return caml_call5
                (failwith_message(_aY_),str,pct_ind,option,symb,subfmt)}
      function compute_int_conv(pct_ind,str_ind,plus,hash,space,symb)
       {var plus$0=plus,hash$0=hash,space$0=space;
        for(;;)
         {if(0 === plus$0)
           if(0 === hash$0)
            if(0 === space$0)
             {var switcher=symb - 88 | 0;
              if(32 < switcher >>> 0)
               var switch$0=1;
              else
               switch(switcher)
                {case 0:return 8;
                 case 12:return 0;
                 case 17:return 3;
                 case 23:return 10;
                 case 29:return 12;
                 case 32:return 6;
                 default:var switch$0=1}}
            else
             {if(100 === symb)return 2;
              if(105 === symb)return 5;
              var switch$0=1}
           else
            if(0 === space$0)
             {if(88 === symb)return 9;
              if(111 === symb)return 11;
              if(120 === symb)return 7;
              var switch$0=0}
            else
             var switch$0=0;
          else
           if(0 === hash$0)
            if(0 === space$0)
             {if(100 === symb)return 1;
              if(105 === symb)return 4;
              var switch$0=1}
            else
             var switch$0=1;
           else
            var switch$0=0;
          if(! switch$0)
           {var switcher$0=symb - 88 | 0;
            if(! (32 < switcher$0 >>> 0))
             switch(switcher$0)
              {case 0:if(legacy_behavior$0)return 9;break;
               case 23:if(legacy_behavior$0)return 11;break;
               case 32:if(legacy_behavior$0)return 7;break;
               case 12:
               case 17:
               case 29:
                if(legacy_behavior$0){var hash$0=0;continue}
                return incompatible_flag(pct_ind,str_ind,symb,cst$47)
               }}
          if(0 === plus$0)
           {if(0 === space$0)throw [0,Assert_failure,_aW_];
            if(legacy_behavior$0){var space$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$44)}
          if(0 === space$0)
           {if(legacy_behavior$0){var plus$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$45)}
          if(legacy_behavior$0){var space$0=0;continue}
          return incompatible_flag(pct_ind,str_ind,32,cst$46)}}
      return parse(0,caml_ml_string_length(str))}
    function format_of_string_fmtty(str,fmtty)
     {var match=fmt_ebb_of_string(0,str),fmt=match[1];
      try
       {var _ov_=[0,type_format(fmt,fmtty),str];return _ov_}
      catch(_ow_)
       {_ow_ = caml_wrap_exception(_ow_);
        if(_ow_ === Type_mismatch)
         {var _ou_=string_of_fmtty(fmtty);
          return caml_call2(failwith_message(_aZ_),str,_ou_)}
        throw _ow_}}
    function format_of_string_format(str,param)
     {var
       str$0=param[2],
       fmt=param[1],
       match=fmt_ebb_of_string(0,str),
       fmt$0=match[1];
      try
       {var _os_=[0,type_format(fmt$0,fmtty_of_fmt(fmt)),str];return _os_}
      catch(_ot_)
       {_ot_ = caml_wrap_exception(_ot_);
        if(_ot_ === Type_mismatch)
         return caml_call2(failwith_message(_a0_),str,str$0);
        throw _ot_}}
    var
     CamlinternalFormat=
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_formatting_gen,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
    caml_register_global(679,CamlinternalFormat,"CamlinternalFormat");
    function kfprintf(k,o,param)
     {var fmt=param[1],_or_=0;
      return make_printf
              (function(o,acc){output_acc(o,acc);return caml_call1(k,o)},
               o,
               _or_,
               fmt)}
    function kbprintf(k,b,param)
     {var fmt=param[1],_oq_=0;
      return make_printf
              (function(b,acc){bufput_acc(b,acc);return caml_call1(k,b)},
               b,
               _oq_,
               fmt)}
    function ikfprintf(k,oc,param)
     {var fmt=param[1];return make_iprintf(k,oc,fmt)}
    function fprintf(oc,fmt){return kfprintf(function(_op_){return 0},oc,fmt)}
    function bprintf(b,fmt){return kbprintf(function(_oo_){return 0},b,fmt)}
    function ifprintf(oc,fmt)
     {return ikfprintf(function(_on_){return 0},oc,fmt)}
    function printf(fmt){return fprintf(stdout,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(param,acc)
       {var buf=create$1(64);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var
     Stdlib_printf=
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ksprintf];
    caml_register_global(680,Stdlib_printf,"Stdlib__printf");
    var
     Bad=[248,cst_Stdlib_Arg_Bad,caml_fresh_oo_id(0)],
     Help=[248,cst_Stdlib_Arg_Help,caml_fresh_oo_id(0)],
     Stop=[248,cst_Stdlib_Arg_Stop,caml_fresh_oo_id(0)];
    function assoc3(x,l)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var t=l$0[2],match=l$0[1],y2=match[2],y1=match[1];
          if(caml_equal(y1,x))return y2;
          var l$0=t;
          continue}
        throw Not_found}}
    function split$0(s)
     {var
       i=index$0(s,61),
       len=caml_ml_string_length(s),
       _om_=sub$0(s,i + 1 | 0,len - (i + 1 | 0) | 0);
      return [0,sub$0(s,0,i),_om_]}
    function make_symlist(prefix,sep,suffix,l)
     {if(l)
       {var t=l[2],h=l[1],_ol_=_g_(prefix,h);
        return _g_
                (fold_left$0(function(x,y){return _g_(x,_g_(sep,y))},_ol_,t),
                 suffix)}
      return cst_none}
    function help_action(param){throw [0,Stop,_a3_]}
    function add_help(speclist)
     {try
       {assoc3(cst_help$2,speclist);var _oi_=0,_og_=_oi_}
      catch(_ok_)
       {_ok_ = caml_wrap_exception(_ok_);
        if(_ok_ !== Not_found)throw _ok_;
        var
         _og_=
          [0,[0,cst_help,[0,help_action],cst_Display_this_list_of_options],0]}
      try
       {assoc3(cst_help$1,speclist);var _oh_=0,add2=_oh_}
      catch(_oj_)
       {_oj_ = caml_wrap_exception(_oj_);
        if(_oj_ !== Not_found)throw _oj_;
        var
         add2=
          [0,
           [0,cst_help$0,[0,help_action],cst_Display_this_list_of_options$0],
           0]}
      return append(speclist,append(_og_,add2))}
    function usage_b(buf,speclist,errmsg)
     {caml_call1(bprintf(buf,_a4_),errmsg);
      var _od_=add_help(speclist);
      return iter$0
              (function(param)
                {var
                  doc=param[3],
                  spec=param[2],
                  key=param[1],
                  _oe_=0 < caml_ml_string_length(doc)?1:0;
                 if(_oe_)
                  {if(11 === spec[0])
                    {var l=spec[1],_of_=make_symlist(cst$53,cst$52,cst$51,l);
                     return caml_call3(bprintf(buf,_a2_),key,_of_,doc)}
                   return caml_call2(bprintf(buf,_a1_),key,doc)}
                 return _oe_},
               _od_)}
    function usage_string(speclist,errmsg)
     {var b=create$1(200);usage_b(b,speclist,errmsg);return contents(b)}
    function usage(speclist,errmsg)
     {var _oc_=usage_string(speclist,errmsg);
      return caml_call1(eprintf(_a5_),_oc_)}
    var current=[0,0];
    function bool_of_string_opt$0(x)
     {try
       {var _oa_=[0,bool_of_string(x)];return _oa_}
      catch(_ob_)
       {_ob_ = caml_wrap_exception(_ob_);
        if(_ob_[1] === Invalid_argument)return 0;
        throw _ob_}}
    function int_of_string_opt$0(x)
     {try
       {var _n__=[0,caml_int_of_string(x)];return _n__}
      catch(_n$_)
       {_n$_ = caml_wrap_exception(_n$_);
        if(_n$_[1] === Failure)return 0;
        throw _n$_}}
    function float_of_string_opt$0(x)
     {try
       {var _n8_=[0,caml_float_of_string(x)];return _n8_}
      catch(_n9_)
       {_n9_ = caml_wrap_exception(_n9_);
        if(_n9_[1] === Failure)return 0;
        throw _n9_}}
    function parse_and_expand_argv_dynamic_aux
     (allow_expand,current,argv,speclist,anonfun,errmsg)
     {var initpos=current[1];
      function convert_error(error)
       {var
         b=create$1(200),
         progname=
          initpos < argv[1].length - 1
           ?caml_check_bound(argv[1],initpos)[initpos + 1]
           :cst$54;
        switch(error[0])
         {case 0:
           var _n7_=error[1];
           if(caml_string_notequal(_n7_,cst_help$3))
            if(caml_string_notequal(_n7_,cst_help$4))
             caml_call2(bprintf(b,_a6_),progname,_n7_);
           break;
          case 1:
           var expected=error[3],arg=error[2],opt=error[1];
           caml_call4(bprintf(b,_a9_),progname,arg,opt,expected);
           break;
          case 2:var s=error[1];caml_call2(bprintf(b,_a__),progname,s);break;
          default:var s$0=error[1];caml_call2(bprintf(b,_a$_),progname,s$0)}
        usage_b(b,speclist[1],errmsg);
        if(! caml_equal(error,_a7_))
         if(! caml_equal(error,_a8_))return [0,Bad,contents(b)];
        return [0,Help,contents(b)]}
      current[1]++;
      for(;;)
       {if(current[1] < argv[1].length - 1)
         {try
           {var _n0_=current[1],s=caml_check_bound(argv[1],_n0_)[_n0_ + 1];
            if(1 <= caml_ml_string_length(s))
             if(45 === caml_string_get(s,0))
              {try
                {var
                  follow$1=0,
                  _n2_=assoc3(s,speclist[1]),
                  action=_n2_,
                  follow$0=follow$1}
               catch(_n5_)
                {_n5_ = caml_wrap_exception(_n5_);
                 if(_n5_ !== Not_found)throw _n5_;
                 try
                  {var
                    match=split$0(s),
                    arg=match[2],
                    keyword=match[1],
                    follow=[0,arg],
                    _n1_=assoc3(keyword,speclist[1])}
                 catch(_n6_)
                  {_n6_ = caml_wrap_exception(_n6_);
                   if(_n6_ === Not_found)throw [0,Stop,[0,s]];
                   throw _n6_}
                 var action=_n1_,follow$0=follow}
               var
                no_arg$0=
                 function(s,follow)
                  {function no_arg(param)
                    {if(follow)
                      {var arg=follow[1];throw [0,Stop,[1,s,arg,cst_no_argument]]}
                     return 0}
                   return no_arg},
                no_arg=no_arg$0(s,follow$0),
                get_arg$0=
                 function(s,follow)
                  {function get_arg(param)
                    {if(follow){var arg=follow[1];return arg}
                     if((current[1] + 1 | 0) < argv[1].length - 1)
                      {var _n4_=current[1] + 1 | 0;
                       return caml_check_bound(argv[1],_n4_)[_n4_ + 1]}
                     throw [0,Stop,[2,s]]}
                   return get_arg},
                get_arg=get_arg$0(s,follow$0),
                consume_arg$0=
                 function(follow)
                  {function consume_arg(param)
                    {return follow?0:(current[1]++,0)}
                   return consume_arg},
                consume_arg=consume_arg$0(follow$0),
                treat_action$0=
                 function(s,no_arg,get_arg,consume_arg)
                  {function treat_action(param)
                    {switch(param[0])
                      {case 0:var f=param[1];return caml_call1(f,0);
                       case 1:
                        var
                         f$0=param[1],
                         arg=get_arg(0),
                         match=bool_of_string_opt$0(arg);
                        if(match)
                         {var s$0=match[1];caml_call1(f$0,s$0);return consume_arg(0)}
                        throw [0,Stop,[1,s,arg,cst_a_boolean]];
                       case 2:var r=param[1];no_arg(0);r[1] = 1;return 0;
                       case 3:var r$0=param[1];no_arg(0);r$0[1] = 0;return 0;
                       case 4:
                        var f$1=param[1],arg$0=get_arg(0);
                        caml_call1(f$1,arg$0);
                        return consume_arg(0);
                       case 5:
                        var r$1=param[1];r$1[1] = get_arg(0);return consume_arg(0);
                       case 6:
                        var
                         f$2=param[1],
                         arg$1=get_arg(0),
                         match$0=int_of_string_opt$0(arg$1);
                        if(match$0)
                         {var x=match$0[1];caml_call1(f$2,x);return consume_arg(0)}
                        throw [0,Stop,[1,s,arg$1,cst_an_integer]];
                       case 7:
                        var
                         r$2=param[1],
                         arg$2=get_arg(0),
                         match$1=int_of_string_opt$0(arg$2);
                        if(match$1)
                         {var x$0=match$1[1];r$2[1] = x$0;return consume_arg(0)}
                        throw [0,Stop,[1,s,arg$2,cst_an_integer$0]];
                       case 8:
                        var
                         f$3=param[1],
                         arg$3=get_arg(0),
                         match$2=float_of_string_opt$0(arg$3);
                        if(match$2)
                         {var x$1=match$2[1];
                          caml_call1(f$3,x$1);
                          return consume_arg(0)}
                        throw [0,Stop,[1,s,arg$3,cst_a_float]];
                       case 9:
                        var
                         r$3=param[1],
                         arg$4=get_arg(0),
                         match$3=float_of_string_opt$0(arg$4);
                        if(match$3)
                         {var x$2=match$3[1];r$3[1] = x$2;return consume_arg(0)}
                        throw [0,Stop,[1,s,arg$4,cst_a_float$0]];
                       case 10:
                        var specs=param[1];return iter$0(treat_action,specs);
                       case 11:
                        var f$4=param[2],symb=param[1],arg$5=get_arg(0);
                        if(mem(arg$5,symb))
                         {caml_call1(f$4,arg$5);return consume_arg(0)}
                        throw [0,
                               Stop,
                               [1,
                                s,
                                arg$5,
                                _g_(cst_one_of,make_symlist(cst$57,cst$56,cst$55,symb))]];
                       case 12:
                        var f$5=param[1];
                        for(;;)
                         {if(current[1] < (argv[1].length - 1 - 1 | 0))
                           {var _n3_=current[1] + 1 | 0;
                            caml_call1(f$5,caml_check_bound(argv[1],_n3_)[_n3_ + 1]);
                            consume_arg(0);
                            continue}
                          return 0}
                       default:
                        var f$6=param[1];
                        if(1 - allow_expand)
                         throw [0,
                                Invalid_argument,
                                cst_Arg_Expand_is_is_only_allowed_with_Arg_parse_and_expand_argv_dynamic];
                        var arg$6=get_arg(0),newarg=caml_call1(f$6,arg$6);
                        consume_arg(0);
                        var
                         before=sub$1(argv[1],0,current[1] + 1 | 0),
                         after=
                          sub$1
                           (argv[1],
                            current[1] + 1 | 0,
                            (argv[1].length - 1 - current[1] | 0) - 1 | 0);
                        argv[1]
                        =
                        caml_array_concat([0,before,[0,newarg,[0,after,0]]]);
                        return 0}}
                   return treat_action},
                treat_action=treat_action$0(s,no_arg,get_arg,consume_arg);
               treat_action(action);
               var switch$0=1}
             else
              var switch$0=0;
            else
             var switch$0=0;
            if(! switch$0)caml_call1(anonfun,s)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Bad){var m=exn[2];throw convert_error([3,m])}
            if(exn[1] === Stop){var e=exn[2];throw convert_error(e)}
            throw exn}
          current[1]++;
          continue}
        return 0}}
    function parse_and_expand_argv_dynamic
     (current,argv,speclist,anonfun,errmsg)
     {return parse_and_expand_argv_dynamic_aux
              (1,current,argv,speclist,anonfun,errmsg)}
    function parse_argv_dynamic(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_and_expand_argv_dynamic_aux
              (0,current$0,[0,argv],speclist,anonfun,errmsg)}
    function parse_argv(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_argv_dynamic
              ([0,current$0],argv,[0,speclist],anonfun,errmsg)}
    function parse(l,f,msg)
     {try
       {var _nZ_=parse_argv(0,_q_,l,f,msg);return _nZ_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_ba_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bb_),msg$1);return exit(0)}
        throw exn}}
    function parse_dynamic(l,f,msg)
     {try
       {var _nY_=parse_argv_dynamic(0,_q_,l,f,msg);return _nY_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_bc_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bd_),msg$1);return exit(0)}
        throw exn}}
    function parse_expand(l,f,msg)
     {try
       {var
         argv=[0,_q_],
         spec=[0,l],
         current$0=[0,current[1]],
         _nX_=parse_and_expand_argv_dynamic(current$0,argv,spec,f,msg);
        return _nX_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_be_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bf_),msg$1);return exit(0)}
        throw exn}}
    function second_word(s)
     {var len=caml_ml_string_length(s);
      function loop(n)
       {var n$0=n;
        for(;;)
         {if(len <= n$0)return len;
          if(32 === caml_string_get(s,n$0))
           {var n$1=n$0 + 1 | 0,n$0=n$1;continue}
          return n$0}}
      try
       {var n$0=index$0(s,9)}
      catch(_nV_)
       {_nV_ = caml_wrap_exception(_nV_);
        if(_nV_ === Not_found)
         {try
           {var n=index$0(s,32)}
          catch(_nW_)
           {_nW_ = caml_wrap_exception(_nW_);
            if(_nW_ === Not_found)return len;
            throw _nW_}
          return loop(n + 1 | 0)}
        throw _nV_}
      return loop(n$0 + 1 | 0)}
    function max_arg_len(cur,param)
     {var doc=param[3],spec=param[2],kwd=param[1];
      return 11 === spec[0]
              ?max(cur,caml_ml_string_length(kwd))
              :max(cur,caml_ml_string_length(kwd) + second_word(doc) | 0)}
    function replace_leading_tab(s)
     {var seen=[0,0];
      return map$2
              (function(c)
                {if(9 === c)if(! seen[1]){seen[1] = 1;return 32}return c},
               s)}
    function align(opt,speclist)
     {if(opt)var sth=opt[1],limit=sth;else var limit=max_int;
      var
       completed=add_help(speclist),
       len=fold_left$0(max_arg_len,0,completed),
       len$0=min(len,limit);
      return map$0
              (function(ksd)
                {var _nT_=ksd[2],_nU_=ksd[1];
                 if(caml_string_notequal(ksd[3],cst$58))
                  {if(11 === _nT_[0])
                    {var
                      msg$0=ksd[3],
                      cutcol$0=second_word(msg$0),
                      spaces$0=make$0(max(0,len$0 - cutcol$0 | 0) + 3 | 0,32);
                     return [0,
                             _nU_,
                             _nT_,
                             _g_(cst$59,_g_(spaces$0,replace_leading_tab(msg$0)))]}
                   var
                    msg=ksd[3],
                    cutcol=second_word(msg),
                    kwd_len=caml_ml_string_length(_nU_),
                    diff=(len$0 - kwd_len | 0) - cutcol | 0;
                   if(0 < diff)
                    {var
                      spaces=make$0(diff,32),
                      prefix=sub$0(replace_leading_tab(msg),0,cutcol),
                      suffix=
                       sub$0(msg,cutcol,caml_ml_string_length(msg) - cutcol | 0);
                     return [0,_nU_,_nT_,_g_(prefix,_g_(spaces,suffix))]}
                   return [0,_nU_,_nT_,replace_leading_tab(msg)]}
                 return ksd},
               completed)}
    function read_aux(trim,sep,file)
     {var ic=open_in_bin(file),buf=create$1(200),words=[0,0];
      function stash(param)
       {var s=contents(buf);
        if(trim)
         {var len=caml_ml_string_length(s);
          if(0 < len)
           if(13 === caml_string_get(s,len - 1 | 0))
            var _nS_=sub$0(s,0,len - 1 | 0),switch$0=1;
           else
            var switch$0=0;
          else
           var switch$0=0;
          if(! switch$0)var _nS_=s;
          var word=_nS_}
        else
         var word=s;
        words[1] = [0,word,words[1]];
        return clear$1(buf)}
      try
       {for(;;)
         {var c=caml_ml_input_char(ic);
          if(c === sep)stash(0);else add_char(buf,c);
          continue}}
      catch(_nR_)
       {_nR_ = caml_wrap_exception(_nR_);
        if(_nR_ === End_of_file)
         {if(0 < buf[2])stash(0);
          caml_ml_close_channel(ic);
          return of_list(rev(words[1]))}
        throw _nR_}}
    var _bg_=10,_bh_=1;
    function read_arg(_nQ_){return read_aux(_bh_,_bg_,_nQ_)}
    var _bi_=0,_bj_=0;
    function read_arg0(_nP_){return read_aux(_bj_,_bi_,_nP_)}
    function write_aux(sep,file,args)
     {var oc=open_out_bin(file);
      iter$3(function(s){return caml_call2(fprintf(oc,_bk_),s,sep)},args);
      return close_out(oc)}
    var _bl_=10;
    function write_arg(_nN_,_nO_){return write_aux(_bl_,_nN_,_nO_)}
    var _bm_=0;
    function write_arg0(_nL_,_nM_){return write_aux(_bm_,_nL_,_nM_)}
    var
     Stdlib_arg=
      [0,
       parse,
       parse_dynamic,
       parse_argv,
       parse_argv_dynamic,
       parse_and_expand_argv_dynamic,
       parse_expand,
       Help,
       Bad,
       usage,
       usage_string,
       align,
       current,
       read_arg,
       read_arg0,
       write_arg,
       write_arg0];
    caml_register_global(681,Stdlib_arg,"Stdlib__arg");
    var printers=[0,0];
    function field(x,i)
     {var f=x[i + 1];
      return is_block(f)
              ?caml_obj_tag(f) === 252
                ?caml_call1(sprintf(_bn_),f)
                :caml_obj_tag(f) === 253?string_of_float(f):cst$60
              :caml_call1(sprintf(_bo_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return cst$61;
      var _nJ_=other_fields(x,i + 1 | 0),_nK_=field(x,i);
      return caml_call2(sprintf(_bp_),_nK_,_nJ_)}
    function fields(x)
     {var match=x.length - 1;
      if(2 < match >>> 0)
       {var _nG_=other_fields(x,2),_nH_=field(x,1);
        return caml_call2(sprintf(_bq_),_nH_,_nG_)}
      switch(match)
       {case 0:return cst$62;
        case 1:return cst$63;
        default:var _nI_=field(x,1);return caml_call1(sprintf(_br_),_nI_)}}
    function to_string$4(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _nE_=caml_call1(hd,x),_nD_=_nE_}catch(_nF_){var _nD_=0}
            if(_nD_){var s=_nD_[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return cst_Out_of_memory;
          if(x === Stack_overflow)return cst_Stack_overflow;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (sprintf(locfmt),
                     file,
                     line,
                     char$0,
                     char$0 + 5 | 0,
                     cst_Pattern_matching_failed)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (sprintf(locfmt),
                     file$0,
                     line$0,
                     char$1,
                     char$1 + 6 | 0,
                     cst_Assertion_failed)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (sprintf(locfmt),
                     file$1,
                     line$1,
                     char$2,
                     char$2 + 6 | 0,
                     cst_Undefined_recursive_module)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return _g_(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function print(fct,arg)
     {try
       {var _nC_=caml_call1(fct,arg);return _nC_}
      catch(x)
       {x = caml_wrap_exception(x);
        var _nB_=to_string$4(x);
        caml_call1(eprintf(_bs_),_nB_);
        caml_ml_flush(stderr);
        throw x}}
    function catch$0(fct,arg)
     {try
       {var _nA_=caml_call1(fct,arg);return _nA_}
      catch(x)
       {x = caml_wrap_exception(x);
        caml_ml_flush(stdout);
        var _nz_=to_string$4(x);
        caml_call1(eprintf(_bt_),_nz_);
        return exit(2)}}
    function convert_raw_backtrace(bt)
     {return [0,runtime.caml_convert_raw_backtrace(bt)]}
    function format_backtrace_slot(pos,slot)
     {function info(is_raise)
       {return is_raise
                ?0 === pos?cst_Raised_at:cst_Re_raised_at
                :0 === pos
                  ?cst_Raised_by_primitive_operation_at
                  :cst_Called_from}
      if(0 === slot[0])
       {var
         _ns_=slot[5],
         _nt_=slot[4],
         _nu_=slot[3],
         _nv_=slot[6]?cst_inlined:cst$64,
         _nw_=slot[2],
         _nx_=info(slot[1]);
        return [0,caml_call6(sprintf(_bu_),_nx_,_nw_,_nv_,_nu_,_nt_,_ns_)]}
      if(slot[1])return 0;
      var _ny_=info(0);
      return [0,caml_call1(sprintf(_bv_),_ny_)]}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],_nq_=a.length - 1 - 1 | 0,_np_=0;
        if(! (_nq_ < 0))
         {var i=_np_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[i + 1]);
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bw_),str)}
            var _nr_=i + 1 | 0;
            if(_nq_ !== i){var i=_nr_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bx_)}
    function print_backtrace(outchan)
     {return print_raw_backtrace(outchan,caml_get_exception_raw_backtrace(0))}
    function raw_backtrace_to_string(raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],b=create$1(1024),_nn_=a.length - 1 - 1 | 0,_nm_=0;
        if(! (_nn_ < 0))
         {var i=_nm_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[i + 1]);
            if(match){var str=match[1];caml_call1(bprintf(b,_by_),str)}
            var _no_=i + 1 | 0;
            if(_nn_ !== i){var i=_no_;continue}
            break}}
        return contents(b)}
      return cst_Program_not_linked_with_g_cannot_print_stack_backtrace}
    function backtrace_slot_is_raise(param)
     {return 0 === param[0]?param[1]:param[1]}
    function backtrace_slot_is_inline(param){return 0 === param[0]?param[6]:0}
    function backtrace_slot_location(param)
     {return 0 === param[0]?[0,[0,param[2],param[3],param[4],param[5]]]:0}
    function backtrace_slots(raw_backtrace)
     {var match=convert_raw_backtrace(raw_backtrace);
      if(match)
       {var backtrace=match[1],i$1=backtrace.length - 1 - 1 | 0,i=i$1;
        for(;;)
         {if(-1 === i)
           var _nl_=0;
          else
           {var
             param=caml_check_bound(backtrace,i)[i + 1],
             _nk_=0 === param[0]?1:0;
            if(! _nk_){var i$0=i - 1 | 0,i=i$0;continue}
            var _nl_=_nk_}
          return _nl_?[0,backtrace]:0}}
      return 0}
    function get_backtrace(param)
     {return raw_backtrace_to_string(caml_get_exception_raw_backtrace(0))}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function exn_slot(x){return 0 === caml_obj_tag(x)?x[1]:x}
    function exn_slot_id(x){var slot=exn_slot(x);return slot[2]}
    function exn_slot_name(x){var slot=exn_slot(x);return slot[1]}
    var uncaught_exception_handler=[0,0];
    function set_uncaught_exception_handler(fn)
     {uncaught_exception_handler[1] = [0,fn];return 0}
    function _bz_(_nj_){return runtime.caml_raw_backtrace_next_slot(_nj_)}
    function _bA_(_ni_){return runtime.caml_convert_raw_backtrace_slot(_ni_)}
    function _bB_(_nh_,_ng_)
     {return runtime.caml_raw_backtrace_slot(_nh_,_ng_)}
    function _bC_(_nf_){return runtime.caml_raw_backtrace_length(_nf_)}
    var
     _bD_=
      [0,
       backtrace_slot_is_raise,
       backtrace_slot_is_inline,
       backtrace_slot_location,
       format_backtrace_slot];
    function _bE_(_ne_){return runtime.caml_get_current_callstack(_ne_)}
    function _bF_(_nd_){return caml_get_exception_raw_backtrace(_nd_)}
    function _bG_(_nc_){return runtime.caml_backtrace_status(_nc_)}
    var
     Stdlib_printexc=
      [0,
       to_string$4,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       function(_nb_){return runtime.caml_record_backtrace(_nb_)},
       _bG_,
       register_printer,
       _bF_,
       print_raw_backtrace,
       raw_backtrace_to_string,
       _bE_,
       set_uncaught_exception_handler,
       backtrace_slots,
       _bD_,
       _bC_,
       _bB_,
       _bA_,
       _bz_,
       exn_slot_id,
       exn_slot_name];
    caml_register_global(686,Stdlib_printexc,"Stdlib__printexc");
    function print_stat(c)
     {var st=runtime.caml_gc_stat(0),_mW_=st[4];
      caml_call1(fprintf(c,_bH_),_mW_);
      var _mX_=st[5];
      caml_call1(fprintf(c,_bI_),_mX_);
      var _mY_=st[14];
      caml_call1(fprintf(c,_bJ_),_mY_);
      fprintf(c,_bK_);
      var
       _mZ_=st[1],
       l1=caml_ml_string_length(caml_call1(sprintf(_bL_),_mZ_)),
       _m0_=st[1];
      caml_call2(fprintf(c,_bM_),l1,_m0_);
      var _m1_=st[2];
      caml_call2(fprintf(c,_bN_),l1,_m1_);
      var _m2_=st[3];
      caml_call2(fprintf(c,_bO_),l1,_m2_);
      fprintf(c,_bP_);
      var
       _m3_=st[15],
       l2=caml_ml_string_length(caml_call1(sprintf(_bQ_),_m3_)),
       _m4_=st[15];
      caml_call2(fprintf(c,_bR_),l2,_m4_);
      var _m5_=st[6];
      caml_call2(fprintf(c,_bS_),l2,_m5_);
      var _m6_=st[8];
      caml_call2(fprintf(c,_bT_),l2,_m6_);
      var _m7_=st[10];
      caml_call2(fprintf(c,_bU_),l2,_m7_);
      var _m8_=st[12];
      caml_call2(fprintf(c,_bV_),l2,_m8_);
      var _m9_=st[13];
      caml_call2(fprintf(c,_bW_),l2,_m9_);
      fprintf(c,_bX_);
      var _m__=st[9];
      caml_call1(fprintf(c,_bY_),_m__);
      var _m$_=st[11];
      caml_call1(fprintf(c,_bZ_),_m$_);
      var _na_=st[7];
      return caml_call1(fprintf(c,_b0_),_na_)}
    function allocated_bytes(param)
     {var
       match=runtime.caml_gc_counters(0),
       ma=match[3],
       pro=match[2],
       mi=match[1];
      return (mi + ma - pro) * 4}
    function create_alarm(f){return [0,1]}
    function delete_alarm(a){a[1] = 0;return 0}
    function _b1_(_mV_){return runtime.caml_final_release(_mV_)}
    function _b2_(_mU_,_mT_)
     {return runtime.caml_final_register_called_without_value(_mU_,_mT_)}
    var
     Stdlib_gc=
      [0,
       print_stat,
       allocated_bytes,
       function(_mS_,_mR_){return runtime.caml_final_register(_mS_,_mR_)},
       _b2_,
       _b1_,
       create_alarm,
       delete_alarm];
    caml_register_global(687,Stdlib_gc,"Stdlib__gc");
    function string(str)
     {return caml_md5_string(str,0,caml_ml_string_length(str))}
    function bytes(b){return string(caml_string_of_bytes(b))}
    function substring(str,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_string_length(str) - len | 0) < ofs))
         return caml_md5_string(str,ofs,len);
      return invalid_arg(cst_Digest_substring)}
    function subbytes(b,ofs,len)
     {return substring(caml_string_of_bytes(b),ofs,len)}
    function file(filename)
     {var ic=open_in_bin(filename);
      try
       {var d=runtime.caml_md5_chan(ic,-1)}
      catch(e){e = caml_wrap_exception(e);caml_ml_close_channel(ic);throw e}
      caml_ml_close_channel(ic);
      return d}
    function output$0(chan,digest){return output_string(chan,digest)}
    function input$0(chan){return really_input_string(chan,16)}
    function char_hex(n){var _mQ_=10 <= n?87:48;return n + _mQ_ | 0}
    function to_hex(d)
     {if(16 !== caml_ml_string_length(d))invalid_arg(cst_Digest_to_hex);
      var result=caml_create_bytes(32),i=0;
      for(;;)
       {var x=caml_string_get(d,i);
        caml_bytes_unsafe_set(result,i * 2 | 0,char_hex(x >>> 4 | 0));
        caml_bytes_unsafe_set(result,(i * 2 | 0) + 1 | 0,char_hex(x & 15));
        var _mP_=i + 1 | 0;
        if(15 !== i){var i=_mP_;continue}
        return caml_string_of_bytes(result)}}
    function from_hex(s)
     {if(32 !== caml_ml_string_length(s))invalid_arg(cst_Digest_from_hex);
      function digit(c)
       {if(65 <= c)
         {if(97 <= c)
           {if(! (103 <= c))return (c - 97 | 0) + 10 | 0}
          else
           if(! (71 <= c))return (c - 65 | 0) + 10 | 0}
        else
         {var switcher=c - 48 | 0;if(! (9 < switcher >>> 0))return c - 48 | 0}
        throw [0,Invalid_argument,cst_Digest_from_hex$0]}
      var result=caml_create_bytes(16),i=0;
      for(;;)
       {var i$0=2 * i | 0,_mN_=digit(caml_string_get(s,i$0 + 1 | 0));
        caml_bytes_set
         (result,i,chr((digit(caml_string_get(s,i$0)) << 4) + _mN_ | 0));
        var _mO_=i + 1 | 0;
        if(15 !== i){var i=_mO_;continue}
        return caml_string_of_bytes(result)}}
    var
     Stdlib_digest=
      [0,
       compare$2,
       equal$2,
       string,
       bytes,
       substring,
       subbytes,
       file,
       output$0,
       input$0,
       to_hex,
       from_hex];
    caml_register_global(688,Stdlib_digest,"Stdlib__digest");
    function new_state(param){return [0,caml_make_vect(55,0),0]}
    function assign(st1,st2)
     {blit$1(st2[1],0,st1[1],0,55);st1[2] = st2[2];return 0}
    function full_init(s,seed)
     {var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {caml_check_bound(s[1],i$0)[i$0 + 1] = i$0;
        var _mM_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_mM_;continue}
        var accu=[0,cst_x$1],_mI_=54 + max(55,l) | 0,_mH_=0;
        if(! (_mI_ < 0))
         {var i=_mH_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             x=caml_check_bound(seed$0,k)[k + 1];
            accu[1] = string(_g_(accu[1],caml_new_string("" + x)));
            var
             _mJ_=accu[1],
             _mD_=caml_string_get(_mJ_,3) << 24,
             _mE_=caml_string_get(_mJ_,2) << 16,
             _mF_=caml_string_get(_mJ_,1) << 8,
             _mG_=((caml_string_get(_mJ_,0) + _mF_ | 0) + _mE_ | 0) + _mD_ | 0,
             _mK_=(caml_check_bound(s[1],j)[j + 1] ^ _mG_) & 1073741823;
            caml_check_bound(s[1],j)[j + 1] = _mK_;
            var _mL_=i + 1 | 0;
            if(_mI_ !== i){var i=_mL_;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$1(seed)
     {var result=new_state(0);full_init(result,seed);return result}
    function make_self_init(param){return make$1(caml_sys_random_seed(0))}
    function copy$4(s){var result=new_state(0);assign(result,s);return result}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _mA_=s[2],
       curval=caml_check_bound(s[1],_mA_)[_mA_ + 1],
       _mB_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_mB_)[_mB_ + 1]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _mC_=s[2];
      caml_check_bound(s[1],_mC_)[_mC_ + 1] = newval30;
      return newval30}
    function int$0(s,bound)
     {if(! (1073741823 < bound))
       if(0 < bound)
        for(;;)
         {var r=bits(s),v=caml_mod(r,bound);
          if(((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
          return v}
      return invalid_arg(cst_Random_int)}
    function int32(s,bound)
     {if(caml_lessequal(bound,0))return invalid_arg(cst_Random_int32);
      for(;;)
       {var b1=bits(s),b2=(bits(s) & 1) << 30,r=b1 | b2,v=caml_mod(r,bound);
        if(caml_greaterthan(r - v | 0,(2147483647 - bound | 0) + 1 | 0))
         continue;
        return v}}
    function int64(s,bound)
     {if(caml_lessequal(bound,_b4_))return invalid_arg(cst_Random_int64);
      for(;;)
       {var
         b1=caml_int64_of_int32(bits(s)),
         b2=caml_int64_shift_left(caml_int64_of_int32(bits(s)),30),
         b3=caml_int64_shift_left(caml_int64_of_int32(bits(s) & 7),60),
         r=caml_int64_or(b1,caml_int64_or(b2,b3)),
         v=runtime.caml_int64_mod(r,bound);
        if
         (caml_greaterthan
           (caml_int64_sub(r,v),
            caml_int64_add(caml_int64_sub(max_int$1,bound),_b3_)))
         continue;
        return v}}
    function nativeint(s,bound){return int32(s,bound)}
    function float$0(s,bound)
     {var r1=bits(s),r2=bits(s);
      return (r1 / 1073741824. + r2) / 1073741824. * bound}
    function bool(s){return 0 === (bits(s) & 1)?1:0}
    var default$0=[0,_b5_.slice(),0];
    function bits$0(param){return bits(default$0)}
    function int$1(bound){return int$0(default$0,bound)}
    function int32$0(bound){return int32(default$0,bound)}
    function nativeint$0(bound){return nativeint(default$0,bound)}
    function int64$0(bound){return int64(default$0,bound)}
    function float$1(scale){return float$0(default$0,scale)}
    function bool$0(param){return bool(default$0)}
    function full_init$0(seed){return full_init(default$0,seed)}
    function init$3(seed){return full_init(default$0,[0,seed])}
    function self_init(param){return full_init$0(caml_sys_random_seed(0))}
    function get_state(param){return copy$4(default$0)}
    function set_state(s){return assign(default$0,s)}
    var
     _b6_=
      [0,
       make$1,
       make_self_init,
       copy$4,
       bits,
       int$0,
       int32,
       nativeint,
       int64,
       float$0,
       bool],
     Stdlib_random=
      [0,
       init$3,
       full_init$0,
       self_init,
       bits$0,
       int$1,
       int32$0,
       nativeint$0,
       int64$0,
       float$1,
       bool$0,
       _b6_,
       get_state,
       set_state];
    caml_register_global(689,Stdlib_random,"Stdlib__random");
    function hash$1(x){return caml_hash(10,100,0,x)}
    function hash_param(n1,n2,x){return caml_hash(n1,n2,0,x)}
    function seeded_hash(seed,x){return caml_hash(10,100,seed,x)}
    function ongoing_traversal(h)
     {var _my_=h.length - 1 < 4?1:0,_mz_=_my_ || (h[4] < 0?1:0);return _mz_}
    function flip_ongoing_traversal(h){h[4] = - h[4] | 0;return 0}
    try
     {var _cN_=caml_sys_getenv(cst_OCAMLRUNPARAM),params=_cN_}
    catch(_mw_)
     {_mw_ = caml_wrap_exception(_mw_);
      if(_mw_ !== Not_found)throw _mw_;
      try
       {var _cM_=caml_sys_getenv(cst_CAMLRUNPARAM),_b7_=_cM_}
      catch(_mx_)
       {_mx_ = caml_wrap_exception(_mx_);
        if(_mx_ !== Not_found)throw _mx_;
        var _b7_=cst$65}
      var params=_b7_}
    var
     randomized_default=contains$0(params,82),
     randomized=[0,randomized_default];
    function randomize(param){randomized[1] = 1;return 0}
    function is_randomized(param){return randomized[1]}
    var prng=[246,function(_mv_){return caml_call1(_b6_[2],0)}];
    function create$2(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized[1];
      var x=16;
      for(;;)
       {if(! (initial_size <= x))
         if(! (max_array_length < (x * 2 | 0)))
          {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _mt_=caml_obj_tag(prng),
          _mu_=250 === _mt_?prng[1]:246 === _mt_?force_lazy_block(prng):prng,
          seed=caml_call1(_b6_[4],_mu_);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function clear$2(h)
     {h[1] = 0;
      var len=h[2].length - 1,_mr_=len - 1 | 0,_mq_=0;
      if(! (_mr_ < 0))
       {var i=_mq_;
        for(;;)
         {caml_check_bound(h[2],i)[i + 1] = 0;
          var _ms_=i + 1 | 0;
          if(_mr_ !== i){var i=_ms_;continue}
          break}}
      return 0}
    function reset$0(h)
     {var len=h[2].length - 1;
      if(4 <= h.length - 1)
       if(len !== abs(h[4]))
        {h[1] = 0;h[2] = caml_make_vect(abs(h[4]),0);return 0}
      return clear$2(h)}
    function copy_bucketlist(param)
     {if(param)
       {var
         key=param[1],
         data=param[2],
         next=param[3],
         prec$0=[0,key,data,next],
         prec=prec$0,
         param$0=next;
        for(;;)
         {if(param$0)
           {var
             key$0=param$0[1],
             data$0=param$0[2],
             next$0=param$0[3],
             r=[0,key$0,data$0,next$0];
            if(prec){prec[3] = r;var prec=r,param$0=next$0;continue}
            throw [0,Assert_failure,_b8_]}
          return prec$0}}
      return 0}
    function copy$5(init)
     {var _mn_=init[4],_mo_=init[3],_mp_=map$3(copy_bucketlist,init[2]);
      return [0,init[1],_mp_,_mo_,_mn_]}
    function length$4(h){return h[1]}
    function resize$0(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize=osize * 2 | 0,
       _me_=nsize < max_array_length?1:0;
      if(_me_)
       {var
         ndata=caml_make_vect(nsize,0),
         ndata_tail=caml_make_vect(nsize,0),
         inplace=1 - ongoing_traversal(h);
        h[2] = ndata;
        var _mg_=osize - 1 | 0,_mf_=0;
        if(! (_mg_ < 0))
         {var i$0=_mf_;
          a:
          for(;;)
           {var cell$1=caml_check_bound(odata,i$0)[i$0 + 1],cell=cell$1;
            for(;;)
             {if(cell)
               {var
                 key=cell[1],
                 data=cell[2],
                 next=cell[3],
                 cell$0=inplace?cell:[0,key,data,0],
                 nidx=caml_call2(indexfun,h,key),
                 match=caml_check_bound(ndata_tail,nidx)[nidx + 1];
                if(match)
                 match[3] = cell$0;
                else
                 caml_check_bound(ndata,nidx)[nidx + 1] = cell$0;
                caml_check_bound(ndata_tail,nidx)[nidx + 1] = cell$0;
                var cell=next;
                continue}
              var _mm_=i$0 + 1 | 0;
              if(_mg_ !== i$0){var i$0=_mm_;continue a}
              break}
            break}}
        if(inplace)
         {var _mi_=nsize - 1 | 0,_mh_=0;
          if(! (_mi_ < 0))
           {var i=_mh_;
            for(;;)
             {var match$0=caml_check_bound(ndata_tail,i)[i + 1];
              if(match$0)match$0[3] = 0;
              var _ml_=i + 1 | 0;
              if(_mi_ !== i){var i=_ml_;continue}
              break}}
          var _mj_=0}
        else
         var _mj_=inplace;
        var _mk_=_mj_}
      else
       var _mk_=_me_;
      return _mk_}
    function key_index(h,key)
     {return 3 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :caml_mod
                (runtime.caml_hash_univ_param(10,100,key),h[2].length - 1)}
    function add$0(h,key,data)
     {var
       i=key_index(h,key),
       bucket=[0,key,data,caml_check_bound(h[2],i)[i + 1]];
      caml_check_bound(h[2],i)[i + 1] = bucket;
      h[1] = h[1] + 1 | 0;
      var _md_=h[2].length - 1 << 1 < h[1]?1:0;
      return _md_?resize$0(key_index,h):_md_}
    function remove(h,key)
     {var i=key_index(h,key),c$0=caml_check_bound(h[2],i)[i + 1],prec=0,c=c$0;
      for(;;)
       {if(c)
         {var k=c[1],next=c[3];
          if(0 === caml_compare(k,key))
           {h[1] = h[1] - 1 | 0;
            return prec
                    ?(prec[3] = next,0)
                    :caml_check_bound(h[2],i)[i + 1] = next}
          var prec=c,c=next;
          continue}
        return 0}}
    function find$0(h,key)
     {var _mc_=key_index(h,key),match=caml_check_bound(h[2],_mc_)[_mc_ + 1];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function find_opt$0(h,key)
     {var _mb_=key_index(h,key),match=caml_check_bound(h[2],_mb_)[_mb_ + 1];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return [0,d1];
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return [0,d2];
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return [0,d3];
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return [0,data];
                var param=next;
                continue}
              return 0}}
          return 0}
        return 0}
      return 0}
    function find_all$0(h,key)
     {function find_in_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var k=param$0[1],data=param$0[2],next=param$0[3];
            if(0 === caml_compare(k,key))return [0,data,find_in_bucket(next)];
            var param$0=next;
            continue}
          return 0}}
      var _ma_=key_index(h,key);
      return find_in_bucket(caml_check_bound(h[2],_ma_)[_ma_ + 1])}
    function replace(h,key,data)
     {var
       i=key_index(h,key),
       param$0=caml_check_bound(h[2],i)[i + 1],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3];
          if(0 !== caml_compare(k,key)){var param=next;continue}
          param[1] = key;
          param[2] = data;
          var _l9_=0}
        else
         var _l9_=1;
        if(_l9_)
         {caml_check_bound(h[2],i)[i + 1] = [0,key,data,param$0];
          h[1] = h[1] + 1 | 0;
          var _l__=h[2].length - 1 << 1 < h[1]?1:0;
          if(_l__)return resize$0(key_index,h);
          var _l$_=_l__}
        else
         var _l$_=_l9_;
        return _l$_}}
    function mem$1(h,key)
     {var
       _l8_=key_index(h,key),
       param$0=caml_check_bound(h[2],_l8_)[_l8_ + 1],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3],_l7_=0 === caml_compare(k,key)?1:0;
          if(_l7_)return _l7_;
          var param=next;
          continue}
        return 0}}
    function iter$7(f,h)
     {function do_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var key=param$0[1],data=param$0[2],next=param$0[3];
            caml_call2(f,key,data);
            var param$0=next;
            continue}
          return 0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],_l3_=d.length - 1 - 1 | 0,_l2_=0;
        if(! (_l3_ < 0))
         {var i=_l2_;
          for(;;)
           {do_bucket(caml_check_bound(d,i)[i + 1]);
            var _l6_=i + 1 | 0;
            if(_l3_ !== i){var i=_l6_;continue}
            break}}
        var _l4_=1 - old_trav,_l5_=_l4_?flip_ongoing_traversal(h):_l4_;
        return _l5_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function filter_map_inplace_bucket(f,h,i,prec,slot)
     {var prec$0=prec,slot$0=slot;
      for(;;)
       {if(slot$0)
         {var
           key=slot$0[1],
           data=slot$0[2],
           next=slot$0[3],
           match=caml_call2(f,key,data);
          if(match)
           {var data$0=match[1];
            if(prec$0)
             prec$0[3] = slot$0;
            else
             caml_check_bound(h[2],i)[i + 1] = slot$0;
            slot$0[2] = data$0;
            var prec$0=slot$0,slot$0=next;
            continue}
          h[1] = h[1] - 1 | 0;
          var slot$0=next;
          continue}
        return prec$0?(prec$0[3] = 0,0):caml_check_bound(h[2],i)[i + 1] = 0}}
    function filter_map_inplace(f,h)
     {var d=h[2],old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var _lZ_=d.length - 1 - 1 | 0,_lY_=0;
        if(! (_lZ_ < 0))
         {var i=_lY_;
          for(;;)
           {filter_map_inplace_bucket(f,h,i,0,caml_check_bound(h[2],i)[i + 1]);
            var _l1_=i + 1 | 0;
            if(_lZ_ !== i){var i=_l1_;continue}
            break}}
        var _l0_=0;
        return _l0_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function fold$1(f,h,init)
     {function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
        for(;;)
         {if(b$0)
           {var
             key=b$0[1],
             data=b$0[2],
             next=b$0[3],
             accu$1=caml_call3(f,key,data,accu$0),
             b$0=next,
             accu$0=accu$1;
            continue}
          return accu$0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],accu=[0,init],_lU_=d.length - 1 - 1 | 0,_lT_=0;
        if(! (_lU_ < 0))
         {var i=_lT_;
          for(;;)
           {var _lW_=accu[1];
            accu[1] = do_bucket(caml_check_bound(d,i)[i + 1],_lW_);
            var _lX_=i + 1 | 0;
            if(_lU_ !== i){var i=_lX_;continue}
            break}}
        if(1 - old_trav)flip_ongoing_traversal(h);
        var _lV_=accu[1];
        return _lV_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function bucket_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[3],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function stats(h)
     {var
       _lQ_=h[2],
       _lR_=0,
       mbl=
        fold_left$1(function(m,b){return max(m,bucket_length(0,b))},_lR_,_lQ_),
       histo=caml_make_vect(mbl + 1 | 0,0),
       _lS_=h[2];
      iter$3
       (function(b)
         {var l=bucket_length(0,b);
          return histo[l + 1] = caml_check_bound(histo,l)[l + 1] + 1 | 0},
        _lS_);
      return [0,h[1],h[2].length - 1,mbl,histo]}
    function to_seq$6(tbl)
     {var tbl_data=tbl[2];
      function aux(i,buck,param)
       {var i$0=i,buck$0=buck;
        for(;;)
         {if(buck$0)
           {var key=buck$0[1],data=buck$0[2],next=buck$0[3];
            return [0,[0,key,data],function(_lP_){return aux(i$0,next,_lP_)}]}
          if(i$0 === tbl_data.length - 1)return 0;
          var
           buck$1=caml_check_bound(tbl_data,i$0)[i$0 + 1],
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           buck$0=buck$1;
          continue}}
      var _lM_=0,_lN_=0;
      return function(_lO_){return aux(_lN_,_lM_,_lO_)}}
    function to_seq_keys(m)
     {var _lI_=to_seq$6(m);
      function _lJ_(_lL_){return _lL_[1]}
      return function(_lK_){return map(_lJ_,_lI_,_lK_)}}
    function to_seq_values(m)
     {var _lE_=to_seq$6(m);
      function _lF_(_lH_){return _lH_[2]}
      return function(_lG_){return map(_lF_,_lE_,_lG_)}}
    function add_seq$2(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return add$0(tbl,k,v)},
               i)}
    function replace_seq(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return replace(tbl,k,v)},
               i)}
    function of_seq$6(i){var tbl=create$2(0,16);replace_seq(tbl,i);return tbl}
    function MakeSeeded(H)
     {function key_index(h,key)
       {var _lD_=h[2].length - 1 - 1 | 0;
        return caml_call2(H[2],h[3],key) & _lD_}
      function add(h,key,data)
       {var
         i=key_index(h,key),
         bucket=[0,key,data,caml_check_bound(h[2],i)[i + 1]];
        caml_check_bound(h[2],i)[i + 1] = bucket;
        h[1] = h[1] + 1 | 0;
        var _lC_=h[2].length - 1 << 1 < h[1]?1:0;
        return _lC_?resize$0(key_index,h):_lC_}
      function remove(h,key)
       {var
         i=key_index(h,key),
         c$0=caml_check_bound(h[2],i)[i + 1],
         prec=0,
         c=c$0;
        for(;;)
         {if(c)
           {var k=c[1],next=c[3];
            if(caml_call2(H[1],k,key))
             {h[1] = h[1] - 1 | 0;
              return prec
                      ?(prec[3] = next,0)
                      :caml_check_bound(h[2],i)[i + 1] = next}
            var prec=c,c=next;
            continue}
          return 0}}
      function find(h,key)
       {var _lB_=key_index(h,key),match=caml_check_bound(h[2],_lB_)[_lB_ + 1];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(H[1],key,k1))return d1;
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(H[1],key,k2))return d2;
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(H[1],key,k3))return d3;
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(H[1],key,k))return data;
                  var param=next;
                  continue}
                throw Not_found}}
            throw Not_found}
          throw Not_found}
        throw Not_found}
      function find_opt(h,key)
       {var _lA_=key_index(h,key),match=caml_check_bound(h[2],_lA_)[_lA_ + 1];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(H[1],key,k1))return [0,d1];
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(H[1],key,k2))return [0,d2];
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(H[1],key,k3))return [0,d3];
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(H[1],key,k))return [0,data];
                  var param=next;
                  continue}
                return 0}}
            return 0}
          return 0}
        return 0}
      function find_all(h,key)
       {function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var k=param$0[1],d=param$0[2],next=param$0[3];
              if(caml_call2(H[1],k,key))return [0,d,find_in_bucket(next)];
              var param$0=next;
              continue}
            return 0}}
        var _lz_=key_index(h,key);
        return find_in_bucket(caml_check_bound(h[2],_lz_)[_lz_ + 1])}
      function replace(h,key,data)
       {var
         i=key_index(h,key),
         param$0=caml_check_bound(h[2],i)[i + 1],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3];
            if(! caml_call2(H[1],k,key)){var param=next;continue}
            param[1] = key;
            param[2] = data;
            var _lw_=0}
          else
           var _lw_=1;
          if(_lw_)
           {caml_check_bound(h[2],i)[i + 1] = [0,key,data,param$0];
            h[1] = h[1] + 1 | 0;
            var _lx_=h[2].length - 1 << 1 < h[1]?1:0;
            if(_lx_)return resize$0(key_index,h);
            var _ly_=_lx_}
          else
           var _ly_=_lw_;
          return _ly_}}
      function mem(h,key)
       {var
         _lv_=key_index(h,key),
         param$0=caml_check_bound(h[2],_lv_)[_lv_ + 1],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3],_lu_=caml_call2(H[1],k,key);
            if(_lu_)return _lu_;
            var param=next;
            continue}
          return 0}}
      return [0,
              create$2,
              clear$2,
              reset$0,
              copy$5,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$7,
              filter_map_inplace,
              fold$1,
              length$4,
              stats,
              to_seq$6,
              to_seq_keys,
              to_seq_values,
              add_seq$2,
              replace_seq,
              of_seq$6]}
    function Make(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       of_seq=include[22],
       _lt_=include[1];
      function create(sz){return caml_call2(_lt_,_b9_,sz)}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    var
     Stdlib_hashtbl=
      [0,
       create$2,
       clear$2,
       reset$0,
       copy$5,
       add$0,
       find$0,
       find_opt$0,
       find_all$0,
       mem$1,
       remove,
       replace,
       iter$7,
       filter_map_inplace,
       fold$1,
       length$4,
       randomize,
       is_randomized,
       stats,
       to_seq$6,
       to_seq_keys,
       to_seq_values,
       add_seq$2,
       replace_seq,
       of_seq$6,
       Make,
       MakeSeeded,
       hash$1,
       seeded_hash,
       hash_param,
       caml_hash];
    caml_register_global(690,Stdlib_hashtbl,"Stdlib__hashtbl");
    function length$5(x){return x.length - 1 - 2 | 0}
    function fill$1(ar,ofs,len,x)
     {if(0 <= ofs)
       if(0 <= len)
        if(! (length$5(ar) < (ofs + len | 0)))
         {var _lr_=(ofs + len | 0) - 1 | 0;
          if(! (_lr_ < ofs))
           {var i=ofs;
            for(;;)
             {caml_weak_set(ar,i,x);
              var _ls_=i + 1 | 0;
              if(_lr_ !== i){var i=_ls_;continue}
              break}}
          return 0}
      throw [0,Invalid_argument,cst_Weak_fill]}
    function Make$0(H)
     {var emptybucket=caml_weak_create(0);
      function get_index(t,h){return caml_mod(h & 2147483647,t[1].length - 1)}
      var limit=7;
      function create(sz)
       {var
         sz$0=7 <= sz?sz:7,
         sz$1=max_array_length < sz$0?max_array_length:sz$0;
        return [0,
                caml_make_vect(sz$1,emptybucket),
                caml_make_vect(sz$1,[0]),
                limit,
                0,
                0]}
      function clear(t)
       {var _lp_=t[1].length - 1 - 1 | 0,_lo_=0;
        if(! (_lp_ < 0))
         {var i=_lo_;
          for(;;)
           {caml_check_bound(t[1],i)[i + 1] = emptybucket;
            caml_check_bound(t[2],i)[i + 1] = [0];
            var _lq_=i + 1 | 0;
            if(_lp_ !== i){var i=_lq_;continue}
            break}}
        t[3] = limit;
        t[4] = 0;
        return 0}
      function fold(f,t,init)
       {var _ln_=t[1],i=0;
        return fold_right$0
                (function(b,accu$1)
                  {var i$0=i,accu=accu$1;
                   for(;;)
                    {if(length$5(b) <= i$0)return accu;
                     var match=caml_weak_get(b,i$0);
                     if(match)
                      {var
                        v=match[1],
                        accu$0=caml_call2(f,v,accu),
                        i$1=i$0 + 1 | 0,
                        i$0=i$1,
                        accu=accu$0;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2;
                     continue}},
                 _ln_,
                 init)}
      function iter(f,t)
       {var _lm_=t[1],i=0;
        return iter$3
                (function(b)
                  {var i$0=i;
                   for(;;)
                    {if(length$5(b) <= i$0)return 0;
                     var match=caml_weak_get(b,i$0);
                     if(match)
                      {var v=match[1];
                       caml_call1(f,v);
                       var i$1=i$0 + 1 | 0,i$0=i$1;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2;
                     continue}},
                 _lm_)}
      function count_bucket(i,b,accu)
       {var i$0=i,accu$0=accu;
        for(;;)
         {if(length$5(b) <= i$0)return accu$0;
          var
           _ll_=caml_weak_check(b,i$0)?1:0,
           accu$1=accu$0 + _ll_ | 0,
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           accu$0=accu$1;
          continue}}
      function count(t)
       {var _lg_=0,_lh_=t[1],_li_=0;
        return fold_right$0
                (function(_lj_,_lk_){return count_bucket(_li_,_lj_,_lk_)},
                 _lh_,
                 _lg_)}
      function add_aux(t,setter,d,h,index)
       {var
         bucket$0=caml_check_bound(t[1],index)[index + 1],
         hashes=caml_check_bound(t[2],index)[index + 1],
         sz=length$5(bucket$0),
         i$3=0;
        for(;;)
         {if(sz <= i$3)
           {var
             newsz=
              min(((3 * sz | 0) / 2 | 0) + 3 | 0,max_array_length - 2 | 0);
            if(newsz <= sz)
             failwith(cst_Weak_Make_hash_bucket_cannot_grow_more);
            var
             newbucket=caml_weak_create(newsz),
             newhashes=caml_make_vect(newsz,0);
            caml_weak_blit(bucket$0,0,newbucket,0,sz);
            blit$1(hashes,0,newhashes,0,sz);
            caml_call3(setter,newbucket,sz,d);
            caml_check_bound(newhashes,sz)[sz + 1] = h;
            caml_check_bound(t[1],index)[index + 1] = newbucket;
            caml_check_bound(t[2],index)[index + 1] = newhashes;
            var _lc_=sz <= t[3]?1:0,_ld_=_lc_?t[3] < newsz?1:0:_lc_;
            if(_ld_)
             {t[4] = t[4] + 1 | 0;
              var i$4=0;
              for(;;)
               {var
                 _k7_=t[5],
                 bucket=caml_check_bound(t[1],_k7_)[_k7_ + 1],
                 _k8_=t[5],
                 hbucket=caml_check_bound(t[2],_k8_)[_k8_ + 1],
                 n=length$5(bucket),
                 prev_len=(((n - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
                 live=count_bucket(0,bucket,0);
                if(live <= prev_len)
                 {var j$2=length$5(bucket) - 1 | 0,i$0=0,j=j$2;
                  for(;;)
                   {if(prev_len <= j)
                     {if(caml_weak_check(bucket,i$0))
                       {var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                      if(caml_weak_check(bucket,j))
                       {caml_weak_blit(bucket,j,bucket,i$0,1);
                        var _k9_=caml_check_bound(hbucket,j)[j + 1];
                        caml_check_bound(hbucket,i$0)[i$0 + 1] = _k9_;
                        var j$0=j - 1 | 0,i$2=i$0 + 1 | 0,i$0=i$2,j=j$0;
                        continue}
                      var j$1=j - 1 | 0,j=j$1;
                      continue}
                    if(0 === prev_len)
                     {var _k__=t[5];
                      caml_check_bound(t[1],_k__)[_k__ + 1] = emptybucket;
                      var _k$_=t[5];
                      caml_check_bound(t[2],_k$_)[_k$_ + 1] = [0]}
                    else
                     {caml_obj_truncate(bucket,prev_len + 2 | 0);
                      caml_obj_truncate(hbucket,prev_len)}
                    var _la_=t[3] < n?1:0,_lb_=_la_?prev_len <= t[3]?1:0:_la_;
                    if(_lb_)t[4] = t[4] - 1 | 0;
                    break}}
                t[5] = caml_mod(t[5] + 1 | 0,t[1].length - 1);
                var _lf_=i$4 + 1 | 0;
                if(2 !== i$4){var i$4=_lf_;continue}
                break}}
            var _le_=((t[1].length - 1) / 2 | 0) < t[4]?1:0;
            if(_le_)
             {var
               n$0=t[1].length - 1,
               newlen=min(((3 * n$0 | 0) / 2 | 0) + 3 | 0,max_array_length);
              if(n$0 < newlen)
               {var newt=create(newlen),_k6_=t[1],i=0;
                iteri$2
                 (function(j,ob)
                   {var i$0=i;
                    for(;;)
                     {if(length$5(ob) <= i$0)return 0;
                      var match=caml_weak_check(ob,i$0);
                      if(0 === match){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                      var
                       oh=caml_check_bound(t[2],j)[j + 1],
                       setter$0=
                        function(i)
                         {function setter(nb,ni,param)
                           {return caml_weak_blit(ob,i,nb,ni,1)}
                          return setter},
                       setter=setter$0(i$0),
                       h=caml_check_bound(oh,i$0)[i$0 + 1];
                      add_aux(newt,setter,0,h,get_index(newt,h));
                      var i$2=i$0 + 1 | 0,i$0=i$2;
                      continue}},
                  _k6_);
                t[1] = newt[1];
                t[2] = newt[2];
                t[3] = newt[3];
                t[4] = newt[4];
                t[5] = caml_mod(t[5],newt[1].length - 1);
                return 0}
              t[3] = max_int;
              t[4] = 0;
              return 0}
            return _le_}
          if(caml_weak_check(bucket$0,i$3))
           {var i$5=i$3 + 1 | 0,i$3=i$5;continue}
          caml_call3(setter,bucket$0,i$3,d);
          return caml_check_bound(hashes,i$3)[i$3 + 1] = h}}
      function add(t,d)
       {var h=caml_call1(H[2],d);
        return add_aux(t,caml_weak_set,[0,d],h,get_index(t,h))}
      function find_or(t,d,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[index + 1],
         hashes=caml_check_bound(t[2],index)[index + 1],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return caml_call2(ifnotfound,h,index);
          if(h === caml_check_bound(hashes,i)[i + 1])
           {var match=caml_weak_get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var match$0=caml_weak_get(bucket,i);
                if(match$0){var v$0=match$0[1];return v$0}
                var i$0=i + 1 | 0,i=i$0;
                continue}}
            var i$1=i + 1 | 0,i=i$1;
            continue}
          var i$2=i + 1 | 0,i=i$2;
          continue}}
      function merge(t,d)
       {return find_or
                (t,
                 d,
                 function(h,index)
                  {add_aux(t,caml_weak_set,[0,d],h,index);return d})}
      function find(t,d)
       {return find_or(t,d,function(h,index){throw Not_found})}
      function find_opt(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[index + 1],
         hashes=caml_check_bound(t[2],index)[index + 1],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return 0;
          if(h === caml_check_bound(hashes,i)[i + 1])
           {var match=caml_weak_get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var v$0=caml_weak_get(bucket,i);
                if(v$0)return v$0;
                var i$0=i + 1 | 0,i=i$0;
                continue}}
            var i$1=i + 1 | 0,i=i$1;
            continue}
          var i$2=i + 1 | 0,i=i$2;
          continue}}
      function find_shadow(t,d,iffound,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[index + 1],
         hashes=caml_check_bound(t[2],index)[index + 1],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return ifnotfound;
          if(h === caml_check_bound(hashes,i)[i + 1])
           {var match=caml_weak_get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))return caml_call2(iffound,bucket,i)}
            var i$0=i + 1 | 0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}}
      function remove(t,d)
       {var _k5_=0;
        return find_shadow
                (t,d,function(w,i){return caml_weak_set(w,i,0)},_k5_)}
      function mem(t,d)
       {var _k4_=0;return find_shadow(t,d,function(w,i){return 1},_k4_)}
      function find_all(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[index + 1],
         hashes=caml_check_bound(t[2],index)[index + 1],
         sz=length$5(bucket),
         i=0,
         accu=0;
        for(;;)
         {if(sz <= i)return accu;
          if(h === caml_check_bound(hashes,i)[i + 1])
           {var match=caml_weak_get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var match$0=caml_weak_get(bucket,i);
                if(match$0)
                 {var
                   v$0=match$0[1],
                   accu$0=[0,v$0,accu],
                   i$0=i + 1 | 0,
                   i=i$0,
                   accu=accu$0;
                  continue}
                var i$1=i + 1 | 0,i=i$1;
                continue}}
            var i$2=i + 1 | 0,i=i$2;
            continue}
          var i$3=i + 1 | 0,i=i$3;
          continue}}
      function stats(t)
       {var len=t[1].length - 1,lens=map$3(length$5,t[1]);
        sort(caml_int_compare,lens);
        var
         _kW_=0,
         totlen=
          fold_left$1(function(_k3_,_k2_){return _k3_ + _k2_ | 0},_kW_,lens),
         _kX_=len - 1 | 0,
         _kZ_=len / 2 | 0,
         _kY_=caml_check_bound(lens,_kX_)[_kX_ + 1],
         _k0_=caml_check_bound(lens,_kZ_)[_kZ_ + 1],
         _k1_=caml_check_bound(lens,0)[1];
        return [0,len,count(t),totlen,_k1_,_k0_,_kY_]}
      return [0,
              create,
              clear,
              merge,
              add,
              remove,
              find,
              find_opt,
              find_all,
              mem,
              iter,
              fold,
              count,
              stats]}
    var
     Stdlib_weak=
      [0,
       caml_weak_create,
       length$5,
       caml_weak_set,
       caml_weak_get,
       caml_weak_get_copy,
       caml_weak_check,
       fill$1,
       caml_weak_blit,
       Make$0];
    caml_register_global(691,Stdlib_weak,"Stdlib__weak");
    function add_queue(x,q)
     {var c=[0,x,0],_kV_=q[1];
      return _kV_?(q[1] = c,_kV_[2] = c,0):(q[1] = c,q[2] = c,0)}
    var Empty_queue=[248,cst_Stdlib_Format_Empty_queue,caml_fresh_oo_id(0)];
    function take_queue(q)
     {var _kU_=q[2];
      if(_kU_)
       {var x=_kU_[1],tl=_kU_[2];q[2] = tl;if(0 === tl)q[1] = 0;return x}
      throw Empty_queue}
    function pp_enqueue(state,token)
     {var len=token[3];
      state[13] = state[13] + len | 0;
      return add_queue(token,state[28])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function break_new_line(state,offset,width)
     {pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      return caml_call1(state[21],state[10])}
    function break_line(state,width){return break_new_line(state,0,width)}
    function break_same_line(state,width)
     {state[9] = state[9] - width | 0;return caml_call1(state[20],width)}
    function pp_force_break_line(state)
     {var _kR_=state[2];
      if(_kR_)
       {var
         match=_kR_[1],
         width=match[2],
         bl_ty=match[1],
         _kS_=state[9] < width?1:0;
        if(_kS_)
         {if(0 !== bl_ty)return 5 <= bl_ty?0:break_line(state,width);
          var _kT_=0}
        else
         var _kT_=_kS_;
        return _kT_}
      return pp_output_newline(state)}
    function pp_skip_token(state)
     {var match=take_queue(state[28]),size=match[1],len=match[3];
      state[12] = state[12] - len | 0;
      state[9] = state[9] + size | 0;
      return 0}
    function format_pp_token(state,size,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var _kG_=state[3];
          if(_kG_)
           {var
             match=_kG_[1],
             tabs=match[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return runtime.caml_lessthan(n,x)
                          ?[0,n,ls]
                          :[0,x,add_tab(n,l)]}
                return [0,n,0]};
            tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
            return 0}
          return 0;
         case 1:
          var _kH_=state[2];
          if(_kH_){var ls=_kH_[2];state[2] = ls;return 0}
          return 0;
         case 2:
          var _kI_=state[3];
          if(_kI_){var ls$0=_kI_[2];state[3] = ls$0;return 0}
          return 0;
         case 3:
          var _kJ_=state[2];
          if(_kJ_)
           {var match$0=_kJ_[1],width=match$0[2];
            return break_line(state,width)}
          return pp_output_newline(state);
         case 4:
          var _kK_=state[10] !== (state[6] - state[9] | 0)?1:0;
          return _kK_?pp_skip_token(state):_kK_;
         default:
          var _kL_=state[5];
          if(_kL_)
           {var
             tags=_kL_[2],
             tag_name=_kL_[1],
             marker=caml_call1(state[25],tag_name);
            pp_output_string(state,marker);
            state[5] = tags;
            return 0}
          return 0}
      else
       switch(param[0])
        {case 0:
          var s=param[1];
          state[9] = state[9] - size | 0;
          pp_output_string(state,s);
          state[11] = 0;
          return 0;
         case 1:
          var off=param[2],n=param[1],_kM_=state[2];
          if(_kM_)
           {var match$1=_kM_[1],width$0=match$1[2],ty=match$1[1];
            switch(ty)
             {case 0:return break_same_line(state,n);
              case 1:return break_new_line(state,off,width$0);
              case 2:return break_new_line(state,off,width$0);
              case 3:
               return state[9] < size
                       ?break_new_line(state,off,width$0)
                       :break_same_line(state,n);
              case 4:
               return state[11]
                       ?break_same_line(state,n)
                       :state[9] < size
                         ?break_new_line(state,off,width$0)
                         :((state[6] - width$0 | 0) + off | 0) < state[10]
                           ?break_new_line(state,off,width$0)
                           :break_same_line(state,n);
              default:return break_same_line(state,n)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n$0=param[1],
           insertion_point=state[6] - state[9] | 0,
           _kN_=state[3];
          if(_kN_)
           {var
             match$2=_kN_[1],
             tabs$0=match$2[1],
             find=
              function(n,param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var l=param$0[2],x=param$0[1];
                    if(caml_greaterequal(x,n))return x;
                    var param$0=l;
                    continue}
                  throw Not_found}},
             _kO_=tabs$0[1];
            if(_kO_)
             {var x=_kO_[1];
              try
               {var _kP_=find(insertion_point,tabs$0[1]),x$0=_kP_}
              catch(_kQ_)
               {_kQ_ = caml_wrap_exception(_kQ_);
                if(_kQ_ !== Not_found)throw _kQ_;
                var x$0=x}
              var tab=x$0}
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,offset + n$0 | 0)
                    :break_new_line(state,tab + off$0 | 0,state[6])}
          return 0;
         case 3:
          var
           ty$0=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)pp_force_break_line(state);
          var
           offset$0=state[9] - off$1 | 0,
           bl_type=1 === ty$0?1:state[9] < size?ty$0:5;
          state[2] = [0,[0,bl_type,offset$0],state[2]];
          return 0;
         case 4:var tbox=param[1];state[3] = [0,tbox,state[3]];return 0;
         default:
          var tag_name$0=param[1],marker$0=caml_call1(state[24],tag_name$0);
          pp_output_string(state,marker$0);
          state[5] = [0,tag_name$0,state[5]];
          return 0}}
    function advance_loop(state)
     {for(;;)
       {var _kC_=state[28][2];
        if(_kC_)
         {var
           x=_kC_[1],
           size=x[1],
           len=x[3],
           tok=x[2],
           _kD_=size < 0?1:0,
           _kE_=_kD_?(state[13] - state[12] | 0) < state[9]?1:0:_kD_,
           _kF_=1 - _kE_;
          if(_kF_)
           {take_queue(state[28]);
            var size$0=0 <= size?size:pp_infinity;
            format_pp_token(state,size$0,tok);
            state[12] = len + state[12] | 0;
            continue}
          return _kF_}
        throw Empty_queue}}
    function advance_left(state)
     {try
       {var _kA_=advance_loop(state);return _kA_}
      catch(_kB_)
       {_kB_ = caml_wrap_exception(_kB_);
        if(_kB_ === Empty_queue)return 0;
        throw _kB_}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    var q_elem=[0,-1,_b__,0],scan_stack_bottom=[0,[0,-1,q_elem],0];
    function clear_scan_stack(state){state[1] = scan_stack_bottom;return 0}
    function set_size(state,ty)
     {var _kw_=state[1];
      if(_kw_)
       {var
         match=_kw_[1],
         queue_elem=match[2],
         left_tot=match[1],
         size=queue_elem[1],
         t=_kw_[2],
         tok=queue_elem[2];
        if(left_tot < state[12])return clear_scan_stack(state);
        if(typeof tok !== "number")
         switch(tok[0])
          {case 3:
            var
             _ky_=1 - ty,
             _kz_=
              _ky_?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):_ky_;
            return _kz_;
           case 1:
           case 2:
            var
             _kx_=
              ty?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):ty;
            return _kx_
           }
        return 0}
      return 0}
    function scan_push(state,b,tok)
     {pp_enqueue(state,tok);
      if(b)set_size(state,1);
      state[1] = [0,[0,state[13],tok],state[1]];
      return 0}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var elem=[0,- state[13] | 0,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _ku_=state[14] === state[15]?1:0;
      if(_ku_)
       {var _kv_=state[16],len=caml_ml_string_length(_kv_);
        return enqueue_string_as(state,len,_kv_)}
      return _ku_}
    function pp_close_box(state,param)
     {var _ks_=1 < state[14]?1:0;
      if(_ks_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,0,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _kt_=0}
      else
       var _kt_=_ks_;
      return _kt_}
    function pp_open_tag(state,tag_name)
     {if(state[22])
       {state[4] = [0,tag_name,state[4]];caml_call1(state[26],tag_name)}
      var _kr_=state[23];
      return _kr_?pp_enqueue(state,[0,0,[5,tag_name],0]):_kr_}
    function pp_close_tag(state,param)
     {if(state[23])pp_enqueue(state,[0,0,5,0]);
      var _ko_=state[22];
      if(_ko_)
       {var _kp_=state[4];
        if(_kp_)
         {var tags=_kp_[2],tag_name=_kp_[1];
          caml_call1(state[27],tag_name);
          state[4] = tags;
          return 0}
        var _kq_=0}
      else
       var _kq_=_ko_;
      return _kq_}
    function pp_set_print_tags(state,b){state[22] = b;return 0}
    function pp_set_mark_tags(state,b){state[23] = b;return 0}
    function pp_get_print_tags(state,param){return state[22]}
    function pp_get_mark_tags(state,param){return state[23]}
    function pp_set_tags(state,b)
     {pp_set_print_tags(state,b);return pp_set_mark_tags(state,b)}
    function pp_get_formatter_tag_functions(state,param)
     {return [0,state[24],state[25],state[26],state[27]]}
    function pp_set_formatter_tag_functions(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      state[24] = mot;
      state[25] = mct;
      state[26] = pot;
      state[27] = pct;
      return 0}
    function pp_rinit(state)
     {state[12] = 1;
      state[13] = 1;
      var _kn_=state[28];
      _kn_[1] = 0;
      _kn_[2] = 0;
      clear_scan_stack(state);
      state[2] = 0;
      state[3] = 0;
      state[4] = 0;
      state[5] = 0;
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_box_gen(state,0,3)}
    function pp_flush_queue(state,b)
     {var _km_=state[4];
      iter$0(function(param){return pp_close_tag(state,0)},_km_);
      for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        return pp_rinit(state)}}
    function pp_print_as_size(state,size,s)
     {var _kl_=state[14] < state[15]?1:0;
      return _kl_?enqueue_string_as(state,size,s):_kl_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_string(state,s)
     {return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp_print_int(state,i)
     {return pp_print_string(state,caml_new_string("" + i))}
    function pp_print_float(state,f)
     {return pp_print_string(state,string_of_float(f))}
    function pp_print_bool(state,b)
     {return pp_print_string(state,string_of_bool(b))}
    function pp_print_char(state,c){return pp_print_as(state,1,make$0(1,c))}
    function pp_open_hbox(state,param){return pp_open_box_gen(state,0,0)}
    function pp_open_vbox(state,indent)
     {return pp_open_box_gen(state,indent,1)}
    function pp_open_hvbox(state,indent)
     {return pp_open_box_gen(state,indent,2)}
    function pp_open_hovbox(state,indent)
     {return pp_open_box_gen(state,indent,3)}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_newline(state,param)
     {pp_flush_queue(state,1);return caml_call1(state[18],0)}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _kk_=state[14] < state[15]?1:0;
      return _kk_?enqueue_advance(state,[0,0,3,0]):_kk_}
    function pp_print_if_newline(state,param)
     {var _kj_=state[14] < state[15]?1:0;
      return _kj_?enqueue_advance(state,[0,0,4,0]):_kj_}
    function pp_print_break(state,width,offset)
     {var _ki_=state[14] < state[15]?1:0;
      if(_ki_)
       {var elem=[0,- state[13] | 0,[1,width,offset],width];
        return scan_push(state,1,elem)}
      return _ki_}
    function pp_print_space(state,param){return pp_print_break(state,1,0)}
    function pp_print_cut(state,param){return pp_print_break(state,0,0)}
    function pp_open_tbox(state,param)
     {state[14] = state[14] + 1 | 0;
      var _kh_=state[14] < state[15]?1:0;
      if(_kh_)
       {var elem=[0,0,[4,[0,[0,0]]],0];return enqueue_advance(state,elem)}
      return _kh_}
    function pp_close_tbox(state,param)
     {var _ke_=1 < state[14]?1:0;
      if(_ke_)
       {var _kf_=state[14] < state[15]?1:0;
        if(_kf_)
         {var elem=[0,0,2,0];
          enqueue_advance(state,elem);
          state[14] = state[14] - 1 | 0;
          var _kg_=0}
        else
         var _kg_=_kf_}
      else
       var _kg_=_ke_;
      return _kg_}
    function pp_print_tbreak(state,width,offset)
     {var _kd_=state[14] < state[15]?1:0;
      if(_kd_)
       {var elem=[0,- state[13] | 0,[2,width,offset],width];
        return scan_push(state,1,elem)}
      return _kd_}
    function pp_print_tab(state,param){return pp_print_tbreak(state,0,0)}
    function pp_set_tab(state,param)
     {var _kc_=state[14] < state[15]?1:0;
      if(_kc_){var elem=[0,0,0,0];return enqueue_advance(state,elem)}
      return _kc_}
    function pp_set_max_boxes(state,n)
     {var _ka_=1 < n?1:0,_kb_=_ka_?(state[15] = n,0):_ka_;return _kb_}
    function pp_get_max_boxes(state,param){return state[15]}
    function pp_over_max_boxes(state,param)
     {return state[14] === state[15]?1:0}
    function pp_set_ellipsis_text(state,s){state[16] = s;return 0}
    function pp_get_ellipsis_text(state,param){return state[16]}
    function pp_limit(n){return n < 1000000010?n:1000000009}
    function pp_set_max_indent(state,n$0)
     {var n$1=state[6] - n$0 | 0,_j$_=1 <= n$1?1:0;
      if(_j$_)
       {var n=pp_limit(n$1);
        state[7] = n;
        state[8] = state[6] - state[7] | 0;
        return pp_rinit(state)}
      return _j$_}
    function pp_get_max_indent(state,param){return state[8]}
    function pp_set_margin(state,n)
     {var _j__=1 <= n?1:0;
      if(_j__)
       {var n$0=pp_limit(n);
        state[6] = n$0;
        var
         new_max_indent=
          state[8] <= state[6]
           ?state[8]
           :max(max(state[6] - state[7] | 0,state[6] / 2 | 0),1);
        return pp_set_max_indent(state,new_max_indent)}
      return _j__}
    function pp_get_margin(state,param){return state[6]}
    function pp_set_formatter_out_functions(state,param)
     {var j=param[5],i=param[4],h=param[3],g=param[2],f=param[1];
      state[17] = f;
      state[18] = g;
      state[19] = h;
      state[20] = i;
      state[21] = j;
      return 0}
    function pp_get_formatter_out_functions(state,param)
     {return [0,state[17],state[18],state[19],state[20],state[21]]}
    function pp_set_formatter_output_functions(state,f,g)
     {state[17] = f;state[18] = g;return 0}
    function pp_get_formatter_output_functions(state,param)
     {return [0,state[17],state[18]]}
    function display_newline(state,param)
     {return caml_call3(state[17],cst$66,0,1)}
    var blank_line=make$0(80,32);
    function display_indent(state,n)
     {var n$0=n;
      for(;;)
       {var _j9_=0 < n$0?1:0;
        if(_j9_)
         {if(80 < n$0)
           {caml_call3(state[17],blank_line,0,80);
            var n$1=n$0 - 80 | 0,n$0=n$1;
            continue}
          return caml_call3(state[17],blank_line,0,n$0)}
        return _j9_}}
    function pp_set_formatter_out_channel(state,oc)
     {state[17]
      =
      function(_j6_,_j7_,_j8_){return output_substring(oc,_j6_,_j7_,_j8_)};
      state[18] = function(param){return caml_ml_flush(oc)};
      state[19] = function(_j5_){return display_newline(state,_j5_)};
      state[20] = function(_j4_){return display_indent(state,_j4_)};
      state[21] = function(_j3_){return display_indent(state,_j3_)};
      return 0}
    function default_pp_mark_open_tag(s){return _g_(cst$68,_g_(s,cst$67))}
    function default_pp_mark_close_tag(s){return _g_(cst$70,_g_(s,cst$69))}
    function default_pp_print_open_tag(_j2_){return 0}
    function default_pp_print_close_tag(_j1_){return 0}
    function pp_make_formatter(f,g,h,i,j)
     {var pp_queue=[0,0,0],sys_tok=[0,-1,_b$_,0];
      add_queue(sys_tok,pp_queue);
      var sys_scan_stack=[0,[0,1,sys_tok],scan_stack_bottom];
      return [0,
              sys_scan_stack,
              0,
              0,
              0,
              0,
              78,
              10,
              68,
              78,
              0,
              1,
              1,
              1,
              1,
              max_int,
              cst$71,
              f,
              g,
              h,
              i,
              j,
              0,
              0,
              default_pp_mark_open_tag,
              default_pp_mark_close_tag,
              default_pp_print_open_tag,
              default_pp_print_close_tag,
              pp_queue]}
    function formatter_of_out_functions(out_funs)
     {return pp_make_formatter
              (out_funs[1],out_funs[2],out_funs[3],out_funs[4],out_funs[5])}
    function make_formatter(output,flush)
     {function _jT_(_j0_){return 0}
      function _jU_(_jZ_){return 0}
      var
       ppf=
        pp_make_formatter(output,flush,function(_jY_){return 0},_jU_,_jT_);
      ppf[19] = function(_jX_){return display_newline(ppf,_jX_)};
      ppf[20] = function(_jW_){return display_indent(ppf,_jW_)};
      ppf[21] = function(_jV_){return display_indent(ppf,_jV_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _jP_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(_jQ_,_jR_,_jS_)
                {return output_substring(oc,_jQ_,_jR_,_jS_)},
               _jP_)}
    function formatter_of_buffer(b)
     {function _jK_(_jO_){return 0}
      return make_formatter
              (function(_jL_,_jM_,_jN_)
                {return add_substring(b,_jL_,_jM_,_jN_)},
               _jK_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$1(pp_buffer_size)}
    var
     stdbuf=pp_make_buffer(0),
     std_formatter=formatter_of_out_channel(_o_[27]),
     err_formatter=formatter_of_out_channel(_o_[28]),
     str_formatter=formatter_of_buffer(stdbuf);
    function flush_buffer_formatter(buf,ppf)
     {pp_flush_queue(ppf,0);var s=contents(buf);reset(buf);return s}
    function flush_str_formatter(param)
     {return flush_buffer_formatter(stdbuf,str_formatter)}
    function make_symbolic_output_buffer(param){return [0,0]}
    function clear_symbolic_output_buffer(sob){sob[1] = 0;return 0}
    function get_symbolic_output_buffer(sob){return rev(sob[1])}
    function flush_symbolic_output_buffer(sob)
     {var items=get_symbolic_output_buffer(sob);
      clear_symbolic_output_buffer(sob);
      return items}
    function add_symbolic_output_item(sob,item)
     {sob[1] = [0,item,sob[1]];return 0}
    function formatter_of_symbolic_output_buffer(sob)
     {function f(s,i,n){return add_symbolic_output_item(sob,[0,sub$0(s,i,n)])}
      function g(_jJ_){return add_symbolic_output_item(sob,0)}
      function h(_jI_){return add_symbolic_output_item(sob,1)}
      function i(n){return add_symbolic_output_item(sob,[1,n])}
      function j(n){return add_symbolic_output_item(sob,[2,n])}
      return pp_make_formatter(f,g,h,i,j)}
    function open_hbox(_jH_){return pp_open_hbox(std_formatter,_jH_)}
    function open_vbox(_jG_){return pp_open_vbox(std_formatter,_jG_)}
    function open_hvbox(_jF_){return pp_open_hvbox(std_formatter,_jF_)}
    function open_hovbox(_jE_){return pp_open_hovbox(std_formatter,_jE_)}
    function open_box(_jD_){return pp_open_box(std_formatter,_jD_)}
    function close_box(_jC_){return pp_close_box(std_formatter,_jC_)}
    function open_tag(_jB_){return pp_open_tag(std_formatter,_jB_)}
    function close_tag(_jA_){return pp_close_tag(std_formatter,_jA_)}
    function print_as(_jy_,_jz_){return pp_print_as(std_formatter,_jy_,_jz_)}
    function print_string$0(_jx_){return pp_print_string(std_formatter,_jx_)}
    function print_int$0(_jw_){return pp_print_int(std_formatter,_jw_)}
    function print_float$0(_jv_){return pp_print_float(std_formatter,_jv_)}
    function print_char$0(_ju_){return pp_print_char(std_formatter,_ju_)}
    function print_bool(_jt_){return pp_print_bool(std_formatter,_jt_)}
    function print_break(_jr_,_js_)
     {return pp_print_break(std_formatter,_jr_,_js_)}
    function print_cut(_jq_){return pp_print_cut(std_formatter,_jq_)}
    function print_space(_jp_){return pp_print_space(std_formatter,_jp_)}
    function force_newline(_jo_){return pp_force_newline(std_formatter,_jo_)}
    function print_flush(_jn_){return pp_print_flush(std_formatter,_jn_)}
    function print_newline$0(_jm_)
     {return pp_print_newline(std_formatter,_jm_)}
    function print_if_newline(_jl_)
     {return pp_print_if_newline(std_formatter,_jl_)}
    function open_tbox(_jk_){return pp_open_tbox(std_formatter,_jk_)}
    function close_tbox(_jj_){return pp_close_tbox(std_formatter,_jj_)}
    function print_tbreak(_jh_,_ji_)
     {return pp_print_tbreak(std_formatter,_jh_,_ji_)}
    function set_tab(_jg_){return pp_set_tab(std_formatter,_jg_)}
    function print_tab(_jf_){return pp_print_tab(std_formatter,_jf_)}
    function set_margin(_je_){return pp_set_margin(std_formatter,_je_)}
    function get_margin(_jd_){return std_formatter[6]}
    function set_max_indent(_jc_)
     {return pp_set_max_indent(std_formatter,_jc_)}
    function get_max_indent(_jb_){return std_formatter[8]}
    function set_max_boxes(_ja_){return pp_set_max_boxes(std_formatter,_ja_)}
    function get_max_boxes(_i$_){return std_formatter[15]}
    function over_max_boxes(_i__)
     {return pp_over_max_boxes(std_formatter,_i__)}
    function set_ellipsis_text(_i9_)
     {return pp_set_ellipsis_text(std_formatter,_i9_)}
    function get_ellipsis_text(_i8_){return std_formatter[16]}
    function set_formatter_out_channel(_i7_)
     {return pp_set_formatter_out_channel(std_formatter,_i7_)}
    function set_formatter_out_functions(_i6_)
     {return pp_set_formatter_out_functions(std_formatter,_i6_)}
    function get_formatter_out_functions(_i5_)
     {return pp_get_formatter_out_functions(std_formatter,_i5_)}
    function set_formatter_output_functions(_i3_,_i4_)
     {return pp_set_formatter_output_functions(std_formatter,_i3_,_i4_)}
    function get_formatter_output_functions(_i2_)
     {return pp_get_formatter_output_functions(std_formatter,_i2_)}
    function set_formatter_tag_functions(_i1_)
     {return pp_set_formatter_tag_functions(std_formatter,_i1_)}
    function get_formatter_tag_functions(_i0_)
     {return pp_get_formatter_tag_functions(std_formatter,_i0_)}
    function set_print_tags(_iZ_)
     {return pp_set_print_tags(std_formatter,_iZ_)}
    function get_print_tags(_iY_){return std_formatter[22]}
    function set_mark_tags(_iX_){return pp_set_mark_tags(std_formatter,_iX_)}
    function get_mark_tags(_iW_){return std_formatter[23]}
    function set_tags(_iV_){return pp_set_tags(std_formatter,_iV_)}
    function pp_print_list(opt,pp_v,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=pp_print_cut;
        if(param$0)
         {var _iT_=param$0[2],_iU_=param$0[1];
          if(_iT_)
           {caml_call2(pp_v,ppf,_iU_);
            caml_call2(pp_sep,ppf,0);
            var opt$1=[0,pp_sep],opt$0=opt$1,param$0=_iT_;
            continue}
          return caml_call2(pp_v,ppf,_iU_)}
        return 0}}
    function pp_print_text(ppf,s)
     {var len=caml_ml_string_length(s),left=[0,0],right=[0,0];
      function flush(param)
       {pp_print_string(ppf,sub$0(s,left[1],right[1] - left[1] | 0));
        right[1]++;
        left[1] = right[1];
        return 0}
      for(;;)
       {if(right[1] !== len)
         {var match=caml_string_get(s,right[1]);
          if(10 === match)
           {flush(0);pp_force_newline(ppf,0)}
          else
           if(32 === match){flush(0);pp_print_space(ppf,0)}else right[1]++;
          continue}
        var _iS_=left[1] !== len?1:0;
        return _iS_?flush(0):_iS_}}
    function compute_tag(output,tag_acc)
     {var buf=create$1(16),ppf=formatter_of_buffer(buf);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=buf[2];
      return 2 <= len?sub$2(buf,1,len - 2 | 0):contents(buf)}
    function output_formatting_lit(ppf,fmting_lit)
     {if(typeof fmting_lit === "number")
       switch(fmting_lit)
        {case 0:return pp_close_box(ppf,0);
         case 1:return pp_close_tag(ppf,0);
         case 2:return pp_print_flush(ppf,0);
         case 3:return pp_force_newline(ppf,0);
         case 4:return pp_print_newline(ppf,0);
         case 5:return pp_print_char(ppf,64);
         default:return pp_print_char(ppf,37)}
      else
       switch(fmting_lit[0])
        {case 0:
          var offset=fmting_lit[3],width=fmting_lit[2];
          return pp_print_break(ppf,width,offset);
         case 1:return 0;
         default:
          var c=fmting_lit[1];
          pp_print_char(ppf,64);
          return pp_print_char(ppf,c)}}
    function output_acc$0(ppf,acc)
     {if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _iI_=acc[2],_iJ_=acc[1];
          if(0 === _iI_[0])
           {var acc$0=_iI_[1];
            output_acc$0(ppf,_iJ_);
            return pp_open_tag(ppf,compute_tag(output_acc$0,acc$0))}
          var acc$1=_iI_[1];
          output_acc$0(ppf,_iJ_);
          var
           match=open_box_of_string(compute_tag(output_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _iK_=acc[1];
          if(typeof _iK_ === "number")
           var switch$1=1;
          else
           if(0 === _iK_[0])
            {var _iL_=_iK_[2];
             if(typeof _iL_ === "number")
              var switch$2=1;
             else
              if(1 === _iL_[0])
               var
                s$0=acc[2],
                size=_iL_[2],
                p$1=_iK_[1],
                switch$0=0,
                switch$1=0,
                switch$2=0;
              else
               var switch$2=1;
             if(switch$2)var switch$1=1}
           else
            var switch$1=1;
          if(switch$1)var s=acc[2],p$0=_iK_,switch$0=2;
          break;
         case 3:
          var _iM_=acc[1];
          if(typeof _iM_ === "number")
           var switch$3=1;
          else
           if(0 === _iM_[0])
            {var _iN_=_iM_[2];
             if(typeof _iN_ === "number")
              var switch$4=1;
             else
              if(1 === _iN_[0])
               var
                c$0=acc[2],
                size$0=_iN_[2],
                p$3=_iM_[1],
                switch$0=1,
                switch$3=0,
                switch$4=0;
              else
               var switch$4=1;
             if(switch$4)var switch$3=1}
           else
            var switch$3=1;
          if(switch$3)var c=acc[2],p$2=_iM_,switch$0=3;
          break;
         case 4:
          var _iO_=acc[1];
          if(typeof _iO_ === "number")
           var switch$5=1;
          else
           if(0 === _iO_[0])
            {var _iP_=_iO_[2];
             if(typeof _iP_ === "number")
              var switch$6=1;
             else
              if(1 === _iP_[0])
               var
                s$0=acc[2],
                size=_iP_[2],
                p$1=_iO_[1],
                switch$0=0,
                switch$5=0,
                switch$6=0;
              else
               var switch$6=1;
             if(switch$6)var switch$5=1}
           else
            var switch$5=1;
          if(switch$5)var s=acc[2],p$0=_iO_,switch$0=2;
          break;
         case 5:
          var _iQ_=acc[1];
          if(typeof _iQ_ === "number")
           var switch$7=1;
          else
           if(0 === _iQ_[0])
            {var _iR_=_iQ_[2];
             if(typeof _iR_ === "number")
              var switch$8=1;
             else
              if(1 === _iR_[0])
               var
                c$0=acc[2],
                size$0=_iR_[2],
                p$3=_iQ_[1],
                switch$0=1,
                switch$7=0,
                switch$8=0;
              else
               var switch$8=1;
             if(switch$8)var switch$7=1}
           else
            var switch$7=1;
          if(switch$7)var c=acc[2],p$2=_iQ_,switch$0=3;
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc$0(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         output_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$0));
        case 2:output_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:output_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function strput_acc$0(ppf,acc)
     {if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          strput_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _iw_=acc[2],_ix_=acc[1];
          if(0 === _iw_[0])
           {var acc$0=_iw_[1];
            strput_acc$0(ppf,_ix_);
            return pp_open_tag(ppf,compute_tag(strput_acc$0,acc$0))}
          var acc$1=_iw_[1];
          strput_acc$0(ppf,_ix_);
          var
           match=open_box_of_string(compute_tag(strput_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _iy_=acc[1];
          if(typeof _iy_ === "number")
           var switch$1=1;
          else
           if(0 === _iy_[0])
            {var _iz_=_iy_[2];
             if(typeof _iz_ === "number")
              var switch$2=1;
             else
              if(1 === _iz_[0])
               var
                s$0=acc[2],
                size=_iz_[2],
                p$1=_iy_[1],
                switch$0=0,
                switch$1=0,
                switch$2=0;
              else
               var switch$2=1;
             if(switch$2)var switch$1=1}
           else
            var switch$1=1;
          if(switch$1)var s=acc[2],p$0=_iy_,switch$0=2;
          break;
         case 3:
          var _iA_=acc[1];
          if(typeof _iA_ === "number")
           var switch$3=1;
          else
           if(0 === _iA_[0])
            {var _iB_=_iA_[2];
             if(typeof _iB_ === "number")
              var switch$4=1;
             else
              if(1 === _iB_[0])
               var
                c$0=acc[2],
                size$0=_iB_[2],
                p$3=_iA_[1],
                switch$0=1,
                switch$3=0,
                switch$4=0;
              else
               var switch$4=1;
             if(switch$4)var switch$3=1}
           else
            var switch$3=1;
          if(switch$3)var c=acc[2],p$2=_iA_,switch$0=3;
          break;
         case 4:
          var _iC_=acc[1];
          if(typeof _iC_ === "number")
           var switch$5=1;
          else
           if(0 === _iC_[0])
            {var _iD_=_iC_[2];
             if(typeof _iD_ === "number")
              var switch$6=1;
             else
              if(1 === _iD_[0])
               var
                s$0=acc[2],
                size=_iD_[2],
                p$1=_iC_[1],
                switch$0=0,
                switch$5=0,
                switch$6=0;
              else
               var switch$6=1;
             if(switch$6)var switch$5=1}
           else
            var switch$5=1;
          if(switch$5)var s=acc[2],p$0=_iC_,switch$0=2;
          break;
         case 5:
          var _iE_=acc[1];
          if(typeof _iE_ === "number")
           var switch$7=1;
          else
           if(0 === _iE_[0])
            {var _iF_=_iE_[2];
             if(typeof _iF_ === "number")
              var switch$8=1;
             else
              if(1 === _iF_[0])
               var
                c$0=acc[2],
                size$0=_iF_[2],
                p$3=_iE_[1],
                switch$0=1,
                switch$7=0,
                switch$8=0;
              else
               var switch$8=1;
             if(switch$8)var switch$7=1}
           else
            var switch$7=1;
          if(switch$7)var c=acc[2],p$2=_iE_,switch$0=3;
          break;
         case 6:
          var _iG_=acc[1];
          if(typeof _iG_ !== "number" && 0 === _iG_[0])
           {var _iH_=_iG_[2];
            if(typeof _iH_ !== "number" && 1 === _iH_[0])
             {var f$1=acc[2],size$1=_iH_[2],p$4=_iG_[1];
              strput_acc$0(ppf,p$4);
              return pp_print_as_size(ppf,size$1,caml_call1(f$1,0))}}
          var f$0=acc[2];
          strput_acc$0(ppf,_iG_);
          return pp_print_string(ppf,caml_call1(f$0,0));
         case 7:
          var p$5=acc[1];strput_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          strput_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:strput_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         strput_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$0));
        case 2:strput_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:strput_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function kfprintf$0(k,ppf,param)
     {var fmt=param[1],_iv_=0;
      return make_printf
              (function(ppf,acc)
                {output_acc$0(ppf,acc);return caml_call1(k,ppf)},
               ppf,
               _iv_,
               fmt)}
    function ikfprintf$0(k,ppf,param)
     {var fmt=param[1];return make_iprintf(k,ppf,fmt)}
    function fprintf$0(ppf)
     {function _is_(_iu_){return 0}
      return function(_it_){return kfprintf$0(_is_,ppf,_it_)}}
    function ifprintf$0(ppf)
     {function _ip_(_ir_){return 0}
      return function(_iq_){return ikfprintf$0(_ip_,ppf,_iq_)}}
    function printf$0(fmt){return caml_call1(fprintf$0(std_formatter),fmt)}
    function eprintf$0(fmt){return caml_call1(fprintf$0(err_formatter),fmt)}
    function ksprintf$0(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(param,acc)
       {strput_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,0,fmt)}
    function sprintf$0(fmt){return ksprintf$0(function(s){return s},fmt)}
    function kasprintf(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(ppf,acc)
       {output_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,ppf,0,fmt)}
    function asprintf(fmt){return kasprintf(function(s){return s},fmt)}
    at_exit(print_flush);
    function pp_set_all_formatter_output_functions(state,f,g,h,i)
     {pp_set_formatter_output_functions(state,f,g);
      state[19] = h;
      state[20] = i;
      return 0}
    function pp_get_all_formatter_output_functions(state,param)
     {return [0,state[17],state[18],state[19],state[20]]}
    function set_all_formatter_output_functions(_il_,_im_,_in_,_io_)
     {return pp_set_all_formatter_output_functions
              (std_formatter,_il_,_im_,_in_,_io_)}
    function get_all_formatter_output_functions(_ik_)
     {return pp_get_all_formatter_output_functions(std_formatter,_ik_)}
    function bprintf$0(b,param)
     {var fmt=param[1];
      function k(ppf,acc){output_acc$0(ppf,acc);return pp_flush_queue(ppf,0)}
      return make_printf(k,formatter_of_buffer(b),0,fmt)}
    var
     Stdlib_format=
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string$0,
       pp_print_as,
       print_as,
       pp_print_int,
       print_int$0,
       pp_print_float,
       print_float$0,
       pp_print_char,
       print_char$0,
       pp_print_bool,
       print_bool,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline$0,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       pp_open_tag,
       open_tag,
       pp_close_tag,
       close_tag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functions,
       set_formatter_output_functions,
       pp_get_formatter_output_functions,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_tag_functions,
       set_formatter_tag_functions,
       pp_get_formatter_tag_functions,
       get_formatter_tag_functions,
       formatter_of_out_channel,
       std_formatter,
       err_formatter,
       formatter_of_buffer,
       stdbuf,
       str_formatter,
       flush_str_formatter,
       make_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_buffer,
       pp_print_list,
       pp_print_text,
       fprintf$0,
       printf$0,
       eprintf$0,
       sprintf$0,
       asprintf,
       ifprintf$0,
       kfprintf$0,
       ikfprintf$0,
       ksprintf$0,
       kasprintf,
       bprintf$0,
       ksprintf$0,
       set_all_formatter_output_functions,
       get_all_formatter_output_functions,
       pp_set_all_formatter_output_functions,
       pp_get_all_formatter_output_functions];
    caml_register_global(692,Stdlib_format,"Stdlib__format");
    var null_char=0;
    function next_char(ib)
     {try
       {var c=caml_call1(ib[7],0);
        ib[2] = c;
        ib[3] = 1;
        ib[4] = ib[4] + 1 | 0;
        if(10 === c)ib[5] = ib[5] + 1 | 0;
        return c}
      catch(_ij_)
       {_ij_ = caml_wrap_exception(_ij_);
        if(_ij_ === End_of_file)
         {ib[2] = null_char;ib[3] = 0;ib[1] = 1;return null_char}
        throw _ij_}}
    function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
    function checked_peek_char(ib)
     {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
    function end_of_input(ib){peek_char(ib);return ib[1]}
    function beginning_of_input(ib){return 0 === ib[4]?1:0}
    function name_of_input(ib)
     {var _ii_=ib[9];
      if(typeof _ii_ === "number")
       return 0 === _ii_?cst_unnamed_function:cst_unnamed_character_string;
      else
       {if(0 === _ii_[0])return cst_unnamed_Pervasives_input_channel;
        var fname=_ii_[1];
        return fname}}
    function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
    function reset_token(ib){return reset(ib[8])}
    function invalidate_current_char(ib){ib[3] = 0;return 0}
    function token_string(ib)
     {var token_buffer=ib[8],tok=contents(token_buffer);
      clear$1(token_buffer);
      ib[6] = ib[6] + 1 | 0;
      return tok}
    function skip_char(width,ib){invalidate_current_char(ib);return width}
    function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
    function store_char(width,ib,c)
     {add_char(ib[8],c);return ignore_char(width,ib)}
    var default_token_buffer_size=1024;
    function create$3(iname,next)
     {return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              create$1(default_token_buffer_size),
              iname]}
    function from_string$1(s)
     {var i=[0,0],len=caml_ml_string_length(s);
      function next(param)
       {if(len <= i[1])throw End_of_file;
        var c=caml_string_get(s,i[1]);
        i[1]++;
        return c}
      return create$3(1,next)}
    var _ca_=0;
    function from_function$0(_ih_){return create$3(_ca_,_ih_)}
    var len=1024;
    function scan_close_at_end(ic){caml_call1(_o_[81],ic);throw End_of_file}
    function scan_raise_at_end(ic){throw End_of_file}
    function from_ic(scan_close_ic,iname,ic)
     {var buf=caml_create_bytes(1024),i=[0,0],lim=[0,0],eof=[0,0];
      function next(param)
       {if(i[1] < lim[1]){var c=caml_bytes_get(buf,i[1]);i[1]++;return c}
        if(eof[1])throw End_of_file;
        lim[1] = input(ic,buf,0,len);
        return 0 === lim[1]
                ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
                :(i[1] = 1,caml_bytes_get(buf,0))}
      return create$3(iname,next)}
    var stdib=from_ic(scan_raise_at_end,[1,cst$72,_o_[26]],_o_[26]);
    function open_in_file(open_in,fname)
     {if(caml_string_notequal(fname,cst$73))
       {var ic=caml_call1(open_in,fname);
        return from_ic(scan_close_at_end,[1,fname,ic],ic)}
      return stdib}
    var _cb_=_o_[67];
    function from_file(_ig_){return open_in_file(_cb_,_ig_)}
    var _cc_=_o_[68];
    function from_file_bin(_if_){return open_in_file(_cc_,_if_)}
    function from_channel$0(ic){return from_ic(scan_raise_at_end,[0,ic],ic)}
    function close_in(ib)
     {var _ie_=ib[9];
      if(typeof _ie_ === "number")
       return 0;
      else
       {if(0 === _ie_[0]){var ic=_ie_[1];return caml_call1(_o_[81],ic)}
        var ic$0=_ie_[2];
        return caml_call1(_o_[81],ic$0)}}
    var memo=[0,0];
    function memo_from_ic(scan_close_ic,ic)
     {try
       {var _ic_=assq(ic,memo[1]);return _ic_}
      catch(_id_)
       {_id_ = caml_wrap_exception(_id_);
        if(_id_ === Not_found)
         {var ib=from_ic(scan_close_ic,[0,ic],ic);
          memo[1] = [0,[0,ic,ib],memo[1]];
          return ib}
        throw _id_}}
    function memo_from_channel(_ib_)
     {return memo_from_ic(scan_raise_at_end,_ib_)}
    var Scan_failure=[248,cst_Stdlib_Scanf_Scan_failure,caml_fresh_oo_id(0)];
    function bad_input(s){throw [0,Scan_failure,s]}
    function bad_input_escape(c)
     {return bad_input(caml_call1(sprintf(_cd_),c))}
    function bad_token_length(message)
     {return bad_input(caml_call1(sprintf(_ce_),message))}
    function bad_float(param)
     {return bad_input(cst_no_dot_or_exponent_part_found_in_float_token)}
    function bad_hex_float(param)
     {return bad_input(cst_not_a_valid_float_in_hexadecimal_notation)}
    function character_mismatch(c,ci)
     {return bad_input(caml_call2(sprintf(_cg_),c,ci))}
    function check_this_char(ib,c)
     {var ci=checked_peek_char(ib);
      return ci === c?invalidate_current_char(ib):character_mismatch(c,ci)}
    function check_char(ib,c$0)
     {if(10 === c$0)
       {var ci=checked_peek_char(ib);
        return 10 === ci
                ?invalidate_current_char(ib)
                :13 === ci
                  ?(invalidate_current_char(ib),check_this_char(ib,10))
                  :character_mismatch(10,ci)}
      if(32 === c$0)
       for(;;)
        {var c=peek_char(ib),_h$_=1 - ib[1];
         if(_h$_)
          {var
            _ia_=c - 9 | 0,
            switch$0=
             4 < _ia_ >>> 0?23 === _ia_?1:0:1 < (_ia_ - 2 | 0) >>> 0?1:0;
           if(switch$0){invalidate_current_char(ib);continue}
           return 0}
         return _h$_}
      return check_this_char(ib,c$0)}
    function token_char(ib){return caml_string_get(token_string(ib),0)}
    function token_bool(ib)
     {var s=token_string(ib);
      return caml_string_notequal(s,cst_false$2)
              ?caml_string_notequal(s,cst_true$2)
                ?bad_input(caml_call1(sprintf(_ch_),s))
                :1
              :0}
    function integer_conversion_of_char(param)
     {var switcher=param - 88 | 0;
      if(! (32 < switcher >>> 0))
       switch(switcher)
        {case 10:return 0;
         case 12:return 1;
         case 17:return 2;
         case 23:return 3;
         case 29:return 4;
         case 0:
         case 32:return 5
         }
      throw [0,Assert_failure,_ci_]}
    function token_int_literal(conv,ib)
     {switch(conv)
       {case 0:var tok=_g_(cst_0b,token_string(ib));break;
        case 3:var tok=_g_(cst_0o,token_string(ib));break;
        case 4:var tok=_g_(cst_0u,token_string(ib));break;
        case 5:var tok=_g_(cst_0x,token_string(ib));break;
        default:var tok=token_string(ib)}
      var l=caml_ml_string_length(tok);
      if(0 !== l)
       if(43 === caml_string_get(tok,0))return sub$0(tok,1,l - 1 | 0);
      return tok}
    function token_float(ib){return caml_float_of_string(token_string(ib))}
    function scan_decimal_digit_star(width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(58 <= c)
         {if(95 === c)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
        else
         if(48 <= c)
          {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
        return width$0}}
    function scan_unsigned_decimal_int(width,ib)
     {if(0 === width)return bad_token_length(cst_decimal_digits);
      var c=checked_peek_char(ib),switcher=c - 48 | 0;
      if(9 < switcher >>> 0)return bad_input(caml_call1(sprintf(_cj_),c));
      var width$0=store_char(width,ib,c);
      return scan_decimal_digit_star(width$0,ib)}
    function scan_digit_plus(basis,digitp,width$2,ib)
     {if(0 === width$2)return bad_token_length(cst_digits);
      var c$0=checked_peek_char(ib);
      if(caml_call1(digitp,c$0))
       {var width$3=store_char(width$2,ib,c$0),width=width$3;
        for(;;)
         {if(0 === width)return width;
          var c=peek_char(ib);
          if(ib[1])return width;
          if(caml_call1(digitp,c))
           {var width$0=store_char(width,ib,c),width=width$0;continue}
          if(95 === c)
           {var width$1=ignore_char(width,ib),width=width$1;continue}
          return width}}
      return bad_input(caml_call2(sprintf(_ck_),c$0,basis))}
    function is_binary_digit(param)
     {var switcher=param - 48 | 0;return 1 < switcher >>> 0?0:1}
    function scan_binary_int(_h9_,_h__)
     {return scan_digit_plus(cst_binary,is_binary_digit,_h9_,_h__)}
    function is_octal_digit(param)
     {var switcher=param - 48 | 0;return 7 < switcher >>> 0?0:1}
    function scan_octal_int(_h7_,_h8_)
     {return scan_digit_plus(cst_octal,is_octal_digit,_h7_,_h8_)}
    function is_hexa_digit(param)
     {var
       _h6_=param - 48 | 0,
       switch$0=
        22 < _h6_ >>> 0
         ?5 < (_h6_ - 49 | 0) >>> 0?0:1
         :6 < (_h6_ - 10 | 0) >>> 0?1:0;
      return switch$0?1:0}
    function scan_hexadecimal_int(_h4_,_h5_)
     {return scan_digit_plus(cst_hexadecimal,is_hexa_digit,_h4_,_h5_)}
    function scan_sign(width,ib)
     {var c=checked_peek_char(ib),switcher=c - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:return store_char(width,ib,c);
         case 1:break;
         default:return store_char(width,ib,c)}
      return width}
    function scan_optionally_signed_decimal_int(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_unsigned_decimal_int(width$0,ib)}
    function scan_int_conversion(conv,width$1,ib)
     {switch(conv)
       {case 0:return scan_binary_int(width$1,ib);
        case 1:return scan_optionally_signed_decimal_int(width$1,ib);
        case 2:
         var width$0=scan_sign(width$1,ib),c=checked_peek_char(ib);
         if(48 === c)
          {var width=store_char(width$0,ib,c);
           if(0 === width)return width;
           var c$0=peek_char(ib);
           if(ib[1])return width;
           if(99 <= c$0)
            {if(111 === c$0)
              return scan_octal_int(store_char(width,ib,c$0),ib);
             var switch$0=120 === c$0?1:0}
           else
            if(88 === c$0)
             var switch$0=1;
            else
             {if(98 <= c$0)
               return scan_binary_int(store_char(width,ib,c$0),ib);
              var switch$0=0}
           return switch$0
                   ?scan_hexadecimal_int(store_char(width,ib,c$0),ib)
                   :scan_decimal_digit_star(width,ib)}
         return scan_unsigned_decimal_int(width$0,ib);
        case 3:return scan_octal_int(width$1,ib);
        case 4:return scan_unsigned_decimal_int(width$1,ib);
        default:return scan_hexadecimal_int(width$1,ib)}}
    function scan_fractional_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      var switcher=c - 48 | 0;
      return 9 < switcher >>> 0
              ?width
              :scan_decimal_digit_star(store_char(width,ib,c),ib)}
    function scan_exponent_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      if(69 !== c)if(101 !== c)return width;
      return scan_optionally_signed_decimal_int(store_char(width,ib,c),ib)}
    function scan_float(width$1,precision,ib)
     {var
       width=scan_sign(width$1,ib),
       width$0=scan_decimal_digit_star(width,ib);
      if(0 === width$0)return [0,width$0,precision];
      var c=peek_char(ib);
      if(ib[1])return [0,width$0,precision];
      if(46 === c)
       {var
         width$2=store_char(width$0,ib,c),
         precision$0=min(width$2,precision),
         width$3=
          width$2
          -
          (precision$0 - scan_fractional_part(precision$0,ib) | 0)
          |
          0;
        return [0,scan_exponent_part(width$3,ib),precision$0]}
      return [0,scan_exponent_part(width$0,ib),precision]}
    function check_case_insensitive_string(width,ib,error,str)
     {function lowercase(c)
       {var switcher=c - 65 | 0;
        return 25 < switcher >>> 0?c:char_of_int((c - 65 | 0) + 97 | 0)}
      var
       len=caml_ml_string_length(str),
       width$0=[0,width],
       _h1_=len - 1 | 0,
       _h0_=0;
      if(! (_h1_ < 0))
       {var i=_h0_;
        for(;;)
         {var c=peek_char(ib),_h2_=lowercase(caml_string_get(str,i));
          if(lowercase(c) !== _h2_)caml_call1(error,0);
          if(0 === width$0[1])caml_call1(error,0);
          width$0[1] = store_char(width$0[1],ib,c);
          var _h3_=i + 1 | 0;
          if(_h1_ !== i){var i=_h3_;continue}
          break}}
      return width$0[1]}
    function scan_hex_float(width,precision,ib)
     {var _hN_=0 === width?1:0,_hO_=_hN_ || end_of_input(ib);
      if(_hO_)bad_hex_float(0);
      var
       width$0=scan_sign(width,ib),
       _hP_=0 === width$0?1:0,
       _hQ_=_hP_ || end_of_input(ib);
      if(_hQ_)bad_hex_float(0);
      var c=peek_char(ib);
      if(78 <= c)
       {var switcher=c - 79 | 0;
        if(30 < switcher >>> 0)
         {if(! (32 <= switcher))
           {var
             width$1=store_char(width$0,ib,c),
             _hR_=0 === width$1?1:0,
             _hS_=_hR_ || end_of_input(ib);
            if(_hS_)bad_hex_float(0);
            return check_case_insensitive_string
                    (width$1,ib,bad_hex_float,cst_an)}
          var switch$0=0}
        else
         var switch$0=26 === switcher?1:0}
      else
       {if(48 === c)
         {var
           width$3=store_char(width$0,ib,c),
           _hV_=0 === width$3?1:0,
           _hW_=_hV_ || end_of_input(ib);
          if(_hW_)bad_hex_float(0);
          var
           width$4=
            check_case_insensitive_string(width$3,ib,bad_hex_float,cst_x$2);
          if(0 !== width$4)
           if(! end_of_input(ib))
            {var
              match=peek_char(ib),
              _hX_=match - 46 | 0,
              switch$1=
               34 < _hX_ >>> 0?66 === _hX_?1:0:32 < (_hX_ - 1 | 0) >>> 0?1:0,
              width$5=switch$1?width$4:scan_hexadecimal_int(width$4,ib);
             if(0 !== width$5)
              if(! end_of_input(ib))
               {var c$0=peek_char(ib);
                if(46 === c$0)
                 {var width$6=store_char(width$5,ib,c$0);
                  if(0 === width$6)
                   var switch$2=0;
                  else
                   if(end_of_input(ib))
                    var switch$2=0;
                   else
                    {var match$0=peek_char(ib);
                     if(80 === match$0)
                      var switch$3=0;
                     else
                      if(112 === match$0)
                       var switch$3=0;
                      else
                       var
                        precision$0=min(width$6,precision),
                        width$10=
                         width$6
                         -
                         (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                         |
                         0,
                        switch$3=1;
                     if(! switch$3)var width$10=width$6;
                     var width$7=width$10,switch$2=1}
                  if(! switch$2)var width$7=width$6;
                  var width$8=width$7}
                else
                 var width$8=width$5;
                if(0 !== width$8)
                 if(! end_of_input(ib))
                  {var c$1=peek_char(ib);
                   if(80 !== c$1)if(112 !== c$1)return width$8;
                   var
                    width$9=store_char(width$8,ib,c$1),
                    _hY_=0 === width$9?1:0,
                    _hZ_=_hY_ || end_of_input(ib);
                   if(_hZ_)bad_hex_float(0);
                   return scan_optionally_signed_decimal_int(width$9,ib)}
                return width$8}
             return width$5}
          return width$4}
        var switch$0=73 === c?1:0}
      if(switch$0)
       {var
         width$2=store_char(width$0,ib,c),
         _hT_=0 === width$2?1:0,
         _hU_=_hT_ || end_of_input(ib);
        if(_hU_)bad_hex_float(0);
        return check_case_insensitive_string
                (width$2,ib,bad_hex_float,cst_nfinity)}
      return bad_hex_float(0)}
    function scan_caml_float_rest(width,precision,ib)
     {var _hJ_=0 === width?1:0,_hK_=_hJ_ || end_of_input(ib);
      if(_hK_)bad_float(0);
      var
       width$0=scan_decimal_digit_star(width,ib),
       _hL_=0 === width$0?1:0,
       _hM_=_hL_ || end_of_input(ib);
      if(_hM_)bad_float(0);
      var c=peek_char(ib),switcher=c - 69 | 0;
      if(32 < switcher >>> 0)
       {if(-23 === switcher)
         {var
           width$1=store_char(width$0,ib,c),
           precision$0=min(width$1,precision),
           width_precision=scan_fractional_part(precision$0,ib),
           frac_width=precision$0 - width_precision | 0,
           width$2=width$1 - frac_width | 0;
          return scan_exponent_part(width$2,ib)}}
      else
       {var switcher$0=switcher - 1 | 0;
        if(30 < switcher$0 >>> 0)return scan_exponent_part(width$0,ib)}
      return bad_float(0)}
    function scan_caml_float(width,precision,ib)
     {var _hv_=0 === width?1:0,_hw_=_hv_ || end_of_input(ib);
      if(_hw_)bad_float(0);
      var
       width$0=scan_sign(width,ib),
       _hx_=0 === width$0?1:0,
       _hy_=_hx_ || end_of_input(ib);
      if(_hy_)bad_float(0);
      var c=peek_char(ib);
      if(49 <= c)
       {if(! (58 <= c))
         {var
           width$1=store_char(width$0,ib,c),
           _hz_=0 === width$1?1:0,
           _hA_=_hz_ || end_of_input(ib);
          if(_hA_)bad_float(0);
          return scan_caml_float_rest(width$1,precision,ib)}}
      else
       if(48 <= c)
        {var
          width$2=store_char(width$0,ib,c),
          _hB_=0 === width$2?1:0,
          _hC_=_hB_ || end_of_input(ib);
         if(_hC_)bad_float(0);
         var c$0=peek_char(ib);
         if(88 !== c$0)
          if(120 !== c$0)return scan_caml_float_rest(width$2,precision,ib);
         var
          width$3=store_char(width$2,ib,c$0),
          _hD_=0 === width$3?1:0,
          _hE_=_hD_ || end_of_input(ib);
         if(_hE_)bad_float(0);
         var
          width$4=scan_hexadecimal_int(width$3,ib),
          _hF_=0 === width$4?1:0,
          _hG_=_hF_ || end_of_input(ib);
         if(_hG_)bad_float(0);
         var c$1=peek_char(ib),switcher=c$1 - 80 | 0;
         if(32 < switcher >>> 0)
          if(-34 === switcher)
           {var width$5=store_char(width$4,ib,c$1);
            if(0 === width$5)
             var switch$1=0;
            else
             if(end_of_input(ib))
              var switch$1=0;
             else
              {var match=peek_char(ib);
               if(80 === match)
                var switch$2=0;
               else
                if(112 === match)
                 var switch$2=0;
                else
                 var
                  precision$0=min(width$5,precision),
                  width$10=
                   width$5
                   -
                   (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                   |
                   0,
                  switch$2=1;
               if(! switch$2)var width$10=width$5;
               var width$6=width$10,switch$1=1}
            if(! switch$1)var width$6=width$5;
            var width$7=width$6,switch$0=0}
          else
           var switch$0=1;
         else
          {var switcher$0=switcher - 1 | 0;
           if(30 < switcher$0 >>> 0)
            var width$7=width$4,switch$0=0;
           else
            var switch$0=1}
         var width$8=switch$0?bad_float(0):width$7;
         if(0 !== width$8)
          if(! end_of_input(ib))
           {var c$2=peek_char(ib);
            if(80 !== c$2)if(112 !== c$2)return width$8;
            var
             width$9=store_char(width$8,ib,c$2),
             _hH_=0 === width$9?1:0,
             _hI_=_hH_ || end_of_input(ib);
            if(_hI_)bad_hex_float(0);
            return scan_optionally_signed_decimal_int(width$9,ib)}
         return width$8}
      return bad_float(0)}
    function scan_string(stp,width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(stp)
         {var c$0=stp[1];
          if(c === c$0)return skip_char(width$0,ib);
          var width$1=store_char(width$0,ib,c),width$0=width$1;
          continue}
        var
         _hu_=c - 9 | 0,
         switch$0=4 < _hu_ >>> 0?23 === _hu_?1:0:1 < (_hu_ - 2 | 0) >>> 0?1:0;
        if(switch$0)return width$0;
        var width$2=store_char(width$0,ib,c),width$0=width$2;
        continue}}
    function scan_char(width,ib)
     {return store_char(width,ib,checked_peek_char(ib))}
    function hexadecimal_value_of_char(d)
     {return 97 <= d?d - 87 | 0:65 <= d?d - 55 | 0:d - 48 | 0}
    function check_next_char(message,width,ib)
     {if(0 === width)return bad_token_length(message);
      var c=peek_char(ib);
      return ib[1]?bad_input(caml_call1(sprintf(_cf_),message)):c}
    function check_next_char_for_char(_hs_,_ht_)
     {return check_next_char(cst_a_Char,_hs_,_ht_)}
    function check_next_char_for_string(_hq_,_hr_)
     {return check_next_char(cst_a_String,_hq_,_hr_)}
    function scan_backslash_char(width,ib)
     {var c0=check_next_char_for_char(width,ib);
      if(40 <= c0)
       if(58 <= c0)
        {var switcher$0=c0 - 92 | 0;
         if(28 < switcher$0 >>> 0)
          var switch$0=0;
         else
          switch(switcher$0)
           {case 28:
             var
              get_digit=
               function(param)
                {var
                  c=next_char(ib),
                  _hp_=c - 48 | 0,
                  switch$0=
                   22 < _hp_ >>> 0
                    ?5 < (_hp_ - 49 | 0) >>> 0?0:1
                    :6 < (_hp_ - 10 | 0) >>> 0?1:0;
                 return switch$0?c:bad_input_escape(c)},
              c1=get_digit(0),
              c2=get_digit(0),
              _hl_=hexadecimal_value_of_char(c2),
              c$0=(16 * hexadecimal_value_of_char(c1) | 0) + _hl_ | 0;
             if(0 <= c$0)
              if(255 < c$0)
               var switch$1=0;
              else
               var _hn_=char_of_int(c$0),switch$1=1;
             else
              var switch$1=0;
             if(! switch$1)
              var _hn_=bad_input(caml_call2(sprintf(_cm_),c1,c2));
             return store_char(width - 2 | 0,ib,_hn_);
            case 0:
            case 6:
            case 18:
            case 22:
            case 24:var switch$0=1;break;
            default:var switch$0=0}}
       else
        {if(48 <= c0)
          {var
            get_digit$0=
             function(param)
              {var c=next_char(ib),switcher=c - 48 | 0;
               return 9 < switcher >>> 0?bad_input_escape(c):c},
            c1$0=get_digit$0(0),
            c2$0=get_digit$0(0),
            c=
             ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
             +
             (c2$0 - 48 | 0)
             |
             0;
           if(0 <= c)
            if(255 < c)var switch$2=0;else var _ho_=char_of_int(c),switch$2=1;
           else
            var switch$2=0;
           if(! switch$2)
            var _ho_=bad_input(caml_call3(sprintf(_cl_),c0,c1$0,c2$0));
           return store_char(width - 2 | 0,ib,_ho_)}
         var switch$0=0}
      else
       var switch$0=34 === c0?1:39 <= c0?1:0;
      if(switch$0)
       {if(110 <= c0)
         if(117 <= c0)
          var switch$3=0;
         else
          {var switcher=c0 - 110 | 0;
           switch(switcher)
            {case 0:var _hm_=10,switch$3=1;break;
             case 4:var _hm_=13,switch$3=1;break;
             case 6:var _hm_=9,switch$3=1;break;
             default:var switch$3=0}}
        else
         if(98 === c0)var _hm_=8,switch$3=1;else var switch$3=0;
        if(! switch$3)var _hm_=c0;
        return store_char(width,ib,_hm_)}
      return bad_input_escape(c0)}
    function scan_caml_char(width,ib)
     {function find_stop(width)
       {var c=check_next_char_for_char(width,ib);
        return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
      var c=checked_peek_char(ib);
      if(39 === c)
       {var
         width$0=ignore_char(width,ib),
         c$0=check_next_char_for_char(width$0,ib);
        return 92 === c$0
                ?find_stop(scan_backslash_char(ignore_char(width$0,ib),ib))
                :find_stop(store_char(width$0,ib,c$0))}
      return character_mismatch(39,c)}
    function scan_caml_string(width,ib)
     {function find_stop$0(counter,width)
       {var width$0=width;
        for(;;)
         {var c=check_next_char_for_string(width$0,ib);
          if(34 === c)return ignore_char(width$0,ib);
          if(92 === c)
           {var
             width$1=ignore_char(width$0,ib),
             match=check_next_char_for_string(width$1,ib);
            if(10 === match)
             {var _hj_=ignore_char(width$1,ib);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return skip_spaces(counter$0,_hj_)}
              return caml_trampoline_return(skip_spaces,[0,_hj_])}
            if(13 === match)
             {var
               width$3=ignore_char(width$1,ib),
               match$0=check_next_char_for_string(width$3,ib);
              if(10 === match$0)
               {var _hk_=ignore_char(width$3,ib);
                if(counter < 50)
                 {var counter$1=counter + 1 | 0;
                  return skip_spaces(counter$1,_hk_)}
                return caml_trampoline_return(skip_spaces,[0,_hk_])}
              var width$5=store_char(width$3,ib,13),width$0=width$5;
              continue}
            var width$4=scan_backslash_char(width$1,ib),width$0=width$4;
            continue}
          var width$2=store_char(width$0,ib,c),width$0=width$2;
          continue}}
      function skip_spaces(counter,width)
       {var width$0=width;
        for(;;)
         {var match=check_next_char_for_string(width$0,ib);
          if(32 === match)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return find_stop$0(counter$0,width$0)}
          return caml_trampoline_return(find_stop$0,[0,width$0])}}
      function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
      var c=checked_peek_char(ib);
      return 34 === c
              ?find_stop(ignore_char(width,ib))
              :character_mismatch(34,c)}
    function scan_chars_in_char_set(char_set,scan_indic,width,ib)
     {function scan_chars(i,stp)
       {var i$0=i;
        for(;;)
         {var c=peek_char(ib),_hf_=0 < i$0?1:0;
          if(_hf_)
           {var _hg_=1 - ib[1];
            if(_hg_)
             var _hh_=is_in_char_set(char_set,c),_hi_=_hh_?c !== stp?1:0:_hh_;
            else
             var _hi_=_hg_}
          else
           var _hi_=_hf_;
          if(_hi_)
           {store_char(max_int,ib,c);var i$1=i$0 - 1 | 0,i$0=i$1;continue}
          return _hi_}}
      if(scan_indic)
       {var c=scan_indic[1];
        scan_chars(width,c);
        var _he_=1 - ib[1];
        if(_he_)
         {var ci=peek_char(ib);
          return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
        return _he_}
      return scan_chars(width,-1)}
    function scanf_bad_input(ib,x)
     {if(x[1] === Scan_failure)
       var s=x[2];
      else
       {if(x[1] !== Failure)throw x;var s=x[2]}
      var i=char_count(ib);
      return bad_input(caml_call2(sprintf(_co_),i,s))}
    function get_counter(ib,counter)
     {switch(counter)
       {case 0:return ib[5];case 1:return char_count(ib);default:return ib[6]}}
    function width_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return width}return max_int}
    function stopper_of_formatting_lit(fmting)
     {if(6 === fmting)return _cp_;
      var
       str=string_of_formatting_lit(fmting),
       stp=caml_string_get(str,1),
       sub_str=sub$0(str,2,caml_ml_string_length(str) - 2 | 0);
      return [0,stp,sub_str]}
    function take_format_readers$0(counter,k,fmt)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k,0);
       else
        switch(fmt$0[0])
         {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
          case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
          case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
          case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
          case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
          case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
          case 9:var fmt$10=fmt$0[2],fmt$0=fmt$10;continue;
          case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
          case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
          case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
          case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
          case 14:
           var rest=fmt$0[3],fmtty=fmt$0[2],_hc_=erase_rel(symm(fmtty));
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return take_fmtty_format_readers$0(counter$0,k,_hc_,rest)}
           return caml_trampoline_return
                   (take_fmtty_format_readers$0,[0,k,_hc_,rest]);
          case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
          case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
          case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
          case 18:
           var _hd_=fmt$0[1];
           if(0 === _hd_[0])
            {var
              rest$0=fmt$0[2],
              match=_hd_[1],
              fmt$18=match[1],
              fmt$19=concat_fmt(fmt$18,rest$0),
              fmt$0=fmt$19;
             continue}
           var
            rest$1=fmt$0[2],
            match$0=_hd_[1],
            fmt$20=match$0[1],
            fmt$21=concat_fmt(fmt$20,rest$1),
            fmt$0=fmt$21;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_format_readers(new_k,fmt_rest)};
          case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
          case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
          case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
          case 23:
           var rest$2=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:
               return function(reader)
                {function new_k(readers_rest)
                  {return caml_call1(k,[0,reader,readers_rest])}
                 return take_format_readers(new_k,rest$2)};
              default:var fmt$0=rest$2;continue}
           else
            switch(ign[0])
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:var fmt$0=rest$2;continue;
              case 3:var fmt$0=rest$2;continue;
              case 4:var fmt$0=rest$2;continue;
              case 5:var fmt$0=rest$2;continue;
              case 6:var fmt$0=rest$2;continue;
              case 7:var fmt$0=rest$2;continue;
              case 8:var fmt$0=rest$2;continue;
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return take_fmtty_format_readers$0
                         (counter$1,k,fmtty$0,rest$2)}
               return caml_trampoline_return
                       (take_fmtty_format_readers$0,[0,k,fmtty$0,rest$2]);
              case 10:var fmt$0=rest$2;continue;
              default:var fmt$0=rest$2;continue}
          default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}
    function take_fmtty_format_readers$0(counter,k,fmtty,fmt)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return take_format_readers$0(counter$0,k,fmt)}
         return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}
       else
        switch(fmtty$0[0])
         {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
          case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
          case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
          case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
          case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
          case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
          case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
          case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
          case 9:
           var
            rest=fmtty$0[3],
            ty2=fmtty$0[2],
            ty1=fmtty$0[1],
            ty=trans(symm(ty1),ty2),
            fmtty$10=concat_fmtty(ty,rest),
            fmtty$0=fmtty$10;
           continue;
          case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
          case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
          case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
          case 13:
           var fmt_rest=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest,fmt)};
          default:
           var fmt_rest$0=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest$0,fmt)}}}
    function take_format_readers(k,fmt)
     {return caml_trampoline(take_format_readers$0(0,k,fmt))}
    function take_fmtty_format_readers(k,fmtty,fmt)
     {return caml_trampoline(take_fmtty_format_readers$0(0,k,fmtty,fmt))}
    function pad_prec_scanf(ib,fmt,readers,pad,prec,scan,token)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(0 === prec)
           {caml_call3(scan,max_int,max_int,ib);
            var x=caml_call1(token,ib);
            return [0,x,make_scanf(ib,fmt,readers)]}
          return invalid_arg(cst_scanf_bad_conversion)}
        var p=prec[1];
        caml_call3(scan,max_int,p,ib);
        var x$0=caml_call1(token,ib);
        return [0,x$0,make_scanf(ib,fmt,readers)]}
      else
       {if(0 === pad[0])
         {if(0 === pad[1])return invalid_arg(cst_scanf_bad_conversion$0);
          var _hb_=pad[2];
          if(typeof prec === "number")
           {if(0 === prec)
             {caml_call3(scan,_hb_,max_int,ib);
              var x$1=caml_call1(token,ib);
              return [0,x$1,make_scanf(ib,fmt,readers)]}
            return invalid_arg(cst_scanf_bad_conversion$1)}
          var p$0=prec[1];
          caml_call3(scan,_hb_,p$0,ib);
          var x$2=caml_call1(token,ib);
          return [0,x$2,make_scanf(ib,fmt,readers)]}
        return invalid_arg(cst_scanf_bad_conversion$2)}}
    function make_scanf(ib,fmt,readers)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return 0;
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           scan_char(0,ib);
           var c=token_char(ib);
           return [0,c,make_scanf(ib,rest,readers)];
          case 1:
           var rest$0=fmt$0[1];
           scan_caml_char(0,ib);
           var c$0=token_char(ib);
           return [0,c$0,make_scanf(ib,rest$0,readers)];
          case 2:
           var _gY_=fmt$0[2],_gZ_=fmt$0[1];
           if(typeof _gY_ !== "number")
            switch(_gY_[0])
             {case 17:
               var
                rest$1=_gY_[2],
                fmting_lit=_gY_[1],
                match=stopper_of_formatting_lit(fmting_lit),
                str=match[2],
                stp=match[1],
                scan$0=
                 function(width,param,ib)
                  {return scan_string([0,stp],width,ib)},
                str_rest=[11,str,rest$1];
               return pad_prec_scanf
                       (ib,str_rest,readers,_gZ_,0,scan$0,token_string);
              case 18:
               var _g0_=_gY_[1];
               if(0 === _g0_[0])
                {var
                  rest$2=_gY_[2],
                  match$0=_g0_[1],
                  fmt$1=match$0[1],
                  scan$1=
                   function(width,param,ib){return scan_string(_cq_,width,ib)};
                 return pad_prec_scanf
                         (ib,
                          concat_fmt(fmt$1,rest$2),
                          readers,
                          _gZ_,
                          0,
                          scan$1,
                          token_string)}
               var
                rest$3=_gY_[2],
                match$1=_g0_[1],
                fmt$2=match$1[1],
                scan$2=
                 function(width,param,ib){return scan_string(_cr_,width,ib)};
               return pad_prec_scanf
                       (ib,
                        concat_fmt(fmt$2,rest$3),
                        readers,
                        _gZ_,
                        0,
                        scan$2,
                        token_string)
              }
           var scan=function(width,param,ib){return scan_string(0,width,ib)};
           return pad_prec_scanf(ib,_gY_,readers,_gZ_,0,scan,token_string);
          case 3:
           var
            rest$4=fmt$0[2],
            pad=fmt$0[1],
            scan$3=function(width,param,ib){return scan_caml_string(width,ib)};
           return pad_prec_scanf(ib,rest$4,readers,pad,0,scan$3,token_string);
          case 4:
           var
            rest$5=fmt$0[4],
            prec=fmt$0[3],
            pad$0=fmt$0[2],
            iconv=fmt$0[1],
            conv=integer_conversion_of_char(char_of_iconv(iconv)),
            scan$4=
             function(width,param,ib)
              {return scan_int_conversion(conv,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$5,
                    readers,
                    pad$0,
                    prec,
                    scan$4,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv,ib))});
          case 5:
           var
            rest$6=fmt$0[4],
            prec$0=fmt$0[3],
            pad$1=fmt$0[2],
            iconv$0=fmt$0[1],
            conv$0=integer_conversion_of_char(char_of_iconv(iconv$0)),
            scan$5=
             function(width,param,ib)
              {return scan_int_conversion(conv$0,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$6,
                    readers,
                    pad$1,
                    prec$0,
                    scan$5,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$0,ib))});
          case 6:
           var
            rest$7=fmt$0[4],
            prec$1=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$1=fmt$0[1],
            conv$1=integer_conversion_of_char(char_of_iconv(iconv$1)),
            scan$6=
             function(width,param,ib)
              {return scan_int_conversion(conv$1,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$7,
                    readers,
                    pad$2,
                    prec$1,
                    scan$6,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$1,ib))});
          case 7:
           var
            rest$8=fmt$0[4],
            prec$2=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$2=fmt$0[1],
            conv$2=integer_conversion_of_char(char_of_iconv(iconv$2)),
            scan$7=
             function(width,param,ib)
              {return scan_int_conversion(conv$2,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$8,
                    readers,
                    pad$3,
                    prec$2,
                    scan$7,
                    function(ib)
                     {return caml_int64_of_string(token_int_literal(conv$2,ib))});
          case 8:
           var _g1_=fmt$0[1];
           if(15 === _g1_)
            {var rest$9=fmt$0[4],prec$3=fmt$0[3],pad$4=fmt$0[2];
             return pad_prec_scanf
                     (ib,rest$9,readers,pad$4,prec$3,scan_caml_float,token_float)}
           if(16 <= _g1_)
            {var rest$10=fmt$0[4],prec$4=fmt$0[3],pad$5=fmt$0[2];
             return pad_prec_scanf
                     (ib,rest$10,readers,pad$5,prec$4,scan_hex_float,token_float)}
           var rest$11=fmt$0[4],prec$5=fmt$0[3],pad$6=fmt$0[2];
           return pad_prec_scanf
                   (ib,rest$11,readers,pad$6,prec$5,scan_float,token_float);
          case 9:
           var
            rest$12=fmt$0[2],
            pad$7=fmt$0[1],
            scan$8=
             function(param,_ha_,ib)
              {var
                c=checked_peek_char(ib),
                m=
                 102 === c
                  ?5
                  :116 === c?4:bad_input(caml_call1(sprintf(_cn_),c));
               return scan_string(0,m,ib)};
           return pad_prec_scanf(ib,rest$12,readers,pad$7,0,scan$8,token_bool);
          case 10:
           var rest$13=fmt$0[1];
           if(end_of_input(ib)){var fmt$0=rest$13;continue}
           return bad_input(cst_end_of_input_not_found);
          case 11:
           var rest$14=fmt$0[2],str$0=fmt$0[1];
           iter$2(function(_g$_){return check_char(ib,_g$_)},str$0);
           var fmt$0=rest$14;
           continue;
          case 12:
           var rest$15=fmt$0[2],chr=fmt$0[1];
           check_char(ib,chr);
           var fmt$0=rest$15;
           continue;
          case 13:
           var rest$16=fmt$0[3],fmtty=fmt$0[2],pad_opt=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt),ib);
           var s=token_string(ib);
           try
            {var _g2_=format_of_string_fmtty(s,fmtty),fmt$3=_g2_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg=exn[2],fmt$3=bad_input(msg)}
           return [0,fmt$3,make_scanf(ib,rest$16,readers)];
          case 14:
           var rest$17=fmt$0[3],fmtty$0=fmt$0[2],pad_opt$0=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt$0),ib);
           var s$0=token_string(ib);
           try
            {var
              match$2=fmt_ebb_of_string(0,s$0),
              fmt$6=match$2[1],
              match$3=fmt_ebb_of_string(0,s$0),
              fmt$7=match$3[1],
              fmt$8=type_format(fmt$7,erase_rel(symm(fmtty$0))),
              _g4_=type_format(fmt$6,erase_rel(fmtty$0)),
              fmt$5=_g4_,
              fmt$4=fmt$8}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var
              msg$0=exn[2],
              _g3_=bad_input(msg$0),
              fmt$5=_g3_[1],
              fmt$4=_g3_[2]}
           return [0,
                   [0,fmt$5,s$0],
                   make_scanf(ib,concat_fmt(fmt$4,rest$17),readers)];
          case 15:return invalid_arg(cst_scanf_bad_conversion_a);
          case 16:return invalid_arg(cst_scanf_bad_conversion_t);
          case 17:
           var
            rest$18=fmt$0[2],
            formatting_lit=fmt$0[1],
            _g5_=string_of_formatting_lit(formatting_lit);
           iter$2(function(_g__){return check_char(ib,_g__)},_g5_);
           var fmt$0=rest$18;
           continue;
          case 18:
           var _g6_=fmt$0[1];
           if(0 === _g6_[0])
            {var rest$19=fmt$0[2],match$4=_g6_[1],fmt$9=match$4[1];
             check_char(ib,64);
             check_char(ib,123);
             var fmt$10=concat_fmt(fmt$9,rest$19),fmt$0=fmt$10;
             continue}
           var rest$20=fmt$0[2],match$5=_g6_[1],fmt$11=match$5[1];
           check_char(ib,64);
           check_char(ib,91);
           var fmt$12=concat_fmt(fmt$11,rest$20),fmt$0=fmt$12;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           if(readers)
            {var
              readers_rest=readers[2],
              reader=readers[1],
              x=caml_call1(reader,ib);
             return [0,x,make_scanf(ib,fmt_rest,readers_rest)]}
           return invalid_arg(cst_scanf_missing_reader);
          case 20:
           var _g7_=fmt$0[3],_g8_=fmt$0[2],_g9_=fmt$0[1];
           if(typeof _g7_ !== "number" && 17 === _g7_[0])
            {var
              rest$21=_g7_[2],
              fmting_lit$0=_g7_[1],
              match$6=stopper_of_formatting_lit(fmting_lit$0),
              str$1=match$6[2],
              stp$0=match$6[1],
              width$0=width_of_pad_opt(_g9_);
             scan_chars_in_char_set(_g8_,[0,stp$0],width$0,ib);
             var s$2=token_string(ib),str_rest$0=[11,str$1,rest$21];
             return [0,s$2,make_scanf(ib,str_rest$0,readers)]}
           var width=width_of_pad_opt(_g9_);
           scan_chars_in_char_set(_g8_,0,width,ib);
           var s$1=token_string(ib);
           return [0,s$1,make_scanf(ib,_g7_,readers)];
          case 21:
           var
            rest$22=fmt$0[2],
            counter=fmt$0[1],
            count=get_counter(ib,counter);
           return [0,count,make_scanf(ib,rest$22,readers)];
          case 22:
           var rest$23=fmt$0[1],c$1=checked_peek_char(ib);
           return [0,c$1,make_scanf(ib,rest$23,readers)];
          case 23:
           var
            rest$24=fmt$0[2],
            ign=fmt$0[1],
            match$7=param_format_of_ignored_format(ign,rest$24),
            fmt$13=match$7[1],
            match$8=make_scanf(ib,fmt$13,readers);
           if(match$8){var arg_rest=match$8[2];return arg_rest}
           throw [0,Assert_failure,_cs_];
          default:
           return invalid_arg(cst_scanf_bad_conversion_custom_converter)}}
    function kscanf(ib,ef,param)
     {var str=param[2],fmt=param[1];
      function apply(f,args)
       {var f$0=f,args$0=args;
        for(;;)
         {if(args$0)
           {var
             r=args$0[2],
             x=args$0[1],
             f$1=caml_call1(f$0,x),
             f$0=f$1,
             args$0=r;
            continue}
          return f$0}}
      function k(readers,f)
       {reset_token(ib);
        try
         {var _gX_=[0,make_scanf(ib,fmt,readers)],_gW_=_gX_}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          if(exc[1] === Scan_failure)
           var switch$0=0;
          else
           if(exc[1] === Failure)
            var switch$0=0;
           else
            if(exc === End_of_file)
             var switch$0=0;
            else
             {if(exc[1] !== Invalid_argument)throw exc;
              var
               msg=exc[2],
               _gV_=
                invalid_arg
                 (_g_(msg,_g_(cst_in_format,_g_(escaped$1(str),cst$74)))),
               switch$0=1}
          if(! switch$0)var _gV_=[1,exc];
          var _gW_=_gV_}
        if(0 === _gW_[0]){var args=_gW_[1];return apply(f,args)}
        var exc=_gW_[1];
        return caml_call2(ef,ib,exc)}
      return take_format_readers(k,fmt)}
    function bscanf(ib,fmt){return kscanf(ib,scanf_bad_input,fmt)}
    function ksscanf(s,ef,fmt){return kscanf(from_string$1(s),ef,fmt)}
    function sscanf(s,fmt)
     {return kscanf(from_string$1(s),scanf_bad_input,fmt)}
    function scanf(fmt){return kscanf(stdib,scanf_bad_input,fmt)}
    function bscanf_format(ib,format,f)
     {scan_caml_string(max_int,ib);
      var str=token_string(ib);
      try
       {var _gU_=format_of_string_format(str,format),fmt=_gU_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== Failure)throw exn;
        var msg=exn[2],fmt=bad_input(msg)}
      return caml_call1(f,fmt)}
    function sscanf_format(s,format,f)
     {return bscanf_format(from_string$1(s),format,f)}
    function format_from_string(s,fmt)
     {var l=caml_ml_string_length(s);
      function _gT_(x){return x}
      var b=create$1(l + 2 | 0);
      add_char(b,34);
      var _gR_=l - 1 | 0,_gQ_=0;
      if(! (_gR_ < 0))
       {var i=_gQ_;
        for(;;)
         {var c=caml_string_get(s,i);
          if(34 === c)add_char(b,92);
          add_char(b,c);
          var _gS_=i + 1 | 0;
          if(_gR_ !== i){var i=_gS_;continue}
          break}}
      add_char(b,34);
      return sscanf_format(contents(b),fmt,_gT_)}
    function unescaped(s)
     {function _gP_(x){return x}
      return caml_call1(sscanf(_g_(cst$76,_g_(s,cst$75)),_ct_),_gP_)}
    function kfscanf(ic,ef,fmt){return kscanf(memo_from_channel(ic),ef,fmt)}
    function fscanf(ic,fmt)
     {return kscanf(memo_from_channel(ic),scanf_bad_input,fmt)}
    var
     Stdlib_scanf=
      [0,
       [0,
        stdib,
        from_file,
        from_file_bin,
        close_in,
        from_file,
        from_file_bin,
        from_string$1,
        from_function$0,
        from_channel$0,
        end_of_input,
        beginning_of_input,
        name_of_input,
        stdib],
       Scan_failure,
       bscanf,
       sscanf,
       scanf,
       kscanf,
       ksscanf,
       bscanf_format,
       sscanf_format,
       format_from_string,
       unescaped,
       fscanf,
       kfscanf];
    caml_register_global(693,Stdlib_scanf,"Stdlib__scanf");
    var register=caml_register_named_value;
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var Stdlib_callback=[0,register,register_exception];
    caml_register_global(694,Stdlib_callback,"Stdlib__callback");
    function copy$6(o){var o$0=o.slice();return caml_set_oo_id(o$0)}
    var params$0=[0,1,1,1,3,16],initial_object_size=2,dummy_item=0;
    function public_method_label(s)
     {var accu=[0,0],_gM_=caml_ml_string_length(s) - 1 | 0,_gL_=0;
      if(! (_gM_ < 0))
       {var i=_gL_;
        for(;;)
         {var _gN_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _gN_ | 0;
          var _gO_=i + 1 | 0;
          if(_gM_ !== i){var i=_gO_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare$6=caml_string_compare,
     Vars=caml_call1(Stdlib_map[1],[0,compare$6]),
     compare$7=caml_string_compare,
     Meths=caml_call1(Stdlib_map[1],[0,compare$7]),
     compare$8=caml_int_compare,
     Labs=caml_call1(Stdlib_map[1],[0,compare$8]),
     dummy_table=[0,0,[0,dummy_item],Meths[1],Labs[1],0,0,Vars[1],0],
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _gF_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _gF_;
      var _gH_=len - 1 | 0,_gG_=0;
      if(! (_gH_ < 0))
       {var i=_gG_;
        for(;;)
         {var
           _gJ_=(i * 2 | 0) + 3 | 0,
           _gI_=caml_check_bound(pub_labels,i)[i + 1];
          caml_check_bound(methods,_gJ_)[_gJ_ + 1] = _gI_;
          var _gK_=i + 1 | 0;
          if(_gH_ !== i){var i=_gK_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$1(array,new_size)
     {var old_size=array[2].length - 1,_gD_=old_size < new_size?1:0;
      if(_gD_)
       {var new_buck=caml_make_vect(new_size,dummy_met);
        blit$1(array[2],0,new_buck,0,old_size);
        array[2] = new_buck;
        var _gE_=0}
      else
       var _gE_=_gD_;
      return _gE_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$1(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _gB_=caml_call2(Meths[27],name,table[3]);return _gB_}
      catch(_gC_)
       {_gC_ = caml_wrap_exception(_gC_);
        if(_gC_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _gC_}}
    function get_method_labels(table,names)
     {return map$3(function(_gA_){return get_method_label(table,_gA_)},names)}
    function set_method(table,label,element)
     {method_count[1]++;
      return caml_call2(Labs[27],label,table[4])
              ?(resize$1(table,label + 1 | 0),
                caml_check_bound(table[2],label)[label + 1]
                =
                element)
              :(table[6] = [0,[0,label,element],table[6]],0)}
    function get_method(table,label)
     {try
       {var _gy_=assoc(label,table[6]);return _gy_}
      catch(_gz_)
       {_gz_ = caml_wrap_exception(_gz_);
        if(_gz_ === Not_found)
         return caml_check_bound(table[2],label)[label + 1];
        throw _gz_}}
    function to_list$0(arr){return arr === 0?0:to_list(arr)}
    function narrow(table,vars,virt_meths,concr_meths)
     {var
       vars$0=to_list$0(vars),
       virt_meths$0=to_list$0(virt_meths),
       concr_meths$0=to_list$0(concr_meths),
       virt_meth_labs=
        map$0
         (function(_gx_){return get_method_label(table,_gx_)},virt_meths$0),
       concr_meth_labs=
        map$0
         (function(_gw_){return get_method_label(table,_gw_)},concr_meths$0);
      table[5]
      =
      [0,
       [0,table[3],table[4],table[6],table[7],virt_meth_labs,vars$0],
       table[5]];
      var _gn_=Vars[1],_go_=table[7];
      function _gp_(lab,info,tvars)
       {return mem(lab,vars$0)?caml_call3(Vars[4],lab,info,tvars):tvars}
      table[7] = caml_call3(Vars[13],_gp_,_go_,_gn_);
      var by_name=[0,Meths[1]],by_label=[0,Labs[1]];
      iter2
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          var _gs_=by_label[1];
          try
           {var _gu_=caml_call2(Labs[27],label,table[4]),_gt_=_gu_}
          catch(_gv_)
           {_gv_ = caml_wrap_exception(_gv_);
            if(_gv_ !== Not_found)throw _gv_;
            var _gt_=1}
          by_label[1] = caml_call3(Labs[4],label,_gt_,_gs_);
          return 0},
        concr_meths$0,
        concr_meth_labs);
      iter2
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          by_label[1] = caml_call3(Labs[4],label,0,by_label[1]);
          return 0},
        virt_meths$0,
        virt_meth_labs);
      table[3] = by_name[1];
      table[4] = by_label[1];
      var _gq_=0,_gr_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meth_labs)?hm:[0,met,hm]},
        _gr_,
        _gq_);
      return 0}
    function widen(table)
     {var
       match=hd(table[5]),
       vars=match[6],
       virt_meths=match[5],
       saved_vars=match[4],
       saved_hidden_meths=match[3],
       by_label=match[2],
       by_name=match[1];
      table[5] = tl(table[5]);
      table[7]
      =
      fold_left$0
       (function(s,v)
         {var _gm_=caml_call2(Vars[27],v,table[7]);
          return caml_call3(Vars[4],v,_gm_,s)},
        saved_vars,
        vars);
      table[3] = by_name;
      table[4] = by_label;
      var _gl_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meths)?hm:[0,met,hm]},
        _gl_,
        saved_hidden_meths);
      return 0}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _gj_=caml_call2(Vars[27],name,table[7]);return _gj_}
      catch(_gk_)
       {_gk_ = caml_wrap_exception(_gk_);
        if(_gk_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,cst$77))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _gk_}}
    function to_array(arr){return caml_equal(arr,0)?[0]:arr}
    function new_methods_variables(table,meths,vals)
     {var
       meths$0=to_array(meths),
       nmeths=meths$0.length - 1,
       nvals=vals.length - 1,
       res=caml_make_vect(nmeths + nvals | 0,0),
       _gb_=nmeths - 1 | 0,
       _ga_=0;
      if(! (_gb_ < 0))
       {var i$0=_ga_;
        for(;;)
         {var
           _gh_=
            get_method_label(table,caml_check_bound(meths$0,i$0)[i$0 + 1]);
          caml_check_bound(res,i$0)[i$0 + 1] = _gh_;
          var _gi_=i$0 + 1 | 0;
          if(_gb_ !== i$0){var i$0=_gi_;continue}
          break}}
      var _gd_=nvals - 1 | 0,_gc_=0;
      if(! (_gd_ < 0))
       {var i=_gc_;
        for(;;)
         {var
           _gf_=i + nmeths | 0,
           _ge_=new_variable(table,caml_check_bound(vals,i)[i + 1]);
          caml_check_bound(res,_gf_)[_gf_ + 1] = _ge_;
          var _gg_=i + 1 | 0;
          if(_gd_ !== i){var i=_gg_;continue}
          break}}
      return res}
    function get_variable(table,name)
     {try
       {var _f__=caml_call2(Vars[27],name,table[7]);return _f__}
      catch(_f$_)
       {_f$_ = caml_wrap_exception(_f$_);
        if(_f$_ === Not_found)throw [0,Assert_failure,_cu_];
        throw _f$_}}
    function get_variables(table,names)
     {return map$3(function(_f9_){return get_variable(table,_f9_)},names)}
    function add_initializer(table,f){table[8] = [0,f,table[8]];return 0}
    function create_table(public_methods)
     {if(public_methods === 0)return new_table([0]);
      var
       tags=map$3(public_method_label,public_methods),
       table=new_table(tags);
      iteri$2
       (function(i,met)
         {var lab=(i * 2 | 0) + 2 | 0;
          table[3] = caml_call3(Meths[4],met,lab,table[3]);
          table[4] = caml_call3(Labs[4],lab,1,table[4]);
          return 0},
        public_methods);
      return table}
    function init_class(table)
     {inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
      table[8] = rev(table[8]);
      return resize$1
              (table,
               3 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0)}
    function inherits(cla,vals,virt_meths,concr_meths,param,top)
     {var env=param[4],super$0=param[2];
      narrow(cla,vals,virt_meths,concr_meths);
      var init=top?caml_call2(super$0,cla,env):caml_call1(super$0,cla);
      widen(cla);
      var
       _f4_=0,
       _f5_=to_array(concr_meths),
       _f6_=
        [0,
         map$3
          (function(nm){return get_method(cla,get_method_label(cla,nm))},_f5_),
         _f4_],
       _f7_=to_array(vals);
      return caml_array_concat
              ([0,
                [0,init],
                [0,
                 map$3(function(_f8_){return get_variable(cla,_f8_)},_f7_),
                 _f6_]])}
    function make_class(pub_meths,class_init)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      return [0,caml_call1(env_init,0),class_init,env_init,0]}
    function make_class_store(pub_meths,class_init,init_table)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      init_table[2] = class_init;
      init_table[1] = env_init;
      return 0}
    function dummy_class(loc)
     {function undef(param){throw [0,Undefined_recursive_module,loc]}
      return [0,undef,undef,undef,0]}
    function create_object(table)
     {var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function create_object_opt(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function iter_f(obj,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],f=param$0[1];
          caml_call1(f,obj);
          var param$0=l;
          continue}
        return 0}}
    function run_initializers(obj,table)
     {var inits=table[8],_f3_=0 !== inits?1:0;
      return _f3_?iter_f(obj,inits):_f3_}
    function run_initializers_opt(obj_0,obj,table)
     {if(obj_0)return obj;
      var inits=table[8];
      if(0 !== inits)iter_f(obj,inits);
      return obj}
    function create_object_and_run_initializers(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=create_object(table);
      run_initializers(obj,table);
      return obj}
    function get_data$0(param)
     {if(param)return param[2];throw [0,Assert_failure,_cy_]}
    function build_path(n,keys,tables)
     {var res=[0,0,0,0],r=[0,res],_fZ_=0;
      if(! (n < 0))
       {var i=_fZ_;
        for(;;)
         {var _f1_=r[1];
          r[1] = [0,caml_check_bound(keys,i)[i + 1],_f1_,0];
          var _f2_=i + 1 | 0;
          if(n !== i){var i=_f2_;continue}
          break}}
      var _f0_=r[1];
      if(tables){tables[2] = _f0_;return res}
      throw [0,Assert_failure,_cv_]}
    function lookup_tables(root,keys)
     {var tables$2=get_data$0(root);
      if(tables$2)
       {var i$1=keys.length - 1 - 1 | 0,i=i$1,tables=tables$2;
        a:
        for(;;)
         {if(0 <= i)
           {var key=caml_check_bound(keys,i)[i + 1],tables$0=tables;
            for(;;)
             {if(tables$0)
               {if(tables$0[1] === key)
                 {var tables$1=get_data$0(tables$0);
                  if(tables$1)
                   {var i$0=i - 1 | 0,i=i$0,tables=tables$1;continue a}
                  throw [0,Assert_failure,_cA_]}
                if(tables$0)
                 {var _fY_=tables$0[3];
                  if(_fY_){var tables$0=_fY_;continue}
                  var v=[0,key,0,0];
                  if(tables$0)
                   {tables$0[3] = v;return build_path(i - 1 | 0,keys,v)}
                  throw [0,Assert_failure,_cw_]}
                throw [0,Assert_failure,_cz_]}
              throw [0,Assert_failure,_cx_]}}
          return tables}}
      return build_path(keys.length - 1 - 1 | 0,keys,root)}
    function new_cache(table)
     {var n=new_method(table);
      if(0 === (n % 2 | 0))
       var switch$0=0;
      else
       if((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n)
        var switch$0=0;
       else
        var n$0=new_method(table),switch$0=1;
      if(! switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[n$0 + 1] = 0;
      return n$0}
    function set_methods(table,methods)
     {var len=methods.length - 1,i=[0,0];
      for(;;)
       {if(i[1] < len)
         {var
           _fS_=i[1],
           label=caml_check_bound(methods,_fS_)[_fS_ + 1],
           next=
            function(param)
             {i[1]++;
              var _fX_=i[1];
              return caml_check_bound(methods,_fX_)[_fX_ + 1]},
           clo=next(0);
          if(typeof clo === "number")
           switch(clo)
            {case 0:
              var
               x=next(0),
               clo$0=function(x){return function(obj){return x}}(x);
              break;
             case 1:
              var
               n=next(0),
               clo$0=function(n){return function(obj){return obj[n + 1]}}(n);
              break;
             case 2:
              var
               e=next(0),
               n$0=next(0),
               clo$0=
                function(e,n){return function(obj){return obj[e + 1][n + 1]}}
                 (e,n$0);
              break;
             case 3:
              var
               n$1=next(0),
               clo$0=
                function(n)
                  {return function(obj){return caml_call1(obj[1][n + 1],obj)}}
                 (n$1);
              break;
             case 4:
              var
               n$2=next(0),
               clo$0=
                function(n){return function(obj,x){obj[n + 1] = x;return 0}}
                 (n$2);
              break;
             case 5:
              var
               f=next(0),
               x$0=next(0),
               clo$0=
                function(f,x){return function(obj){return caml_call1(f,x)}}
                 (f,x$0);
              break;
             case 6:
              var
               f$0=next(0),
               n$3=next(0),
               clo$0=
                function(f,n)
                  {return function(obj){return caml_call1(f,obj[n + 1])}}
                 (f$0,n$3);
              break;
             case 7:
              var
               f$1=next(0),
               e$0=next(0),
               n$4=next(0),
               clo$0=
                function(f,e,n)
                  {return function(obj)
                    {return caml_call1(f,obj[e + 1][n + 1])}}
                 (f$1,e$0,n$4);
              break;
             case 8:
              var
               f$2=next(0),
               n$5=next(0),
               clo$0=
                function(f,n)
                  {return function(obj)
                    {return caml_call1(f,caml_call1(obj[1][n + 1],obj))}}
                 (f$2,n$5);
              break;
             case 9:
              var
               f$3=next(0),
               x$1=next(0),
               y=next(0),
               clo$0=
                function(f,x,y)
                  {return function(obj){return caml_call2(f,x,y)}}
                 (f$3,x$1,y);
              break;
             case 10:
              var
               f$4=next(0),
               x$2=next(0),
               n$6=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj){return caml_call2(f,x,obj[n + 1])}}
                 (f$4,x$2,n$6);
              break;
             case 11:
              var
               f$5=next(0),
               x$3=next(0),
               e$1=next(0),
               n$7=next(0),
               clo$0=
                function(f,x,e,n)
                  {return function(obj)
                    {return caml_call2(f,x,obj[e + 1][n + 1])}}
                 (f$5,x$3,e$1,n$7);
              break;
             case 12:
              var
               f$6=next(0),
               x$4=next(0),
               n$8=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj)
                    {return caml_call2(f,x,caml_call1(obj[1][n + 1],obj))}}
                 (f$6,x$4,n$8);
              break;
             case 13:
              var
               f$7=next(0),
               n$9=next(0),
               x$5=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj){return caml_call2(f,obj[n + 1],x)}}
                 (f$7,n$9,x$5);
              break;
             case 14:
              var
               f$8=next(0),
               e$2=next(0),
               n$10=next(0),
               x$6=next(0),
               clo$0=
                function(f,e,n,x)
                  {return function(obj)
                    {return caml_call2(f,obj[e + 1][n + 1],x)}}
                 (f$8,e$2,n$10,x$6);
              break;
             case 15:
              var
               f$9=next(0),
               n$11=next(0),
               x$7=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj)
                    {return caml_call2(f,caml_call1(obj[1][n + 1],obj),x)}}
                 (f$9,n$11,x$7);
              break;
             case 16:
              var
               n$12=next(0),
               x$8=next(0),
               clo$0=
                function(n,x)
                  {return function(obj)
                    {return caml_call2(obj[1][n + 1],obj,x)}}
                 (n$12,x$8);
              break;
             case 17:
              var
               n$13=next(0),
               m=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {return caml_call2(obj[1][n + 1],obj,obj[m + 1])}}
                 (n$13,m);
              break;
             case 18:
              var
               n$14=next(0),
               e$3=next(0),
               m$0=next(0),
               clo$0=
                function(n,e,m)
                  {return function(obj)
                    {return caml_call2(obj[1][n + 1],obj,obj[e + 1][m + 1])}}
                 (n$14,e$3,m$0);
              break;
             case 19:
              var
               n$15=next(0),
               m$1=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {var _fV_=caml_call1(obj[1][m + 1],obj);
                     return caml_call2(obj[1][n + 1],obj,_fV_)}}
                 (n$15,m$1);
              break;
             case 20:
              var
               m$2=next(0),
               x$9=next(0),
               c=new_cache(table),
               clo$0=
                function(m,x,c)
                  {return function(obj)
                    {return caml_call2(caml_get_public_method(x,m,0),x,c)}}
                 (m$2,x$9,c);
              break;
             case 21:
              var
               m$3=next(0),
               n$16=next(0),
               c$0=new_cache(table),
               clo$0=
                function(m,n,c)
                  {return function(obj)
                    {var _fU_=obj[n + 1];
                     return caml_call2(caml_get_public_method(_fU_,m,0),_fU_,c)}}
                 (m$3,n$16,c$0);
              break;
             case 22:
              var
               m$4=next(0),
               e$4=next(0),
               n$17=next(0),
               c$1=new_cache(table),
               clo$0=
                function(m,e,n,c)
                  {return function(obj)
                    {var _fT_=obj[e + 1][n + 1];
                     return caml_call2(caml_get_public_method(_fT_,m,0),_fT_,c)}}
                 (m$4,e$4,n$17,c$1);
              break;
             default:
              var
               m$5=next(0),
               n$18=next(0),
               c$2=new_cache(table),
               clo$0=
                function(m,n,c)
                  {return function(obj)
                    {var _fW_=caml_call1(obj[1][n + 1],obj);
                     return caml_call2(caml_get_public_method(_fW_,m,0),_fW_,c)}}
                 (m$5,n$18,c$2)}
          else
           var clo$0=clo;
          set_method(table,label,clo$0);
          i[1]++;
          continue}
        return 0}}
    function stats$0(param)
     {return [0,table_count[1],method_count[1],inst_var_count[1]]}
    var
     CamlinternalOO=
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy$6,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initializers,
       lookup_tables,
       params$0,
       stats$0];
    caml_register_global(695,CamlinternalOO,"CamlinternalOO");
    var Stdlib_oo=[0,copy$6,public_method_label,public_method_label];
    caml_register_global(696,Stdlib_oo,"Stdlib__oo");
    var
     update_mod=runtime.caml_CamlinternalMod_update_mod,
     init_mod=runtime.caml_CamlinternalMod_init_mod,
     CamlinternalMod=[0,init_mod,update_mod];
    caml_register_global(697,CamlinternalMod,"CamlinternalMod");
    var
     initial_buffer=caml_create_bytes(32),
     buffer=[0,initial_buffer],
     bufpos=[0,0];
    function reset_buffer(param)
     {buffer[1] = initial_buffer;bufpos[1] = 0;return 0}
    function store(c)
     {if(caml_ml_bytes_length(buffer[1]) <= bufpos[1])
       {var newbuffer=caml_create_bytes(2 * bufpos[1] | 0);
        blit(buffer[1],0,newbuffer,0,bufpos[1]);
        buffer[1] = newbuffer}
      caml_bytes_set(buffer[1],bufpos[1],c);
      bufpos[1]++;
      return 0}
    function get_string(param)
     {var s=sub_string(buffer[1],0,bufpos[1]);
      buffer[1] = initial_buffer;
      return s}
    function make_lexer(keywords)
     {var kwd_table=caml_call2(Stdlib_hashtbl[1],0,17);
      iter$0
       (function(s){return caml_call3(Stdlib_hashtbl[5],kwd_table,s,[0,s])},
        keywords);
      function ident_or_keyword(id)
       {try
         {var _fQ_=caml_call2(Stdlib_hashtbl[6],kwd_table,id);return _fQ_}
        catch(_fR_)
         {_fR_ = caml_wrap_exception(_fR_);
          if(_fR_ === Not_found)return [1,id];
          throw _fR_}}
      function keyword_or_error(c)
       {var s=make$0(1,c);
        try
         {var _fO_=caml_call2(Stdlib_hashtbl[6],kwd_table,s);return _fO_}
        catch(_fP_)
         {_fP_ = caml_wrap_exception(_fP_);
          if(_fP_ === Not_found)throw [0,Error,_g_(cst_Illegal_character,s)];
          throw _fP_}}
      function end_exponent_part(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fN_=match[1],switcher=_fN_ - 48 | 0;
            if(! (9 < switcher >>> 0)){junk(strm);store(_fN_);continue}}
          return [0,[3,caml_float_of_string(get_string(0))]]}}
      function exponent_part(strm)
       {var match=peek$0(strm);
        if(match)
         {var _fM_=match[1],switch$0=43 === _fM_?0:45 === _fM_?0:1;
          if(! switch$0)
           {junk(strm);store(_fM_);return end_exponent_part(strm)}}
        return end_exponent_part(strm)}
      function number(s)
       {for(;;)
         {var match=peek$0(s);
          if(match)
           {var _fJ_=match[1];
            if(58 <= _fJ_)
             {var switch$0=69 === _fJ_?0:101 === _fJ_?0:1;
              if(! switch$0){junk(s);store(69);return exponent_part(s)}}
            else
             {if(46 === _fJ_)
               {junk(s);
                store(46);
                for(;;)
                 {var match$0=peek$0(s);
                  if(match$0)
                   {var _fK_=match$0[1],_fL_=_fK_ - 69 | 0;
                    if(32 < _fL_ >>> 0)
                     {var switcher=_fL_ + 21 | 0;
                      if(! (9 < switcher >>> 0)){junk(s);store(_fK_);continue}}
                    else
                     {var switcher$0=_fL_ - 1 | 0;
                      if(30 < switcher$0 >>> 0)
                       {junk(s);store(69);return exponent_part(s)}}}
                  return [0,[3,caml_float_of_string(get_string(0))]]}}
              if(48 <= _fJ_){junk(s);store(_fJ_);continue}}}
          return [0,[2,caml_int_of_string(get_string(0))]]}}
      function ident2(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fH_=match[1];
            if(94 <= _fH_)
             var
              _fI_=_fH_ - 95 | 0,
              switch$0=30 < _fI_ >>> 0?32 <= _fI_?1:0:29 === _fI_?0:1;
            else
             if(65 <= _fH_)
              var switch$0=92 === _fH_?0:1;
             else
              if(33 <= _fH_)
               switch(_fH_ - 33 | 0)
                {case 0:
                 case 2:
                 case 3:
                 case 4:
                 case 5:
                 case 9:
                 case 10:
                 case 12:
                 case 14:
                 case 25:
                 case 27:
                 case 28:
                 case 29:
                 case 30:
                 case 31:var switch$0=0;break;
                 default:var switch$0=1}
              else
               var switch$0=1;
            if(! switch$0){junk(strm);store(_fH_);continue}}
          return [0,ident_or_keyword(get_string(0))]}}
      function neg_number(s)
       {var match=peek$0(s);
        if(match)
         {var _fG_=match[1],switcher=_fG_ - 48 | 0;
          if(! (9 < switcher >>> 0))
           {junk(s);reset_buffer(0);store(45);store(_fG_);return number(s)}}
        reset_buffer(0);
        store(45);
        return ident2(s)}
      function ident(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fE_=match[1];
            if(91 <= _fE_)
             var
              _fF_=_fE_ - 95 | 0,
              switch$0=27 < _fF_ >>> 0?97 <= _fF_?0:1:1 === _fF_?1:0;
            else
             var
              switch$0=
               48 <= _fE_?6 < (_fE_ - 58 | 0) >>> 0?0:1:39 === _fE_?0:1;
            if(! switch$0){junk(strm);store(_fE_);continue}}
          return [0,ident_or_keyword(get_string(0))]}}
      function next_token$0(counter,strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fv_=match[1];
            if(124 <= _fv_)
             var switch$0=127 <= _fv_?192 <= _fv_?1:0:125 === _fv_?0:2;
            else
             {var _fw_=_fv_ - 65 | 0;
              if(57 < _fw_ >>> 0)
               if(58 <= _fw_)
                var switch$0=0;
               else
                {var switcher=_fw_ + 65 | 0;
                 switch(switcher)
                  {case 34:
                    junk(strm);
                    reset_buffer(0);
                    for(;;)
                     {var match$1=peek$0(strm);
                      if(match$1)
                       {var _fy_=match$1[1];
                        if(34 === _fy_){junk(strm);return [0,[4,get_string(0)]]}
                        if(92 === _fy_)
                         {junk(strm);
                          try
                           {var c$0=escape(strm)}
                          catch(_fD_)
                           {_fD_ = caml_wrap_exception(_fD_);
                            if(_fD_ === Failure$0)throw [0,Error,cst$80];
                            throw _fD_}
                          store(c$0);
                          continue}
                        junk(strm);
                        store(_fy_);
                        continue}
                      throw Failure$0}
                   case 39:
                    junk(strm);
                    try
                     {var match$2=peek$0(strm);
                      if(! match$2)throw Failure$0;
                      var _fz_=match$2[1];
                      if(92 === _fz_)
                       {junk(strm);
                        try
                         {var _fA_=escape(strm)}
                        catch(_fC_)
                         {_fC_ = caml_wrap_exception(_fC_);
                          if(_fC_ === Failure$0)throw [0,Error,cst$81];
                          throw _fC_}
                        var c=_fA_}
                      else
                       {junk(strm);var c=_fz_}}
                    catch(_fB_)
                     {_fB_ = caml_wrap_exception(_fB_);
                      if(_fB_ === Failure$0)throw [0,Error,cst$78];
                      throw _fB_}
                    var match$0=peek$0(strm);
                    if(match$0)
                     if(39 === match$0[1]){junk(strm);return [0,[5,c]]}
                    throw [0,Error,cst$79];
                   case 40:
                    junk(strm);
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return maybe_comment(counter$0,strm)}
                    return caml_trampoline_return(maybe_comment,[0,strm]);
                   case 45:junk(strm);return neg_number(strm);
                   case 9:
                   case 10:
                   case 12:
                   case 13:
                   case 26:
                   case 32:junk(strm);continue;
                   case 48:
                   case 49:
                   case 50:
                   case 51:
                   case 52:
                   case 53:
                   case 54:
                   case 55:
                   case 56:
                   case 57:
                    junk(strm);reset_buffer(0);store(_fv_);return number(strm);
                   case 33:
                   case 35:
                   case 36:
                   case 37:
                   case 38:
                   case 42:
                   case 43:
                   case 47:
                   case 58:
                   case 60:
                   case 61:
                   case 62:
                   case 63:
                   case 64:var switch$0=2;break;
                   default:var switch$0=0}}
              else
               {var _fx_=_fw_ - 26 | 0;
                if(5 < _fx_ >>> 0)
                 var switch$0=1;
                else
                 switch(_fx_)
                  {case 4:var switch$0=1;break;
                   case 1:
                   case 3:var switch$0=2;break;
                   default:var switch$0=0}}}
            switch(switch$0)
             {case 0:junk(strm);return [0,keyword_or_error(_fv_)];
              case 1:
               junk(strm);reset_buffer(0);store(_fv_);return ident(strm);
              default:
               junk(strm);reset_buffer(0);store(_fv_);return ident2(strm)}}
          return 0}}
      function maybe_comment(counter,strm)
       {var match=peek$0(strm);
        if(match)
         if(42 === match[1])
          {junk(strm);
           comment(strm);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return next_token$0(counter$0,strm)}
           return caml_trampoline_return(next_token$0,[0,strm])}
        return [0,keyword_or_error(40)]}
      function next_token(strm){return caml_trampoline(next_token$0(0,strm))}
      function escape(strm)
       {var match=peek$0(strm);
        if(match)
         {var _fs_=match[1];
          if(58 <= _fs_)
           {var switcher=_fs_ - 110 | 0;
            if(! (6 < switcher >>> 0))
             switch(switcher)
              {case 0:junk(strm);return 10;
               case 4:junk(strm);return 13;
               case 6:junk(strm);return 9
               }}
          else
           if(48 <= _fs_)
            {junk(strm);
             var match$0=peek$0(strm);
             if(match$0)
              {var _ft_=match$0[1],switcher$0=_ft_ - 48 | 0;
               if(! (9 < switcher$0 >>> 0))
                {junk(strm);
                 var match$1=peek$0(strm);
                 if(match$1)
                  {var _fu_=match$1[1],switcher$1=_fu_ - 48 | 0;
                   if(! (9 < switcher$1 >>> 0))
                    {junk(strm);
                     return chr
                             ((((_fs_ - 48 | 0) * 100 | 0)
                               +
                               ((_ft_ - 48 | 0) * 10 | 0)
                               |
                               0)
                              +
                              (_fu_ - 48 | 0)
                              |
                              0)}}
                 throw [0,Error,cst$83]}}
             throw [0,Error,cst$82]}
          junk(strm);
          return _fs_}
        throw Failure$0}
      function comment(strm)
       {a:
        for(;;)
         {var match=peek$0(strm);
          if(match)
           {var switcher=match[1] - 40 | 0;
            if(! (2 < switcher >>> 0))
             switch(switcher)
              {case 0:
                junk(strm);
                var match$0=peek$0(strm);
                if(match$0)
                 {if(42 === match$0[1]){junk(strm);comment(strm);continue}
                  junk(strm);
                  continue}
                throw Failure$0;
               case 1:break;
               default:
                junk(strm);
                for(;;)
                 {var match$1=peek$0(strm);
                  if(match$1)
                   {var _fr_=match$1[1];
                    if(41 === _fr_){junk(strm);return 0}
                    if(42 === _fr_){junk(strm);continue}
                    junk(strm);
                    continue a}
                  throw Failure$0}}
            junk(strm);
            continue}
          throw Failure$0}}
      return function(input)
       {return from(function(count){return next_token(input)})}}
    var Stdlib_genlex=[0,make_lexer];
    caml_register_global(698,Stdlib_genlex,"Stdlib__genlex");
    function MakeSeeded$0(H)
     {var prng=[246,function(_fq_){return caml_call1(_b6_[2],0)}];
      function create(opt,initial_size)
       {if(opt)
         var sth=opt[1],random=sth;
        else
         var random=caml_call1(Stdlib_hashtbl[17],0);
        var x=16;
        for(;;)
         {if(! (initial_size <= x))
           if(! (max_array_length < (x * 2 | 0)))
            {var x$0=x * 2 | 0,x=x$0;continue}
          if(random)
           var
            _fo_=caml_obj_tag(prng),
            _fp_=250 === _fo_?prng[1]:246 === _fo_?force_lazy_block(prng):prng,
            seed=caml_call1(_b6_[4],_fp_);
          else
           var seed=0;
          return [0,0,caml_make_vect(x,0),seed,x]}}
      function clear(h)
       {h[1] = 0;
        var len=h[2].length - 1,_fm_=len - 1 | 0,_fl_=0;
        if(! (_fm_ < 0))
         {var i=_fl_;
          for(;;)
           {caml_check_bound(h[2],i)[i + 1] = 0;
            var _fn_=i + 1 | 0;
            if(_fm_ !== i){var i=_fn_;continue}
            break}}
        return 0}
      function reset(h)
       {var len=h[2].length - 1;
        return len === h[4]
                ?clear(h)
                :(h[1] = 0,h[2] = caml_make_vect(h[4],0),0)}
      function copy(init)
       {var _fi_=init[4],_fj_=init[3],_fk_=copy$1(init[2]);
        return [0,init[1],_fk_,_fj_,_fi_]}
      function key_index(h,hkey){return hkey & (h[2].length - 1 - 1 | 0)}
      function clean(h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var rest=param$0[3],c=param$0[2],hkey=param$0[1];
              if(caml_call1(H[7],c))return [0,hkey,c,do_bucket(rest)];
              h[1] = h[1] - 1 | 0;
              var param$0=rest;
              continue}
            return 0}}
        var d=h[2],_ff_=d.length - 1 - 1 | 0,_fe_=0;
        if(! (_ff_ < 0))
         {var i=_fe_;
          for(;;)
           {var _fg_=do_bucket(caml_check_bound(d,i)[i + 1]);
            caml_check_bound(d,i)[i + 1] = _fg_;
            var _fh_=i + 1 | 0;
            if(_ff_ !== i){var i=_fh_;continue}
            break}}
        return 0}
      function resize(h)
       {var odata=h[2],osize=odata.length - 1,nsize=osize * 2 | 0;
        clean(h);
        var
         _e__=nsize < max_array_length?1:0,
         _e$_=_e__?(osize >>> 1 | 0) <= h[1]?1:0:_e__;
        if(_e$_)
         {var ndata=caml_make_vect(nsize,0);
          h[2] = ndata;
          var
           insert_bucket=
            function(param)
             {if(param)
               {var rest=param[3],data=param[2],hkey=param[1];
                insert_bucket(rest);
                var nidx=key_index(h,hkey);
                return ndata[nidx + 1]
                       =
                       [0,hkey,data,caml_check_bound(ndata,nidx)[nidx + 1]]}
              return 0},
           _fb_=osize - 1 | 0,
           _fa_=0;
          if(! (_fb_ < 0))
           {var i=_fa_;
            for(;;)
             {insert_bucket(caml_check_bound(odata,i)[i + 1]);
              var _fd_=i + 1 | 0;
              if(_fb_ !== i){var i=_fd_;continue}
              break}}
          var _fc_=0}
        else
         var _fc_=_e$_;
        return _fc_}
      function add(h,key,info)
       {var
         hkey=caml_call2(H[2],h[3],key),
         i=key_index(h,hkey),
         container=caml_call2(H[1],key,info),
         bucket=[0,hkey,container,caml_check_bound(h[2],i)[i + 1]];
        caml_check_bound(h[2],i)[i + 1] = bucket;
        h[1] = h[1] + 1 | 0;
        var _e9_=h[2].length - 1 << 1 < h[1]?1:0;
        return _e9_?resize(h):_e9_}
      function remove(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function remove_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var next=param$0[3],c=param$0[2],hk=param$0[1];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                switch(match)
                 {case 0:h[1] = h[1] - 1 | 0;return next;
                  case 1:return [0,hk,c,remove_bucket(next)];
                  default:h[1] = h[1] - 1 | 0;var param$0=next;continue}}
              return [0,hk,c,remove_bucket(next)]}
            return 0}}
        var
         i=key_index(h,hkey),
         _e8_=remove_bucket(caml_check_bound(h[2],i)[i + 1]);
        return caml_check_bound(h[2],i)[i + 1] = _e8_}
      function find(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _e7_=key_index(h,hkey),
         param$0=caml_check_bound(h[2],_e7_)[_e7_ + 1],
         param=param$0;
        for(;;)
         {if(param)
           {var rest=param[3],c=param[2],hk=param[1];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:
                 var match$0=caml_call1(H[4],c);
                 if(match$0){var d=match$0[1];return d}
                 var param=rest;
                 continue;
                case 1:var param=rest;continue;
                default:var param=rest;continue}}
            var param=rest;
            continue}
          throw Not_found}}
      function find_opt(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _e6_=key_index(h,hkey),
         param$0=caml_check_bound(h[2],_e6_)[_e6_ + 1],
         param=param$0;
        for(;;)
         {if(param)
           {var rest=param[3],c=param[2],hk=param[1];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:
                 var d=caml_call1(H[4],c);
                 if(d)return d;
                 var param=rest;
                 continue;
                case 1:var param=rest;continue;
                default:var param=rest;continue}}
            var param=rest;
            continue}
          return 0}}
      function find_all(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var rest=param$0[3],c=param$0[2],hk=param$0[1];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                switch(match)
                 {case 0:
                   var match$0=caml_call1(H[4],c);
                   if(match$0)
                    {var d=match$0[1];return [0,d,find_in_bucket(rest)]}
                   var param$0=rest;
                   continue;
                  case 1:var param$0=rest;continue;
                  default:var param$0=rest;continue}}
              var param$0=rest;
              continue}
            return 0}}
        var _e5_=key_index(h,hkey);
        return find_in_bucket(caml_check_bound(h[2],_e5_)[_e5_ + 1])}
      function replace(h,key,info)
       {var hkey=caml_call2(H[2],h[3],key);
        function replace_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var next=param$0[3],c=param$0[2],hk=param$0[1];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                if(0 === match)return caml_call3(H[6],c,key,info);
                var param$0=next;
                continue}
              var param$0=next;
              continue}
            throw Not_found}}
        var i=key_index(h,hkey),l=caml_check_bound(h[2],i)[i + 1];
        try
         {var _e3_=replace_bucket(l);return _e3_}
        catch(_e4_)
         {_e4_ = caml_wrap_exception(_e4_);
          if(_e4_ === Not_found)
           {var container=caml_call2(H[1],key,info);
            caml_check_bound(h[2],i)[i + 1] = [0,hkey,container,l];
            h[1] = h[1] + 1 | 0;
            var _e2_=h[2].length - 1 << 1 < h[1]?1:0;
            return _e2_?resize(h):_e2_}
          throw _e4_}}
      function mem(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _e1_=key_index(h,hkey),
         param$0=caml_check_bound(h[2],_e1_)[_e1_ + 1],
         param=param$0;
        for(;;)
         {if(param)
           {var rest=param[3],c=param[2],hk=param[1];
            if(hk === hkey)
             {var match=caml_call2(H[3],c,key);
              if(0 === match)return 1;
              var param=rest;
              continue}
            var param=rest;
            continue}
          return 0}}
      function iter$0(f,h)
       {var d$0=h[2],_eZ_=d$0.length - 1 - 1 | 0,_eY_=0;
        if(! (_eZ_ < 0))
         {var i=_eY_;
          a:
          for(;;)
           {var param$0=caml_check_bound(d$0,i)[i + 1],param=param$0;
            for(;;)
             {if(param)
               {var
                 rest=param[3],
                 c=param[2],
                 match=caml_call1(H[5],c),
                 match$0=caml_call1(H[4],c);
                if(match)
                 if(match$0)
                  {var d=match$0[1],k=match[1];
                   caml_call2(f,k,d);
                   var switch$0=1}
                 else
                  var switch$0=0;
                else
                 var switch$0=0;
                var param=rest;
                continue}
              var _e0_=i + 1 | 0;
              if(_eZ_ !== i){var i=_e0_;continue a}
              break}
            break}}
        return 0}
      function fold(f,h,init)
       {var d$0=h[2],accu$1=[0,init],_eV_=d$0.length - 1 - 1 | 0,_eU_=0;
        if(! (_eV_ < 0))
         {var i=_eU_;
          a:
          for(;;)
           {var
             _eW_=accu$1[1],
             b$0=caml_check_bound(d$0,i)[i + 1],
             b=b$0,
             accu=_eW_;
            for(;;)
             {if(b)
               {var
                 rest=b[3],
                 c=b[2],
                 match=caml_call1(H[5],c),
                 match$0=caml_call1(H[4],c);
                if(match)
                 if(match$0)
                  var
                   d=match$0[1],
                   k=match[1],
                   accu$0=caml_call3(f,k,d,accu),
                   switch$0=1;
                 else
                  var switch$0=0;
                else
                 var switch$0=0;
                if(! switch$0)var accu$0=accu;
                var b=rest,accu=accu$0;
                continue}
              accu$1[1] = accu;
              var _eX_=i + 1 | 0;
              if(_eV_ !== i){var i=_eX_;continue a}
              break}
            break}}
        return accu$1[1]}
      function filter_map_inplace(f,h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               rest=param$0[3],
               c=param$0[2],
               hk=param$0[1],
               match=caml_call1(H[5],c),
               match$0=caml_call1(H[4],c);
              if(match)
               if(match$0)
                {var d=match$0[1],k=match[1],match$1=caml_call2(f,k,d);
                 if(match$1)
                  {var new_d=match$1[1];
                   caml_call3(H[6],c,k,new_d);
                   return [0,hk,c,do_bucket(rest)]}
                 var param$0=rest;
                 continue}
              var param$0=rest;
              continue}
            return 0}}
        var d=h[2],_eR_=d.length - 1 - 1 | 0,_eQ_=0;
        if(! (_eR_ < 0))
         {var i=_eQ_;
          for(;;)
           {var _eS_=do_bucket(caml_check_bound(d,i)[i + 1]);
            caml_check_bound(d,i)[i + 1] = _eS_;
            var _eT_=i + 1 | 0;
            if(_eR_ !== i){var i=_eT_;continue}
            break}}
        return 0}
      function length(h){return h[1]}
      function bucket_length(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             param$1=param$0[3],
             accu$1=accu$0 + 1 | 0,
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function stats(h)
       {var
         _eN_=h[2],
         _eO_=0,
         mbl=
          fold_left$1
           (function(m,b){return max(m,bucket_length(0,b))},_eO_,_eN_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _eP_=h[2];
        iter$3
         (function(b)
           {var l=bucket_length(0,b);
            return histo[l + 1] = caml_check_bound(histo,l)[l + 1] + 1 | 0},
          _eP_);
        return [0,h[1],h[2].length - 1,mbl,histo]}
      function bucket_length_alive(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var rest=param$0[3],c=param$0[2];
            if(caml_call1(H[7],c))
             {var accu$1=accu$0 + 1 | 0,accu$0=accu$1,param$0=rest;continue}
            var param$0=rest;
            continue}
          return accu$0}}
      function stats_alive(h)
       {var
         size=[0,0],
         _eK_=h[2],
         _eL_=0,
         mbl=
          fold_left$1
           (function(m,b){return max(m,bucket_length_alive(0,b))},_eL_,_eK_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _eM_=h[2];
        iter$3
         (function(b)
           {var l=bucket_length_alive(0,b);
            size[1] = size[1] + l | 0;
            return histo[l + 1] = caml_check_bound(histo,l)[l + 1] + 1 | 0},
          _eM_);
        return [0,size[1],h[2].length - 1,mbl,histo]}
      function to_seq(tbl)
       {var tbl_data=tbl[2];
        function aux(i,buck,param)
         {var i$0=i,buck$0=buck;
          for(;;)
           {if(buck$0)
             {var
               next=buck$0[3],
               c=buck$0[2],
               match=caml_call1(H[5],c),
               match$0=caml_call1(H[4],c);
              if(match)
               if(match$0)
                {var data=match$0[1],key=match[1];
                 return [0,
                         [0,key,data],
                         function(_eJ_){return aux(i$0,next,_eJ_)}]}
              var buck$0=next;
              continue}
            if(i$0 === tbl_data.length - 1)return 0;
            var
             buck$1=caml_check_bound(tbl_data,i$0)[i$0 + 1],
             i$1=i$0 + 1 | 0,
             i$0=i$1,
             buck$0=buck$1;
            continue}}
        var _eG_=0,_eH_=0;
        return function(_eI_){return aux(_eH_,_eG_,_eI_)}}
      function to_seq_keys(m)
       {var _eC_=to_seq(m);
        function _eD_(_eF_){return _eF_[1]}
        return function(_eE_){return map(_eD_,_eC_,_eE_)}}
      function to_seq_values(m)
       {var _ey_=to_seq(m);
        function _ez_(_eB_){return _eB_[2]}
        return function(_eA_){return map(_ez_,_ey_,_eA_)}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$0,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$4(param){return caml_call1(_I_[1],1)}
    function get_key(t){return caml_call2(_I_[3],t,0)}
    function get_key_copy(t){return caml_call2(_I_[4],t,0)}
    function set_key(t,k){return caml_call3(_I_[5],t,0,k)}
    function unset_key(t){return caml_call2(_I_[6],t,0)}
    function check_key(t){return caml_call2(_I_[7],t,0)}
    function blit_key(t1,t2){return caml_call5(_I_[8],t1,0,t2,0,1)}
    function get_data$1(t){return caml_call1(_I_[9],t)}
    function get_data_copy(t){return caml_call1(_I_[10],t)}
    function set_data(t,d){return caml_call2(_I_[11],t,d)}
    function unset_data(t){return caml_call1(_I_[12],t)}
    function check_data(t){return caml_call1(_I_[13],t)}
    function blit_data(t1,t2){return caml_call2(_I_[14],t1,t2)}
    function MakeSeeded$1(H)
     {function create(k,d)
       {var c=create$4(0);set_data(c,d);set_key(c,k);return c}
      var hash=H[2];
      function equal(c,k)
       {var match=get_key(c);
        if(match){var k$0=match[1];return caml_call2(H[1],k,k$0)?0:1}
        return 2}
      function set_key_data(c,k,d)
       {unset_data(c);set_key(c,k);return set_data(c,d)}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$1,get_key,set_key_data,check_key])}
    function Make$1(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$1([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       of_seq=include[22],
       clean=include[23],
       stats_alive=include[24],
       _ex_=include[1];
      function create(sz){return caml_call2(_ex_,_cB_,sz)}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$5(param){return caml_call1(_I_[1],2)}
    function get_key1(t){return caml_call2(_I_[3],t,0)}
    function get_key1_copy(t){return caml_call2(_I_[4],t,0)}
    function set_key1(t,k){return caml_call3(_I_[5],t,0,k)}
    function unset_key1(t){return caml_call2(_I_[6],t,0)}
    function check_key1(t){return caml_call2(_I_[7],t,0)}
    function get_key2(t){return caml_call2(_I_[3],t,1)}
    function get_key2_copy(t){return caml_call2(_I_[4],t,1)}
    function set_key2(t,k){return caml_call3(_I_[5],t,1,k)}
    function unset_key2(t){return caml_call2(_I_[6],t,1)}
    function check_key2(t){return caml_call2(_I_[7],t,1)}
    function blit_key1(t1,t2){return caml_call5(_I_[8],t1,0,t2,0,1)}
    function blit_key2(t1,t2){return caml_call5(_I_[8],t1,1,t2,1,1)}
    function blit_key12(t1,t2){return caml_call5(_I_[8],t1,0,t2,0,2)}
    function get_data$2(t){return caml_call1(_I_[9],t)}
    function get_data_copy$0(t){return caml_call1(_I_[10],t)}
    function set_data$0(t,d){return caml_call2(_I_[11],t,d)}
    function unset_data$0(t){return caml_call1(_I_[12],t)}
    function check_data$0(t){return caml_call1(_I_[13],t)}
    function blit_data$0(t1,t2){return caml_call2(_I_[14],t1,t2)}
    function MakeSeeded$2(H1,H2)
     {function create(param,d)
       {var k2=param[2],k1=param[1],c=create$5(0);
        set_data$0(c,d);
        set_key1(c,k1);
        set_key2(c,k2);
        return c}
      function hash(seed,param)
       {var
         k2=param[2],
         k1=param[1],
         _ew_=caml_call2(H2[2],seed,k2) * 65599 | 0;
        return caml_call2(H1[2],seed,k1) + _ew_ | 0}
      function equal(c,param)
       {var k2=param[2],k1=param[1],match=get_key1(c),match$0=get_key2(c);
        if(match)
         if(match$0)
          {var k2$0=match$0[1],k1$0=match[1];
           if(caml_call2(H1[1],k1,k1$0))if(caml_call2(H2[1],k2,k2$0))return 0;
           return 1}
        return 2}
      function get_key(c)
       {var match=get_key1(c),match$0=get_key2(c);
        if(match)
         if(match$0){var k2=match$0[1],k1=match[1];return [0,[0,k1,k2]]}
        return 0}
      function set_key_data(c,param,d)
       {var k2=param[2],k1=param[1];
        unset_data$0(c);
        set_key1(c,k1);
        set_key2(c,k2);
        return set_data$0(c,d)}
      function check_key(c)
       {var _ev_=check_key1(c);return _ev_?check_key2(c):_ev_}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$2,get_key,set_key_data,check_key])}
    function Make$2(H1,H2)
     {var equal=H2[1];
      function hash(seed,x){return caml_call1(H2[2],x)}
      var equal$0=H1[1],_et_=[0,equal,hash];
      function hash$0(seed,x){return caml_call1(H1[2],x)}
      var
       include=MakeSeeded$2([0,equal$0,hash$0],_et_),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       of_seq=include[22],
       clean=include[23],
       stats_alive=include[24],
       _eu_=include[1];
      function create(sz){return caml_call2(_eu_,_cC_,sz)}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$6(n){return caml_call1(_I_[1],n)}
    function length$6(k){return caml_call1(_I_[2],k)}
    function get_key$0(t,n){return caml_call2(_I_[3],t,n)}
    function get_key_copy$0(t,n){return caml_call2(_I_[4],t,n)}
    function set_key$0(t,n,k){return caml_call3(_I_[5],t,n,k)}
    function unset_key$0(t,n){return caml_call2(_I_[6],t,n)}
    function check_key$0(t,n){return caml_call2(_I_[7],t,n)}
    function blit_key$0(t1,o1,t2,o2,l)
     {return caml_call5(_I_[8],t1,o1,t2,o2,l)}
    function get_data$3(t){return caml_call1(_I_[9],t)}
    function get_data_copy$1(t){return caml_call1(_I_[10],t)}
    function set_data$1(t,d){return caml_call2(_I_[11],t,d)}
    function unset_data$1(t){return caml_call1(_I_[12],t)}
    function check_data$1(t){return caml_call1(_I_[13],t)}
    function blit_data$1(t1,t2){return caml_call2(_I_[14],t1,t2)}
    function MakeSeeded$3(H)
     {function create(k,d)
       {var c=create$6(k.length - 1);
        set_data$1(c,d);
        var _er_=k.length - 1 - 1 | 0,_eq_=0;
        if(! (_er_ < 0))
         {var i=_eq_;
          for(;;)
           {set_key$0(c,i,caml_check_bound(k,i)[i + 1]);
            var _es_=i + 1 | 0;
            if(_er_ !== i){var i=_es_;continue}
            break}}
        return c}
      function hash(seed,k)
       {var h=[0,0],_em_=k.length - 1 - 1 | 0,_el_=0;
        if(! (_em_ < 0))
         {var i=_el_;
          for(;;)
           {var _en_=h[1],_eo_=caml_check_bound(k,i)[i + 1];
            h[1] = (caml_call2(H[2],seed,_eo_) * 65599 | 0) + _en_ | 0;
            var _ep_=i + 1 | 0;
            if(_em_ !== i){var i=_ep_;continue}
            break}}
        return h[1]}
      function equal(c,k)
       {var len=k.length - 1,len$0=length$6(c);
        if(len !== len$0)return 1;
        var i$1=len - 1 | 0,i=i$1;
        for(;;)
         {if(0 <= i)
           {var match=get_key$0(c,i);
            if(match)
             {var ki=match[1],_ek_=caml_check_bound(k,i)[i + 1];
              if(caml_call2(H[1],_ek_,ki)){var i$0=i - 1 | 0,i=i$0;continue}
              return 1}
            return 2}
          return 0}}
      function get_key(c)
       {var len=length$6(c);
        if(0 === len)return [0,[0]];
        var match=get_key$0(c,0);
        if(match)
         {var k0=match[1],a=caml_make_vect(len,k0),i$1=len - 1 | 0,i=i$1;
          for(;;)
           {if(1 <= i)
             {var match$0=get_key$0(c,i);
              if(match$0)
               {var ki=match$0[1];
                caml_check_bound(a,i)[i + 1] = ki;
                var i$0=i - 1 | 0,i=i$0;
                continue}
              return 0}
            return [0,a]}}
        return 0}
      function set_key_data(c,k,d)
       {unset_data$1(c);
        var _ei_=k.length - 1 - 1 | 0,_eh_=0;
        if(! (_ei_ < 0))
         {var i=_eh_;
          for(;;)
           {set_key$0(c,i,caml_check_bound(k,i)[i + 1]);
            var _ej_=i + 1 | 0;
            if(_ei_ !== i){var i=_ej_;continue}
            break}}
        return set_data$1(c,d)}
      function check_key(c)
       {var i$1=length$6(c) - 1 | 0,i=i$1;
        for(;;)
         {var _ee_=i < 0?1:0;
          if(_ee_)
           var _ef_=_ee_;
          else
           {var _eg_=check_key$0(c,i);
            if(_eg_){var i$0=i - 1 | 0,i=i$0;continue}
            var _ef_=_eg_}
          return _ef_}}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$3,get_key,set_key_data,check_key])}
    function Make$3(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$3([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       of_seq=include[22],
       clean=include[23],
       stats_alive=include[24],
       _ed_=include[1];
      function create(sz){return caml_call2(_ed_,_cD_,sz)}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    var
     Stdlib_ephemeron=
      [0,
       [0,
        create$4,
        get_key,
        get_key_copy,
        set_key,
        unset_key,
        check_key,
        blit_key,
        get_data$1,
        get_data_copy,
        set_data,
        unset_data,
        check_data,
        blit_data,
        Make$1,
        MakeSeeded$1],
       [0,
        create$5,
        get_key1,
        get_key1_copy,
        set_key1,
        unset_key1,
        check_key1,
        get_key2,
        get_key2_copy,
        set_key2,
        unset_key2,
        check_key2,
        blit_key1,
        blit_key2,
        blit_key12,
        get_data$2,
        get_data_copy$0,
        set_data$0,
        unset_data$0,
        check_data$0,
        blit_data$0,
        Make$2,
        MakeSeeded$2],
       [0,
        create$6,
        get_key$0,
        get_key_copy$0,
        set_key$0,
        unset_key$0,
        check_key$0,
        blit_key$0,
        get_data$3,
        get_data_copy$1,
        set_data$1,
        unset_data$1,
        check_data$1,
        blit_data$1,
        Make$3,
        MakeSeeded$3],
       [0,
        function(_ec_)
         {return MakeSeeded$0
                  ([0,_ec_[3],_ec_[1],_ec_[2],_ec_[5],_ec_[4],_ec_[6],_ec_[7]])}]];
    caml_register_global(699,Stdlib_ephemeron,"Stdlib__ephemeron");
    function generic_basename(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$84))return current_dir_name;
      var n$3=caml_ml_string_length(name) - 1 | 0,n=n$3;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var p=n + 1 | 0,n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               return sub$0(name,n$1 + 1 | 0,(p - n$1 | 0) - 1 | 0);
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return sub$0(name,0,p)}}
        return sub$0(name,0,1)}}
    function generic_dirname(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$85))return current_dir_name;
      var n$5=caml_ml_string_length(name) - 1 | 0,n=n$5;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               {var n$3=n$1;
                for(;;)
                 {if(0 <= n$3)
                   {if(caml_call2(is_dir_sep,name,n$3))
                     {var n$4=n$3 - 1 | 0,n$3=n$4;continue}
                    return sub$0(name,0,n$3 + 1 | 0)}
                  return sub$0(name,0,1)}}
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return current_dir_name}}
        return sub$0(name,0,1)}}
    function is_dir_sep(s,i){return 47 === caml_string_get(s,i)?1:0}
    function is_relative(n)
     {var
       _ea_=caml_ml_string_length(n) < 1?1:0,
       _eb_=_ea_ || (47 !== caml_string_get(n,0)?1:0);
      return _eb_}
    function is_implicit(n)
     {var _d7_=is_relative(n);
      if(_d7_)
       {var
         _d8_=caml_ml_string_length(n) < 2?1:0,
         _d9_=_d8_ || caml_string_notequal(sub$0(n,0,2),cst$87);
        if(_d9_)
         var
          _d__=caml_ml_string_length(n) < 3?1:0,
          _d$_=_d__ || caml_string_notequal(sub$0(n,0,3),cst$86);
        else
         var _d$_=_d9_}
      else
       var _d$_=_d7_;
      return _d$_}
    function check_suffix(name,suff)
     {var
       _d5_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0,
       _d6_=
        _d5_
         ?caml_string_equal
           (sub$0
             (name,
              caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
              caml_ml_string_length(suff)),
            suff)
         :_d5_;
      return _d6_}
    try
     {var _cL_=caml_sys_getenv(cst_TMPDIR),_cE_=_cL_}
    catch(_d4_)
     {_d4_ = caml_wrap_exception(_d4_);
      if(_d4_ !== Not_found)throw _d4_;
      var _cE_=cst_tmp}
    function quote(s)
     {var l=caml_ml_string_length(s),b=create$1(l + 20 | 0);
      add_char(b,39);
      var _d2_=l - 1 | 0,_d1_=0;
      if(! (_d2_ < 0))
       {var i=_d1_;
        for(;;)
         {if(39 === caml_string_get(s,i))
           add_string(b,quotequote);
          else
           add_char(b,caml_string_get(s,i));
          var _d3_=i + 1 | 0;
          if(_d2_ !== i){var i=_d3_;continue}
          break}}
      add_char(b,39);
      return contents(b)}
    function basename(_d0_)
     {return generic_basename(is_dir_sep,current_dir_name,_d0_)}
    function dirname(_dZ_)
     {return generic_dirname(is_dir_sep,current_dir_name,_dZ_)}
    function is_dir_sep$0(s,i)
     {var c=caml_string_get(s,i),_dW_=47 === c?1:0;
      if(_dW_)
       var _dX_=_dW_;
      else
       var _dY_=92 === c?1:0,_dX_=_dY_ || (58 === c?1:0);
      return _dX_}
    function is_relative$0(n)
     {var
       _dQ_=caml_ml_string_length(n) < 1?1:0,
       _dR_=_dQ_ || (47 !== caml_string_get(n,0)?1:0);
      if(_dR_)
       {var
         _dS_=caml_ml_string_length(n) < 1?1:0,
         _dT_=_dS_ || (92 !== caml_string_get(n,0)?1:0);
        if(_dT_)
         var
          _dU_=caml_ml_string_length(n) < 2?1:0,
          _dV_=_dU_ || (58 !== caml_string_get(n,1)?1:0);
        else
         var _dV_=_dT_}
      else
       var _dV_=_dR_;
      return _dV_}
    function is_implicit$0(n)
     {var _dH_=is_relative$0(n);
      if(_dH_)
       {var
         _dI_=caml_ml_string_length(n) < 2?1:0,
         _dJ_=_dI_ || caml_string_notequal(sub$0(n,0,2),cst$91);
        if(_dJ_)
         {var
           _dK_=caml_ml_string_length(n) < 2?1:0,
           _dL_=_dK_ || caml_string_notequal(sub$0(n,0,2),cst$90);
          if(_dL_)
           {var
             _dM_=caml_ml_string_length(n) < 3?1:0,
             _dN_=_dM_ || caml_string_notequal(sub$0(n,0,3),cst$89);
            if(_dN_)
             var
              _dO_=caml_ml_string_length(n) < 3?1:0,
              _dP_=_dO_ || caml_string_notequal(sub$0(n,0,3),cst$88);
            else
             var _dP_=_dN_}
          else
           var _dP_=_dL_}
        else
         var _dP_=_dJ_}
      else
       var _dP_=_dH_;
      return _dP_}
    function check_suffix$0(name,suff)
     {var _dE_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0;
      if(_dE_)
       var
        s=
         sub$0
          (name,
           caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
           caml_ml_string_length(suff)),
        _dF_=lowercase_ascii$1(suff),
        _dG_=caml_string_equal(lowercase_ascii$1(s),_dF_);
      else
       var _dG_=_dE_;
      return _dG_}
    try
     {var _cK_=caml_sys_getenv(cst_TEMP),temp_dir_name=_cK_}
    catch(_dD_)
     {_dD_ = caml_wrap_exception(_dD_);
      if(_dD_ !== Not_found)throw _dD_;
      var temp_dir_name=cst$92}
    function quote$0(s)
     {var l=caml_ml_string_length(s),b=create$1(l + 20 | 0);
      add_char(b,34);
      function add_bs(n)
       {var _dB_=1;
        if(! (n < 1))
         {var j=_dB_;
          for(;;)
           {add_char(b,92);
            var _dC_=j + 1 | 0;
            if(n !== j){var j=_dC_;continue}
            break}}
        return 0}
      function loop$0(counter,i)
       {var i$0=i;
        for(;;)
         {if(i$0 === l)return add_char(b,34);
          var c=caml_string_get(s,i$0);
          if(34 === c)
           {var _dz_=0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return loop_bs(counter$1,_dz_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_dz_,i$0])}
          if(92 === c)
           {var _dA_=0;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return loop_bs(counter$0,_dA_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_dA_,i$0])}
          add_char(b,c);
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function loop_bs(counter,n,i)
       {var n$0=n,i$0=i;
        for(;;)
         {if(i$0 === l){add_char(b,34);return add_bs(n$0)}
          var match=caml_string_get(s,i$0);
          if(34 === match)
           {add_bs((2 * n$0 | 0) + 1 | 0);
            add_char(b,34);
            var _dy_=i$0 + 1 | 0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;return loop$0(counter$1,_dy_)}
            return caml_trampoline_return(loop$0,[0,_dy_])}
          if(92 === match)
           {var i$1=i$0 + 1 | 0,n$1=n$0 + 1 | 0,n$0=n$1,i$0=i$1;continue}
          add_bs(n$0);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,i$0)}
          return caml_trampoline_return(loop$0,[0,i$0])}}
      function loop(i){return caml_trampoline(loop$0(0,i))}
      loop(0);
      return contents(b)}
    function drive_and_path(s)
     {var _du_=2 <= caml_ml_string_length(s)?1:0;
      if(_du_)
       var
        param=caml_string_get(s,0),
        switch$0=91 <= param?25 < (param - 97 | 0) >>> 0?0:1:65 <= param?1:0,
        _dv_=switch$0?1:0,
        _dw_=_dv_?58 === caml_string_get(s,1)?1:0:_dv_;
      else
       var _dw_=_du_;
      if(_dw_)
       {var _dx_=sub$0(s,2,caml_ml_string_length(s) - 2 | 0);
        return [0,sub$0(s,0,2),_dx_]}
      return [0,cst$93,s]}
    function dirname$0(s)
     {var
       match=drive_and_path(s),
       path=match[2],
       drive=match[1],
       dir=generic_dirname(is_dir_sep$0,current_dir_name$0,path);
      return _g_(drive,dir)}
    function basename$0(s)
     {var match=drive_and_path(s),path=match[2];
      return generic_basename(is_dir_sep$0,current_dir_name$0,path)}
    function basename$1(_dt_)
     {return generic_basename(is_dir_sep$0,current_dir_name$1,_dt_)}
    function dirname$1(_ds_)
     {return generic_dirname(is_dir_sep$0,current_dir_name$1,_ds_)}
    if(caml_string_notequal(os_type,cst_Cygwin))
     if(caml_string_notequal(os_type,cst_Win32))
      var
       current_dir_name$2=current_dir_name,
       parent_dir_name$2=parent_dir_name,
       dir_sep$2=dir_sep,
       is_dir_sep$1=is_dir_sep,
       is_relative$1=is_relative,
       is_implicit$1=is_implicit,
       check_suffix$1=check_suffix,
       temp_dir_name$0=_cE_,
       quote$1=quote,
       basename$2=basename,
       dirname$2=dirname,
       switch$0=1;
     else
      var
       _cJ_=
        [0,
         current_dir_name$0,
         parent_dir_name$0,
         dir_sep$0,
         is_dir_sep$0,
         is_relative$0,
         is_implicit$0,
         check_suffix$0,
         temp_dir_name,
         quote$0,
         basename$0,
         dirname$0],
       switch$0=0;
    else
     var
      _cJ_=
       [0,
        current_dir_name$1,
        parent_dir_name$1,
        dir_sep$1,
        is_dir_sep$0,
        is_relative$0,
        is_implicit$0,
        check_suffix$0,
        _cE_,
        quote,
        basename$1,
        dirname$1],
      switch$0=0;
    if(! switch$0)
     var
      current_dir_name$2=_cJ_[1],
      parent_dir_name$2=_cJ_[2],
      dir_sep$2=_cJ_[3],
      is_dir_sep$1=is_dir_sep$0,
      is_relative$1=is_relative$0,
      is_implicit$1=is_implicit$0,
      check_suffix$1=check_suffix$0,
      temp_dir_name$0=_cJ_[8],
      quote$1=_cJ_[9],
      basename$2=_cJ_[10],
      dirname$2=_cJ_[11];
    function concat$2(dirname,filename)
     {var l=caml_ml_string_length(dirname);
      if(0 !== l)
       if(! is_dir_sep$1(dirname,l - 1 | 0))
        return _g_(dirname,_g_(dir_sep$2,filename));
      return _g_(dirname,filename)}
    function chop_suffix(name,suff)
     {var n=caml_ml_string_length(name) - caml_ml_string_length(suff) | 0;
      return 0 <= n?sub$0(name,0,n):invalid_arg(cst_Filename_chop_suffix)}
    function extension_len(name)
     {var i$4=caml_ml_string_length(name) - 1 | 0,i$1=i$4;
      for(;;)
       {if(0 <= i$1)
         if(! is_dir_sep$1(name,i$1))
          {if(46 === caml_string_get(name,i$1))
            {var i$2=i$1 - 1 | 0,i=i$2;
             for(;;)
              {if(0 <= i)
                if(! is_dir_sep$1(name,i))
                 {if(46 === caml_string_get(name,i))
                   {var i$0=i - 1 | 0,i=i$0;continue}
                  return caml_ml_string_length(name) - i$1 | 0}
               return 0}}
           var i$3=i$1 - 1 | 0,i$1=i$3;
           continue}
        return 0}}
    function extension(name)
     {var l=extension_len(name);
      return 0 === l?cst$94:sub$0(name,caml_ml_string_length(name) - l | 0,l)}
    function chop_extension(name)
     {var l=extension_len(name);
      return 0 === l
              ?invalid_arg(cst_Filename_chop_extension)
              :sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    function remove_extension(name)
     {var l=extension_len(name);
      return 0 === l?name:sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    var prng$0=[246,function(_dr_){return caml_call1(_b6_[2],0)}];
    function temp_file_name(temp_dir,prefix,suffix)
     {var
       _dp_=caml_obj_tag(prng$0),
       _dq_=
        250 === _dp_?prng$0[1]:246 === _dp_?force_lazy_block(prng$0):prng$0,
       rnd=caml_call1(_b6_[4],_dq_) & 16777215;
      return concat$2(temp_dir,caml_call3(sprintf(_cF_),prefix,rnd,suffix))}
    var current_temp_dir_name=[0,temp_dir_name$0];
    function set_temp_dir_name(s){current_temp_dir_name[1] = s;return 0}
    function get_temp_dir_name(param){return current_temp_dir_name[1]}
    function temp_file(opt,prefix,suffix)
     {if(opt)
       var sth=opt[1],temp_dir=sth;
      else
       var temp_dir=current_temp_dir_name[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {runtime.caml_sys_close(caml_sys_open(name,_cG_,384));return name}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1000 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    function open_temp_file(opt,_dn_,_dm_,prefix,suffix)
     {if(opt)var sth=opt[1],mode=sth;else var mode=_cH_;
      if(_dn_)var sth$0=_dn_[1],perms=sth$0;else var perms=384;
      if(_dm_)
       var sth$1=_dm_[1],temp_dir=sth$1;
      else
       var temp_dir=current_temp_dir_name[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {var _do_=[0,name,open_out_gen([0,1,[0,3,[0,5,mode]]],perms,name)];
            return _do_}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1000 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    var
     Stdlib_filename=
      [0,
       current_dir_name$2,
       parent_dir_name$2,
       dir_sep$2,
       concat$2,
       is_relative$1,
       is_implicit$1,
       check_suffix$1,
       chop_suffix,
       extension,
       remove_extension,
       chop_extension,
       basename$2,
       dirname$2,
       temp_file,
       open_temp_file,
       get_temp_dir_name,
       set_temp_dir_name,
       temp_dir_name$0,
       quote$1];
    caml_register_global(700,Stdlib_filename,"Stdlib__filename");
    function add$1(x,y){return [254,x[1] + y[1],x[2] + y[2]]}
    function sub$3(x,y){return [254,x[1] - y[1],x[2] - y[2]]}
    function neg(x){return [254,- x[1],- x[2]]}
    function conj(x){return [254,x[1],- x[2]]}
    function mul(x,y)
     {return [254,x[1] * y[1] - x[2] * y[2],x[1] * y[2] + x[2] * y[1]]}
    function div(x,y)
     {if(Math.abs(y[2]) <= Math.abs(y[1]))
       {var r=y[2] / y[1],d=y[1] + r * y[2];
        return [254,(x[1] + r * x[2]) / d,(x[2] - r * x[1]) / d]}
      var r$0=y[1] / y[2],d$0=y[2] + r$0 * y[1];
      return [254,(r$0 * x[1] + x[2]) / d$0,(r$0 * x[2] - x[1]) / d$0]}
    function inv(x){return div(one$2,x)}
    function norm2(x){return x[1] * x[1] + x[2] * x[2]}
    function norm(x)
     {var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(r == 0.)return i;
      if(i == 0.)return r;
      if(i <= r){var q=i / r;return r * Math.sqrt(1. + q * q)}
      var q$0=r / i;
      return i * Math.sqrt(1. + q$0 * q$0)}
    function arg(x){return Math.atan2(x[2],x[1])}
    function polar(n,a){return [254,Math.cos(a) * n,Math.sin(a) * n]}
    function sqrt(x)
     {if(x[1] == 0.)if(x[2] == 0.)return _cI_;
      var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(i <= r)
       var
        q=i / r,
        w=Math.sqrt(r) * Math.sqrt(0.5 * (1. + Math.sqrt(1. + q * q)));
      else
       var
        q$0=r / i,
        w=Math.sqrt(i) * Math.sqrt(0.5 * (q$0 + Math.sqrt(1. + q$0 * q$0)));
      if(0. <= x[1])return [254,w,0.5 * x[2] / w];
      var w$0=0. <= x[2]?w:- w;
      return [254,0.5 * i / w,w$0]}
    function exp(x)
     {var e=Math.exp(x[1]);return [254,e * Math.cos(x[2]),e * Math.sin(x[2])]}
    function log(x)
     {var _dl_=Math.atan2(x[2],x[1]);return [254,Math.log(norm(x)),_dl_]}
    function pow(x,y){return exp(mul(y,log(x)))}
    var
     Stdlib_complex=
      [0,
       zero$2,
       one$2,
       i,
       neg,
       conj,
       add$1,
       sub$3,
       mul,
       inv,
       div,
       sqrt,
       norm2,
       norm,
       arg,
       polar,
       exp,
       log,
       pow];
    caml_register_global(701,Stdlib_complex,"Stdlib__complex");
    var
     Stdlib_arrayLabels=
      [0,
       init$2,
       create_matrix,
       create_matrix,
       append$0,
       concat$1,
       sub$1,
       copy$1,
       fill$0,
       blit$1,
       to_list,
       of_list,
       iter$3,
       map$3,
       iteri$2,
       mapi$2,
       fold_left$1,
       fold_right$0,
       iter2$0,
       map2$0,
       exists$0,
       for_all$0,
       mem$0,
       memq$0,
       make_float,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$2,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(702,Stdlib_arrayLabels,"Stdlib__arrayLabels");
    var
     Stdlib_listLabels=
      [0,
       length,
       hd,
       compare_lengths,
       compare_length_with,
       cons,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       iter$0,
       iteri,
       map$0,
       mapi,
       rev_map,
       fold_left$0,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_all,
       find_all,
       partition,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
    caml_register_global(703,Stdlib_listLabels,"Stdlib__listLabels");
    var
     Stdlib_bytesLabels=
      [0,
       make,
       init$0,
       empty$0,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat,
       cat,
       iter$1,
       iteri$0,
       map$1,
       mapi$0,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase$0,
       lowercase$0,
       capitalize,
       uncapitalize,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$1,
       equal$1,
       to_seq$0,
       to_seqi,
       of_seq$0,
       unsafe_to_string,
       unsafe_of_string];
    caml_register_global(704,Stdlib_bytesLabels,"Stdlib__bytesLabels");
    var
     Stdlib_stringLabels=
      [0,
       make$0,
       init$1,
       copy$0,
       sub$0,
       fill,
       blit$0,
       concat$0,
       iter$2,
       iteri$1,
       map$2,
       mapi$1,
       trim$0,
       escaped$1,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       contains$0,
       contains_from$0,
       rcontains_from$0,
       uppercase$1,
       lowercase$1,
       capitalize$0,
       uncapitalize$0,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       compare$2,
       equal$2,
       split_on_char,
       to_seq$1,
       to_seqi$0,
       of_seq$1];
    caml_register_global(705,Stdlib_stringLabels,"Stdlib__stringLabels");
    var Stdlib_moreLabels=[0,Stdlib_hashtbl,Stdlib_map,Stdlib_set];
    caml_register_global(706,Stdlib_moreLabels,"Stdlib__moreLabels");
    var Stdlib_stdLabels=[0,0,0,0,0];
    caml_register_global(707,Stdlib_stdLabels,"Stdlib__stdLabels");
    var enabled=caml_spacetime_enabled(0);
    function if_spacetime_enabled(f){return enabled?caml_call1(f,0):0}
    function create$7(path)
     {if(caml_spacetime_enabled(0))
       {var channel=open_out(path),t=[0,channel,0];
        caml_spacetime_only_works_for_native_code(t[1]);
        return t}
      return [0,stdout,1]}
    function save_event(time,t,event_name)
     {return if_spacetime_enabled
              (function(param)
                {return caml_spacetime_only_works_for_native_code
                         (time,t[1],event_name)})}
    function save_and_close(time,t)
     {return if_spacetime_enabled
              (function(param)
                {if(t[2])failwith(cst_Series_is_closed);
                 caml_spacetime_only_works_for_native_code(time,t[1]);
                 close_out(t[1]);
                 t[2] = 1;
                 return 0})}
    var Series=[0,create$7,save_event,save_and_close];
    function take$0(time,param)
     {var channel=param[1],closed=param[2];
      return if_spacetime_enabled
              (function(param)
                {if(closed)failwith(cst_Series_is_closed$0);
                 runtime.caml_gc_minor(0);
                 return caml_spacetime_only_works_for_native_code
                         (time,channel)})}
    var Snapshot=[0,take$0];
    function save_event_for_automatic_snapshots(event_name)
     {return if_spacetime_enabled
              (function(param)
                {return caml_spacetime_only_works_for_native_code(event_name)})}
    var
     Stdlib_spacetime=
      [0,enabled,Series,Snapshot,save_event_for_automatic_snapshots];
    caml_register_global(708,Stdlib_spacetime,"Stdlib__spacetime");
    var
     float32=0,
     float64=1,
     int8_signed=2,
     int8_unsigned=3,
     int16_signed=4,
     int16_unsigned=5,
     int32$1=6,
     int64$1=7,
     int$2=8,
     nativeint$1=9,
     complex32=10,
     complex64=11,
     char$0=12;
    function kind_size_in_bytes(param)
     {switch(param)
       {case 0:return 4;
        case 1:return 8;
        case 2:return 1;
        case 3:return 1;
        case 4:return 2;
        case 5:return 2;
        case 6:return 4;
        case 7:return 8;
        case 8:return 4;
        case 9:return 4;
        case 10:return 8;
        case 11:return 16;
        default:return 1}}
    var c_layout=0,fortran_layout=1;
    function dims(a)
     {var n=caml_ba_num_dims(a),d=caml_make_vect(n,0),_di_=n - 1 | 0,_dh_=0;
      if(! (_di_ < 0))
       {var i=_dh_;
        for(;;)
         {var _dj_=runtime.caml_ba_dim(a,i);
          caml_check_bound(d,i)[i + 1] = _dj_;
          var _dk_=i + 1 | 0;
          if(_di_ !== i){var i=_dk_;continue}
          break}}
      return d}
    function size_in_bytes(arr)
     {var
       _dc_=dims(arr),
       _dd_=1,
       _de_=
        fold_left$1(function(_dg_,_df_){return caml_mul(_dg_,_df_)},_dd_,_dc_);
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_de_)}
    var Genarray=[0,dims,size_in_bytes];
    function create$8(kind,layout){return caml_ba_create(kind,layout,[0])}
    function get(arr){return runtime.caml_ba_get_generic(arr,[0])}
    function set(arr)
     {var _da_=[0];
      return function(_db_){return runtime.caml_ba_set_generic(arr,_da_,_db_)}}
    function size_in_bytes$0(arr)
     {return kind_size_in_bytes(caml_ba_kind(arr))}
    function of_value(kind,layout,v)
     {var a=create$8(kind,layout);caml_call1(set(a),v);return a}
    function create$9(kind,layout,dim)
     {return caml_ba_create(kind,layout,[0,dim])}
    function size_in_bytes$1(arr)
     {var _c$_=caml_ba_dim_1(arr);
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_c$_)}
    function slice(a,n)
     {var match=runtime.caml_ba_layout(a);
      return 0 === match?caml_ba_slice(a,[0,n]):caml_ba_slice(a,[0,n])}
    function of_array(kind,layout,data)
     {var
       ba=create$9(kind,layout,data.length - 1),
       ofs=0 === layout?0:1,
       _c9_=data.length - 1 - 1 | 0,
       _c8_=0;
      if(! (_c9_ < 0))
       {var i=_c8_;
        for(;;)
         {runtime.caml_ba_set_1
           (ba,i + ofs | 0,caml_check_bound(data,i)[i + 1]);
          var _c__=i + 1 | 0;
          if(_c9_ !== i){var i=_c__;continue}
          break}}
      return ba}
    function create$10(kind,layout,dim1,dim2)
     {return caml_ba_create(kind,layout,[0,dim1,dim2])}
    function size_in_bytes$2(arr)
     {var _c6_=caml_ba_dim_2(arr),_c7_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_c7_),_c6_)}
    function slice_left(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right(a,n){return caml_ba_slice(a,[0,n])}
    function of_array$0(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       ba=create$10(kind,layout,dim1,dim2),
       ofs=0 === layout?0:1,
       _c1_=dim1 - 1 | 0,
       _c0_=0;
      if(! (_c1_ < 0))
       {var i=_c0_;
        for(;;)
         {var row=caml_check_bound(data,i)[i + 1];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array2_of_array_non_rectangular_data);
          var _c3_=dim2 - 1 | 0,_c2_=0;
          if(! (_c3_ < 0))
           {var j=_c2_;
            for(;;)
             {runtime.caml_ba_set_2
               (ba,i + ofs | 0,j + ofs | 0,caml_check_bound(row,j)[j + 1]);
              var _c5_=j + 1 | 0;
              if(_c3_ !== j){var j=_c5_;continue}
              break}}
          var _c4_=i + 1 | 0;
          if(_c1_ !== i){var i=_c4_;continue}
          break}}
      return ba}
    function create$11(kind,layout,dim1,dim2,dim3)
     {return caml_ba_create(kind,layout,[0,dim1,dim2,dim3])}
    function size_in_bytes$3(arr)
     {var
       _cX_=runtime.caml_ba_dim_3(arr),
       _cY_=caml_ba_dim_2(arr),
       _cZ_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul
                (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_cZ_),_cY_),
               _cX_)}
    function slice_left_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_right_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_left_2(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right_2(a,n){return caml_ba_slice(a,[0,n])}
    function of_array$1(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       dim3=
        0 === dim2
         ?0
         :caml_check_bound(caml_check_bound(data,0)[1],0)[1].length - 1,
       ba=create$11(kind,layout,dim1,dim2,dim3),
       ofs=0 === layout?0:1,
       _cP_=dim1 - 1 | 0,
       _cO_=0;
      if(! (_cP_ < 0))
       {var i=_cO_;
        for(;;)
         {var row=caml_check_bound(data,i)[i + 1];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array3_of_array_non_cubic_data);
          var _cR_=dim2 - 1 | 0,_cQ_=0;
          if(! (_cR_ < 0))
           {var j=_cQ_;
            for(;;)
             {var col=caml_check_bound(row,j)[j + 1];
              if(col.length - 1 !== dim3)
               invalid_arg(cst_Bigarray_Array3_of_array_non_cubic_data$0);
              var _cU_=dim3 - 1 | 0,_cT_=0;
              if(! (_cU_ < 0))
               {var k=_cT_;
                for(;;)
                 {runtime.caml_ba_set_3
                   (ba,
                    i + ofs | 0,
                    j + ofs | 0,
                    k + ofs | 0,
                    caml_check_bound(col,k)[k + 1]);
                  var _cW_=k + 1 | 0;
                  if(_cU_ !== k){var k=_cW_;continue}
                  break}}
              var _cV_=j + 1 | 0;
              if(_cR_ !== j){var j=_cV_;continue}
              break}}
          var _cS_=i + 1 | 0;
          if(_cP_ !== i){var i=_cS_;continue}
          break}}
      return ba}
    function array0_of_genarray(a)
     {return 0 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array0_of_genarray)}
    function array1_of_genarray(a)
     {return 1 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array1_of_genarray)}
    function array2_of_genarray(a)
     {return 2 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array2_of_genarray)}
    function array3_of_genarray(a)
     {return 3 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array3_of_genarray)}
    function reshape_0(a){return caml_ba_reshape(a,[0])}
    function reshape_1(a,dim1){return caml_ba_reshape(a,[0,dim1])}
    function reshape_2(a,dim1,dim2){return caml_ba_reshape(a,[0,dim1,dim2])}
    function reshape_3(a,dim1,dim2,dim3)
     {return caml_ba_reshape(a,[0,dim1,dim2,dim3])}
    var
     Stdlib_bigarray=
      [0,
       float32,
       float64,
       complex32,
       complex64,
       int8_signed,
       int8_unsigned,
       int16_signed,
       int16_unsigned,
       int$2,
       int32$1,
       int64$1,
       nativeint$1,
       char$0,
       kind_size_in_bytes,
       c_layout,
       fortran_layout,
       Genarray,
       [0,create$8,caml_ba_change_layout,size_in_bytes$0,get,set,of_value],
       [0,create$9,caml_ba_change_layout,size_in_bytes$1,slice,of_array],
       [0,
        create$10,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$11,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
    caml_register_global(709,Stdlib_bigarray,"Stdlib__bigarray");
    return}
  (function(){return this}()));


//# 1 ".js/js_of_ocaml/js_of_ocaml.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_js_from_array=runtime.caml_js_from_array,
     caml_js_from_string=runtime.caml_js_from_string,
     caml_js_get=runtime.caml_js_get,
     caml_js_html_escape=runtime.caml_js_html_escape,
     caml_js_set=runtime.caml_js_set,
     caml_js_to_byte_string=runtime.caml_js_to_byte_string,
     caml_js_to_string=runtime.caml_js_to_string,
     caml_js_wrap_callback=runtime.caml_js_wrap_callback,
     caml_js_wrap_meth_callback=runtime.caml_js_wrap_meth_callback,
     caml_jsbytes_of_string=runtime.caml_jsbytes_of_string,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_new_string=runtime.caml_new_string,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_parseFloat=caml_new_string("parseFloat"),
     cst_parseInt=caml_new_string("parseInt"),
     cst_Js_of_ocaml_Js_Error=caml_new_string("Js_of_ocaml__Js.Error"),
     cst_jsError=caml_new_string("jsError"),
     cst_can_t_retrieve_file_name_not_implemented=
      caml_new_string("can't retrieve file name: not implemented"),
     cst_endings=caml_new_string("endings"),
     cst_type=caml_new_string("type"),
     cst_loadstart=caml_new_string("loadstart"),
     cst_progress=caml_new_string("progress"),
     cst_abort=caml_new_string("abort"),
     cst_error=caml_new_string("error"),
     cst_load=caml_new_string("load"),
     cst_loadend=caml_new_string("loadend"),
     cst_a$1=caml_new_string("a"),
     cst_area$1=caml_new_string("area"),
     cst_audio$1=caml_new_string("audio"),
     cst_base$1=caml_new_string("base"),
     cst_blockquote$1=caml_new_string("blockquote"),
     cst_body$1=caml_new_string("body"),
     cst_br$1=caml_new_string("br"),
     cst_button$1=caml_new_string("button"),
     cst_canvas$1=caml_new_string("canvas"),
     cst_caption$1=caml_new_string("caption"),
     cst_col$1=caml_new_string("col"),
     cst_colgroup$1=caml_new_string("colgroup"),
     cst_del$1=caml_new_string("del"),
     cst_div$1=caml_new_string("div"),
     cst_dl$1=caml_new_string("dl"),
     cst_embed$1=caml_new_string("embed"),
     cst_fieldset$1=caml_new_string("fieldset"),
     cst_form$1=caml_new_string("form"),
     cst_frame$1=caml_new_string("frame"),
     cst_frameset$1=caml_new_string("frameset"),
     cst_h1$1=caml_new_string("h1"),
     cst_h2$1=caml_new_string("h2"),
     cst_h3$1=caml_new_string("h3"),
     cst_h4$1=caml_new_string("h4"),
     cst_h5$1=caml_new_string("h5"),
     cst_h6$1=caml_new_string("h6"),
     cst_head$1=caml_new_string("head"),
     cst_hr$1=caml_new_string("hr"),
     cst_html$1=caml_new_string("html"),
     cst_iframe$1=caml_new_string("iframe"),
     cst_img$1=caml_new_string("img"),
     cst_input$2=caml_new_string("input"),
     cst_ins$1=caml_new_string("ins"),
     cst_label$1=caml_new_string("label"),
     cst_legend$1=caml_new_string("legend"),
     cst_li$1=caml_new_string("li"),
     cst_link$1=caml_new_string("link"),
     cst_map$1=caml_new_string("map"),
     cst_meta$1=caml_new_string("meta"),
     cst_object$1=caml_new_string("object"),
     cst_ol$1=caml_new_string("ol"),
     cst_optgroup$1=caml_new_string("optgroup"),
     cst_option$1=caml_new_string("option"),
     cst_p$1=caml_new_string("p"),
     cst_param$1=caml_new_string("param"),
     cst_pre$1=caml_new_string("pre"),
     cst_q$1=caml_new_string("q"),
     cst_script$1=caml_new_string("script"),
     cst_select$2=caml_new_string("select"),
     cst_style$1=caml_new_string("style"),
     cst_table$1=caml_new_string("table"),
     cst_tbody$1=caml_new_string("tbody"),
     cst_td$1=caml_new_string("td"),
     cst_textarea$1=caml_new_string("textarea"),
     cst_tfoot$1=caml_new_string("tfoot"),
     cst_th$1=caml_new_string("th"),
     cst_thead$1=caml_new_string("thead"),
     cst_title$1=caml_new_string("title"),
     cst_tr$1=caml_new_string("tr"),
     cst_ul$1=caml_new_string("ul"),
     cst_video$1=caml_new_string("video"),
     cst_KeyH=caml_new_string("KeyH"),
     cst_Digit6=caml_new_string("Digit6"),
     cst_BrowserRefresh=caml_new_string("BrowserRefresh"),
     cst_Backslash=caml_new_string("Backslash"),
     cst_AltLeft=caml_new_string("AltLeft"),
     cst_AltRight=caml_new_string("AltRight"),
     cst_ArrowDown=caml_new_string("ArrowDown"),
     cst_ArrowLeft=caml_new_string("ArrowLeft"),
     cst_ArrowRight=caml_new_string("ArrowRight"),
     cst_ArrowUp=caml_new_string("ArrowUp"),
     cst_Backquote=caml_new_string("Backquote"),
     cst_Backspace=caml_new_string("Backspace"),
     cst_BracketLeft=caml_new_string("BracketLeft"),
     cst_BracketRight=caml_new_string("BracketRight"),
     cst_BrowserBack=caml_new_string("BrowserBack"),
     cst_BrowserFavorites=caml_new_string("BrowserFavorites"),
     cst_BrowserForward=caml_new_string("BrowserForward"),
     cst_BrowserHome=caml_new_string("BrowserHome"),
     cst_Delete=caml_new_string("Delete"),
     cst_BrowserSearch=caml_new_string("BrowserSearch"),
     cst_BrowserStop=caml_new_string("BrowserStop"),
     cst_CapsLock=caml_new_string("CapsLock"),
     cst_Comma=caml_new_string("Comma"),
     cst_ContextMenu=caml_new_string("ContextMenu"),
     cst_ControlLeft=caml_new_string("ControlLeft"),
     cst_ControlRight=caml_new_string("ControlRight"),
     cst_Digit0=caml_new_string("Digit0"),
     cst_Digit1=caml_new_string("Digit1"),
     cst_Digit2=caml_new_string("Digit2"),
     cst_Digit3=caml_new_string("Digit3"),
     cst_Digit4=caml_new_string("Digit4"),
     cst_Digit5=caml_new_string("Digit5"),
     cst_F6=caml_new_string("F6"),
     cst_F1=caml_new_string("F1"),
     cst_Digit7=caml_new_string("Digit7"),
     cst_Digit8=caml_new_string("Digit8"),
     cst_Digit9=caml_new_string("Digit9"),
     cst_End=caml_new_string("End"),
     cst_Enter=caml_new_string("Enter"),
     cst_Equal=caml_new_string("Equal"),
     cst_Escape=caml_new_string("Escape"),
     cst_F10=caml_new_string("F10"),
     cst_F11=caml_new_string("F11"),
     cst_F12=caml_new_string("F12"),
     cst_F2=caml_new_string("F2"),
     cst_F3=caml_new_string("F3"),
     cst_F4=caml_new_string("F4"),
     cst_F5=caml_new_string("F5"),
     cst_KeyA=caml_new_string("KeyA"),
     cst_F7=caml_new_string("F7"),
     cst_F8=caml_new_string("F8"),
     cst_F9=caml_new_string("F9"),
     cst_Home=caml_new_string("Home"),
     cst_Insert=caml_new_string("Insert"),
     cst_IntlBackslash=caml_new_string("IntlBackslash"),
     cst_IntlYen=caml_new_string("IntlYen"),
     cst_KeyB=caml_new_string("KeyB"),
     cst_KeyC=caml_new_string("KeyC"),
     cst_KeyD=caml_new_string("KeyD"),
     cst_KeyE=caml_new_string("KeyE"),
     cst_KeyF=caml_new_string("KeyF"),
     cst_KeyG=caml_new_string("KeyG"),
     cst_Numpad4=caml_new_string("Numpad4"),
     cst_KeyX=caml_new_string("KeyX"),
     cst_KeyP=caml_new_string("KeyP"),
     cst_KeyI=caml_new_string("KeyI"),
     cst_KeyJ=caml_new_string("KeyJ"),
     cst_KeyK=caml_new_string("KeyK"),
     cst_KeyL=caml_new_string("KeyL"),
     cst_KeyM=caml_new_string("KeyM"),
     cst_KeyN=caml_new_string("KeyN"),
     cst_KeyO=caml_new_string("KeyO"),
     cst_KeyQ=caml_new_string("KeyQ"),
     cst_KeyR=caml_new_string("KeyR"),
     cst_KeyS=caml_new_string("KeyS"),
     cst_KeyT=caml_new_string("KeyT"),
     cst_KeyU=caml_new_string("KeyU"),
     cst_KeyV=caml_new_string("KeyV"),
     cst_KeyW=caml_new_string("KeyW"),
     cst_MetaRight=caml_new_string("MetaRight"),
     cst_KeyY=caml_new_string("KeyY"),
     cst_KeyZ=caml_new_string("KeyZ"),
     cst_MediaPlayPause=caml_new_string("MediaPlayPause"),
     cst_MediaStop=caml_new_string("MediaStop"),
     cst_MediaTrackNext=caml_new_string("MediaTrackNext"),
     cst_MediaTrackPrevious=caml_new_string("MediaTrackPrevious"),
     cst_MetaLeft=caml_new_string("MetaLeft"),
     cst_Minus=caml_new_string("Minus"),
     cst_NumLock=caml_new_string("NumLock"),
     cst_Numpad0=caml_new_string("Numpad0"),
     cst_Numpad1=caml_new_string("Numpad1"),
     cst_Numpad2=caml_new_string("Numpad2"),
     cst_Numpad3=caml_new_string("Numpad3"),
     cst_PageUp=caml_new_string("PageUp"),
     cst_NumpadDivide=caml_new_string("NumpadDivide"),
     cst_Numpad5=caml_new_string("Numpad5"),
     cst_Numpad6=caml_new_string("Numpad6"),
     cst_Numpad7=caml_new_string("Numpad7"),
     cst_Numpad8=caml_new_string("Numpad8"),
     cst_Numpad9=caml_new_string("Numpad9"),
     cst_NumpadAdd=caml_new_string("NumpadAdd"),
     cst_NumpadDecimal=caml_new_string("NumpadDecimal"),
     cst_NumpadEnter=caml_new_string("NumpadEnter"),
     cst_NumpadEqual=caml_new_string("NumpadEqual"),
     cst_NumpadMultiply=caml_new_string("NumpadMultiply"),
     cst_NumpadSubtract=caml_new_string("NumpadSubtract"),
     cst_OSLeft=caml_new_string("OSLeft"),
     cst_OSRight=caml_new_string("OSRight"),
     cst_PageDown=caml_new_string("PageDown"),
     cst_ShiftRight=caml_new_string("ShiftRight"),
     cst_Pause=caml_new_string("Pause"),
     cst_Period=caml_new_string("Period"),
     cst_PrintScreen=caml_new_string("PrintScreen"),
     cst_Quote=caml_new_string("Quote"),
     cst_ScrollLock=caml_new_string("ScrollLock"),
     cst_Semicolon=caml_new_string("Semicolon"),
     cst_ShiftLeft=caml_new_string("ShiftLeft"),
     cst_Slash=caml_new_string("Slash"),
     cst_Space=caml_new_string("Space"),
     cst_Tab=caml_new_string("Tab"),
     cst_VolumeDown=caml_new_string("VolumeDown"),
     cst_VolumeMute=caml_new_string("VolumeMute"),
     cst_VolumeUp=caml_new_string("VolumeUp"),
     cst_mouseout$0=caml_new_string("mouseout"),
     cst_mouseover$0=caml_new_string("mouseover"),
     cst_video$0=caml_new_string("video"),
     cst_audio$0=caml_new_string("audio"),
     cst_ul$0=caml_new_string("ul"),
     cst_tr$0=caml_new_string("tr"),
     cst_title$0=caml_new_string("title"),
     cst_thead$0=caml_new_string("thead"),
     cst_th$0=caml_new_string("th"),
     cst_tfoot$0=caml_new_string("tfoot"),
     cst_textarea$0=caml_new_string("textarea"),
     cst_td$0=caml_new_string("td"),
     cst_tbody$0=caml_new_string("tbody"),
     cst_table$0=caml_new_string("table"),
     cst_style$0=caml_new_string("style"),
     cst_select$1=caml_new_string("select"),
     cst_script$0=caml_new_string("script"),
     cst_q$0=caml_new_string("q"),
     cst_pre$0=caml_new_string("pre"),
     cst_param$0=caml_new_string("param"),
     cst_p$0=caml_new_string("p"),
     cst_option$0=caml_new_string("option"),
     cst_optgroup$0=caml_new_string("optgroup"),
     cst_ol$0=caml_new_string("ol"),
     cst_object$0=caml_new_string("object"),
     cst_meta$0=caml_new_string("meta"),
     cst_map$0=caml_new_string("map"),
     cst_link$0=caml_new_string("link"),
     cst_li$0=caml_new_string("li"),
     cst_legend$0=caml_new_string("legend"),
     cst_label$0=caml_new_string("label"),
     cst_ins$0=caml_new_string("ins"),
     cst_input$1=caml_new_string("input"),
     cst_img$0=caml_new_string("img"),
     cst_iframe$0=caml_new_string("iframe"),
     cst_html$0=caml_new_string("html"),
     cst_hr$0=caml_new_string("hr"),
     cst_head$0=caml_new_string("head"),
     cst_h6$0=caml_new_string("h6"),
     cst_h5$0=caml_new_string("h5"),
     cst_h4$0=caml_new_string("h4"),
     cst_h3$0=caml_new_string("h3"),
     cst_h2$0=caml_new_string("h2"),
     cst_h1$0=caml_new_string("h1"),
     cst_frame$0=caml_new_string("frame"),
     cst_frameset$0=caml_new_string("frameset"),
     cst_form$0=caml_new_string("form"),
     cst_embed$0=caml_new_string("embed"),
     cst_fieldset$0=caml_new_string("fieldset"),
     cst_dl$0=caml_new_string("dl"),
     cst_div$0=caml_new_string("div"),
     cst_del$0=caml_new_string("del"),
     cst_colgroup$0=caml_new_string("colgroup"),
     cst_col$0=caml_new_string("col"),
     cst_caption$0=caml_new_string("caption"),
     cst_canvas$0=caml_new_string("canvas"),
     cst_button$0=caml_new_string("button"),
     cst_br$0=caml_new_string("br"),
     cst_body$0=caml_new_string("body"),
     cst_blockquote$0=caml_new_string("blockquote"),
     cst_base$0=caml_new_string("base"),
     cst_area$0=caml_new_string("area"),
     cst_a$0=caml_new_string("a"),
     cst_canvas=caml_new_string("canvas"),
     cst_video=caml_new_string("video"),
     cst_audio=caml_new_string("audio"),
     cst_iframe=caml_new_string("iframe"),
     cst_frame=caml_new_string("frame"),
     cst_frameset=caml_new_string("frameset"),
     cst_address=caml_new_string("address"),
     cst_noscript=caml_new_string("noscript"),
     cst_dt=caml_new_string("dt"),
     cst_dd=caml_new_string("dd"),
     cst_abbr=caml_new_string("abbr"),
     cst_var=caml_new_string("var"),
     cst_kbd=caml_new_string("kbd"),
     cst_samp=caml_new_string("samp"),
     cst_code=caml_new_string("code"),
     cst_dfn=caml_new_string("dfn"),
     cst_cite=caml_new_string("cite"),
     cst_strong=caml_new_string("strong"),
     cst_em=caml_new_string("em"),
     cst_small=caml_new_string("small"),
     cst_big=caml_new_string("big"),
     cst_b=caml_new_string("b"),
     cst_i=caml_new_string("i"),
     cst_tt=caml_new_string("tt"),
     cst_span=caml_new_string("span"),
     cst_sup=caml_new_string("sup"),
     cst_sub=caml_new_string("sub"),
     cst_td=caml_new_string("td"),
     cst_th=caml_new_string("th"),
     cst_tr=caml_new_string("tr"),
     cst_tbody=caml_new_string("tbody"),
     cst_tfoot=caml_new_string("tfoot"),
     cst_thead=caml_new_string("thead"),
     cst_colgroup=caml_new_string("colgroup"),
     cst_col=caml_new_string("col"),
     cst_caption=caml_new_string("caption"),
     cst_table=caml_new_string("table"),
     cst_script=caml_new_string("script"),
     cst_area=caml_new_string("area"),
     cst_map=caml_new_string("map"),
     cst_param=caml_new_string("param"),
     cst_object=caml_new_string("object"),
     cst_img=caml_new_string("img"),
     cst_a=caml_new_string("a"),
     cst_del=caml_new_string("del"),
     cst_ins=caml_new_string("ins"),
     cst_hr=caml_new_string("hr"),
     cst_br=caml_new_string("br"),
     cst_pre=caml_new_string("pre"),
     cst_blockquote=caml_new_string("blockquote"),
     cst_q=caml_new_string("q"),
     cst_h6=caml_new_string("h6"),
     cst_h5=caml_new_string("h5"),
     cst_h4=caml_new_string("h4"),
     cst_h3=caml_new_string("h3"),
     cst_h2=caml_new_string("h2"),
     cst_h1=caml_new_string("h1"),
     cst_p=caml_new_string("p"),
     cst_embed=caml_new_string("embed"),
     cst_div=caml_new_string("div"),
     cst_li=caml_new_string("li"),
     cst_dl=caml_new_string("dl"),
     cst_ol=caml_new_string("ol"),
     cst_ul=caml_new_string("ul"),
     cst_legend=caml_new_string("legend"),
     cst_fieldset=caml_new_string("fieldset"),
     cst_label=caml_new_string("label"),
     cst_button=caml_new_string("button"),
     cst_textarea=caml_new_string("textarea"),
     cst_input$0=caml_new_string("input"),
     cst_select$0=caml_new_string("select"),
     cst_option=caml_new_string("option"),
     cst_optgroup=caml_new_string("optgroup"),
     cst_form=caml_new_string("form"),
     cst_body=caml_new_string("body"),
     cst_style=caml_new_string("style"),
     cst_base=caml_new_string("base"),
     cst_meta=caml_new_string("meta"),
     cst_title=caml_new_string("title"),
     cst_link=caml_new_string("link"),
     cst_head=caml_new_string("head"),
     cst_html=caml_new_string("html"),
     cst_click=caml_new_string("click"),
     cst_dblclick=caml_new_string("dblclick"),
     cst_mousedown=caml_new_string("mousedown"),
     cst_mouseup=caml_new_string("mouseup"),
     cst_mouseover=caml_new_string("mouseover"),
     cst_mousemove=caml_new_string("mousemove"),
     cst_mouseout=caml_new_string("mouseout"),
     cst_keypress=caml_new_string("keypress"),
     cst_keydown=caml_new_string("keydown"),
     cst_keyup=caml_new_string("keyup"),
     cst_mousewheel=caml_new_string("mousewheel"),
     cst_DOMMouseScroll=caml_new_string("DOMMouseScroll"),
     cst_touchstart=caml_new_string("touchstart"),
     cst_touchmove=caml_new_string("touchmove"),
     cst_touchend=caml_new_string("touchend"),
     cst_touchcancel=caml_new_string("touchcancel"),
     cst_dragstart=caml_new_string("dragstart"),
     cst_dragend=caml_new_string("dragend"),
     cst_dragenter=caml_new_string("dragenter"),
     cst_dragover=caml_new_string("dragover"),
     cst_dragleave=caml_new_string("dragleave"),
     cst_drag=caml_new_string("drag"),
     cst_drop=caml_new_string("drop"),
     cst_hashchange=caml_new_string("hashchange"),
     cst_change=caml_new_string("change"),
     cst_input=caml_new_string("input"),
     cst_timeupdate=caml_new_string("timeupdate"),
     cst_submit=caml_new_string("submit"),
     cst_scroll=caml_new_string("scroll"),
     cst_focus=caml_new_string("focus"),
     cst_blur=caml_new_string("blur"),
     cst_load$0=caml_new_string("load"),
     cst_unload=caml_new_string("unload"),
     cst_beforeunload=caml_new_string("beforeunload"),
     cst_resize=caml_new_string("resize"),
     cst_orientationchange=caml_new_string("orientationchange"),
     cst_popstate=caml_new_string("popstate"),
     cst_error$0=caml_new_string("error"),
     cst_abort$0=caml_new_string("abort"),
     cst_select=caml_new_string("select"),
     cst_online=caml_new_string("online"),
     cst_offline=caml_new_string("offline"),
     cst_checking=caml_new_string("checking"),
     cst_noupdate=caml_new_string("noupdate"),
     cst_downloading=caml_new_string("downloading"),
     cst_progress$0=caml_new_string("progress"),
     cst_updateready=caml_new_string("updateready"),
     cst_cached=caml_new_string("cached"),
     cst_obsolete=caml_new_string("obsolete"),
     cst_DOMContentLoaded=caml_new_string("DOMContentLoaded"),
     cst_animationstart=caml_new_string("animationstart"),
     cst_animationend=caml_new_string("animationend"),
     cst_animationiteration=caml_new_string("animationiteration"),
     cst_animationcancel=caml_new_string("animationcancel"),
     cst_canplay=caml_new_string("canplay"),
     cst_canplaythrough=caml_new_string("canplaythrough"),
     cst_durationchange=caml_new_string("durationchange"),
     cst_emptied=caml_new_string("emptied"),
     cst_ended=caml_new_string("ended"),
     cst_loadeddata=caml_new_string("loadeddata"),
     cst_loadedmetadata=caml_new_string("loadedmetadata"),
     cst_loadstart$0=caml_new_string("loadstart"),
     cst_pause=caml_new_string("pause"),
     cst_play=caml_new_string("play"),
     cst_playing=caml_new_string("playing"),
     cst_ratechange=caml_new_string("ratechange"),
     cst_seeked=caml_new_string("seeked"),
     cst_seeking=caml_new_string("seeking"),
     cst_stalled=caml_new_string("stalled"),
     cst_suspend=caml_new_string("suspend"),
     cst_volumechange=caml_new_string("volumechange"),
     cst_waiting=caml_new_string("waiting"),
     cst_Js_of_ocaml_Dom_html_Canvas_not_available=
      caml_new_string("Js_of_ocaml.Dom_html.Canvas_not_available"),
     cst_checkbox=caml_new_string("checkbox"),
     cst_file=caml_new_string("file"),
     cst_password=caml_new_string("password"),
     cst_radio=caml_new_string("radio"),
     cst_reset=caml_new_string("reset"),
     cst_submit$0=caml_new_string("submit"),
     cst_text=caml_new_string("text"),
     cst_readystatechange=caml_new_string("readystatechange"),
     cst_loadstart$1=caml_new_string("loadstart"),
     cst_progress$1=caml_new_string("progress"),
     cst_abort$1=caml_new_string("abort"),
     cst_error$1=caml_new_string("error"),
     cst_load$1=caml_new_string("load"),
     cst_timeout=caml_new_string("timeout"),
     cst_loadend$0=caml_new_string("loadend"),
     cst_Worker_onmessage_is_undefined$0=
      caml_new_string("Worker.onmessage is undefined"),
     cst_Worker_onmessage_is_undefined=
      caml_new_string("Worker.onmessage is undefined"),
     cst_Worker_import_scripts_is_undefined=
      caml_new_string("Worker.import_scripts is undefined"),
     cst_webglcontextlost=caml_new_string("webglcontextlost"),
     cst_webglcontextrestored=caml_new_string("webglcontextrestored"),
     cst_webglcontextcreationerror=
      caml_new_string("webglcontextcreationerror"),
     cst_g=caml_new_string("g"),
     cst=caml_new_string("[\\][()\\\\|+*.?{}^$]"),
     cst$37=caml_new_string(""),
     cst$13=caml_new_string(""),
     cst$21=caml_new_string(""),
     cst$14=caml_new_string("#"),
     cst$15=caml_new_string("?"),
     cst$20=caml_new_string(""),
     cst$16=caml_new_string("/"),
     cst$17=caml_new_string("/"),
     cst$19=caml_new_string(":"),
     cst$18=caml_new_string(""),
     cst_http$1=caml_new_string("http://"),
     cst$22=caml_new_string(""),
     cst$30=caml_new_string(""),
     cst$23=caml_new_string("#"),
     cst$24=caml_new_string("?"),
     cst$29=caml_new_string(""),
     cst$25=caml_new_string("/"),
     cst$26=caml_new_string("/"),
     cst$28=caml_new_string(":"),
     cst$27=caml_new_string(""),
     cst_https$1=caml_new_string("https://"),
     cst$31=caml_new_string(""),
     cst$36=caml_new_string(""),
     cst$32=caml_new_string("#"),
     cst$33=caml_new_string("?"),
     cst$35=caml_new_string(""),
     cst$34=caml_new_string("/"),
     cst_file$2=caml_new_string("file://"),
     cst$12=caml_new_string(""),
     cst$11=caml_new_string(""),
     cst$10=caml_new_string(""),
     cst$9=caml_new_string(""),
     cst$8=caml_new_string(""),
     cst$7=caml_new_string(""),
     cst$6=caml_new_string(""),
     cst$4=caml_new_string("="),
     cst$5=caml_new_string("&"),
     cst$2=caml_new_string(""),
     cst$3=caml_new_string(""),
     cst_file$0=caml_new_string("file"),
     cst_file$1=caml_new_string("file:"),
     cst_http=caml_new_string("http"),
     cst_http$0=caml_new_string("http:"),
     cst_https=caml_new_string("https"),
     cst_https$0=caml_new_string("https:"),
     cst$1=caml_new_string(" "),
     cst_2B=caml_new_string("%2B"),
     cst_Js_of_ocaml_Url_Local_exn=
      caml_new_string("Js_of_ocaml__Url.Local_exn"),
     cst$0=caml_new_string("+"),
     cst_Js_of_ocaml_Url_Not_an_http_protocol=
      caml_new_string("Js_of_ocaml__Url.Not_an_http_protocol"),
     cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0_9a_zA_Z_0_9A_Fa_f_0_9=
      caml_new_string
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
     cst_Ff_Ii_Ll_Ee=
      caml_new_string
       ("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
     js_of_ocaml_version=caml_new_string("3.4.0"),
     git_version=caml_new_string(""),
     cst_Jstable_keys=caml_new_string("Jstable.keys"),
     dummy_string=caml_new_string(""),
     cst_is_not_a_valid_length$0=caml_new_string(" is not a valid length"),
     cst_d_d_deg_grad_rad_turns=
      caml_new_string("^(\\d*(?:\\.\\d*))(deg|grad|rad|turns)$"),
     cst_length_conversion_error$0=
      caml_new_string("length conversion error: "),
     cst_deg$0=caml_new_string("deg"),
     cst_grad$0=caml_new_string("grad"),
     cst_rad$0=caml_new_string("rad"),
     cst_turns$0=caml_new_string("turns"),
     cst_deg=caml_new_string("deg"),
     cst_grad=caml_new_string("grad"),
     cst_rad=caml_new_string("rad"),
     cst_turns=caml_new_string("turns"),
     cst_is_not_a_valid_length=caml_new_string(" is not a valid length"),
     cst_0$0=caml_new_string("0"),
     cst_d_d_s_S=caml_new_string("^(\\d*(?:\\.\\d*)?)\\s*(\\S*)$"),
     cst_length_conversion_error=caml_new_string("length conversion error: "),
     cst_pc$0=caml_new_string("pc"),
     cst_ch$0=caml_new_string("ch"),
     cst_cm$0=caml_new_string("cm"),
     cst_em$1=caml_new_string("em"),
     cst_ex$0=caml_new_string("ex"),
     cst_gd$0=caml_new_string("gd"),
     cst_in$0=caml_new_string("in"),
     cst_mm$0=caml_new_string("mm"),
     cst_pt$0=caml_new_string("pt"),
     cst_px$0=caml_new_string("px"),
     cst_rem$0=caml_new_string("rem"),
     cst_vh$0=caml_new_string("vh"),
     cst_vm$0=caml_new_string("vm"),
     cst_vw$0=caml_new_string("vw"),
     cst_0=caml_new_string("0"),
     cst_em$0=caml_new_string("em"),
     cst_ex=caml_new_string("ex"),
     cst_px=caml_new_string("px"),
     cst_gd=caml_new_string("gd"),
     cst_rem=caml_new_string("rem"),
     cst_vw=caml_new_string("vw"),
     cst_vh=caml_new_string("vh"),
     cst_vm=caml_new_string("vm"),
     cst_ch=caml_new_string("ch"),
     cst_mm=caml_new_string("mm"),
     cst_cm=caml_new_string("cm"),
     cst_in=caml_new_string("in"),
     cst_pt=caml_new_string("pt"),
     cst_pc=caml_new_string("pc"),
     cst$39=caml_new_string("): "),
     cst_color_conversion_error$0=caml_new_string("color conversion error ("),
     cst$38=caml_new_string("): "),
     cst_color_conversion_error=caml_new_string("color conversion error ("),
     cst_is_not_a_valid_color$0=caml_new_string(" is not a valid color"),
     cst_rgba_d_d_d_d_d=
      caml_new_string
       ("(rgba?)\\((?:(\\d*),(\\d*),(\\d*)(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgba_d_d_d_d_d$0=
      caml_new_string
       ("(rgba?)\\((?:(\\d*)%,(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_hsla_d_d_d_d_d=
      caml_new_string
       ("(hsla?)\\((?:(\\d*),(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgb=caml_new_string("rgb"),
     cst_rgba=caml_new_string("rgba"),
     cst_rgb$0=caml_new_string("rgb"),
     cst_rgba$0=caml_new_string("rgba"),
     cst_hsl=caml_new_string("hsl"),
     cst_hsla=caml_new_string("hsla"),
     cst_rgb_s_d_s_d_s_d=
      caml_new_string("^rgb\\(\\s*\\d*,\\s*\\d*,\\s*\\d*\\)$"),
     cst_rgb_s_d_s_d_s_d$0=
      caml_new_string("^rgb\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d=
      caml_new_string("^rgba\\(\\s*\\d*,\\s*\\d*,\\s*\\d*,\\d*\\.?\\d*\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d$0=
      caml_new_string
       ("^rgba\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_hsl_s_d_s_d_s_d=
      caml_new_string("^hsl\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_hsla_s_d_s_d_s_d_d_d=
      caml_new_string("^hsla\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_is_not_a_valid_color=caml_new_string(" is not a valid color"),
     cst_is_out_of_valid_range=caml_new_string(" is out of valid range"),
     partial=[8,0,0,0,[12,41,0]],
     partial$0=[12,41,0],
     cst_lightgrey$0=caml_new_string("lightgrey"),
     cst_darkslategray$0=caml_new_string("darkslategray"),
     cst_cornsilk$0=caml_new_string("cornsilk"),
     cst_blue$0=caml_new_string("blue"),
     cst_aliceblue$0=caml_new_string("aliceblue"),
     cst_antiquewhite$0=caml_new_string("antiquewhite"),
     cst_aqua$0=caml_new_string("aqua"),
     cst_aquamarine$0=caml_new_string("aquamarine"),
     cst_azure$0=caml_new_string("azure"),
     cst_beige$0=caml_new_string("beige"),
     cst_bisque$0=caml_new_string("bisque"),
     cst_black$0=caml_new_string("black"),
     cst_blanchedalmond$0=caml_new_string("blanchedalmond"),
     cst_blueviolet$0=caml_new_string("blueviolet"),
     cst_brown$0=caml_new_string("brown"),
     cst_burlywood$0=caml_new_string("burlywood"),
     cst_cadetblue$0=caml_new_string("cadetblue"),
     cst_chartreuse$0=caml_new_string("chartreuse"),
     cst_chocolate$0=caml_new_string("chocolate"),
     cst_coral$0=caml_new_string("coral"),
     cst_cornflowerblue$0=caml_new_string("cornflowerblue"),
     cst_darkkhaki$0=caml_new_string("darkkhaki"),
     cst_crimson$0=caml_new_string("crimson"),
     cst_cyan$0=caml_new_string("cyan"),
     cst_darkblue$0=caml_new_string("darkblue"),
     cst_darkcyan$0=caml_new_string("darkcyan"),
     cst_darkgoldenrod$0=caml_new_string("darkgoldenrod"),
     cst_darkgray$0=caml_new_string("darkgray"),
     cst_darkgreen$0=caml_new_string("darkgreen"),
     cst_darkgrey$0=caml_new_string("darkgrey"),
     cst_darkmagenta$0=caml_new_string("darkmagenta"),
     cst_darkolivegreen$0=caml_new_string("darkolivegreen"),
     cst_darkorange$0=caml_new_string("darkorange"),
     cst_darkorchid$0=caml_new_string("darkorchid"),
     cst_darkred$0=caml_new_string("darkred"),
     cst_darksalmon$0=caml_new_string("darksalmon"),
     cst_darkseagreen$0=caml_new_string("darkseagreen"),
     cst_darkslateblue$0=caml_new_string("darkslateblue"),
     cst_greenyellow$0=caml_new_string("greenyellow"),
     cst_floralwhite$0=caml_new_string("floralwhite"),
     cst_darkslategrey$0=caml_new_string("darkslategrey"),
     cst_darkturquoise$0=caml_new_string("darkturquoise"),
     cst_darkviolet$0=caml_new_string("darkviolet"),
     cst_deeppink$0=caml_new_string("deeppink"),
     cst_deepskyblue$0=caml_new_string("deepskyblue"),
     cst_dimgray$0=caml_new_string("dimgray"),
     cst_dimgrey$0=caml_new_string("dimgrey"),
     cst_dodgerblue$0=caml_new_string("dodgerblue"),
     cst_firebrick$0=caml_new_string("firebrick"),
     cst_forestgreen$0=caml_new_string("forestgreen"),
     cst_fuchsia$0=caml_new_string("fuchsia"),
     cst_gainsboro$0=caml_new_string("gainsboro"),
     cst_ghostwhite$0=caml_new_string("ghostwhite"),
     cst_gold$0=caml_new_string("gold"),
     cst_goldenrod$0=caml_new_string("goldenrod"),
     cst_gray$0=caml_new_string("gray"),
     cst_green$0=caml_new_string("green"),
     cst_lavenderblush$0=caml_new_string("lavenderblush"),
     cst_grey$0=caml_new_string("grey"),
     cst_honeydew$0=caml_new_string("honeydew"),
     cst_hotpink$0=caml_new_string("hotpink"),
     cst_indianred$0=caml_new_string("indianred"),
     cst_indigo$0=caml_new_string("indigo"),
     cst_ivory$0=caml_new_string("ivory"),
     cst_khaki$0=caml_new_string("khaki"),
     cst_lavender$0=caml_new_string("lavender"),
     cst_lawngreen$0=caml_new_string("lawngreen"),
     cst_lemonchiffon$0=caml_new_string("lemonchiffon"),
     cst_lightblue$0=caml_new_string("lightblue"),
     cst_lightcoral$0=caml_new_string("lightcoral"),
     cst_lightcyan$0=caml_new_string("lightcyan"),
     cst_lightgoldenrodyellow$0=caml_new_string("lightgoldenrodyellow"),
     cst_lightgray$0=caml_new_string("lightgray"),
     cst_lightgreen$0=caml_new_string("lightgreen"),
     cst_paleturquoise$0=caml_new_string("paleturquoise"),
     cst_mediumslateblue$0=caml_new_string("mediumslateblue"),
     cst_limegreen$0=caml_new_string("limegreen"),
     cst_lightpink$0=caml_new_string("lightpink"),
     cst_lightsalmon$0=caml_new_string("lightsalmon"),
     cst_lightseagreen$0=caml_new_string("lightseagreen"),
     cst_lightskyblue$0=caml_new_string("lightskyblue"),
     cst_lightslategray$0=caml_new_string("lightslategray"),
     cst_lightslategrey$0=caml_new_string("lightslategrey"),
     cst_lightsteelblue$0=caml_new_string("lightsteelblue"),
     cst_lightyellow$0=caml_new_string("lightyellow"),
     cst_lime$0=caml_new_string("lime"),
     cst_linen$0=caml_new_string("linen"),
     cst_magenta$0=caml_new_string("magenta"),
     cst_maroon$0=caml_new_string("maroon"),
     cst_mediumaquamarine$0=caml_new_string("mediumaquamarine"),
     cst_mediumblue$0=caml_new_string("mediumblue"),
     cst_mediumorchid$0=caml_new_string("mediumorchid"),
     cst_mediumpurple$0=caml_new_string("mediumpurple"),
     cst_mediumseagreen$0=caml_new_string("mediumseagreen"),
     cst_navy$0=caml_new_string("navy"),
     cst_mediumspringgreen$0=caml_new_string("mediumspringgreen"),
     cst_mediumturquoise$0=caml_new_string("mediumturquoise"),
     cst_mediumvioletred$0=caml_new_string("mediumvioletred"),
     cst_midnightblue$0=caml_new_string("midnightblue"),
     cst_mintcream$0=caml_new_string("mintcream"),
     cst_mistyrose$0=caml_new_string("mistyrose"),
     cst_moccasin$0=caml_new_string("moccasin"),
     cst_navajowhite$0=caml_new_string("navajowhite"),
     cst_oldlace$0=caml_new_string("oldlace"),
     cst_olive$0=caml_new_string("olive"),
     cst_olivedrab$0=caml_new_string("olivedrab"),
     cst_orange$0=caml_new_string("orange"),
     cst_orangered$0=caml_new_string("orangered"),
     cst_orchid$0=caml_new_string("orchid"),
     cst_palegoldenrod$0=caml_new_string("palegoldenrod"),
     cst_palegreen$0=caml_new_string("palegreen"),
     cst_skyblue$0=caml_new_string("skyblue"),
     cst_rosybrown$0=caml_new_string("rosybrown"),
     cst_palevioletred$0=caml_new_string("palevioletred"),
     cst_papayawhip$0=caml_new_string("papayawhip"),
     cst_peachpuff$0=caml_new_string("peachpuff"),
     cst_peru$0=caml_new_string("peru"),
     cst_pink$0=caml_new_string("pink"),
     cst_plum$0=caml_new_string("plum"),
     cst_powderblue$0=caml_new_string("powderblue"),
     cst_purple$0=caml_new_string("purple"),
     cst_red$0=caml_new_string("red"),
     cst_royalblue$0=caml_new_string("royalblue"),
     cst_saddlebrown$0=caml_new_string("saddlebrown"),
     cst_salmon$0=caml_new_string("salmon"),
     cst_sandybrown$0=caml_new_string("sandybrown"),
     cst_seagreen$0=caml_new_string("seagreen"),
     cst_seashell$0=caml_new_string("seashell"),
     cst_sienna$0=caml_new_string("sienna"),
     cst_silver$0=caml_new_string("silver"),
     cst_thistle$0=caml_new_string("thistle"),
     cst_slateblue$0=caml_new_string("slateblue"),
     cst_slategray$0=caml_new_string("slategray"),
     cst_slategrey$0=caml_new_string("slategrey"),
     cst_snow$0=caml_new_string("snow"),
     cst_springgreen$0=caml_new_string("springgreen"),
     cst_steelblue$0=caml_new_string("steelblue"),
     cst_tan$0=caml_new_string("tan"),
     cst_teal$0=caml_new_string("teal"),
     cst_tomato$0=caml_new_string("tomato"),
     cst_turquoise$0=caml_new_string("turquoise"),
     cst_violet$0=caml_new_string("violet"),
     cst_wheat$0=caml_new_string("wheat"),
     cst_white$0=caml_new_string("white"),
     cst_whitesmoke$0=caml_new_string("whitesmoke"),
     cst_yellow$0=caml_new_string("yellow"),
     cst_yellowgreen$0=caml_new_string("yellowgreen"),
     cst_is_not_a_valid_color_name=
      caml_new_string(" is not a valid color name"),
     cst_aliceblue=caml_new_string("aliceblue"),
     cst_antiquewhite=caml_new_string("antiquewhite"),
     cst_aqua=caml_new_string("aqua"),
     cst_aquamarine=caml_new_string("aquamarine"),
     cst_azure=caml_new_string("azure"),
     cst_beige=caml_new_string("beige"),
     cst_bisque=caml_new_string("bisque"),
     cst_black=caml_new_string("black"),
     cst_blanchedalmond=caml_new_string("blanchedalmond"),
     cst_blue=caml_new_string("blue"),
     cst_blueviolet=caml_new_string("blueviolet"),
     cst_brown=caml_new_string("brown"),
     cst_burlywood=caml_new_string("burlywood"),
     cst_cadetblue=caml_new_string("cadetblue"),
     cst_chartreuse=caml_new_string("chartreuse"),
     cst_chocolate=caml_new_string("chocolate"),
     cst_coral=caml_new_string("coral"),
     cst_cornflowerblue=caml_new_string("cornflowerblue"),
     cst_cornsilk=caml_new_string("cornsilk"),
     cst_crimson=caml_new_string("crimson"),
     cst_cyan=caml_new_string("cyan"),
     cst_darkblue=caml_new_string("darkblue"),
     cst_darkcyan=caml_new_string("darkcyan"),
     cst_darkgoldenrod=caml_new_string("darkgoldenrod"),
     cst_darkgray=caml_new_string("darkgray"),
     cst_darkgreen=caml_new_string("darkgreen"),
     cst_darkgrey=caml_new_string("darkgrey"),
     cst_darkkhaki=caml_new_string("darkkhaki"),
     cst_darkmagenta=caml_new_string("darkmagenta"),
     cst_darkolivegreen=caml_new_string("darkolivegreen"),
     cst_darkorange=caml_new_string("darkorange"),
     cst_darkorchid=caml_new_string("darkorchid"),
     cst_darkred=caml_new_string("darkred"),
     cst_darksalmon=caml_new_string("darksalmon"),
     cst_darkseagreen=caml_new_string("darkseagreen"),
     cst_darkslateblue=caml_new_string("darkslateblue"),
     cst_darkslategray=caml_new_string("darkslategray"),
     cst_darkslategrey=caml_new_string("darkslategrey"),
     cst_darkturquoise=caml_new_string("darkturquoise"),
     cst_darkviolet=caml_new_string("darkviolet"),
     cst_deeppink=caml_new_string("deeppink"),
     cst_deepskyblue=caml_new_string("deepskyblue"),
     cst_dimgray=caml_new_string("dimgray"),
     cst_dimgrey=caml_new_string("dimgrey"),
     cst_dodgerblue=caml_new_string("dodgerblue"),
     cst_firebrick=caml_new_string("firebrick"),
     cst_floralwhite=caml_new_string("floralwhite"),
     cst_forestgreen=caml_new_string("forestgreen"),
     cst_fuchsia=caml_new_string("fuchsia"),
     cst_gainsboro=caml_new_string("gainsboro"),
     cst_ghostwhite=caml_new_string("ghostwhite"),
     cst_gold=caml_new_string("gold"),
     cst_goldenrod=caml_new_string("goldenrod"),
     cst_gray=caml_new_string("gray"),
     cst_grey=caml_new_string("grey"),
     cst_green=caml_new_string("green"),
     cst_greenyellow=caml_new_string("greenyellow"),
     cst_honeydew=caml_new_string("honeydew"),
     cst_hotpink=caml_new_string("hotpink"),
     cst_indianred=caml_new_string("indianred"),
     cst_indigo=caml_new_string("indigo"),
     cst_ivory=caml_new_string("ivory"),
     cst_khaki=caml_new_string("khaki"),
     cst_lavender=caml_new_string("lavender"),
     cst_lavenderblush=caml_new_string("lavenderblush"),
     cst_lawngreen=caml_new_string("lawngreen"),
     cst_lemonchiffon=caml_new_string("lemonchiffon"),
     cst_lightblue=caml_new_string("lightblue"),
     cst_lightcoral=caml_new_string("lightcoral"),
     cst_lightcyan=caml_new_string("lightcyan"),
     cst_lightgoldenrodyellow=caml_new_string("lightgoldenrodyellow"),
     cst_lightgray=caml_new_string("lightgray"),
     cst_lightgreen=caml_new_string("lightgreen"),
     cst_lightgrey=caml_new_string("lightgrey"),
     cst_lightpink=caml_new_string("lightpink"),
     cst_lightsalmon=caml_new_string("lightsalmon"),
     cst_lightseagreen=caml_new_string("lightseagreen"),
     cst_lightskyblue=caml_new_string("lightskyblue"),
     cst_lightslategray=caml_new_string("lightslategray"),
     cst_lightslategrey=caml_new_string("lightslategrey"),
     cst_lightsteelblue=caml_new_string("lightsteelblue"),
     cst_lightyellow=caml_new_string("lightyellow"),
     cst_lime=caml_new_string("lime"),
     cst_limegreen=caml_new_string("limegreen"),
     cst_linen=caml_new_string("linen"),
     cst_magenta=caml_new_string("magenta"),
     cst_maroon=caml_new_string("maroon"),
     cst_mediumaquamarine=caml_new_string("mediumaquamarine"),
     cst_mediumblue=caml_new_string("mediumblue"),
     cst_mediumorchid=caml_new_string("mediumorchid"),
     cst_mediumpurple=caml_new_string("mediumpurple"),
     cst_mediumseagreen=caml_new_string("mediumseagreen"),
     cst_mediumslateblue=caml_new_string("mediumslateblue"),
     cst_mediumspringgreen=caml_new_string("mediumspringgreen"),
     cst_mediumturquoise=caml_new_string("mediumturquoise"),
     cst_mediumvioletred=caml_new_string("mediumvioletred"),
     cst_midnightblue=caml_new_string("midnightblue"),
     cst_mintcream=caml_new_string("mintcream"),
     cst_mistyrose=caml_new_string("mistyrose"),
     cst_moccasin=caml_new_string("moccasin"),
     cst_navajowhite=caml_new_string("navajowhite"),
     cst_navy=caml_new_string("navy"),
     cst_oldlace=caml_new_string("oldlace"),
     cst_olive=caml_new_string("olive"),
     cst_olivedrab=caml_new_string("olivedrab"),
     cst_orange=caml_new_string("orange"),
     cst_orangered=caml_new_string("orangered"),
     cst_orchid=caml_new_string("orchid"),
     cst_palegoldenrod=caml_new_string("palegoldenrod"),
     cst_palegreen=caml_new_string("palegreen"),
     cst_paleturquoise=caml_new_string("paleturquoise"),
     cst_palevioletred=caml_new_string("palevioletred"),
     cst_papayawhip=caml_new_string("papayawhip"),
     cst_peachpuff=caml_new_string("peachpuff"),
     cst_peru=caml_new_string("peru"),
     cst_pink=caml_new_string("pink"),
     cst_plum=caml_new_string("plum"),
     cst_powderblue=caml_new_string("powderblue"),
     cst_purple=caml_new_string("purple"),
     cst_red=caml_new_string("red"),
     cst_rosybrown=caml_new_string("rosybrown"),
     cst_royalblue=caml_new_string("royalblue"),
     cst_saddlebrown=caml_new_string("saddlebrown"),
     cst_salmon=caml_new_string("salmon"),
     cst_sandybrown=caml_new_string("sandybrown"),
     cst_seagreen=caml_new_string("seagreen"),
     cst_seashell=caml_new_string("seashell"),
     cst_sienna=caml_new_string("sienna"),
     cst_silver=caml_new_string("silver"),
     cst_skyblue=caml_new_string("skyblue"),
     cst_slateblue=caml_new_string("slateblue"),
     cst_slategray=caml_new_string("slategray"),
     cst_slategrey=caml_new_string("slategrey"),
     cst_snow=caml_new_string("snow"),
     cst_springgreen=caml_new_string("springgreen"),
     cst_steelblue=caml_new_string("steelblue"),
     cst_tan=caml_new_string("tan"),
     cst_teal=caml_new_string("teal"),
     cst_thistle=caml_new_string("thistle"),
     cst_tomato=caml_new_string("tomato"),
     cst_turquoise=caml_new_string("turquoise"),
     cst_violet=caml_new_string("violet"),
     cst_wheat=caml_new_string("wheat"),
     cst_white=caml_new_string("white"),
     cst_whitesmoke=caml_new_string("whitesmoke"),
     cst_yellow=caml_new_string("yellow"),
     cst_yellowgreen=caml_new_string("yellowgreen"),
     cst_vkern$0=caml_new_string("vkern"),
     cst_view$0=caml_new_string("view"),
     cst_use$0=caml_new_string("use"),
     cst_tspan$0=caml_new_string("tspan"),
     cst_tref$0=caml_new_string("tref"),
     cst_title$3=caml_new_string("title"),
     cst_textpath$0=caml_new_string("textpath"),
     cst_text$1=caml_new_string("text"),
     cst_symbol$0=caml_new_string("symbol"),
     cst_switch$0=caml_new_string("switch"),
     cst_svg$0=caml_new_string("svg"),
     cst_style$3=caml_new_string("style"),
     cst_stop$0=caml_new_string("stop"),
     cst_set$0=caml_new_string("set"),
     cst_script$3=caml_new_string("script"),
     cst_rect$0=caml_new_string("rect"),
     cst_radialgradient$0=caml_new_string("radialgradient"),
     cst_polyline$0=caml_new_string("polyline"),
     cst_polygon$0=caml_new_string("polygon"),
     cst_pattern$0=caml_new_string("pattern"),
     cst_path$0=caml_new_string("path"),
     cst_mpath$0=caml_new_string("mpath"),
     cst_missing_glyph$0=caml_new_string("missing-glyph"),
     cst_metadata$0=caml_new_string("metadata"),
     cst_mask$0=caml_new_string("mask"),
     cst_lineargradient$0=caml_new_string("lineargradient"),
     cst_line$0=caml_new_string("line"),
     cst_image$0=caml_new_string("image"),
     cst_hkern$0=caml_new_string("hkern"),
     cst_glyphref$0=caml_new_string("glyphref"),
     cst_glyph$0=caml_new_string("glyph"),
     cst_g$1=caml_new_string("g"),
     cst_foreignobject$0=caml_new_string("foreignobject"),
     cst_font_face_uri$0=caml_new_string("font-face-uri"),
     cst_font_face_src$0=caml_new_string("font-face-src"),
     cst_font_face_name$0=caml_new_string("font-face-name"),
     cst_font_face_format$0=caml_new_string("font-face-format"),
     cst_font_face$0=caml_new_string("font-face"),
     cst_font$0=caml_new_string("font"),
     cst_filter$0=caml_new_string("filter"),
     cst_ellipse$0=caml_new_string("ellipse"),
     cst_desc$0=caml_new_string("desc"),
     cst_defs$0=caml_new_string("defs"),
     cst_cursor$0=caml_new_string("cursor"),
     cst_clippath$0=caml_new_string("clippath"),
     cst_circle$0=caml_new_string("circle"),
     cst_animatetransform$0=caml_new_string("animatetransform"),
     cst_animatemotion$0=caml_new_string("animatemotion"),
     cst_animatecolor$0=caml_new_string("animatecolor"),
     cst_animate$0=caml_new_string("animate"),
     cst_altglyphitem$0=caml_new_string("altglyphitem"),
     cst_altglyphdef$0=caml_new_string("altglyphdef"),
     cst_altglyph$0=caml_new_string("altglyph"),
     cst_a$3=caml_new_string("a"),
     cst_vkern=caml_new_string("vkern"),
     cst_view=caml_new_string("view"),
     cst_use=caml_new_string("use"),
     cst_tspan=caml_new_string("tspan"),
     cst_tref=caml_new_string("tref"),
     cst_title$2=caml_new_string("title"),
     cst_textpath=caml_new_string("textpath"),
     cst_text$0=caml_new_string("text"),
     cst_symbol=caml_new_string("symbol"),
     cst_switch=caml_new_string("switch"),
     cst_svg=caml_new_string("svg"),
     cst_style$2=caml_new_string("style"),
     cst_stop=caml_new_string("stop"),
     cst_set=caml_new_string("set"),
     cst_script$2=caml_new_string("script"),
     cst_rect=caml_new_string("rect"),
     cst_radialgradient=caml_new_string("radialgradient"),
     cst_polyline=caml_new_string("polyline"),
     cst_polygon=caml_new_string("polygon"),
     cst_pattern=caml_new_string("pattern"),
     cst_path=caml_new_string("path"),
     cst_mpath=caml_new_string("mpath"),
     cst_missing_glyph=caml_new_string("missing-glyph"),
     cst_metadata=caml_new_string("metadata"),
     cst_mask=caml_new_string("mask"),
     cst_lineargradient=caml_new_string("lineargradient"),
     cst_line=caml_new_string("line"),
     cst_image=caml_new_string("image"),
     cst_hkern=caml_new_string("hkern"),
     cst_glyphref=caml_new_string("glyphref"),
     cst_glyph=caml_new_string("glyph"),
     cst_g$0=caml_new_string("g"),
     cst_foreignobject=caml_new_string("foreignobject"),
     cst_font_face_uri=caml_new_string("font-face-uri"),
     cst_font_face_src=caml_new_string("font-face-src"),
     cst_font_face_name=caml_new_string("font-face-name"),
     cst_font_face_format=caml_new_string("font-face-format"),
     cst_font_face=caml_new_string("font-face"),
     cst_font=caml_new_string("font"),
     cst_filter=caml_new_string("filter"),
     cst_ellipse=caml_new_string("ellipse"),
     cst_desc=caml_new_string("desc"),
     cst_defs=caml_new_string("defs"),
     cst_cursor=caml_new_string("cursor"),
     cst_clippath=caml_new_string("clippath"),
     cst_circle=caml_new_string("circle"),
     cst_animatetransform=caml_new_string("animatetransform"),
     cst_animatemotion=caml_new_string("animatemotion"),
     cst_animatecolor=caml_new_string("animatecolor"),
     cst_animate=caml_new_string("animate"),
     cst_altglyphitem=caml_new_string("altglyphitem"),
     cst_altglyphdef=caml_new_string("altglyphdef"),
     cst_altglyph=caml_new_string("altglyph"),
     cst_a$2=caml_new_string("a"),
     cst_Js_of_ocaml_Dom_svg_SVGError=
      caml_new_string("Js_of_ocaml__Dom_svg.SVGError"),
     Stdlib=global_data.Stdlib,
     Stdlib_callback=global_data.Stdlib__callback,
     Stdlib_printexc=global_data.Stdlib__printexc,
     Assert_failure=global_data.Assert_failure,
     Not_found=global_data.Not_found,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_uchar=global_data.Stdlib__uchar,
     Stdlib_printf=global_data.Stdlib__printf,
     Failure=global_data.Failure,
     Stdlib_string=global_data.Stdlib__string,
     Invalid_argument=global_data.Invalid_argument,
     Js_of_ocaml=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    caml_register_global(1606,Js_of_ocaml,"Js_of_ocaml__");
    var
     global=joo_global_object,
     Unsafe=[0,global],
     no_handler=null,
     t37=undefined,
     _d_=[0,caml_new_string("lib/js_of_ocaml/dom.ml"),343,67],
     _e_=[0,caml_new_string("transparent")],
     _f_=[0,caml_new_string("native")],
     _j_=[0,caml_new_string("lib/js_of_ocaml/dom_html.ml"),2707,58],
     _i_=[0,caml_new_string("lib/js_of_ocaml/dom_html.ml"),2706,61],
     _h_=
      [0,
       [11,
        caml_new_string("getElementById_exn: "),
        [3,0,[11,caml_new_string(" not found"),0]]],
       caml_new_string("getElementById_exn: %S not found")],
     _m_=[0,caml_new_string("lib/js_of_ocaml/form.ml"),174,13],
     _l_=[0,1],
     _n_=[0,caml_new_string("lib/js_of_ocaml/xmlHttpRequest.ml"),128,75],
     _o_=[0,caml_new_string("lib/js_of_ocaml/regexp.ml"),33,64],
     _p_=[0,caml_new_string(""),0],
     _cj_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _ck_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _cl_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _cm_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _b7_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _b8_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _b9_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _b__=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _b$_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _ca_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _cb_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _cc_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _cd_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _ce_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _cf_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _cg_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _ch_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _ci_=[0,[8,0,0,0,[2,0,0]],caml_new_string("%f%s")],
     _b6_=
      caml_list_of_js_array
       ([caml_new_string("aliceblue"),
         caml_new_string("antiquewhite"),
         caml_new_string("aqua"),
         caml_new_string("aquamarine"),
         caml_new_string("azure"),
         caml_new_string("beige"),
         caml_new_string("bisque"),
         caml_new_string("black"),
         caml_new_string("blanchedalmond"),
         caml_new_string("blue"),
         caml_new_string("blueviolet"),
         caml_new_string("brown"),
         caml_new_string("burlywood"),
         caml_new_string("cadetblue"),
         caml_new_string("chartreuse"),
         caml_new_string("chocolate"),
         caml_new_string("coral"),
         caml_new_string("cornflowerblue"),
         caml_new_string("cornsilk"),
         caml_new_string("crimson"),
         caml_new_string("cyan"),
         caml_new_string("darkblue"),
         caml_new_string("darkcyan"),
         caml_new_string("darkgoldenrod"),
         caml_new_string("darkgray"),
         caml_new_string("darkgreen"),
         caml_new_string("darkgrey"),
         caml_new_string("darkkhaki"),
         caml_new_string("darkmagenta"),
         caml_new_string("darkolivegreen"),
         caml_new_string("darkorange"),
         caml_new_string("darkorchid"),
         caml_new_string("darkred"),
         caml_new_string("darksalmon"),
         caml_new_string("darkseagreen"),
         caml_new_string("darkslateblue"),
         caml_new_string("darkslategray"),
         caml_new_string("darkslategrey"),
         caml_new_string("darkturquoise"),
         caml_new_string("darkviolet"),
         caml_new_string("deeppink"),
         caml_new_string("deepskyblue"),
         caml_new_string("dimgray"),
         caml_new_string("dimgrey"),
         caml_new_string("dodgerblue"),
         caml_new_string("firebrick"),
         caml_new_string("floralwhite"),
         caml_new_string("forestgreen"),
         caml_new_string("fuchsia"),
         caml_new_string("gainsboro"),
         caml_new_string("ghostwhite"),
         caml_new_string("gold"),
         caml_new_string("goldenrod"),
         caml_new_string("gray"),
         caml_new_string("green"),
         caml_new_string("greenyellow"),
         caml_new_string("grey"),
         caml_new_string("honeydew"),
         caml_new_string("hotpink"),
         caml_new_string("indianred"),
         caml_new_string("indigo"),
         caml_new_string("ivory"),
         caml_new_string("khaki"),
         caml_new_string("lavender"),
         caml_new_string("lavenderblush"),
         caml_new_string("lawngreen"),
         caml_new_string("lemonchiffon"),
         caml_new_string("lightblue"),
         caml_new_string("lightcoral"),
         caml_new_string("lightcyan"),
         caml_new_string("lightgoldenrodyellow"),
         caml_new_string("lightgray"),
         caml_new_string("lightgreen"),
         caml_new_string("lightgrey"),
         caml_new_string("lightpink"),
         caml_new_string("lightsalmon"),
         caml_new_string("lightseagreen"),
         caml_new_string("lightskyblue"),
         caml_new_string("lightslategray"),
         caml_new_string("lightslategrey"),
         caml_new_string("lightsteelblue"),
         caml_new_string("lightyellow"),
         caml_new_string("lime"),
         caml_new_string("limegreen"),
         caml_new_string("linen"),
         caml_new_string("magenta"),
         caml_new_string("maroon"),
         caml_new_string("mediumaquamarine"),
         caml_new_string("mediumblue"),
         caml_new_string("mediumorchid"),
         caml_new_string("mediumpurple"),
         caml_new_string("mediumseagreen"),
         caml_new_string("mediumslateblue"),
         caml_new_string("mediumspringgreen"),
         caml_new_string("mediumturquoise"),
         caml_new_string("mediumvioletred"),
         caml_new_string("midnightblue"),
         caml_new_string("mintcream"),
         caml_new_string("mistyrose"),
         caml_new_string("moccasin"),
         caml_new_string("navajowhite"),
         caml_new_string("navy"),
         caml_new_string("oldlace"),
         caml_new_string("olive"),
         caml_new_string("olivedrab"),
         caml_new_string("orange"),
         caml_new_string("orangered"),
         caml_new_string("orchid"),
         caml_new_string("palegoldenrod"),
         caml_new_string("palegreen"),
         caml_new_string("paleturquoise"),
         caml_new_string("palevioletred"),
         caml_new_string("papayawhip"),
         caml_new_string("peachpuff"),
         caml_new_string("peru"),
         caml_new_string("pink"),
         caml_new_string("plum"),
         caml_new_string("powderblue"),
         caml_new_string("purple"),
         caml_new_string("red"),
         caml_new_string("rosybrown"),
         caml_new_string("royalblue"),
         caml_new_string("saddlebrown"),
         caml_new_string("salmon"),
         caml_new_string("sandybrown"),
         caml_new_string("seagreen"),
         caml_new_string("seashell"),
         caml_new_string("sienna"),
         caml_new_string("silver"),
         caml_new_string("skyblue"),
         caml_new_string("slateblue"),
         caml_new_string("slategray"),
         caml_new_string("slategrey"),
         caml_new_string("snow"),
         caml_new_string("springgreen"),
         caml_new_string("steelblue"),
         caml_new_string("tan"),
         caml_new_string("teal"),
         caml_new_string("thistle"),
         caml_new_string("tomato"),
         caml_new_string("turquoise"),
         caml_new_string("violet"),
         caml_new_string("wheat"),
         caml_new_string("white"),
         caml_new_string("whitesmoke"),
         caml_new_string("yellow"),
         caml_new_string("yellowgreen")]),
     _b5_=
      [0,
       [12,35,[4,8,[0,2,2],0,[4,8,[0,2,2],0,[4,8,[0,2,2],0,0]]]],
       caml_new_string("#%02X%02X%02X")],
     _bZ_=
      [0,
       [11,
        caml_new_string("rgb("),
        [4,0,0,0,[12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,41,0]]]]]]],
       caml_new_string("rgb(%d,%d,%d)")],
     _b0_=
      [0,
       [11,
        caml_new_string("rgb("),
        [4,
         0,
         0,
         0,
         [12,37,[12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]]],
       caml_new_string("rgb(%d%%,%d%%,%d%%)")],
     _b1_=
      [0,
       [11,
        caml_new_string("rgba("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,44,[8,0,0,0,[12,41,0]]]]]]]]],
       caml_new_string("rgba(%d,%d,%d,%f)")],
     _b2_=
      [0,
       [11,
        caml_new_string("rgba("),
        [4,
         0,
         0,
         0,
         [12,
          37,
          [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,44,partial]]]]]]]]]],
       caml_new_string("rgba(%d%%,%d%%,%d%%,%f)")],
     _b3_=
      [0,
       [11,
        caml_new_string("hsl("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]],
       caml_new_string("hsl(%d,%d%%,%d%%)")],
     _b4_=
      [0,
       [11,
        caml_new_string("hsla("),
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,
           0,
           0,
           0,
           [12,37,[12,44,[4,0,0,0,[12,37,[12,44,[8,0,0,0,partial$0]]]]]]]]]],
       caml_new_string("hsla(%d,%d%%,%d%%,%f)")],
     _w_=[0,240,248,255],
     _x_=[0,250,235,215],
     _y_=[0,0,255,255],
     _z_=[0,127,255,212],
     _A_=[0,240,255,255],
     _B_=[0,245,245,220],
     _C_=[0,255,228,196],
     _D_=[0,0,0,0],
     _E_=[0,255,235,205],
     _F_=[0,0,0,255],
     _G_=[0,138,43,226],
     _H_=[0,165,42,42],
     _I_=[0,222,184,135],
     _J_=[0,95,158,160],
     _K_=[0,127,255,0],
     _L_=[0,210,105,30],
     _M_=[0,255,127,80],
     _N_=[0,100,149,237],
     _O_=[0,255,248,220],
     _P_=[0,220,20,60],
     _Q_=[0,0,255,255],
     _R_=[0,0,0,139],
     _S_=[0,0,139,139],
     _T_=[0,184,134,11],
     _U_=[0,169,169,169],
     _V_=[0,0,100,0],
     _W_=[0,169,169,169],
     _X_=[0,189,183,107],
     _Y_=[0,139,0,139],
     _Z_=[0,85,107,47],
     ___=[0,255,140,0],
     _$_=[0,153,50,204],
     _aa_=[0,139,0,0],
     _ab_=[0,233,150,122],
     _ac_=[0,143,188,143],
     _ad_=[0,72,61,139],
     _ae_=[0,47,79,79],
     _af_=[0,47,79,79],
     _ag_=[0,0,206,209],
     _ah_=[0,148,0,211],
     _ai_=[0,255,20,147],
     _aj_=[0,0,191,255],
     _ak_=[0,105,105,105],
     _al_=[0,105,105,105],
     _am_=[0,30,144,255],
     _an_=[0,178,34,34],
     _ao_=[0,255,250,240],
     _ap_=[0,34,139,34],
     _aq_=[0,255,0,255],
     _ar_=[0,220,220,220],
     _as_=[0,248,248,255],
     _at_=[0,255,215,0],
     _au_=[0,218,165,32],
     _av_=[0,128,128,128],
     _aw_=[0,128,128,128],
     _ax_=[0,0,128,0],
     _ay_=[0,173,255,47],
     _az_=[0,240,255,240],
     _aA_=[0,255,105,180],
     _aB_=[0,205,92,92],
     _aC_=[0,75,0,130],
     _aD_=[0,255,255,240],
     _aE_=[0,240,230,140],
     _aF_=[0,230,230,250],
     _aG_=[0,255,240,245],
     _aH_=[0,124,252,0],
     _aI_=[0,255,250,205],
     _aJ_=[0,173,216,230],
     _aK_=[0,240,128,128],
     _aL_=[0,224,255,255],
     _aM_=[0,250,250,210],
     _aN_=[0,211,211,211],
     _aO_=[0,144,238,144],
     _aP_=[0,211,211,211],
     _aQ_=[0,255,182,193],
     _aR_=[0,255,160,122],
     _aS_=[0,32,178,170],
     _aT_=[0,135,206,250],
     _aU_=[0,119,136,153],
     _aV_=[0,119,136,153],
     _aW_=[0,176,196,222],
     _aX_=[0,255,255,224],
     _aY_=[0,0,255,0],
     _aZ_=[0,50,205,50],
     _a0_=[0,250,240,230],
     _a1_=[0,255,0,255],
     _a2_=[0,128,0,0],
     _a3_=[0,102,205,170],
     _a4_=[0,0,0,205],
     _a5_=[0,186,85,211],
     _a6_=[0,147,112,219],
     _a7_=[0,60,179,113],
     _a8_=[0,123,104,238],
     _a9_=[0,0,250,154],
     _a__=[0,72,209,204],
     _a$_=[0,199,21,133],
     _ba_=[0,25,25,112],
     _bb_=[0,245,255,250],
     _bc_=[0,255,228,225],
     _bd_=[0,255,228,181],
     _be_=[0,255,222,173],
     _bf_=[0,0,0,128],
     _bg_=[0,253,245,230],
     _bh_=[0,128,128,0],
     _bi_=[0,107,142,35],
     _bj_=[0,255,165,0],
     _bk_=[0,255,69,0],
     _bl_=[0,218,112,214],
     _bm_=[0,238,232,170],
     _bn_=[0,152,251,152],
     _bo_=[0,175,238,238],
     _bp_=[0,219,112,147],
     _bq_=[0,255,239,213],
     _br_=[0,255,218,185],
     _bs_=[0,205,133,63],
     _bt_=[0,255,192,203],
     _bu_=[0,221,160,221],
     _bv_=[0,176,224,230],
     _bw_=[0,128,0,128],
     _bx_=[0,255,0,0],
     _by_=[0,188,143,143],
     _bz_=[0,65,105,225],
     _bA_=[0,139,69,19],
     _bB_=[0,250,128,114],
     _bC_=[0,244,164,96],
     _bD_=[0,46,139,87],
     _bE_=[0,255,245,238],
     _bF_=[0,160,82,45],
     _bG_=[0,192,192,192],
     _bH_=[0,135,206,235],
     _bI_=[0,106,90,205],
     _bJ_=[0,112,128,144],
     _bK_=[0,112,128,144],
     _bL_=[0,255,250,250],
     _bM_=[0,0,255,127],
     _bN_=[0,70,130,180],
     _bO_=[0,210,180,140],
     _bP_=[0,0,128,128],
     _bQ_=[0,216,191,216],
     _bR_=[0,255,99,71],
     _bS_=[0,64,224,208],
     _bT_=[0,238,130,238],
     _bU_=[0,245,222,179],
     _bV_=[0,255,255,255],
     _bW_=[0,245,245,245],
     _bX_=[0,255,255,0],
     _bY_=[0,154,205,50];
    function return$0(_gG_){return _gG_}
    function map(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function bind(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function test(x){return 1 - (x == no_handler?1:0)}
    function iter(x,f)
     {var _gF_=1 - (x == no_handler?1:0);return _gF_?caml_call1(f,x):_gF_}
    function case$0(x,f,g)
     {return x == no_handler?caml_call1(f,0):caml_call1(g,x)}
    function get(x,f){return x == no_handler?caml_call1(f,0):x}
    function option(x){if(x){var x$0=x[1];return x$0}return no_handler}
    function to_option(x)
     {function _gE_(x){return [0,x]}
      return case$0(x,function(param){return 0},_gE_)}
    var
     Opt=
      [0,no_handler,return$0,map,bind,test,iter,case$0,get,option,to_option];
    function return$1(_gD_){return _gD_}
    function map$0(x,f){return x === t37?t37:caml_call1(f,x)}
    function bind$0(x,f){return x === t37?t37:caml_call1(f,x)}
    function test$0(x){return x !== t37?1:0}
    function iter$0(x,f)
     {var _gC_=x !== t37?1:0;return _gC_?caml_call1(f,x):_gC_}
    function case$1(x,f,g){return x === t37?caml_call1(f,0):caml_call1(g,x)}
    function get$0(x,f){return x === t37?caml_call1(f,0):x}
    function option$0(x){if(x){var x$0=x[1];return x$0}return t37}
    function to_option$0(x)
     {function _gB_(x){return [0,x]}
      return case$1(x,function(param){return 0},_gB_)}
    var
     Optdef=
      [0,
       t37,
       return$1,
       map$0,
       bind$0,
       test$0,
       iter$0,
       case$1,
       get$0,
       option$0,
       to_option$0];
    function coerce(x,f,g)
     {function _gz_(param){return caml_call1(g,x)}
      var _gA_=caml_call1(f,x);
      return caml_call2(Opt[8],_gA_,_gz_)}
    function coerce_opt(x,f,g)
     {function _gx_(param){return caml_call1(g,x)}
      var _gy_=caml_call2(Opt[4],x,f);
      return caml_call2(Opt[8],_gy_,_gx_)}
    var
     true$0=true,
     false$0=false,
     string_constr=Unsafe[1].String,
     regExp_withFlags=Unsafe[1].RegExp,
     object_constructor=Unsafe[1].Object;
    function object_keys(o){return object_constructor.keys(o)}
    var
     array_length=Unsafe[1].Array,
     array_get=caml_js_get,
     array_set=caml_js_set;
    function array_map(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call1(f,x)}))}
    function array_mapi(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call2(f,idx,x)}))}
    function str_array(_gw_){return _gw_}
    function match_result(_gv_){return _gv_}
    var
     date_ms=Unsafe[1].Date,
     math=Unsafe[1].Math,
     Error=[248,cst_Js_of_ocaml_Js_Error,caml_fresh_oo_id(0)],
     error_constr=Unsafe[1].Error;
    caml_call2(Stdlib_callback[2],cst_jsError,[0,Error,{}]);
    function raise_js_error(exn){throw exn}
    var JSON=Unsafe[1].JSON;
    function decodeURI(s){return Unsafe[1].decodeURI(s)}
    function decodeURIComponent(s){return Unsafe[1].decodeURIComponent(s)}
    function encodeURI(s){return Unsafe[1].encodeURI(s)}
    function encodeURIComponent(s){return Unsafe[1].encodeURIComponent(s)}
    function escape(s){return Unsafe[1].escape(s)}
    function unescape(s){return Unsafe[1].unescape(s)}
    function isNaN(i){return Unsafe[1].isNaN(i) | 0}
    function parseInt(s)
     {var s$0=Unsafe[1].parseInt(s);
      return isNaN(s$0)?caml_call1(Stdlib[3],cst_parseInt):s$0}
    function parseFloat(s)
     {var s$0=Unsafe[1].parseFloat(s);
      return isNaN(s$0)?caml_call1(Stdlib[3],cst_parseFloat):s$0}
    function _a_(param)
     {if(param[1] === Error)
       {var e=param[2];return [0,caml_js_to_string(e.toString())]}
      return 0}
    caml_call1(Stdlib_printexc[8],_a_);
    function _b_(e)
     {return e instanceof array_length?0:[0,caml_js_to_string(e.toString())]}
    caml_call1(Stdlib_printexc[8],_b_);
    function string_of_error(e){return caml_js_to_string(e.toString())}
    function export_js(field,x)
     {return runtime.caml_js_export_var(0)[field] = x}
    function export$0(field,x){return export_js(field.toString(),x)}
    function export_all(obj)
     {var keys=object_keys(obj);
      return keys.forEach
              (caml_js_wrap_callback
                (function(key,param,_gu_){return export_js(key,obj[key])}))}
    function _c_(_gt_){return _gt_}
    var
     Js_of_ocaml_Js=
      [0,
       no_handler,
       function(_gs_){return _gs_},
       t37,
       _c_,
       Opt,
       Optdef,
       true$0,
       false$0,
       string_constr,
       regExp_withFlags,
       regExp_withFlags,
       regExp_withFlags,
       object_keys,
       array_length,
       array_length,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       math,
       error_constr,
       string_of_error,
       raise_js_error,
       Error,
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$0,
       export_all,
       Unsafe];
    caml_register_global(1610,Js_of_ocaml_Js,"Js_of_ocaml__Js");
    function list_of_nodeList(nodeList)
     {var length=nodeList.length,acc=0,i=0;
      for(;;)
       {if(i < length)
         {var _gr_=nodeList.item(i),match=caml_call1(Opt[10],_gr_);
          if(match)
           {var e=match[1],i$0=i + 1 | 0,acc$0=[0,e,acc],acc=acc$0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}
        return caml_call1(Stdlib_list[9],acc)}}
    var
     disconnected=1,
     preceding=2,
     following=4,
     contains=8,
     contained_by=16,
     implementation_specific=32;
    function has(t,mask){return (t & mask) === mask?1:0}
    function add(x,y){return x | y}
    var
     DocumentPosition=
      [0,
       disconnected,
       preceding,
       following,
       contains,
       contained_by,
       implementation_specific,
       has,
       add,
       add];
    function appendChild(p,n){p.appendChild(n);return 0}
    function removeChild(p,n){p.removeChild(n);return 0}
    function replaceChild(p,n,o){p.replaceChild(n,o);return 0}
    function insertBefore(p,n,o){p.insertBefore(n,o);return 0}
    function nodeType(e)
     {var match=e.nodeType;
      if(0 !== match)
       {var switcher=match - 1 | 0;
        switch(switcher)
         {case 0:return [0,e];case 1:return [1,e];case 2:case 3:return [2,e]}}
      return [3,e]}
    function cast(e,t){return e.nodeType === t?e:no_handler}
    function element(e){return cast(e,1)}
    function text(e)
     {if(3 !== e.nodeType)if(4 !== e.nodeType)return no_handler;return e}
    function attr(e){return cast(e,2)}
    function handler(f)
     {return function(e)
       {if(caml_call1(Opt[5],e))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var e$0=event,res$0=caml_call1(f,e$0);
        if(1 - (res$0 | 0))e$0.returnValue = res$0;
        return res$0}}
    function full_handler(f)
     {return runtime.caml_js_wrap_meth_callback_unsafe
              (function(this$0,e)
                {if(caml_call1(Opt[5],e))
                  {var res=caml_call2(f,this$0,e);
                   if(1 - (res | 0))e.preventDefault();
                   return res}
                 var e$0=event,res$0=caml_call2(f,this$0,e$0);
                 if(1 - (res$0 | 0))e$0.returnValue = res$0;
                 return res$0})}
    function invoke_handler(f,this$0,event){return f.call(this$0,event)}
    function eventTarget(e)
     {function _go_(param)
       {function _gq_(param){throw Not_found}
        return caml_call2(Opt[8],e.srcElement,_gq_)}
      var target=caml_call2(Opt[8],e.target,_go_);
      if(target instanceof Unsafe[1].Node)
       {if(3 === target.nodeType)
         {var _gp_=function(param){throw [0,Assert_failure,_d_]};
          return caml_call2(Opt[8],target.parentNode,_gp_)}
        return target}
      return target}
    var make=caml_js_from_string,Event=[0,make];
    function addEventListener(e,typ,h,capt)
     {if(e.addEventListener === t37)
       {var
         ev="on".concat(typ),
         callback=
          function(e)
           {var _gl_=[0,h,e,[0]];
            return function(_gm_,_gn_)
             {return runtime.caml_js_call(_gl_,_gm_,_gn_)}};
        e.attachEvent(ev,callback);
        return function(param){return e.detachEvent(ev,callback)}}
      e.addEventListener(typ,h,capt);
      return function(param){return e.removeEventListener(typ,h,capt)}}
    function removeEventListener(id){return caml_call1(id,0)}
    function preventDefault(ev)
     {return caml_call1(Optdef[5],ev.preventDefault)
              ?ev.preventDefault()
              :ev.returnValue = ! ! 0}
    var
     Js_of_ocaml_Dom=
      [0,
       DocumentPosition,
       insertBefore,
       replaceChild,
       removeChild,
       appendChild,
       list_of_nodeList,
       nodeType,
       [0,element,text,attr],
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       Event,
       addEventListener,
       removeEventListener,
       preventDefault];
    caml_register_global(1614,Js_of_ocaml_Dom,"Js_of_ocaml__Dom");
    var
     arrayBuffer=Unsafe[1].ArrayBuffer,
     int8Array_inBuffer=Unsafe[1].Int8Array,
     uint8Array_fromBuffer=Unsafe[1].Uint8Array,
     int16Array_inBuffer=Unsafe[1].Int16Array,
     uint16Array_inBuffer=Unsafe[1].Uint16Array,
     int32Array_inBuffer=Unsafe[1].Int32Array,
     uint32Array_inBuffer=Unsafe[1].Uint32Array,
     float32Array_inBuffer=Unsafe[1].Float32Array,
     float64Array_inBuffer=Unsafe[1].Float64Array,
     set=caml_js_set,
     get$1=caml_js_get,
     unsafe_get=caml_js_get,
     dataView=Unsafe[1].DataView;
    function of_arrayBuffer(ab)
     {var uint8=new uint8Array_fromBuffer(ab);
      return runtime.caml_string_of_array(uint8)}
    var
     String=[0,of_arrayBuffer],
     Js_of_ocaml_Typed_array=
      [0,
       arrayBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       set,
       get$1,
       unsafe_get,
       dataView,
       dataView,
       [0,runtime.bigstring_to_array_buffer,runtime.bigstring_of_array_buffer],
       String];
    caml_register_global
     (1615,Js_of_ocaml_Typed_array,"Js_of_ocaml__Typed_array");
    var blob_constr=Unsafe[1].Blob;
    function filter_map(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function blob_raw(contentType,endings,a)
     {var _gh_=0;
      if(endings)
       var _gi_=116179762 <= endings[1]?_e_:_f_,_gj_=_gi_;
      else
       var _gj_=0;
      var
       _gk_=[0,[0,cst_type,contentType],[0,[0,cst_endings,_gj_],_gh_]],
       options=
        filter_map
         (function(param)
           {var v=param[2],name=param[1];
            if(v){var v$0=v[1];return [0,[0,name,v$0.toString()]]}
            return 0},
          _gk_),
       options$0=
        options
         ?runtime.caml_js_object(caml_call1(Stdlib_array[12],options))
         :t37;
      return new blob_constr(caml_js_from_array(a),options$0)}
    function blob_from_string(contentType,endings,s)
     {return blob_raw(contentType,endings,[0,s.toString()])}
    function blob_from_any(contentType,endings,l)
     {function _gf_(param)
       {var _gg_=param[1];
        if(155580615 === _gg_){var s=param[2];return s}
        if(486041214 <= _gg_)
         {if(1037850489 <= _gg_){var a=param[2];return a}
          var a$0=param[2];
          return a$0}
        if(288368849 <= _gg_){var s$0=param[2];return s$0.toString()}
        var b=param[2];
        return b}
      var l$0=caml_call2(Stdlib_list[17],_gf_,l);
      return blob_raw(contentType,endings,caml_call1(Stdlib_array[12],l$0))}
    function filename(file)
     {var match=caml_call1(Optdef[10],file.name);
      if(match){var name=match[1];return name}
      var match$0=caml_call1(Optdef[10],file.fileName);
      if(match$0){var name$0=match$0[1];return name$0}
      return caml_call1
              (Stdlib[3],cst_can_t_retrieve_file_name_not_implemented)}
    var doc_constr=Unsafe[1].Document;
    function document(e){return e instanceof doc_constr?e:no_handler}
    function blob(e){return e instanceof blob_constr?e:no_handler}
    function string(e)
     {return runtime.caml_equal(typeof e,"string")?e:no_handler}
    function arrayBuffer$0(e){return e instanceof arrayBuffer?e:no_handler}
    var
     loadstart=caml_call1(Event[1],cst_loadstart),
     progress=caml_call1(Event[1],cst_progress),
     abort=caml_call1(Event[1],cst_abort),
     error=caml_call1(Event[1],cst_error),
     load=caml_call1(Event[1],cst_load),
     loadend=caml_call1(Event[1],cst_loadend),
     ReaderEvent=[0,loadstart,progress,abort,error,load,loadend],
     fileReader=Unsafe[1].FileReader,
     Js_of_ocaml_File=
      [0,
       blob_from_string,
       blob_from_any,
       [0,document,blob,function(_ge_){return _ge_},string,arrayBuffer$0],
       ReaderEvent,
       filename,
       fileReader,
       addEventListener];
    caml_register_global(1617,Js_of_ocaml_File,"Js_of_ocaml__File");
    var
     onIE=runtime.caml_js_on_ie(0) | 0,
     click=caml_call1(Event[1],cst_click),
     dblclick=caml_call1(Event[1],cst_dblclick),
     mousedown=caml_call1(Event[1],cst_mousedown),
     mouseup=caml_call1(Event[1],cst_mouseup),
     mouseover=caml_call1(Event[1],cst_mouseover),
     mousemove=caml_call1(Event[1],cst_mousemove),
     mouseout=caml_call1(Event[1],cst_mouseout),
     keypress=caml_call1(Event[1],cst_keypress),
     keydown=caml_call1(Event[1],cst_keydown),
     keyup=caml_call1(Event[1],cst_keyup),
     mousewheel=caml_call1(Event[1],cst_mousewheel),
     DOMMouseScroll=caml_call1(Event[1],cst_DOMMouseScroll),
     touchstart=caml_call1(Event[1],cst_touchstart),
     touchmove=caml_call1(Event[1],cst_touchmove),
     touchend=caml_call1(Event[1],cst_touchend),
     touchcancel=caml_call1(Event[1],cst_touchcancel),
     dragstart=caml_call1(Event[1],cst_dragstart),
     dragend=caml_call1(Event[1],cst_dragend),
     dragenter=caml_call1(Event[1],cst_dragenter),
     dragover=caml_call1(Event[1],cst_dragover),
     dragleave=caml_call1(Event[1],cst_dragleave),
     drag=caml_call1(Event[1],cst_drag),
     drop=caml_call1(Event[1],cst_drop),
     hashchange=caml_call1(Event[1],cst_hashchange),
     change=caml_call1(Event[1],cst_change),
     input=caml_call1(Event[1],cst_input),
     timeupdate=caml_call1(Event[1],cst_timeupdate),
     submit=caml_call1(Event[1],cst_submit),
     scroll=caml_call1(Event[1],cst_scroll),
     focus=caml_call1(Event[1],cst_focus),
     blur=caml_call1(Event[1],cst_blur),
     load$0=caml_call1(Event[1],cst_load$0),
     unload=caml_call1(Event[1],cst_unload),
     beforeunload=caml_call1(Event[1],cst_beforeunload),
     resize=caml_call1(Event[1],cst_resize),
     orientationchange=caml_call1(Event[1],cst_orientationchange),
     popstate=caml_call1(Event[1],cst_popstate),
     error$0=caml_call1(Event[1],cst_error$0),
     abort$0=caml_call1(Event[1],cst_abort$0),
     select=caml_call1(Event[1],cst_select),
     online=caml_call1(Event[1],cst_online),
     offline=caml_call1(Event[1],cst_offline),
     checking=caml_call1(Event[1],cst_checking),
     noupdate=caml_call1(Event[1],cst_noupdate),
     downloading=caml_call1(Event[1],cst_downloading),
     progress$0=caml_call1(Event[1],cst_progress$0),
     updateready=caml_call1(Event[1],cst_updateready),
     cached=caml_call1(Event[1],cst_cached),
     obsolete=caml_call1(Event[1],cst_obsolete),
     domContentLoaded=caml_call1(Event[1],cst_DOMContentLoaded),
     animationstart=caml_call1(Event[1],cst_animationstart),
     animationend=caml_call1(Event[1],cst_animationend),
     animationiteration=caml_call1(Event[1],cst_animationiteration),
     animationcancel=caml_call1(Event[1],cst_animationcancel),
     canplay=caml_call1(Event[1],cst_canplay),
     canplaythrough=caml_call1(Event[1],cst_canplaythrough),
     durationchange=caml_call1(Event[1],cst_durationchange),
     emptied=caml_call1(Event[1],cst_emptied),
     ended=caml_call1(Event[1],cst_ended),
     loadeddata=caml_call1(Event[1],cst_loadeddata),
     loadedmetadata=caml_call1(Event[1],cst_loadedmetadata),
     loadstart$0=caml_call1(Event[1],cst_loadstart$0),
     pause=caml_call1(Event[1],cst_pause),
     play=caml_call1(Event[1],cst_play),
     playing=caml_call1(Event[1],cst_playing),
     ratechange=caml_call1(Event[1],cst_ratechange),
     seeked=caml_call1(Event[1],cst_seeked),
     seeking=caml_call1(Event[1],cst_seeking),
     stalled=caml_call1(Event[1],cst_stalled),
     suspend=caml_call1(Event[1],cst_suspend),
     volumechange=caml_call1(Event[1],cst_volumechange),
     waiting=caml_call1(Event[1],cst_waiting),
     make$0=Event[1],
     Event$0=
      [0,
       click,
       dblclick,
       mousedown,
       mouseup,
       mouseover,
       mousemove,
       mouseout,
       keypress,
       keydown,
       keyup,
       mousewheel,
       DOMMouseScroll,
       touchstart,
       touchmove,
       touchend,
       touchcancel,
       dragstart,
       dragend,
       dragenter,
       dragover,
       dragleave,
       drag,
       drop,
       hashchange,
       change,
       input,
       timeupdate,
       submit,
       scroll,
       focus,
       blur,
       load$0,
       unload,
       beforeunload,
       resize,
       orientationchange,
       popstate,
       error$0,
       abort$0,
       select,
       online,
       offline,
       checking,
       noupdate,
       downloading,
       progress$0,
       updateready,
       cached,
       obsolete,
       domContentLoaded,
       animationstart,
       animationend,
       animationiteration,
       animationcancel,
       canplay,
       canplaythrough,
       durationchange,
       emptied,
       ended,
       loadeddata,
       loadedmetadata,
       loadstart$0,
       pause,
       play,
       playing,
       ratechange,
       seeked,
       seeking,
       stalled,
       suspend,
       volumechange,
       waiting,
       make$0],
     d="2d";
    function location_origin(loc)
     {function _gc_(o){return o}
      function _gd_(param)
       {var protocol=loc.protocol,hostname=loc.hostname,port=loc.port;
        if(0 === protocol.length)if(0 === hostname.length)return "";
        var origin=protocol.concat("//",hostname);
        return 0 < port.length?origin.concat(":",loc.port):origin}
      return caml_call3(Optdef[7],loc.origin,_gd_,_gc_)}
    var _g_=Unsafe[1],document$0=_g_.document;
    function getElementById(id)
     {function _f$_(pnode){return pnode}
      function _ga_(param){throw Not_found}
      var _gb_=document$0.getElementById(id.toString());
      return caml_call3(Opt[7],_gb_,_ga_,_f$_)}
    function getElementById_exn(id)
     {function _f7_(pnode){return pnode}
      function _f8_(param)
       {var _f__=caml_call2(Stdlib_printf[4],_h_,id);
        return caml_call1(Stdlib[3],_f__)}
      var _f9_=document$0.getElementById(id.toString());
      return caml_call3(Opt[7],_f9_,_f8_,_f7_)}
    function getElementById_opt(id)
     {var _f6_=document$0.getElementById(id.toString());
      return caml_call1(Opt[10],_f6_)}
    function getElementById_coerce(id,coerce)
     {function _f2_(e)
       {var _f5_=caml_call1(coerce,e);return caml_call1(Opt[10],_f5_)}
      function _f3_(param){return 0}
      var _f4_=document$0.getElementById(id.toString());
      return caml_call3(Opt[7],_f4_,_f3_,_f2_)}
    function opt_iter(x,f){if(x){var v=x[1];return caml_call1(f,v)}return 0}
    function createElement(doc,name)
     {return doc.createElement(name.toString())}
    function unsafeCreateElement(doc,name){return createElement(doc,name)}
    var createElementSyntax=[0,785140586];
    function unsafeCreateElementEx(type,name,doc,elt)
     {for(;;)
       {if(0 === type)if(0 === name)return createElement(doc,elt);
        var _fW_=createElementSyntax[1];
        if(785140586 === _fW_)
         {try
           {var
             el=document$0.createElement('<input name="x">'),
             _fZ_=el.tagName.toLowerCase() === "input"?1:0,
             _f0_=_fZ_?el.name === "x"?1:0:_fZ_,
             _fX_=_f0_}
          catch(_f1_){var _fX_=0}
          var _fY_=_fX_?982028505:-1003883683;
          createElementSyntax[1] = _fY_;
          continue}
        if(982028505 <= _fW_)
         {var a=new array_length();
          a.push("<",elt.toString());
          opt_iter
           (type,
            function(t){a.push(' type="',caml_js_html_escape(t),'"');return 0});
          opt_iter
           (name,
            function(n){a.push(' name="',caml_js_html_escape(n),'"');return 0});
          a.push(">");
          return doc.createElement(a.join(""))}
        var res=createElement(doc,elt);
        opt_iter(type,function(t){return res.type = t});
        opt_iter(name,function(n){return res.name = n});
        return res}}
    function createHtml(doc){return unsafeCreateElement(doc,cst_html)}
    function createHead(doc){return unsafeCreateElement(doc,cst_head)}
    function createLink(doc){return unsafeCreateElement(doc,cst_link)}
    function createTitle(doc){return unsafeCreateElement(doc,cst_title)}
    function createMeta(doc){return unsafeCreateElement(doc,cst_meta)}
    function createBase(doc){return unsafeCreateElement(doc,cst_base)}
    function createStyle(doc){return unsafeCreateElement(doc,cst_style)}
    function createBody(doc){return unsafeCreateElement(doc,cst_body)}
    function createForm(doc){return unsafeCreateElement(doc,cst_form)}
    function createOptgroup(doc){return unsafeCreateElement(doc,cst_optgroup)}
    function createOption(doc){return unsafeCreateElement(doc,cst_option)}
    function createSelect(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_select$0)}
    function createInput(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_input$0)}
    function createTextarea(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_textarea)}
    function createButton(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_button)}
    function createLabel(doc){return unsafeCreateElement(doc,cst_label)}
    function createFieldset(doc){return unsafeCreateElement(doc,cst_fieldset)}
    function createLegend(doc){return unsafeCreateElement(doc,cst_legend)}
    function createUl(doc){return unsafeCreateElement(doc,cst_ul)}
    function createOl(doc){return unsafeCreateElement(doc,cst_ol)}
    function createDl(doc){return unsafeCreateElement(doc,cst_dl)}
    function createLi(doc){return unsafeCreateElement(doc,cst_li)}
    function createDiv(doc){return unsafeCreateElement(doc,cst_div)}
    function createEmbed(doc){return unsafeCreateElement(doc,cst_embed)}
    function createP(doc){return unsafeCreateElement(doc,cst_p)}
    function createH1(doc){return unsafeCreateElement(doc,cst_h1)}
    function createH2(doc){return unsafeCreateElement(doc,cst_h2)}
    function createH3(doc){return unsafeCreateElement(doc,cst_h3)}
    function createH4(doc){return unsafeCreateElement(doc,cst_h4)}
    function createH5(doc){return unsafeCreateElement(doc,cst_h5)}
    function createH6(doc){return unsafeCreateElement(doc,cst_h6)}
    function createQ(doc){return unsafeCreateElement(doc,cst_q)}
    function createBlockquote(doc)
     {return unsafeCreateElement(doc,cst_blockquote)}
    function createPre(doc){return unsafeCreateElement(doc,cst_pre)}
    function createBr(doc){return unsafeCreateElement(doc,cst_br)}
    function createHr(doc){return unsafeCreateElement(doc,cst_hr)}
    function createIns(doc){return unsafeCreateElement(doc,cst_ins)}
    function createDel(doc){return unsafeCreateElement(doc,cst_del)}
    function createA(doc){return unsafeCreateElement(doc,cst_a)}
    function createImg(doc){return unsafeCreateElement(doc,cst_img)}
    function createObject(doc){return unsafeCreateElement(doc,cst_object)}
    function createParam(doc){return unsafeCreateElement(doc,cst_param)}
    function createMap(doc){return unsafeCreateElement(doc,cst_map)}
    function createArea(doc){return unsafeCreateElement(doc,cst_area)}
    function createScript(doc){return unsafeCreateElement(doc,cst_script)}
    function createTable(doc){return unsafeCreateElement(doc,cst_table)}
    function createCaption(doc){return unsafeCreateElement(doc,cst_caption)}
    function createCol(doc){return unsafeCreateElement(doc,cst_col)}
    function createColgroup(doc){return unsafeCreateElement(doc,cst_colgroup)}
    function createThead(doc){return unsafeCreateElement(doc,cst_thead)}
    function createTfoot(doc){return unsafeCreateElement(doc,cst_tfoot)}
    function createTbody(doc){return unsafeCreateElement(doc,cst_tbody)}
    function createTr(doc){return unsafeCreateElement(doc,cst_tr)}
    function createTh(doc){return unsafeCreateElement(doc,cst_th)}
    function createTd(doc){return unsafeCreateElement(doc,cst_td)}
    function createSub(doc){return createElement(doc,cst_sub)}
    function createSup(doc){return createElement(doc,cst_sup)}
    function createSpan(doc){return createElement(doc,cst_span)}
    function createTt(doc){return createElement(doc,cst_tt)}
    function createI(doc){return createElement(doc,cst_i)}
    function createB(doc){return createElement(doc,cst_b)}
    function createBig(doc){return createElement(doc,cst_big)}
    function createSmall(doc){return createElement(doc,cst_small)}
    function createEm(doc){return createElement(doc,cst_em)}
    function createStrong(doc){return createElement(doc,cst_strong)}
    function createCite(doc){return createElement(doc,cst_cite)}
    function createDfn(doc){return createElement(doc,cst_dfn)}
    function createCode(doc){return createElement(doc,cst_code)}
    function createSamp(doc){return createElement(doc,cst_samp)}
    function createKbd(doc){return createElement(doc,cst_kbd)}
    function createVar(doc){return createElement(doc,cst_var)}
    function createAbbr(doc){return createElement(doc,cst_abbr)}
    function createDd(doc){return createElement(doc,cst_dd)}
    function createDt(doc){return createElement(doc,cst_dt)}
    function createNoscript(doc){return createElement(doc,cst_noscript)}
    function createAddress(doc){return createElement(doc,cst_address)}
    function createFrameset(doc){return unsafeCreateElement(doc,cst_frameset)}
    function createFrame(doc){return unsafeCreateElement(doc,cst_frame)}
    function createIframe(doc){return unsafeCreateElement(doc,cst_iframe)}
    function createAudio(doc){return unsafeCreateElement(doc,cst_audio)}
    function createVideo(doc){return unsafeCreateElement(doc,cst_video)}
    var
     Canvas_not_available=
      [248,cst_Js_of_ocaml_Dom_html_Canvas_not_available,caml_fresh_oo_id(0)];
    function createCanvas(doc)
     {var c=unsafeCreateElement(doc,cst_canvas);
      if(1 - caml_call1(Opt[5],c.getContext))throw Canvas_not_available;
      return c}
    var
     html_element=Unsafe[1].HTMLElement,
     element$0=
      html_element === t37
       ?function(e){return e.innerHTML === t37?no_handler:e}
       :function(e){return e instanceof html_element?e:no_handler};
    function unsafeCoerce(tag,e)
     {var _fV_=tag.toString();
      return e.tagName.toLowerCase() === _fV_?e:no_handler}
    function a(e){return unsafeCoerce(cst_a$0,e)}
    function area(e){return unsafeCoerce(cst_area$0,e)}
    function base(e){return unsafeCoerce(cst_base$0,e)}
    function blockquote(e){return unsafeCoerce(cst_blockquote$0,e)}
    function body(e){return unsafeCoerce(cst_body$0,e)}
    function br(e){return unsafeCoerce(cst_br$0,e)}
    function button(e){return unsafeCoerce(cst_button$0,e)}
    function canvas(e){return unsafeCoerce(cst_canvas$0,e)}
    function caption(e){return unsafeCoerce(cst_caption$0,e)}
    function col(e){return unsafeCoerce(cst_col$0,e)}
    function colgroup(e){return unsafeCoerce(cst_colgroup$0,e)}
    function del(e){return unsafeCoerce(cst_del$0,e)}
    function div(e){return unsafeCoerce(cst_div$0,e)}
    function dl(e){return unsafeCoerce(cst_dl$0,e)}
    function fieldset(e){return unsafeCoerce(cst_fieldset$0,e)}
    function embed(e){return unsafeCoerce(cst_embed$0,e)}
    function form(e){return unsafeCoerce(cst_form$0,e)}
    function frameset(e){return unsafeCoerce(cst_frameset$0,e)}
    function frame(e){return unsafeCoerce(cst_frame$0,e)}
    function h1(e){return unsafeCoerce(cst_h1$0,e)}
    function h2(e){return unsafeCoerce(cst_h2$0,e)}
    function h3(e){return unsafeCoerce(cst_h3$0,e)}
    function h4(e){return unsafeCoerce(cst_h4$0,e)}
    function h5(e){return unsafeCoerce(cst_h5$0,e)}
    function h6(e){return unsafeCoerce(cst_h6$0,e)}
    function head(e){return unsafeCoerce(cst_head$0,e)}
    function hr(e){return unsafeCoerce(cst_hr$0,e)}
    function html(e){return unsafeCoerce(cst_html$0,e)}
    function iframe(e){return unsafeCoerce(cst_iframe$0,e)}
    function img(e){return unsafeCoerce(cst_img$0,e)}
    function input$0(e){return unsafeCoerce(cst_input$1,e)}
    function ins(e){return unsafeCoerce(cst_ins$0,e)}
    function label(e){return unsafeCoerce(cst_label$0,e)}
    function legend(e){return unsafeCoerce(cst_legend$0,e)}
    function li(e){return unsafeCoerce(cst_li$0,e)}
    function link(e){return unsafeCoerce(cst_link$0,e)}
    function map$1(e){return unsafeCoerce(cst_map$0,e)}
    function meta(e){return unsafeCoerce(cst_meta$0,e)}
    function object(e){return unsafeCoerce(cst_object$0,e)}
    function ol(e){return unsafeCoerce(cst_ol$0,e)}
    function optgroup(e){return unsafeCoerce(cst_optgroup$0,e)}
    function option$1(e){return unsafeCoerce(cst_option$0,e)}
    function p(e){return unsafeCoerce(cst_p$0,e)}
    function param(e){return unsafeCoerce(cst_param$0,e)}
    function pre(e){return unsafeCoerce(cst_pre$0,e)}
    function q(e){return unsafeCoerce(cst_q$0,e)}
    function script(e){return unsafeCoerce(cst_script$0,e)}
    function select$0(e){return unsafeCoerce(cst_select$1,e)}
    function style(e){return unsafeCoerce(cst_style$0,e)}
    function table(e){return unsafeCoerce(cst_table$0,e)}
    function tbody(e){return unsafeCoerce(cst_tbody$0,e)}
    function td(e){return unsafeCoerce(cst_td$0,e)}
    function textarea(e){return unsafeCoerce(cst_textarea$0,e)}
    function tfoot(e){return unsafeCoerce(cst_tfoot$0,e)}
    function th(e){return unsafeCoerce(cst_th$0,e)}
    function thead(e){return unsafeCoerce(cst_thead$0,e)}
    function title(e){return unsafeCoerce(cst_title$0,e)}
    function tr(e){return unsafeCoerce(cst_tr$0,e)}
    function ul(e){return unsafeCoerce(cst_ul$0,e)}
    function audio(e){return unsafeCoerce(cst_audio$0,e)}
    function video(e){return unsafeCoerce(cst_video$0,e)}
    function unsafeCoerceEvent(constr,ev)
     {if(constr !== t37)if(ev instanceof constr)return ev;return no_handler}
    function mouseEvent(ev){return unsafeCoerceEvent(Unsafe[1].MouseEvent,ev)}
    function keyboardEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].KeyboardEvent,ev)}
    function wheelEvent(ev){return unsafeCoerceEvent(Unsafe[1].WheelEvent,ev)}
    function mouseScrollEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].MouseScrollEvent,ev)}
    function popStateEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].PopStateEvent,ev)}
    function eventRelatedTarget(e)
     {function _fS_(param)
       {var match=caml_js_to_string(e.type);
        if(caml_string_notequal(match,cst_mouseout$0))
         {if(caml_string_notequal(match,cst_mouseover$0))return no_handler;
          var _fT_=function(param){throw [0,Assert_failure,_i_]};
          return caml_call2(Optdef[8],e.fromElement,_fT_)}
        function _fU_(param){throw [0,Assert_failure,_j_]}
        return caml_call2(Optdef[8],e.toElement,_fU_)}
      return caml_call2(Optdef[8],e.relatedTarget,_fS_)}
    function eventAbsolutePosition(e)
     {var body=document$0.body,html=document$0.documentElement;
      return [0,
              (e.clientX + body.scrollLeft | 0) + html.scrollLeft | 0,
              (e.clientY + body.scrollTop | 0) + html.scrollTop | 0]}
    function eventAbsolutePosition$0(e)
     {function _fO_(x)
       {function _fQ_(y){return [0,x,y]}
        function _fR_(param){return eventAbsolutePosition(e)}
        return caml_call3(Optdef[7],e.pageY,_fR_,_fQ_)}
      function _fP_(param){return eventAbsolutePosition(e)}
      return caml_call3(Optdef[7],e.pageX,_fP_,_fO_)}
    function elementClientPosition(e)
     {var
       r=e.getBoundingClientRect(),
       body=document$0.body,
       html=document$0.documentElement;
      return [0,
              ((r.left | 0) - body.clientLeft | 0) - html.clientLeft | 0,
              ((r.top | 0) - body.clientTop | 0) - html.clientTop | 0]}
    function getDocumentScroll(param)
     {var body=document$0.body,html=document$0.documentElement;
      return [0,
              body.scrollLeft + html.scrollLeft | 0,
              body.scrollTop + html.scrollTop | 0]}
    function buttonPressed(ev)
     {function _fM_(x){return x}
      function _fN_(param)
       {var match=ev.button,switcher=match - 1 | 0;
        if(! (3 < switcher >>> 0))
         switch(switcher)
          {case 0:return 1;case 1:return 3;case 2:break;default:return 2}
        return 0}
      return caml_call3(Optdef[7],ev.which,_fN_,_fM_)}
    function addMousewheelEventListener(e,h,capt)
     {var d=createDiv(document$0);
      d.setAttribute("onmousewheel","return;");
      if(typeof d.onmousewheel === "function")
       {var
         _fI_=
          handler
           (function(e)
             {function _fK_(param){return 0}
              var
               dx=
                (- caml_call2(Optdef[8],e.wheelDeltaX,_fK_) | 0) / 40 | 0;
              function _fL_(param){return e.wheelDelta}
              var
               dy=
                (- caml_call2(Optdef[8],e.wheelDeltaY,_fL_) | 0) / 40 | 0;
              return caml_call3(h,e,dx,dy)});
        return addEventListener(e,Event$0[11],_fI_,capt)}
      var
       _fJ_=
        handler
         (function(e)
           {var d=e.detail;
            return e.axis === e.HORIZONTAL
                    ?caml_call3(h,e,d,0)
                    :caml_call3(h,e,0,d)});
      return addEventListener(e,Event$0[12],_fJ_,capt)}
    function f(v)
     {var
       match=caml_js_to_string(v),
       switch$0=caml_string_compare(match,cst_KeyH);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 8;
        var switch$1=caml_string_compare(match,cst_Numpad4);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 72;
          var switch$2=caml_string_compare(match,cst_PageUp);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 98;
            var switch$3=caml_string_compare(match,cst_ShiftRight);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 91;
              if(! caml_string_notequal(match,cst_Slash))return 55;
              if(! caml_string_notequal(match,cst_Space))return 41;
              if(! caml_string_notequal(match,cst_Tab))return 39;
              if(! caml_string_notequal(match,cst_VolumeDown))return 103;
              if(! caml_string_notequal(match,cst_VolumeMute))return 102;
              if(! caml_string_notequal(match,cst_VolumeUp))return 104}
            else
             {if(! caml_string_notequal(match,cst_Pause))return 123;
              if(! caml_string_notequal(match,cst_Period))return 54;
              if(! caml_string_notequal(match,cst_PrintScreen))return 120;
              if(! caml_string_notequal(match,cst_Quote))return 50;
              if(! caml_string_notequal(match,cst_ScrollLock))return 119;
              if(! caml_string_notequal(match,cst_Semicolon))return 49;
              if(! caml_string_notequal(match,cst_ShiftLeft))return 90}}
          else
           {var switch$4=caml_string_compare(match,cst_NumpadDivide);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 84;
              if(! caml_string_notequal(match,cst_NumpadEnter))return 83;
              if(! caml_string_notequal(match,cst_NumpadEqual))return 82;
              if(! caml_string_notequal(match,cst_NumpadMultiply))return 78;
              if(! caml_string_notequal(match,cst_NumpadSubtract))return 79;
              if(! caml_string_notequal(match,cst_OSLeft))return 117;
              if(! caml_string_notequal(match,cst_OSRight))return 118;
              if(! caml_string_notequal(match,cst_PageDown))return 99}
            else
             {if(! caml_string_notequal(match,cst_Numpad5))return 73;
              if(! caml_string_notequal(match,cst_Numpad6))return 74;
              if(! caml_string_notequal(match,cst_Numpad7))return 75;
              if(! caml_string_notequal(match,cst_Numpad8))return 76;
              if(! caml_string_notequal(match,cst_Numpad9))return 77;
              if(! caml_string_notequal(match,cst_NumpadAdd))return 80;
              if(! caml_string_notequal(match,cst_NumpadDecimal))return 81}}}
        else
         {var switch$5=caml_string_compare(match,cst_KeyX);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 24;
            var switch$6=caml_string_compare(match,cst_MetaRight);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 89;
              if(! caml_string_notequal(match,cst_Minus))return 37;
              if(! caml_string_notequal(match,cst_NumLock))return 85;
              if(! caml_string_notequal(match,cst_Numpad0))return 68;
              if(! caml_string_notequal(match,cst_Numpad1))return 69;
              if(! caml_string_notequal(match,cst_Numpad2))return 70;
              if(! caml_string_notequal(match,cst_Numpad3))return 71}
            else
             {if(! caml_string_notequal(match,cst_KeyY))return 25;
              if(! caml_string_notequal(match,cst_KeyZ))return 26;
              if(! caml_string_notequal(match,cst_MediaPlayPause))return 107;
              if(! caml_string_notequal(match,cst_MediaStop))return 108;
              if(! caml_string_notequal(match,cst_MediaTrackNext))return 106;
              if(! caml_string_notequal(match,cst_MediaTrackPrevious))
               return 105;
              if(! caml_string_notequal(match,cst_MetaLeft))return 88}}
          else
           {var switch$7=caml_string_compare(match,cst_KeyP);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 16;
              if(! caml_string_notequal(match,cst_KeyQ))return 17;
              if(! caml_string_notequal(match,cst_KeyR))return 18;
              if(! caml_string_notequal(match,cst_KeyS))return 19;
              if(! caml_string_notequal(match,cst_KeyT))return 20;
              if(! caml_string_notequal(match,cst_KeyU))return 21;
              if(! caml_string_notequal(match,cst_KeyV))return 22;
              if(! caml_string_notequal(match,cst_KeyW))return 23}
            else
             {if(! caml_string_notequal(match,cst_KeyI))return 9;
              if(! caml_string_notequal(match,cst_KeyJ))return 10;
              if(! caml_string_notequal(match,cst_KeyK))return 11;
              if(! caml_string_notequal(match,cst_KeyL))return 12;
              if(! caml_string_notequal(match,cst_KeyM))return 13;
              if(! caml_string_notequal(match,cst_KeyN))return 14;
              if(! caml_string_notequal(match,cst_KeyO))return 15}}}}
      else
       {var switch$8=caml_string_compare(match,cst_Digit6);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 33;
          var switch$9=caml_string_compare(match,cst_F6);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 61;
            var switch$10=caml_string_compare(match,cst_KeyA);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 1;
              if(! caml_string_notequal(match,cst_KeyB))return 2;
              if(! caml_string_notequal(match,cst_KeyC))return 3;
              if(! caml_string_notequal(match,cst_KeyD))return 4;
              if(! caml_string_notequal(match,cst_KeyE))return 5;
              if(! caml_string_notequal(match,cst_KeyF))return 6;
              if(! caml_string_notequal(match,cst_KeyG))return 7}
            else
             {if(! caml_string_notequal(match,cst_F7))return 62;
              if(! caml_string_notequal(match,cst_F8))return 63;
              if(! caml_string_notequal(match,cst_F9))return 64;
              if(! caml_string_notequal(match,cst_Home))return 100;
              if(! caml_string_notequal(match,cst_Insert))return 44;
              if(! caml_string_notequal(match,cst_IntlBackslash))return 121;
              if(! caml_string_notequal(match,cst_IntlYen))return 122}}
          else
           {var switch$11=caml_string_compare(match,cst_F1);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 56;
              if(! caml_string_notequal(match,cst_F10))return 65;
              if(! caml_string_notequal(match,cst_F11))return 66;
              if(! caml_string_notequal(match,cst_F12))return 67;
              if(! caml_string_notequal(match,cst_F2))return 57;
              if(! caml_string_notequal(match,cst_F3))return 58;
              if(! caml_string_notequal(match,cst_F4))return 59;
              if(! caml_string_notequal(match,cst_F5))return 60}
            else
             {if(! caml_string_notequal(match,cst_Digit7))return 34;
              if(! caml_string_notequal(match,cst_Digit8))return 35;
              if(! caml_string_notequal(match,cst_Digit9))return 36;
              if(! caml_string_notequal(match,cst_End))return 101;
              if(! caml_string_notequal(match,cst_Enter))return 40;
              if(! caml_string_notequal(match,cst_Equal))return 38;
              if(! caml_string_notequal(match,cst_Escape))return 42}}}
        else
         {var switch$12=caml_string_compare(match,cst_BrowserRefresh);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 113;
            var switch$13=caml_string_compare(match,cst_Delete);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 45;
              if(! caml_string_notequal(match,cst_Digit0))return 27;
              if(! caml_string_notequal(match,cst_Digit1))return 28;
              if(! caml_string_notequal(match,cst_Digit2))return 29;
              if(! caml_string_notequal(match,cst_Digit3))return 30;
              if(! caml_string_notequal(match,cst_Digit4))return 31;
              if(! caml_string_notequal(match,cst_Digit5))return 32}
            else
             {if(! caml_string_notequal(match,cst_BrowserSearch))return 110;
              if(! caml_string_notequal(match,cst_BrowserStop))return 114;
              if(! caml_string_notequal(match,cst_CapsLock))return 46;
              if(! caml_string_notequal(match,cst_Comma))return 53;
              if(! caml_string_notequal(match,cst_ContextMenu))return 109;
              if(! caml_string_notequal(match,cst_ControlLeft))return 86;
              if(! caml_string_notequal(match,cst_ControlRight))return 87}}
          else
           {var switch$14=caml_string_compare(match,cst_Backslash);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 52;
              if(! caml_string_notequal(match,cst_Backspace))return 43;
              if(! caml_string_notequal(match,cst_BracketLeft))return 47;
              if(! caml_string_notequal(match,cst_BracketRight))return 48;
              if(! caml_string_notequal(match,cst_BrowserBack))return 116;
              if(! caml_string_notequal(match,cst_BrowserFavorites))
               return 112;
              if(! caml_string_notequal(match,cst_BrowserForward))return 115;
              if(! caml_string_notequal(match,cst_BrowserHome))return 111}
            else
             {if(! caml_string_notequal(match,cst_AltLeft))return 92;
              if(! caml_string_notequal(match,cst_AltRight))return 93;
              if(! caml_string_notequal(match,cst_ArrowDown))return 97;
              if(! caml_string_notequal(match,cst_ArrowLeft))return 94;
              if(! caml_string_notequal(match,cst_ArrowRight))return 95;
              if(! caml_string_notequal(match,cst_ArrowUp))return 96;
              if(! caml_string_notequal(match,cst_Backquote))return 51}}}}
      return 0}
    function try_key_code_left(param)
     {if(19 <= param)
       {if(91 === param)return 88}
      else
       if(16 <= param)
        {var switcher=param - 16 | 0;
         switch(switcher){case 0:return 90;case 1:return 86;default:return 92}}
      return 0}
    function try_key_code_right(param)
     {if(19 <= param)
       {if(91 === param)return 89}
      else
       if(16 <= param)
        {var switcher=param - 16 | 0;
         switch(switcher){case 0:return 91;case 1:return 87;default:return 93}}
      return 0}
    function try_key_code_numpad(param)
     {if(47 <= param)
       {var switcher=param - 96 | 0;
        if(! (15 < switcher >>> 0))
         switch(switcher)
          {case 0:return 68;
           case 1:return 69;
           case 2:return 70;
           case 3:return 71;
           case 4:return 72;
           case 5:return 73;
           case 6:return 74;
           case 7:return 75;
           case 8:return 76;
           case 9:return 77;
           case 10:return 78;
           case 11:return 80;
           case 12:break;
           case 13:return 79;
           case 14:return 81;
           default:return 84}}
      else
       if(12 <= param)
        {var switcher$0=param - 12 | 0;
         switch(switcher$0)
          {case 0:return 73;
           case 1:return 83;
           case 21:return 77;
           case 22:return 71;
           case 23:return 69;
           case 24:return 75;
           case 25:return 72;
           case 26:return 76;
           case 27:return 74;
           case 28:return 70;
           case 33:return 68;
           case 34:return 81
           }}
      return 0}
    function try_key_code_normal(param)
     {var switcher=param - 8 | 0;
      if(! (214 < switcher >>> 0))
       {var _fH_=switcher;
        if(67 <= _fH_)
         switch(_fH_)
          {case 67:return 11;
           case 68:return 12;
           case 69:return 13;
           case 70:return 14;
           case 71:return 15;
           case 72:return 16;
           case 73:return 17;
           case 74:return 18;
           case 75:return 19;
           case 76:return 20;
           case 77:return 21;
           case 78:return 22;
           case 79:return 23;
           case 80:return 24;
           case 81:return 25;
           case 82:return 26;
           case 85:return 109;
           case 104:return 56;
           case 105:return 57;
           case 106:return 58;
           case 107:return 59;
           case 108:return 60;
           case 109:return 61;
           case 110:return 62;
           case 111:return 63;
           case 112:return 64;
           case 113:return 65;
           case 114:return 66;
           case 115:return 67;
           case 137:return 119;
           case 178:return 49;
           case 179:return 38;
           case 180:return 53;
           case 181:return 37;
           case 182:return 54;
           case 183:return 55;
           case 184:return 51;
           case 211:return 47;
           case 212:return 52;
           case 213:return 48;
           case 214:return 50
           }
        else
         switch(_fH_)
          {case 0:return 43;
           case 1:return 39;
           case 5:return 40;
           case 11:return 123;
           case 12:return 46;
           case 19:return 42;
           case 24:return 41;
           case 25:return 98;
           case 26:return 99;
           case 27:return 101;
           case 28:return 100;
           case 29:return 94;
           case 30:return 96;
           case 31:return 95;
           case 32:return 97;
           case 34:return 120;
           case 37:return 44;
           case 38:return 45;
           case 40:return 27;
           case 41:return 28;
           case 42:return 29;
           case 43:return 30;
           case 44:return 31;
           case 45:return 32;
           case 46:return 33;
           case 47:return 34;
           case 48:return 35;
           case 49:return 36;
           case 57:return 1;
           case 58:return 2;
           case 59:return 3;
           case 60:return 4;
           case 61:return 5;
           case 62:return 6;
           case 63:return 7;
           case 64:return 8;
           case 65:return 9;
           case 66:return 10
           }}
      return 0}
    function make_unidentified(param){return 0}
    function run_next(value,f,v){return 0 === v?caml_call1(f,value):v}
    function _k_(x,f){return caml_call1(f,x)}
    function of_event(evt)
     {var _fA_=evt.keyCode;
      function _fB_(_fG_){return run_next(_fA_,try_key_code_normal,_fG_)}
      var match=evt.location,switcher=match - 1 | 0;
      if(2 < switcher >>> 0)
       var _fC_=make_unidentified;
      else
       switch(switcher)
        {case 0:
          var
           _fx_=evt.keyCode,
           _fC_=function(_fE_){return run_next(_fx_,try_key_code_left,_fE_)};
          break;
         case 1:
          var
           _fy_=evt.keyCode,
           _fC_=function(_fD_){return run_next(_fy_,try_key_code_right,_fD_)};
          break;
         default:
          var
           _fz_=evt.keyCode,
           _fC_=function(_fF_){return run_next(_fz_,try_key_code_numpad,_fF_)}}
      var value=evt.code;
      return _k_
              (_k_
                (_k_
                  (0,
                   function(v)
                    {return 0 === v
                             ?caml_call3(Optdef[7],value,make_unidentified,f)
                             :v}),
                 _fC_),
               _fB_)}
    function char_of_int(value)
     {if(0 < value)
       try
        {var _fv_=[0,caml_call1(Stdlib_uchar[8],value)];return _fv_}
       catch(_fw_){return 0}
      return 0}
    function empty_string(param){return ""}
    function none(param){return 0}
    function of_event$0(evt)
     {var key=caml_call2(Optdef[8],evt.key,empty_string),match=key.length;
      return 0 === match
              ?caml_call3(Optdef[7],evt.charCode,none,char_of_int)
              :1 === match?char_of_int(key.charCodeAt(0) | 0):0}
    function element$1(_fu_){return _fu_}
    function tagged(e)
     {var tag=caml_js_to_byte_string(e.tagName.toLowerCase());
      if(0 === caml_ml_string_length(tag))return [61,e];
      var match=runtime.caml_string_unsafe_get(tag,0),switcher=match - 97 | 0;
      if(! (21 < switcher >>> 0))
       switch(switcher)
        {case 0:
          return caml_string_notequal(tag,cst_a$1)
                  ?caml_string_notequal(tag,cst_area$1)
                    ?caml_string_notequal(tag,cst_audio$1)?[61,e]:[2,e]
                    :[1,e]
                  :[0,e];
         case 1:
          return caml_string_notequal(tag,cst_base$1)
                  ?caml_string_notequal(tag,cst_blockquote$1)
                    ?caml_string_notequal(tag,cst_body$1)
                      ?caml_string_notequal(tag,cst_br$1)
                        ?caml_string_notequal(tag,cst_button$1)?[61,e]:[7,e]
                        :[6,e]
                      :[5,e]
                    :[4,e]
                  :[3,e];
         case 2:
          return caml_string_notequal(tag,cst_canvas$1)
                  ?caml_string_notequal(tag,cst_caption$1)
                    ?caml_string_notequal(tag,cst_col$1)
                      ?caml_string_notequal(tag,cst_colgroup$1)?[61,e]:[11,e]
                      :[10,e]
                    :[9,e]
                  :[8,e];
         case 3:
          return caml_string_notequal(tag,cst_del$1)
                  ?caml_string_notequal(tag,cst_div$1)
                    ?caml_string_notequal(tag,cst_dl$1)?[61,e]:[14,e]
                    :[13,e]
                  :[12,e];
         case 4:return caml_string_notequal(tag,cst_embed$1)?[61,e]:[15,e];
         case 5:
          return caml_string_notequal(tag,cst_fieldset$1)
                  ?caml_string_notequal(tag,cst_form$1)
                    ?caml_string_notequal(tag,cst_frame$1)
                      ?caml_string_notequal(tag,cst_frameset$1)?[61,e]:[18,e]
                      :[19,e]
                    :[17,e]
                  :[16,e];
         case 7:
          return caml_string_notequal(tag,cst_h1$1)
                  ?caml_string_notequal(tag,cst_h2$1)
                    ?caml_string_notequal(tag,cst_h3$1)
                      ?caml_string_notequal(tag,cst_h4$1)
                        ?caml_string_notequal(tag,cst_h5$1)
                          ?caml_string_notequal(tag,cst_h6$1)
                            ?caml_string_notequal(tag,cst_head$1)
                              ?caml_string_notequal(tag,cst_hr$1)
                                ?caml_string_notequal(tag,cst_html$1)?[61,e]:[28,e]
                                :[27,e]
                              :[26,e]
                            :[25,e]
                          :[24,e]
                        :[23,e]
                      :[22,e]
                    :[21,e]
                  :[20,e];
         case 8:
          return caml_string_notequal(tag,cst_iframe$1)
                  ?caml_string_notequal(tag,cst_img$1)
                    ?caml_string_notequal(tag,cst_input$2)
                      ?caml_string_notequal(tag,cst_ins$1)?[61,e]:[32,e]
                      :[31,e]
                    :[30,e]
                  :[29,e];
         case 11:
          return caml_string_notequal(tag,cst_label$1)
                  ?caml_string_notequal(tag,cst_legend$1)
                    ?caml_string_notequal(tag,cst_li$1)
                      ?caml_string_notequal(tag,cst_link$1)?[61,e]:[36,e]
                      :[35,e]
                    :[34,e]
                  :[33,e];
         case 12:
          return caml_string_notequal(tag,cst_map$1)
                  ?caml_string_notequal(tag,cst_meta$1)?[61,e]:[38,e]
                  :[37,e];
         case 14:
          return caml_string_notequal(tag,cst_object$1)
                  ?caml_string_notequal(tag,cst_ol$1)
                    ?caml_string_notequal(tag,cst_optgroup$1)
                      ?caml_string_notequal(tag,cst_option$1)?[61,e]:[42,e]
                      :[41,e]
                    :[40,e]
                  :[39,e];
         case 15:
          return caml_string_notequal(tag,cst_p$1)
                  ?caml_string_notequal(tag,cst_param$1)
                    ?caml_string_notequal(tag,cst_pre$1)?[61,e]:[45,e]
                    :[44,e]
                  :[43,e];
         case 16:return caml_string_notequal(tag,cst_q$1)?[61,e]:[46,e];
         case 18:
          return caml_string_notequal(tag,cst_script$1)
                  ?caml_string_notequal(tag,cst_select$2)
                    ?caml_string_notequal(tag,cst_style$1)?[61,e]:[49,e]
                    :[48,e]
                  :[47,e];
         case 19:
          return caml_string_notequal(tag,cst_table$1)
                  ?caml_string_notequal(tag,cst_tbody$1)
                    ?caml_string_notequal(tag,cst_td$1)
                      ?caml_string_notequal(tag,cst_textarea$1)
                        ?caml_string_notequal(tag,cst_tfoot$1)
                          ?caml_string_notequal(tag,cst_th$1)
                            ?caml_string_notequal(tag,cst_thead$1)
                              ?caml_string_notequal(tag,cst_title$1)
                                ?caml_string_notequal(tag,cst_tr$1)?[61,e]:[58,e]
                                :[57,e]
                              :[56,e]
                            :[55,e]
                          :[54,e]
                        :[53,e]
                      :[52,e]
                    :[51,e]
                  :[50,e];
         case 20:return caml_string_notequal(tag,cst_ul$1)?[61,e]:[59,e];
         case 21:return caml_string_notequal(tag,cst_video$1)?[61,e]:[60,e]
         }
      return [61,e]}
    function opt_tagged(e)
     {function _fs_(e){return [0,tagged(e)]}
      function _ft_(param){return 0}
      return caml_call3(Opt[7],e,_ft_,_fs_)}
    function taggedEvent(ev)
     {function _fd_(ev){return [0,ev]}
      function _fe_(param)
       {function _fg_(ev){return [1,ev]}
        function _fh_(param)
         {function _fj_(ev){return [2,ev]}
          function _fk_(param)
           {function _fm_(ev){return [3,ev]}
            function _fn_(param)
             {function _fp_(ev){return [4,ev]}
              function _fq_(param){return [5,ev]}
              var _fr_=popStateEvent(ev);
              return caml_call3(Opt[7],_fr_,_fq_,_fp_)}
            var _fo_=mouseScrollEvent(ev);
            return caml_call3(Opt[7],_fo_,_fn_,_fm_)}
          var _fl_=wheelEvent(ev);
          return caml_call3(Opt[7],_fl_,_fk_,_fj_)}
        var _fi_=keyboardEvent(ev);
        return caml_call3(Opt[7],_fi_,_fh_,_fg_)}
      var _ff_=mouseEvent(ev);
      return caml_call3(Opt[7],_ff_,_fe_,_fd_)}
    function opt_taggedEvent(ev)
     {function _fb_(ev){return [0,taggedEvent(ev)]}
      function _fc_(param){return 0}
      return caml_call3(Opt[7],ev,_fc_,_fb_)}
    function stopPropagation(ev)
     {function _e$_(param){return ev.stopPropagation()}
      function _fa_(param){return ev.cancelBubble = true$0}
      return caml_call3(Optdef[7],ev.stopPropagation,_fa_,_e$_)}
    var
     requestAnimationFrame=
      runtime.caml_js_pure_expr
       (function(param)
         {var
           l=
            [0,
             _g_.requestAnimationFrame,
             [0,
              _g_.mozRequestAnimationFrame,
              [0,
               _g_.webkitRequestAnimationFrame,
               [0,
                _g_.oRequestAnimationFrame,
                [0,_g_.msRequestAnimationFrame,0]]]]];
          try
           {var
             _e8_=function(c){return caml_call1(Optdef[5],c)},
             req=caml_call2(Stdlib_list[33],_e8_,l),
             _e9_=function(callback){return req(callback)};
            return _e9_}
          catch(_e__)
           {_e__ = caml_wrap_exception(_e__);
            if(_e__ === Not_found)
             {var
               now=function(param){return new date_ms().getTime()},
               last=[0,now(0)];
              return function(callback)
               {var
                 t=now(0),
                 dt=last[1] + 16.6666666666666679 - t,
                 dt$0=dt < 0.?0.:dt;
                last[1] = t;
                _g_.setTimeout(callback,dt$0);
                return 0}}
            throw _e__}});
    function hasPushState(param)
     {return caml_call1(Optdef[5],_g_.history.pushState)}
    function hasPlaceholder(param)
     {var i=createInput(0,0,document$0);
      return caml_call1(Optdef[5],i.placeholder)}
    function hasRequired(param)
     {var i=createInput(0,0,document$0);
      return caml_call1(Optdef[5],i.required)}
    var overflow_limit=2147483000.;
    function setTimeout(callback,d)
     {var id=[0,0];
      function loop(step,param)
       {if(2147483000. < step)
         var step$0=overflow_limit,remain=step - 2147483000.;
        else
         var step$0=step,remain=0.;
        var cb=remain == 0.?callback:function(_e7_){return loop(remain,_e7_)};
        id[1] = [0,_g_.setTimeout(caml_js_wrap_callback(cb),step$0)];
        return 0}
      loop(d,0);
      return id}
    function clearTimeout(id)
     {var _e6_=id[1];
      if(_e6_){var x=_e6_[1];id[1] = 0;return _g_.clearTimeout(x)}
      return 0}
    function js_array_of_collection(c){return [].slice.call(c)}
    var
     Js_of_ocaml_Dom_html=
      [0,
       d,
       document$0,
       getElementById_opt,
       getElementById_exn,
       getElementById_coerce,
       getElementById,
       location_origin,
       _g_,
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       eventRelatedTarget,
       Event$0,
       addEventListener,
       removeEventListener,
       addMousewheelEventListener,
       buttonPressed,
       eventAbsolutePosition$0,
       elementClientPosition,
       getDocumentScroll,
       [0,of_event,try_key_code_normal],
       [0,of_event$0],
       createHtml,
       createHead,
       createLink,
       createTitle,
       createMeta,
       createBase,
       createStyle,
       createBody,
       createForm,
       createOptgroup,
       createOption,
       createSelect,
       createInput,
       createTextarea,
       createButton,
       createLabel,
       createFieldset,
       createLegend,
       createUl,
       createOl,
       createDl,
       createLi,
       createDiv,
       createEmbed,
       createP,
       createH1,
       createH2,
       createH3,
       createH4,
       createH5,
       createH6,
       createQ,
       createBlockquote,
       createPre,
       createBr,
       createHr,
       createIns,
       createDel,
       createA,
       createImg,
       createObject,
       createParam,
       createMap,
       createArea,
       createScript,
       createTable,
       createCaption,
       createCol,
       createColgroup,
       createThead,
       createTfoot,
       createTbody,
       createTr,
       createTh,
       createTd,
       createSub,
       createSup,
       createSpan,
       createTt,
       createI,
       createB,
       createBig,
       createSmall,
       createEm,
       createStrong,
       createCite,
       createDfn,
       createCode,
       createSamp,
       createKbd,
       createVar,
       createAbbr,
       createDd,
       createDt,
       createNoscript,
       createAddress,
       createFrameset,
       createFrame,
       createIframe,
       createAudio,
       createVideo,
       Canvas_not_available,
       createCanvas,
       element$1,
       tagged,
       opt_tagged,
       taggedEvent,
       opt_taggedEvent,
       stopPropagation,
       [0,
        element$0,
        a,
        area,
        audio,
        base,
        blockquote,
        body,
        br,
        button,
        canvas,
        caption,
        col,
        colgroup,
        del,
        div,
        embed,
        dl,
        fieldset,
        form,
        frameset,
        frame,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        head,
        hr,
        html,
        iframe,
        img,
        input$0,
        ins,
        label,
        legend,
        li,
        link,
        map$1,
        meta,
        object,
        ol,
        optgroup,
        option$1,
        p,
        param,
        pre,
        q,
        script,
        select$0,
        style,
        table,
        tbody,
        td,
        textarea,
        tfoot,
        th,
        thead,
        title,
        tr,
        ul,
        video,
        mouseEvent,
        keyboardEvent,
        wheelEvent,
        mouseScrollEvent,
        popStateEvent],
       setTimeout,
       clearTimeout,
       js_array_of_collection,
       requestAnimationFrame,
       runtime.caml_js_html_entities,
       onIE,
       hasPushState,
       hasPlaceholder,
       hasRequired];
    caml_register_global(1620,Js_of_ocaml_Dom_html,"Js_of_ocaml__Dom_html");
    var formData=Unsafe[1].FormData,formData_form=Unsafe[1].FormData;
    function filter_map$0(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map$0(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function have_content(elt)
     {var _e4_=0 < elt.name.length?1:0,_e5_=_e4_?1 - (elt.disabled | 0):_e4_;
      return _e5_}
    function form_elements(get,form)
     {var length=form.elements.length;
      function _eS_(i)
       {var _e3_=form.elements.item(i);return caml_call1(Opt[10],_e3_)}
      var
       _eT_=caml_call2(Stdlib_array[2],length,_eS_),
       elements=caml_call1(Stdlib_array[11],_eT_);
      function _eU_(param)
       {if(param)
         {var v=param[1],match$3=tagged(v);
          switch(match$3[0])
           {case 31:
             var v$0=match$3[1];
             if(get)var sth=get[1],get$0=sth;else var get$0=0;
             if(have_content(v$0))
              {var
                name$1=caml_js_to_string(v$0.name),
                value=v$0.value,
                match=caml_js_to_byte_string(v$0.type.toLowerCase());
               if(caml_string_notequal(match,cst_checkbox))
                {if(! caml_string_notequal(match,cst_file))
                  {if(get$0)return [0,[0,name$1,[0,-976970511,value]],0];
                   var match$0=caml_call1(Optdef[10],v$0.files);
                   if(match$0)
                    {var list=match$0[1];
                     if(0 === list.length)
                      return [0,[0,name$1,[0,-976970511,""]],0];
                     var match$1=caml_call1(Optdef[10],v$0.multiple);
                     if(match$1)
                      if(0 !== match$1[1])
                       {var
                         _eZ_=function(i){return list.item(i)},
                         _e0_=caml_call2(Stdlib_array[2],list.length,_eZ_),
                         _e1_=caml_call1(Stdlib_array[11],_e0_);
                        return filter_map$0
                                (function(f)
                                  {var match=caml_call1(Opt[10],f);
                                   if(match)
                                    {var file=match[1];return [0,[0,name$1,[0,781515420,file]]]}
                                   return 0},
                                 _e1_)}
                     var _eY_=list.item(0),match$2=caml_call1(Opt[10],_eY_);
                     if(match$2)
                      {var file=match$2[1];
                       return [0,[0,name$1,[0,781515420,file]],0]}
                     return 0}
                   return 0}
                 if(caml_string_notequal(match,cst_password))
                  if(caml_string_notequal(match,cst_radio))
                   {if(caml_string_notequal(match,cst_reset))
                     if(caml_string_notequal(match,cst_submit$0))
                      {if(caml_string_notequal(match,cst_text))
                        return [0,[0,name$1,[0,-976970511,value]],0];
                       var switch$0=1,switch$1=0}
                     else
                      var switch$1=1;
                    else
                     var switch$1=1;
                    if(switch$1)return 0}
                  else
                   var switch$0=0;
                 else
                  var switch$0=1;
                 if(switch$0)return [0,[0,name$1,[0,-976970511,value]],0]}
               return v$0.checked | 0?[0,[0,name$1,[0,-976970511,value]],0]:0}
             return 0;
            case 48:
             var v$1=match$3[1];
             if(have_content(v$1))
              {var name$0=caml_js_to_string(v$1.name);
               if(v$1.multiple | 0)
                {var
                  _eW_=
                   function(i)
                    {var _e2_=v$1.options.item(i);
                     return caml_call1(Opt[10],_e2_)},
                  options=caml_call2(Stdlib_array[2],v$1.options.length,_eW_),
                  _eX_=caml_call1(Stdlib_array[11],options);
                 return filter_map$0
                         (function(param)
                           {if(param)
                             {var e=param[1];
                              return e.selected | 0
                                      ?[0,[0,name$0,[0,-976970511,e.value]]]
                                      :0}
                            return 0},
                          _eX_)}
               return [0,[0,name$0,[0,-976970511,v$1.value]],0]}
             return 0;
            case 53:
             var v$2=match$3[1];
             if(have_content(v$2))
              {var name=caml_js_to_string(v$2.name);
               return [0,[0,name,[0,-976970511,v$2.value]],0]}
             return 0;
            default:return 0}}
        return 0}
      var
       _eV_=caml_call2(Stdlib_list[17],_eU_,elements),
       contents=caml_call1(Stdlib_list[14],_eV_);
      return contents}
    function append(form_contents,form_elt)
     {if(891486873 <= form_contents[1])
       {var list=form_contents[2];list[1] = [0,form_elt,list[1]];return 0}
      var f=form_contents[2],_eQ_=form_elt[2],_eR_=form_elt[1];
      if(781515420 <= _eQ_[1])
       {var file=_eQ_[2];return f.append(_eR_.toString(),file)}
      var s=_eQ_[2];
      return f.append(_eR_.toString(),s)}
    function empty_form_contents(param)
     {var match=caml_call1(Optdef[10],formData);
      if(match){var constr=match[1];return [0,808620462,new constr()]}
      return [0,891486873,[0,0]]}
    function post_form_contents(form)
     {var contents=empty_form_contents(0),_eN_=form_elements(0,form);
      function _eO_(_eP_){return append(contents,_eP_)}
      caml_call2(Stdlib_list[15],_eO_,_eN_);
      return contents}
    function get_form_contents(form)
     {var _eJ_=form_elements(_l_,form);
      function _eK_(param)
       {var _eL_=param[2],_eM_=param[1];
        if(typeof _eL_ !== "number")
         if(-976970511 === _eL_[1])
          {var s=_eL_[2];return [0,_eM_,caml_js_to_string(s)]}
        throw [0,Assert_failure,_m_]}
      return caml_call2(Stdlib_list[17],_eK_,_eJ_)}
    var
     Js_of_ocaml_Form=
      [0,
       formData,
       formData_form,
       append,
       post_form_contents,
       get_form_contents,
       empty_form_contents,
       form_elements];
    caml_register_global(1621,Js_of_ocaml_Form,"Js_of_ocaml__Form");
    var
     readystatechange=caml_call1(Event[1],cst_readystatechange),
     loadstart$1=caml_call1(Event[1],cst_loadstart$1),
     progress$1=caml_call1(Event[1],cst_progress$1),
     abort$1=caml_call1(Event[1],cst_abort$1),
     error$1=caml_call1(Event[1],cst_error$1),
     load$1=caml_call1(Event[1],cst_load$1),
     timeout=caml_call1(Event[1],cst_timeout),
     loadend$0=caml_call1(Event[1],cst_loadend$0),
     Event$1=
      [0,
       readystatechange,
       loadstart$1,
       progress$1,
       abort$1,
       error$1,
       load$1,
       timeout,
       loadend$0];
    function create(param)
     {var
       xmlHttpRequest=Unsafe[1].XMLHttpRequest,
       activeXObject=Unsafe[1].activeXObject;
      try
       {var _eE_=new xmlHttpRequest();return _eE_}
      catch(_eF_)
       {try
         {var _eD_=new activeXObject("Msxml2.XMLHTTP");return _eD_}
        catch(_eG_)
         {try
           {var _eC_=new activeXObject("Msxml3.XMLHTTP");return _eC_}
          catch(_eH_)
           {try
             {var _eB_=new activeXObject("Microsoft.XMLHTTP");return _eB_}
            catch(_eI_){throw [0,Assert_failure,_n_]}}}}}
    var Js_of_ocaml_XmlHttpRequest=[0,create,Event$1];
    caml_register_global
     (1622,Js_of_ocaml_XmlHttpRequest,"Js_of_ocaml__XmlHttpRequest");
    var worker=Unsafe[1].Worker;
    function create$0(script){return new worker(script.toString())}
    function import_scripts(scripts)
     {if(Unsafe[1].importScripts === t37)
       caml_call1(Stdlib[2],cst_Worker_import_scripts_is_undefined);
      var
       _ez_=caml_call1(Stdlib_array[12],scripts),
       _eA_=caml_call2(Stdlib_array[15],caml_js_from_string,_ez_);
      return runtime.caml_js_fun_call(Unsafe[1].importScripts,_eA_)}
    function set_onmessage(handler)
     {if(Unsafe[1].onmessage === t37)
       caml_call1(Stdlib[2],cst_Worker_onmessage_is_undefined);
      function js_handler(ev){return caml_call1(handler,ev.data)}
      return Unsafe[1].onmessage = caml_js_wrap_callback(js_handler)}
    function post_message(msg)
     {if(Unsafe[1].postMessage === t37)
       caml_call1(Stdlib[2],cst_Worker_onmessage_is_undefined$0);
      return Unsafe[1].postMessage(msg)}
    var
     Js_of_ocaml_Worker=
      [0,create$0,import_scripts,set_onmessage,post_message];
    caml_register_global(1623,Js_of_ocaml_Worker,"Js_of_ocaml__Worker");
    var webSocket=Unsafe[1].WebSocket;
    function is_supported(param){return caml_call1(Optdef[5],webSocket)}
    var Js_of_ocaml_WebSockets=[0,webSocket,webSocket,webSocket,is_supported];
    caml_register_global
     (1624,Js_of_ocaml_WebSockets,"Js_of_ocaml__WebSockets");
    var
     defaultContextAttributes=
      {"alpha":true$0,
       "depth":true$0,
       "stencil":false$0,
       "antialias":true$0,
       "premultipliedAlpha":false$0,
       "preserveDrawingBuffer":false$0,
       "preferLowPowerToHighPerformance":false$0,
       "failIfMajorPerformanceCaveat":false$0},
     webglcontextlost=caml_call1(Event$0[73],cst_webglcontextlost),
     webglcontextrestored=caml_call1(Event$0[73],cst_webglcontextrestored),
     webglcontextcreationerror=
      caml_call1(Event$0[73],cst_webglcontextcreationerror),
     Event$2=
      [0,webglcontextlost,webglcontextrestored,webglcontextcreationerror];
    function getContext(c)
     {var ctx=c.getContext("webgl");
      return caml_call1(Opt[5],ctx)?ctx:c.getContext("experimental-webgl")}
    function getContextWithAttributes(c,attribs)
     {var ctx=c.getContext("webgl",attribs);
      return caml_call1(Opt[5],ctx)
              ?ctx
              :c.getContext("experimental-webgl",attribs)}
    var
     Js_of_ocaml_WebGL=
      [0,defaultContextAttributes,Event$2,getContext,getContextWithAttributes];
    caml_register_global(1625,Js_of_ocaml_WebGL,"Js_of_ocaml__WebGL");
    function regexp(s)
     {return new regExp_withFlags(caml_jsbytes_of_string(s),"g")}
    function regexp_case_fold(s)
     {return new regExp_withFlags(caml_jsbytes_of_string(s),"gi")}
    function regexp_with_flag(s,f)
     {var _ey_=caml_call2(Stdlib[17],cst_g,f).toString();
      return new regExp_withFlags(caml_jsbytes_of_string(s),_ey_)}
    function blunt_str_array_get(a,i)
     {function _ex_(param){throw [0,Assert_failure,_o_]}
      return caml_js_to_byte_string(caml_call2(Optdef[8],a[i],_ex_))}
    function string_match(r,s,i)
     {r.lastIndex = i;
      var
       _ev_=r.exec(caml_jsbytes_of_string(s)),
       _ew_=caml_call2(Opt[3],_ev_,match_result);
      return caml_call1(Opt[10],_ew_)}
    function search_forward(r,s,i)
     {r.lastIndex = i;
      function _es_(res){return [0,res.index,res]}
      var
       _et_=r.exec(caml_jsbytes_of_string(s)),
       _eu_=caml_call2(Opt[3],_et_,_es_);
      return caml_call1(Opt[10],_eu_)}
    function matched_string(r){return blunt_str_array_get(r,0)}
    function matched_group(r,i)
     {var _er_=caml_call2(Optdef[3],r[i],caml_js_to_byte_string);
      return caml_call1(Optdef[10],_er_)}
    var quote_repl_re=new regExp_withFlags("[$]","g");
    function quote_repl(s)
     {return caml_jsbytes_of_string(s).replace(quote_repl_re,"$$$$")}
    function global_replace(r,s,s_by)
     {r.lastIndex = 0;
      var _eq_=quote_repl(s_by);
      return caml_js_to_byte_string(caml_jsbytes_of_string(s).replace(r,_eq_))}
    function replace_first(r,s,s_by)
     {var
       match=r.ignoreCase | 0,
       match$0=r.multiline | 0,
       flags=0 === match?0 === match$0?"":"m":0 === match$0?"i":"mi",
       r$0=new regExp_withFlags(r.source,flags),
       _ep_=quote_repl(s_by);
      return caml_js_to_byte_string
              (caml_jsbytes_of_string(s).replace(r$0,_ep_))}
    function list_of_js_array(a)
     {var idx$1=a.length - 1 | 0,accu=0,idx=idx$1;
      for(;;)
       {if(0 <= idx)
         {var
           idx$0=idx - 1 | 0,
           accu$0=[0,blunt_str_array_get(a,idx),accu],
           accu=accu$0,
           idx=idx$0;
          continue}
        return accu}}
    function split(r,s)
     {r.lastIndex = 0;
      return list_of_js_array(caml_jsbytes_of_string(s).split(r))}
    function bounded_split(r,s,i)
     {r.lastIndex = 0;
      return list_of_js_array(caml_jsbytes_of_string(s).split(r,i))}
    var quote_re=regexp(cst);
    function quote(s)
     {return caml_js_to_byte_string
              (caml_jsbytes_of_string(s).replace(quote_re,"\\$&"))}
    function regexp_string(s){return regexp(quote(s))}
    function regexp_string_case_fold(s){return regexp_case_fold(quote(s))}
    var
     Js_of_ocaml_Regexp=
      [0,
       regexp,
       regexp_case_fold,
       regexp_with_flag,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_forward,
       matched_string,
       matched_group,
       global_replace,
       replace_first,
       split,
       bounded_split];
    caml_register_global(1626,Js_of_ocaml_Regexp,"Js_of_ocaml__Regexp");
    var Local_exn=[248,cst_Js_of_ocaml_Url_Local_exn,caml_fresh_oo_id(0)];
    function interrupt(param){throw Local_exn}
    var
     plus_re=regexp_string(cst$0),
     plus_re_js_string=new regExp_withFlags("\\+","g");
    function urldecode_js_string_string(s)
     {plus_re_js_string.lastIndex = 0;
      return caml_js_to_byte_string
              (unescape(s.replace(plus_re_js_string," ")))}
    function urldecode(s)
     {return caml_js_to_byte_string
              (unescape
                (caml_jsbytes_of_string(global_replace(plus_re,s,cst$1))))}
    function urlencode(opt,s)
     {if(opt)var sth=opt[1],with_plus=sth;else var with_plus=1;
      if(with_plus)
       {var s$0=caml_js_to_byte_string(escape(caml_jsbytes_of_string(s)));
        return global_replace(plus_re,s$0,cst_2B)}
      return caml_js_to_byte_string(escape(caml_jsbytes_of_string(s)))}
    var
     Not_an_http_protocol=
      [248,cst_Js_of_ocaml_Url_Not_an_http_protocol,caml_fresh_oo_id(0)],
     default_http_port=80,
     default_https_port=443;
    function path_of_path_string(s)
     {var l=caml_ml_string_length(s);
      function aux(i)
       {try
         {var _en_=caml_call3(Stdlib_string[18],s,i,47),j=_en_}
        catch(_eo_)
         {_eo_ = caml_wrap_exception(_eo_);
          if(_eo_ !== Not_found)throw _eo_;
          var j=l}
        var word=caml_call3(Stdlib_string[4],s,i,j - i | 0);
        return l <= j?[0,word,0]:[0,word,aux(j + 1 | 0)]}
      var a=aux(0);
      if(a)
       if(! caml_string_notequal(a[1],cst$2))
        {var _em_=a[2];
         if(! _em_)return 0;
         if(! caml_string_notequal(_em_[1],cst$3))if(! _em_[2])return _p_}
      return a}
    function encode_arguments(l)
     {function _eh_(param)
       {var
         v=param[2],
         n=param[1],
         _ej_=urlencode(0,v),
         _ek_=caml_call2(Stdlib[17],cst$4,_ej_),
         _el_=urlencode(0,n);
        return caml_call2(Stdlib[17],_el_,_ek_)}
      var _ei_=caml_call2(Stdlib_list[17],_eh_,l);
      return caml_call2(Stdlib_string[7],cst$5,_ei_)}
    function decode_arguments_js_string(s)
     {var
       arr=s.split(caml_call2(Stdlib_string[1],1,38).toString()),
       len=arr.length;
      function aux(acc,idx)
       {var idx$0=idx;
        for(;;)
         {if(0 <= idx$0)
           try
            {var
              _d$_=idx$0 - 1 | 0,
              _ea_=
               function(s)
                {function _ef_(param)
                  {var
                    y=param[2],
                    x=param[1],
                    _eg_=urldecode_js_string_string(y);
                   return [0,urldecode_js_string_string(x),_eg_]}
                 var
                  index=
                   s.indexOf(caml_call2(Stdlib_string[1],1,61).toString());
                 if(0 <= index)
                  var
                   _ed_=s.slice(index + 1 | 0),
                   _ee_=[0,s.slice(0,index),_ed_];
                 else
                  var _ee_=t37;
                 return caml_call3(Optdef[7],_ee_,interrupt,_ef_)},
              _eb_=
               aux
                ([0,caml_call3(Optdef[7],arr[idx$0],interrupt,_ea_),acc],_d$_);
             return _eb_}
           catch(_ec_)
            {_ec_ = caml_wrap_exception(_ec_);
             if(_ec_ === Local_exn)
              {var idx$1=idx$0 - 1 | 0,idx$0=idx$1;continue}
             throw _ec_}
          return acc}}
      return aux(0,len - 1 | 0)}
    function decode_arguments(s)
     {return decode_arguments_js_string(caml_jsbytes_of_string(s))}
    var
     url_re=
      new
       regExp_withFlags
       (caml_jsbytes_of_string
         (cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0_9a_zA_Z_0_9A_Fa_f_0_9)),
     file_re=new regExp_withFlags(caml_jsbytes_of_string(cst_Ff_Ii_Ll_Ee));
    function url_of_js_string(s)
     {function _dS_(res)
       {var
         prot_string=caml_call2(Optdef[8],res[1],interrupt),
         match=caml_js_to_byte_string(prot_string.toLowerCase());
        if(caml_string_notequal(match,cst_file$0))
         if(caml_string_notequal(match,cst_file$1))
          {if(caml_string_notequal(match,cst_http))
            if(caml_string_notequal(match,cst_http$0))
             {if(caml_string_notequal(match,cst_https))
               if(caml_string_notequal(match,cst_https$0))
                var switch$0=1,switch$1=0;
               else
                var switch$1=1;
              else
               var switch$1=1;
              if(switch$1)var ssl=1,switch$0=2}
            else
             var switch$0=0;
           else
            var switch$0=0;
           switch(switch$0)
            {case 0:var ssl=0,switch$2=1;break;
             case 1:var switch$2=0;break;
             default:var switch$2=1}
           if(switch$2)
            {var
              _d2_=function(param){return caml_jsbytes_of_string(cst$7)},
              path_str=
               urldecode_js_string_string(caml_call2(Optdef[8],res[6],_d2_)),
              _d3_=function(param){return caml_jsbytes_of_string(cst$8)},
              _d4_=
               urldecode_js_string_string(caml_call2(Optdef[8],res[10],_d3_)),
              _d5_=function(param){return caml_jsbytes_of_string(cst$9)},
              _d6_=
               decode_arguments_js_string(caml_call2(Optdef[8],res[8],_d5_)),
              _d7_=path_of_path_string(path_str),
              _d8_=function(param){return caml_jsbytes_of_string(cst$10)},
              s=caml_js_to_byte_string(caml_call2(Optdef[8],res[4],_d8_)),
              _d9_=
               caml_string_notequal(s,cst$6)?caml_int_of_string(s):ssl?443:80,
              url=
               [0,
                urldecode_js_string_string
                 (caml_call2(Optdef[8],res[2],interrupt)),
                _d9_,
                _d7_,
                path_str,
                _d6_,
                _d4_],
              _d__=ssl?[1,url]:[0,url];
             return [0,_d__]}}
        throw Not_an_http_protocol}
      function _dT_(param)
       {function _dV_(res)
         {var
           path_str=
            urldecode_js_string_string(caml_call2(Optdef[8],res[2],interrupt));
          function _dY_(param){return caml_jsbytes_of_string(cst$11)}
          var _dZ_=caml_js_to_byte_string(caml_call2(Optdef[8],res[6],_dY_));
          function _d0_(param){return caml_jsbytes_of_string(cst$12)}
          var
           _d1_=
            decode_arguments_js_string(caml_call2(Optdef[8],res[4],_d0_));
          return [0,[2,[0,path_of_path_string(path_str),path_str,_d1_,_dZ_]]]}
        function _dW_(param){return 0}
        var _dX_=file_re.exec(s);
        return caml_call3(Opt[7],_dX_,_dW_,_dV_)}
      var _dU_=url_re.exec(s);
      return caml_call3(Opt[7],_dU_,_dT_,_dS_)}
    function url_of_string(s)
     {return url_of_js_string(caml_jsbytes_of_string(s))}
    function string_of_url(param)
     {switch(param[0])
       {case 0:
         var
          match=param[1],
          frag=match[6],
          args=match[5],
          path=match[3],
          port=match[2],
          host=match[1];
         if(caml_string_notequal(frag,cst$13))
          var _df_=urlencode(0,frag),_dg_=caml_call2(Stdlib[17],cst$14,_df_);
         else
          var _dg_=cst$21;
         if(args)
          var
           _dh_=encode_arguments(args),
           _di_=caml_call2(Stdlib[17],cst$15,_dh_);
         else
          var _di_=cst$20;
         var
          _dj_=caml_call2(Stdlib[17],_di_,_dg_),
          _dk_=function(x){return urlencode(0,x)},
          _dl_=caml_call2(Stdlib_list[17],_dk_,path),
          _dm_=caml_call2(Stdlib_string[7],cst$16,_dl_),
          _dn_=caml_call2(Stdlib[17],_dm_,_dj_),
          _do_=caml_call2(Stdlib[17],cst$17,_dn_);
         if(80 === port)
          var _dp_=cst$18;
         else
          var
           _dt_=caml_call1(Stdlib[22],port),
           _dp_=caml_call2(Stdlib[17],cst$19,_dt_);
         var
          _dq_=caml_call2(Stdlib[17],_dp_,_do_),
          _dr_=urlencode(0,host),
          _ds_=caml_call2(Stdlib[17],_dr_,_dq_);
         return caml_call2(Stdlib[17],cst_http$1,_ds_);
        case 1:
         var
          match$0=param[1],
          frag$0=match$0[6],
          args$0=match$0[5],
          path$0=match$0[3],
          port$0=match$0[2],
          host$0=match$0[1];
         if(caml_string_notequal(frag$0,cst$22))
          var
           _du_=urlencode(0,frag$0),
           _dv_=caml_call2(Stdlib[17],cst$23,_du_);
         else
          var _dv_=cst$30;
         if(args$0)
          var
           _dw_=encode_arguments(args$0),
           _dx_=caml_call2(Stdlib[17],cst$24,_dw_);
         else
          var _dx_=cst$29;
         var
          _dy_=caml_call2(Stdlib[17],_dx_,_dv_),
          _dz_=function(x){return urlencode(0,x)},
          _dA_=caml_call2(Stdlib_list[17],_dz_,path$0),
          _dB_=caml_call2(Stdlib_string[7],cst$25,_dA_),
          _dC_=caml_call2(Stdlib[17],_dB_,_dy_),
          _dD_=caml_call2(Stdlib[17],cst$26,_dC_);
         if(443 === port$0)
          var _dE_=cst$27;
         else
          var
           _dI_=caml_call1(Stdlib[22],port$0),
           _dE_=caml_call2(Stdlib[17],cst$28,_dI_);
         var
          _dF_=caml_call2(Stdlib[17],_dE_,_dD_),
          _dG_=urlencode(0,host$0),
          _dH_=caml_call2(Stdlib[17],_dG_,_dF_);
         return caml_call2(Stdlib[17],cst_https$1,_dH_);
        default:
         var
          match$1=param[1],
          frag$1=match$1[4],
          args$1=match$1[3],
          path$1=match$1[1];
         if(caml_string_notequal(frag$1,cst$31))
          var
           _dJ_=urlencode(0,frag$1),
           _dK_=caml_call2(Stdlib[17],cst$32,_dJ_);
         else
          var _dK_=cst$36;
         if(args$1)
          var
           _dL_=encode_arguments(args$1),
           _dM_=caml_call2(Stdlib[17],cst$33,_dL_);
         else
          var _dM_=cst$35;
         var
          _dN_=caml_call2(Stdlib[17],_dM_,_dK_),
          _dO_=function(x){return urlencode(0,x)},
          _dP_=caml_call2(Stdlib_list[17],_dO_,path$1),
          _dQ_=caml_call2(Stdlib_string[7],cst$34,_dP_),
          _dR_=caml_call2(Stdlib[17],_dQ_,_dN_);
         return caml_call2(Stdlib[17],cst_file$2,_dR_)}}
    var _q_=caml_call1(Optdef[2],_g_.location);
    if(caml_call1(Optdef[5],_q_))
     var _r_=_g_.location;
    else
     var
      t29="",
      t40=function(param,_de_){return 0},
      t39=function(param,_dd_){return 0},
      t38=function(param){return 0},
      _r_=
       {"href":t29,
        "protocol":t29,
        "host":t29,
        "hostname":t29,
        "port":t29,
        "pathname":t29,
        "search":t29,
        "hash":t29,
        "origin":t37,
        "reload":caml_js_wrap_meth_callback(t38),
        "replace":caml_js_wrap_meth_callback(t39),
        "assign":caml_js_wrap_meth_callback(t40)};
    var
     host=urldecode_js_string_string(_r_.hostname),
     protocol=urldecode_js_string_string(_r_.protocol),
     _s_=0,
     port=
      function(param)
        {try
          {var _db_=[0,caml_int_of_string(caml_js_to_byte_string(_r_.port))];
           return _db_}
         catch(_dc_)
          {_dc_ = caml_wrap_exception(_dc_);
           if(_dc_[1] === Failure)return 0;
           throw _dc_}}
       (_s_),
     path_string=urldecode_js_string_string(_r_.pathname),
     path=path_of_path_string(path_string),
     _t_=_r_.search.charAt(0) === "?"?_r_.search.slice(1):_r_.search,
     arguments$0=decode_arguments_js_string(_t_);
    function get_fragment(param)
     {function _c9_(res){return caml_js_to_string(res[1])}
      function _c__(param){return cst$37}
      var _c$_=new regExp_withFlags("#(.*)"),_da_=_r_.href.match(_c$_);
      return caml_call3(Opt[7],_da_,_c__,_c9_)}
    function set_fragment(s)
     {return _r_.hash = caml_jsbytes_of_string(urlencode(0,s))}
    function get$2(param){return url_of_js_string(_r_.href)}
    function set$0(u)
     {return _r_.href = caml_jsbytes_of_string(string_of_url(u))}
    var
     as_string=urldecode_js_string_string(_r_.href),
     Js_of_ocaml_Url=
      [0,
       urldecode,
       urlencode,
       default_http_port,
       default_https_port,
       path_of_path_string,
       encode_arguments,
       decode_arguments,
       url_of_string,
       string_of_url,
       [0,
        host,
        port,
        protocol,
        path_string,
        path,
        arguments$0,
        get_fragment,
        set_fragment,
        get$2,
        set$0,
        as_string]];
    caml_register_global(1630,Js_of_ocaml_Url,"Js_of_ocaml__Url");
    var Js_of_ocaml_Lib_version=[0,js_of_ocaml_version,git_version];
    caml_register_global
     (1631,Js_of_ocaml_Lib_version,"Js_of_ocaml__Lib_version");
    function update_file(name,content)
     {var oc=caml_call1(Stdlib[49],name);
      caml_call2(Stdlib[55],oc,content);
      return caml_call1(Stdlib[65],oc)}
    function set_channel_flusher(out_channel,f)
     {var
       f$0=
        caml_js_wrap_callback
         (function(s){return caml_call1(f,caml_js_to_byte_string(s))});
      return runtime.caml_ml_set_channel_output(out_channel,f$0)}
    function set_channel_filler(in_channel,f)
     {var f$0=caml_js_wrap_callback(f);
      return runtime.caml_ml_set_channel_refill(in_channel,f$0)}
    function mount(path,f)
     {return runtime.caml_mount_autoload
              (path,
               caml_js_wrap_callback
                (function(prefix,path){return caml_call2(f,prefix,path)}))}
    var
     unmount=runtime.caml_unmount,
     _u_=runtime.caml_create_file,
     _v_=runtime.caml_read_file_content,
     Js_of_ocaml_Sys_js=
      [0,
       set_channel_flusher,
       set_channel_filler,
       function(_c8_){return runtime.caml_list_mount_point(_c8_)},
       unmount,
       mount,
       _v_,
       _u_,
       update_file,
       js_of_ocaml_version];
    caml_register_global(1632,Js_of_ocaml_Sys_js,"Js_of_ocaml__Sys_js");
    function empty_mutation_observer_init(param){return {}}
    var mutationObserver=Unsafe[1].MutationObserver;
    function is_supported$0(param)
     {return caml_call1(Optdef[5],mutationObserver)}
    function observe
     (node,
      f,
      child_list,
      attributes,
      character_data,
      subtree,
      attribute_old_value,
      character_data_old_value,
      attribute_filter,
      param)
     {function opt_iter(x,f)
       {if(x){var x$0=x[1];return caml_call1(f,x$0)}return 0}
      var obs=new mutationObserver(caml_js_wrap_callback(f)),cfg={};
      opt_iter(child_list,function(v){return cfg.childList = v});
      opt_iter(attributes,function(v){return cfg.attributes = v});
      opt_iter(character_data,function(v){return cfg.characterData = v});
      opt_iter(subtree,function(v){return cfg.subtree = v});
      opt_iter
       (attribute_old_value,function(v){return cfg.attributeOldValue = v});
      opt_iter
       (character_data_old_value,
        function(v){return cfg.characterDataOldValue = v});
      opt_iter
       (attribute_filter,
        function(l)
         {return cfg.attributeFilter
                 =
                 caml_js_from_array(caml_call1(Stdlib_array[12],l))});
      obs.observe(node,cfg);
      return obs}
    var
     Js_of_ocaml_MutationObserver=
      [0,empty_mutation_observer_init,mutationObserver,is_supported$0,observe];
    caml_register_global
     (1633,Js_of_ocaml_MutationObserver,"Js_of_ocaml__MutationObserver");
    var obj=Unsafe[1].Object;
    function create$1(param){return new obj()}
    function add$0(t,k,v){return t[k.concat("_")] = v}
    function remove(t,k){return delete t[k.concat("_")]}
    function find(t,k){return t[k.concat("_")]}
    function keys(t)
     {var
       key_array=Unsafe[1].Object.keys(t),
       res=[0,0],
       _c4_=key_array.length - 1 | 0,
       _c3_=0;
      if(! (_c4_ < 0))
       {var i=_c3_;
        for(;;)
         {var
           _c5_=function(param){return caml_call1(Stdlib[3],cst_Jstable_keys)},
           key=caml_call2(Optdef[8],key_array[i],_c5_),
           _c6_=res[1];
          res[1] = [0,key.substring(0,key.length - 1 | 0),_c6_];
          var _c7_=i + 1 | 0;
          if(_c4_ !== i){var i=_c7_;continue}
          break}}
      return caml_call1(Stdlib_list[9],res[1])}
    var Js_of_ocaml_Jstable=[0,create$1,add$0,remove,find,keys];
    caml_register_global(1634,Js_of_ocaml_Jstable,"Js_of_ocaml__Jstable");
    var json=runtime.caml_json(0);
    function reviver(this$0,key,value)
     {return typeof value == typeof "foo"?caml_js_to_byte_string(value):value}
    var input_reviver=caml_js_wrap_meth_callback(reviver);
    function unsafe_input(s){return json.parse(s,input_reviver)}
    var mlString_constr=dummy_string.constructor;
    function output_reviver(key,value)
     {return value instanceof mlString_constr
              ?caml_jsbytes_of_string(value)
              :value}
    function output(obj){return json.stringify(obj,output_reviver)}
    var Js_of_ocaml_Json=[0,output,unsafe_input];
    caml_register_global(1635,Js_of_ocaml_Json,"Js_of_ocaml__Json");
    function string_of_name(param)
     {var _c2_=param;
      if(74 <= _c2_)
       {if(111 <= _c2_)
         switch(_c2_)
          {case 111:return cst_palevioletred;
           case 112:return cst_papayawhip;
           case 113:return cst_peachpuff;
           case 114:return cst_peru;
           case 115:return cst_pink;
           case 116:return cst_plum;
           case 117:return cst_powderblue;
           case 118:return cst_purple;
           case 119:return cst_red;
           case 120:return cst_rosybrown;
           case 121:return cst_royalblue;
           case 122:return cst_saddlebrown;
           case 123:return cst_salmon;
           case 124:return cst_sandybrown;
           case 125:return cst_seagreen;
           case 126:return cst_seashell;
           case 127:return cst_sienna;
           case 128:return cst_silver;
           case 129:return cst_skyblue;
           case 130:return cst_slateblue;
           case 131:return cst_slategray;
           case 132:return cst_slategrey;
           case 133:return cst_snow;
           case 134:return cst_springgreen;
           case 135:return cst_steelblue;
           case 136:return cst_tan;
           case 137:return cst_teal;
           case 138:return cst_thistle;
           case 139:return cst_tomato;
           case 140:return cst_turquoise;
           case 141:return cst_violet;
           case 142:return cst_wheat;
           case 143:return cst_white;
           case 144:return cst_whitesmoke;
           case 145:return cst_yellow;
           default:return cst_yellowgreen}
        switch(_c2_)
         {case 74:return cst_lightpink;
          case 75:return cst_lightsalmon;
          case 76:return cst_lightseagreen;
          case 77:return cst_lightskyblue;
          case 78:return cst_lightslategray;
          case 79:return cst_lightslategrey;
          case 80:return cst_lightsteelblue;
          case 81:return cst_lightyellow;
          case 82:return cst_lime;
          case 83:return cst_limegreen;
          case 84:return cst_linen;
          case 85:return cst_magenta;
          case 86:return cst_maroon;
          case 87:return cst_mediumaquamarine;
          case 88:return cst_mediumblue;
          case 89:return cst_mediumorchid;
          case 90:return cst_mediumpurple;
          case 91:return cst_mediumseagreen;
          case 92:return cst_mediumslateblue;
          case 93:return cst_mediumspringgreen;
          case 94:return cst_mediumturquoise;
          case 95:return cst_mediumvioletred;
          case 96:return cst_midnightblue;
          case 97:return cst_mintcream;
          case 98:return cst_mistyrose;
          case 99:return cst_moccasin;
          case 100:return cst_navajowhite;
          case 101:return cst_navy;
          case 102:return cst_oldlace;
          case 103:return cst_olive;
          case 104:return cst_olivedrab;
          case 105:return cst_orange;
          case 106:return cst_orangered;
          case 107:return cst_orchid;
          case 108:return cst_palegoldenrod;
          case 109:return cst_palegreen;
          default:return cst_paleturquoise}}
      if(37 <= _c2_)
       switch(_c2_)
        {case 37:return cst_darkslategrey;
         case 38:return cst_darkturquoise;
         case 39:return cst_darkviolet;
         case 40:return cst_deeppink;
         case 41:return cst_deepskyblue;
         case 42:return cst_dimgray;
         case 43:return cst_dimgrey;
         case 44:return cst_dodgerblue;
         case 45:return cst_firebrick;
         case 46:return cst_floralwhite;
         case 47:return cst_forestgreen;
         case 48:return cst_fuchsia;
         case 49:return cst_gainsboro;
         case 50:return cst_ghostwhite;
         case 51:return cst_gold;
         case 52:return cst_goldenrod;
         case 53:return cst_gray;
         case 54:return cst_grey;
         case 55:return cst_green;
         case 56:return cst_greenyellow;
         case 57:return cst_honeydew;
         case 58:return cst_hotpink;
         case 59:return cst_indianred;
         case 60:return cst_indigo;
         case 61:return cst_ivory;
         case 62:return cst_khaki;
         case 63:return cst_lavender;
         case 64:return cst_lavenderblush;
         case 65:return cst_lawngreen;
         case 66:return cst_lemonchiffon;
         case 67:return cst_lightblue;
         case 68:return cst_lightcoral;
         case 69:return cst_lightcyan;
         case 70:return cst_lightgoldenrodyellow;
         case 71:return cst_lightgray;
         case 72:return cst_lightgreen;
         default:return cst_lightgrey}
      switch(_c2_)
       {case 0:return cst_aliceblue;
        case 1:return cst_antiquewhite;
        case 2:return cst_aqua;
        case 3:return cst_aquamarine;
        case 4:return cst_azure;
        case 5:return cst_beige;
        case 6:return cst_bisque;
        case 7:return cst_black;
        case 8:return cst_blanchedalmond;
        case 9:return cst_blue;
        case 10:return cst_blueviolet;
        case 11:return cst_brown;
        case 12:return cst_burlywood;
        case 13:return cst_cadetblue;
        case 14:return cst_chartreuse;
        case 15:return cst_chocolate;
        case 16:return cst_coral;
        case 17:return cst_cornflowerblue;
        case 18:return cst_cornsilk;
        case 19:return cst_crimson;
        case 20:return cst_cyan;
        case 21:return cst_darkblue;
        case 22:return cst_darkcyan;
        case 23:return cst_darkgoldenrod;
        case 24:return cst_darkgray;
        case 25:return cst_darkgreen;
        case 26:return cst_darkgrey;
        case 27:return cst_darkkhaki;
        case 28:return cst_darkmagenta;
        case 29:return cst_darkolivegreen;
        case 30:return cst_darkorange;
        case 31:return cst_darkorchid;
        case 32:return cst_darkred;
        case 33:return cst_darksalmon;
        case 34:return cst_darkseagreen;
        case 35:return cst_darkslateblue;
        default:return cst_darkslategray}}
    function name_of_string(s)
     {var switch$0=caml_string_compare(s,cst_lightgrey$0);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 73;
        var switch$1=caml_string_compare(s,cst_paleturquoise$0);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 110;
          var switch$2=caml_string_compare(s,cst_skyblue$0);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 129;
            var switch$3=caml_string_compare(s,cst_thistle$0);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 138;
              if(! caml_string_notequal(s,cst_tomato$0))return 139;
              if(! caml_string_notequal(s,cst_turquoise$0))return 140;
              if(! caml_string_notequal(s,cst_violet$0))return 141;
              if(! caml_string_notequal(s,cst_wheat$0))return 142;
              if(! caml_string_notequal(s,cst_white$0))return 143;
              if(! caml_string_notequal(s,cst_whitesmoke$0))return 144;
              if(! caml_string_notequal(s,cst_yellow$0))return 145;
              if(! caml_string_notequal(s,cst_yellowgreen$0))return 146}
            else
             {if(! caml_string_notequal(s,cst_slateblue$0))return 130;
              if(! caml_string_notequal(s,cst_slategray$0))return 131;
              if(! caml_string_notequal(s,cst_slategrey$0))return 132;
              if(! caml_string_notequal(s,cst_snow$0))return 133;
              if(! caml_string_notequal(s,cst_springgreen$0))return 134;
              if(! caml_string_notequal(s,cst_steelblue$0))return 135;
              if(! caml_string_notequal(s,cst_tan$0))return 136;
              if(! caml_string_notequal(s,cst_teal$0))return 137}}
          else
           {var switch$4=caml_string_compare(s,cst_rosybrown$0);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 120;
              if(! caml_string_notequal(s,cst_royalblue$0))return 121;
              if(! caml_string_notequal(s,cst_saddlebrown$0))return 122;
              if(! caml_string_notequal(s,cst_salmon$0))return 123;
              if(! caml_string_notequal(s,cst_sandybrown$0))return 124;
              if(! caml_string_notequal(s,cst_seagreen$0))return 125;
              if(! caml_string_notequal(s,cst_seashell$0))return 126;
              if(! caml_string_notequal(s,cst_sienna$0))return 127;
              if(! caml_string_notequal(s,cst_silver$0))return 128}
            else
             {if(! caml_string_notequal(s,cst_palevioletred$0))return 111;
              if(! caml_string_notequal(s,cst_papayawhip$0))return 112;
              if(! caml_string_notequal(s,cst_peachpuff$0))return 113;
              if(! caml_string_notequal(s,cst_peru$0))return 114;
              if(! caml_string_notequal(s,cst_pink$0))return 115;
              if(! caml_string_notequal(s,cst_plum$0))return 116;
              if(! caml_string_notequal(s,cst_powderblue$0))return 117;
              if(! caml_string_notequal(s,cst_purple$0))return 118;
              if(! caml_string_notequal(s,cst_red$0))return 119}}}
        else
         {var switch$5=caml_string_compare(s,cst_mediumslateblue$0);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 92;
            var switch$6=caml_string_compare(s,cst_navy$0);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 101;
              if(! caml_string_notequal(s,cst_oldlace$0))return 102;
              if(! caml_string_notequal(s,cst_olive$0))return 103;
              if(! caml_string_notequal(s,cst_olivedrab$0))return 104;
              if(! caml_string_notequal(s,cst_orange$0))return 105;
              if(! caml_string_notequal(s,cst_orangered$0))return 106;
              if(! caml_string_notequal(s,cst_orchid$0))return 107;
              if(! caml_string_notequal(s,cst_palegoldenrod$0))return 108;
              if(! caml_string_notequal(s,cst_palegreen$0))return 109}
            else
             {if(! caml_string_notequal(s,cst_mediumspringgreen$0))return 93;
              if(! caml_string_notequal(s,cst_mediumturquoise$0))return 94;
              if(! caml_string_notequal(s,cst_mediumvioletred$0))return 95;
              if(! caml_string_notequal(s,cst_midnightblue$0))return 96;
              if(! caml_string_notequal(s,cst_mintcream$0))return 97;
              if(! caml_string_notequal(s,cst_mistyrose$0))return 98;
              if(! caml_string_notequal(s,cst_moccasin$0))return 99;
              if(! caml_string_notequal(s,cst_navajowhite$0))return 100}}
          else
           {var switch$7=caml_string_compare(s,cst_limegreen$0);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 83;
              if(! caml_string_notequal(s,cst_linen$0))return 84;
              if(! caml_string_notequal(s,cst_magenta$0))return 85;
              if(! caml_string_notequal(s,cst_maroon$0))return 86;
              if(! caml_string_notequal(s,cst_mediumaquamarine$0))return 87;
              if(! caml_string_notequal(s,cst_mediumblue$0))return 88;
              if(! caml_string_notequal(s,cst_mediumorchid$0))return 89;
              if(! caml_string_notequal(s,cst_mediumpurple$0))return 90;
              if(! caml_string_notequal(s,cst_mediumseagreen$0))return 91}
            else
             {if(! caml_string_notequal(s,cst_lightpink$0))return 74;
              if(! caml_string_notequal(s,cst_lightsalmon$0))return 75;
              if(! caml_string_notequal(s,cst_lightseagreen$0))return 76;
              if(! caml_string_notequal(s,cst_lightskyblue$0))return 77;
              if(! caml_string_notequal(s,cst_lightslategray$0))return 78;
              if(! caml_string_notequal(s,cst_lightslategrey$0))return 79;
              if(! caml_string_notequal(s,cst_lightsteelblue$0))return 80;
              if(! caml_string_notequal(s,cst_lightyellow$0))return 81;
              if(! caml_string_notequal(s,cst_lime$0))return 82}}}}
      else
       {var switch$8=caml_string_compare(s,cst_darkslategray$0);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 36;
          var switch$9=caml_string_compare(s,cst_greenyellow$0);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 56;
            var switch$10=caml_string_compare(s,cst_lavenderblush$0);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 64;
              if(! caml_string_notequal(s,cst_lawngreen$0))return 65;
              if(! caml_string_notequal(s,cst_lemonchiffon$0))return 66;
              if(! caml_string_notequal(s,cst_lightblue$0))return 67;
              if(! caml_string_notequal(s,cst_lightcoral$0))return 68;
              if(! caml_string_notequal(s,cst_lightcyan$0))return 69;
              if(! caml_string_notequal(s,cst_lightgoldenrodyellow$0))
               return 70;
              if(! caml_string_notequal(s,cst_lightgray$0))return 71;
              if(! caml_string_notequal(s,cst_lightgreen$0))return 72}
            else
             {if(! caml_string_notequal(s,cst_grey$0))return 54;
              if(! caml_string_notequal(s,cst_honeydew$0))return 57;
              if(! caml_string_notequal(s,cst_hotpink$0))return 58;
              if(! caml_string_notequal(s,cst_indianred$0))return 59;
              if(! caml_string_notequal(s,cst_indigo$0))return 60;
              if(! caml_string_notequal(s,cst_ivory$0))return 61;
              if(! caml_string_notequal(s,cst_khaki$0))return 62;
              if(! caml_string_notequal(s,cst_lavender$0))return 63}}
          else
           {var switch$11=caml_string_compare(s,cst_floralwhite$0);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 46;
              if(! caml_string_notequal(s,cst_forestgreen$0))return 47;
              if(! caml_string_notequal(s,cst_fuchsia$0))return 48;
              if(! caml_string_notequal(s,cst_gainsboro$0))return 49;
              if(! caml_string_notequal(s,cst_ghostwhite$0))return 50;
              if(! caml_string_notequal(s,cst_gold$0))return 51;
              if(! caml_string_notequal(s,cst_goldenrod$0))return 52;
              if(! caml_string_notequal(s,cst_gray$0))return 53;
              if(! caml_string_notequal(s,cst_green$0))return 55}
            else
             {if(! caml_string_notequal(s,cst_darkslategrey$0))return 37;
              if(! caml_string_notequal(s,cst_darkturquoise$0))return 38;
              if(! caml_string_notequal(s,cst_darkviolet$0))return 39;
              if(! caml_string_notequal(s,cst_deeppink$0))return 40;
              if(! caml_string_notequal(s,cst_deepskyblue$0))return 41;
              if(! caml_string_notequal(s,cst_dimgray$0))return 42;
              if(! caml_string_notequal(s,cst_dimgrey$0))return 43;
              if(! caml_string_notequal(s,cst_dodgerblue$0))return 44;
              if(! caml_string_notequal(s,cst_firebrick$0))return 45}}}
        else
         {var switch$12=caml_string_compare(s,cst_cornsilk$0);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 18;
            var switch$13=caml_string_compare(s,cst_darkkhaki$0);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 27;
              if(! caml_string_notequal(s,cst_darkmagenta$0))return 28;
              if(! caml_string_notequal(s,cst_darkolivegreen$0))return 29;
              if(! caml_string_notequal(s,cst_darkorange$0))return 30;
              if(! caml_string_notequal(s,cst_darkorchid$0))return 31;
              if(! caml_string_notequal(s,cst_darkred$0))return 32;
              if(! caml_string_notequal(s,cst_darksalmon$0))return 33;
              if(! caml_string_notequal(s,cst_darkseagreen$0))return 34;
              if(! caml_string_notequal(s,cst_darkslateblue$0))return 35}
            else
             {if(! caml_string_notequal(s,cst_crimson$0))return 19;
              if(! caml_string_notequal(s,cst_cyan$0))return 20;
              if(! caml_string_notequal(s,cst_darkblue$0))return 21;
              if(! caml_string_notequal(s,cst_darkcyan$0))return 22;
              if(! caml_string_notequal(s,cst_darkgoldenrod$0))return 23;
              if(! caml_string_notequal(s,cst_darkgray$0))return 24;
              if(! caml_string_notequal(s,cst_darkgreen$0))return 25;
              if(! caml_string_notequal(s,cst_darkgrey$0))return 26}}
          else
           {var switch$14=caml_string_compare(s,cst_blue$0);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 9;
              if(! caml_string_notequal(s,cst_blueviolet$0))return 10;
              if(! caml_string_notequal(s,cst_brown$0))return 11;
              if(! caml_string_notequal(s,cst_burlywood$0))return 12;
              if(! caml_string_notequal(s,cst_cadetblue$0))return 13;
              if(! caml_string_notequal(s,cst_chartreuse$0))return 14;
              if(! caml_string_notequal(s,cst_chocolate$0))return 15;
              if(! caml_string_notequal(s,cst_coral$0))return 16;
              if(! caml_string_notequal(s,cst_cornflowerblue$0))return 17}
            else
             {if(! caml_string_notequal(s,cst_aliceblue$0))return 0;
              if(! caml_string_notequal(s,cst_antiquewhite$0))return 1;
              if(! caml_string_notequal(s,cst_aqua$0))return 2;
              if(! caml_string_notequal(s,cst_aquamarine$0))return 3;
              if(! caml_string_notequal(s,cst_azure$0))return 4;
              if(! caml_string_notequal(s,cst_beige$0))return 5;
              if(! caml_string_notequal(s,cst_bisque$0))return 6;
              if(! caml_string_notequal(s,cst_black$0))return 7;
              if(! caml_string_notequal(s,cst_blanchedalmond$0))return 8}}}}
      throw [0,
             Invalid_argument,
             caml_call2(Stdlib[17],s,cst_is_not_a_valid_color_name)]}
    function rgb_of_name(param)
     {var _c1_=param;
      if(74 <= _c1_)
       {if(111 <= _c1_)
         switch(_c1_)
          {case 111:return _bp_;
           case 112:return _bq_;
           case 113:return _br_;
           case 114:return _bs_;
           case 115:return _bt_;
           case 116:return _bu_;
           case 117:return _bv_;
           case 118:return _bw_;
           case 119:return _bx_;
           case 120:return _by_;
           case 121:return _bz_;
           case 122:return _bA_;
           case 123:return _bB_;
           case 124:return _bC_;
           case 125:return _bD_;
           case 126:return _bE_;
           case 127:return _bF_;
           case 128:return _bG_;
           case 129:return _bH_;
           case 130:return _bI_;
           case 131:return _bJ_;
           case 132:return _bK_;
           case 133:return _bL_;
           case 134:return _bM_;
           case 135:return _bN_;
           case 136:return _bO_;
           case 137:return _bP_;
           case 138:return _bQ_;
           case 139:return _bR_;
           case 140:return _bS_;
           case 141:return _bT_;
           case 142:return _bU_;
           case 143:return _bV_;
           case 144:return _bW_;
           case 145:return _bX_;
           default:return _bY_}
        switch(_c1_)
         {case 74:return _aQ_;
          case 75:return _aR_;
          case 76:return _aS_;
          case 77:return _aT_;
          case 78:return _aU_;
          case 79:return _aV_;
          case 80:return _aW_;
          case 81:return _aX_;
          case 82:return _aY_;
          case 83:return _aZ_;
          case 84:return _a0_;
          case 85:return _a1_;
          case 86:return _a2_;
          case 87:return _a3_;
          case 88:return _a4_;
          case 89:return _a5_;
          case 90:return _a6_;
          case 91:return _a7_;
          case 92:return _a8_;
          case 93:return _a9_;
          case 94:return _a__;
          case 95:return _a$_;
          case 96:return _ba_;
          case 97:return _bb_;
          case 98:return _bc_;
          case 99:return _bd_;
          case 100:return _be_;
          case 101:return _bf_;
          case 102:return _bg_;
          case 103:return _bh_;
          case 104:return _bi_;
          case 105:return _bj_;
          case 106:return _bk_;
          case 107:return _bl_;
          case 108:return _bm_;
          case 109:return _bn_;
          default:return _bo_}}
      if(37 <= _c1_)
       switch(_c1_)
        {case 37:return _af_;
         case 38:return _ag_;
         case 39:return _ah_;
         case 40:return _ai_;
         case 41:return _aj_;
         case 42:return _ak_;
         case 43:return _al_;
         case 44:return _am_;
         case 45:return _an_;
         case 46:return _ao_;
         case 47:return _ap_;
         case 48:return _aq_;
         case 49:return _ar_;
         case 50:return _as_;
         case 51:return _at_;
         case 52:return _au_;
         case 53:return _av_;
         case 54:return _aw_;
         case 55:return _ax_;
         case 56:return _ay_;
         case 57:return _az_;
         case 58:return _aA_;
         case 59:return _aB_;
         case 60:return _aC_;
         case 61:return _aD_;
         case 62:return _aE_;
         case 63:return _aF_;
         case 64:return _aG_;
         case 65:return _aH_;
         case 66:return _aI_;
         case 67:return _aJ_;
         case 68:return _aK_;
         case 69:return _aL_;
         case 70:return _aM_;
         case 71:return _aN_;
         case 72:return _aO_;
         default:return _aP_}
      switch(_c1_)
       {case 0:return _w_;
        case 1:return _x_;
        case 2:return _y_;
        case 3:return _z_;
        case 4:return _A_;
        case 5:return _B_;
        case 6:return _C_;
        case 7:return _D_;
        case 8:return _E_;
        case 9:return _F_;
        case 10:return _G_;
        case 11:return _H_;
        case 12:return _I_;
        case 13:return _J_;
        case 14:return _K_;
        case 15:return _L_;
        case 16:return _M_;
        case 17:return _N_;
        case 18:return _O_;
        case 19:return _P_;
        case 20:return _Q_;
        case 21:return _R_;
        case 22:return _S_;
        case 23:return _T_;
        case 24:return _U_;
        case 25:return _V_;
        case 26:return _W_;
        case 27:return _X_;
        case 28:return _Y_;
        case 29:return _Z_;
        case 30:return ___;
        case 31:return _$_;
        case 32:return _aa_;
        case 33:return _ab_;
        case 34:return _ac_;
        case 35:return _ad_;
        default:return _ae_}}
    function rgb(a,r,g,b)
     {if(a){var a$0=a[1];return [3,[0,r,g,b,a$0]]}return [1,[0,r,g,b]]}
    function hsl(a,h,s,l)
     {if(a){var a$0=a[1];return [6,[0,h,s,l,a$0]]}return [5,[0,h,s,l]]}
    function string_of_t(param)
     {switch(param[0])
       {case 0:var n=param[1];return string_of_name(n);
        case 1:
         var match=param[1],b=match[3],g=match[2],r=match[1];
         return caml_call4(Stdlib_printf[4],_bZ_,r,g,b);
        case 2:
         var match$0=param[1],b$0=match$0[3],g$0=match$0[2],r$0=match$0[1];
         return caml_call4(Stdlib_printf[4],_b0_,r$0,g$0,b$0);
        case 3:
         var
          match$1=param[1],
          a=match$1[4],
          b$1=match$1[3],
          g$1=match$1[2],
          r$1=match$1[1];
         return caml_call5(Stdlib_printf[4],_b1_,r$1,g$1,b$1,a);
        case 4:
         var
          match$2=param[1],
          a$0=match$2[4],
          b$2=match$2[3],
          g$2=match$2[2],
          r$2=match$2[1];
         return caml_call5(Stdlib_printf[4],_b2_,r$2,g$2,b$2,a$0);
        case 5:
         var match$3=param[1],l=match$3[3],s=match$3[2],h=match$3[1];
         return caml_call4(Stdlib_printf[4],_b3_,h,s,l);
        default:
         var
          match$4=param[1],
          a$1=match$4[4],
          l$0=match$4[3],
          s$0=match$4[2],
          h$0=match$4[1];
         return caml_call5(Stdlib_printf[4],_b4_,h$0,s$0,l$0,a$1)}}
    function hex_of_rgb(param)
     {var blue=param[3],green=param[2],red=param[1];
      function in_range(i)
       {var _cY_=i < 0?1:0,_cZ_=_cY_ || (255 < i?1:0);
        if(_cZ_)
         {var _c0_=caml_call1(Stdlib[22],i);
          throw [0,
                 Invalid_argument,
                 caml_call2(Stdlib[17],_c0_,cst_is_out_of_valid_range)]}
        return _cZ_}
      in_range(red);
      in_range(green);
      in_range(blue);
      return caml_call4(Stdlib_printf[4],_b5_,red,green,blue)}
    function js_t_of_js_string(s)
     {var
       rgb_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d)),
       rgb_pct_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d$0)),
       rgba_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d)),
       rgba_pct_re=
        new
         regExp_withFlags
         (caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d$0)),
       hsl_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_hsl_s_d_s_d_s_d)),
       hsla_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_hsla_s_d_s_d_s_d_d_d));
      if(! (rgb_re.test(s) | 0))
       if(! (rgba_re.test(s) | 0))
        if(! (rgb_pct_re.test(s) | 0))
         if(! (rgba_pct_re.test(s) | 0))
          if(! (hsl_re.test(s) | 0))
           if(! (hsla_re.test(s) | 0))
            {if(caml_call2(Stdlib_list[31],caml_js_to_string(s),_b6_))
              return s;
             throw [0,
                    Invalid_argument,
                    caml_call2
                     (Stdlib[17],caml_js_to_string(s),cst_is_not_a_valid_color)]}
      return s}
    function js(c)
     {if(0 === c[0]){var n=c[1];return string_of_name(n).toString()}
      return string_of_t(c).toString()}
    function ml(c)
     {var s=caml_js_to_string(c);
      try
       {var _cO_=[0,name_of_string(s)];return _cO_}
      catch(_cP_)
       {_cP_ = caml_wrap_exception(_cP_);
        if(_cP_[1] === Invalid_argument)
         {var
           fail=
            function(param)
             {throw [0,
                     Invalid_argument,
                     caml_call2(Stdlib[17],s,cst_is_not_a_valid_color$0)]},
           re_rgb=regexp(cst_rgba_d_d_d_d_d),
           re_rgb_pct=regexp(cst_rgba_d_d_d_d_d$0),
           re_hsl=regexp(cst_hsla_d_d_d_d_d),
           i_of_s_o=
            function(param)
             {if(param)
               {var i=param[1];
                try
                 {var _cW_=caml_int_of_string(i);return _cW_}
                catch(_cX_)
                 {_cX_ = caml_wrap_exception(_cX_);
                  if(_cX_[1] === Invalid_argument)
                   var s=_cX_[2];
                  else
                   {if(_cX_[1] !== Failure)throw _cX_;var s=_cX_[2]}
                  var
                   _cU_=caml_call2(Stdlib[17],cst$38,s),
                   _cV_=caml_call2(Stdlib[17],i,_cU_);
                  throw [0,
                         Invalid_argument,
                         caml_call2(Stdlib[17],cst_color_conversion_error,_cV_)]}}
              return fail(0)},
           f_of_s=
            function(f)
             {try
               {var _cS_=caml_float_of_string(f);return _cS_}
              catch(_cT_)
               {_cT_ = caml_wrap_exception(_cT_);
                if(_cT_[1] === Invalid_argument)
                 var s=_cT_[2];
                else
                 {if(_cT_[1] !== Failure)throw _cT_;var s=_cT_[2]}
                var
                 _cQ_=caml_call2(Stdlib[17],cst$39,s),
                 _cR_=caml_call2(Stdlib[17],f,_cQ_);
                throw [0,
                       Invalid_argument,
                       caml_call2(Stdlib[17],cst_color_conversion_error$0,_cR_)]}},
           match=string_match(re_rgb,s,0);
          if(match)
           {var
             r=match[1],
             red=matched_group(r,2),
             green=matched_group(r,3),
             blue=matched_group(r,4),
             alpha=matched_group(r,5),
             match$0=matched_group(r,1);
            if(match$0)
             {var _cw_=match$0[1];
              if(! caml_string_notequal(_cw_,cst_rgb))
               {if(alpha)return fail(0);
                var _cA_=i_of_s_o(blue),_cB_=i_of_s_o(green);
                return [1,[0,i_of_s_o(red),_cB_,_cA_]]}
              if(! caml_string_notequal(_cw_,cst_rgba))
               {if(alpha)
                 {var
                   a=alpha[1],
                   _cx_=f_of_s(a),
                   _cy_=i_of_s_o(blue),
                   _cz_=i_of_s_o(green);
                  return [3,[0,i_of_s_o(red),_cz_,_cy_,_cx_]]}
                return fail(0)}}
            return fail(0)}
          var match$1=string_match(re_rgb_pct,s,0);
          if(match$1)
           {var
             r$0=match$1[1],
             red$0=matched_group(r$0,2),
             green$0=matched_group(r$0,3),
             blue$0=matched_group(r$0,4),
             alpha$0=matched_group(r$0,5),
             match$2=matched_group(r$0,1);
            if(match$2)
             {var _cC_=match$2[1];
              if(! caml_string_notequal(_cC_,cst_rgb$0))
               {if(alpha$0)return fail(0);
                var _cG_=i_of_s_o(blue$0),_cH_=i_of_s_o(green$0);
                return [2,[0,i_of_s_o(red$0),_cH_,_cG_]]}
              if(! caml_string_notequal(_cC_,cst_rgba$0))
               {if(alpha$0)
                 {var
                   a$0=alpha$0[1],
                   _cD_=f_of_s(a$0),
                   _cE_=i_of_s_o(blue$0),
                   _cF_=i_of_s_o(green$0);
                  return [4,[0,i_of_s_o(red$0),_cF_,_cE_,_cD_]]}
                return fail(0)}}
            return fail(0)}
          var match$3=string_match(re_hsl,s,0);
          if(match$3)
           {var
             r$1=match$3[1],
             red$1=matched_group(r$1,2),
             green$1=matched_group(r$1,3),
             blue$1=matched_group(r$1,4),
             alpha$1=matched_group(r$1,5),
             match$4=matched_group(r$1,1);
            if(match$4)
             {var _cI_=match$4[1];
              if(! caml_string_notequal(_cI_,cst_hsl))
               {if(alpha$1)return fail(0);
                var _cM_=i_of_s_o(blue$1),_cN_=i_of_s_o(green$1);
                return [5,[0,i_of_s_o(red$1),_cN_,_cM_]]}
              if(! caml_string_notequal(_cI_,cst_hsla))
               {if(alpha$1)
                 {var
                   a$1=alpha$1[1],
                   _cJ_=f_of_s(a$1),
                   _cK_=i_of_s_o(blue$1),
                   _cL_=i_of_s_o(green$1);
                  return [6,[0,i_of_s_o(red$1),_cL_,_cK_,_cJ_]]}
                return fail(0)}}
            return fail(0)}
          return fail(0)}
        throw _cP_}}
    function string_of_t$0(param)
     {if(typeof param === "number")
       return cst_0;
      else
       switch(param[0])
        {case 0:
          var f=param[1];return caml_call3(Stdlib_printf[4],_b7_,f,cst_em$0);
         case 1:
          var f$0=param[1];
          return caml_call3(Stdlib_printf[4],_b8_,f$0,cst_ex);
         case 2:
          var f$1=param[1];
          return caml_call3(Stdlib_printf[4],_b9_,f$1,cst_px);
         case 3:
          var f$2=param[1];
          return caml_call3(Stdlib_printf[4],_b__,f$2,cst_gd);
         case 4:
          var f$3=param[1];
          return caml_call3(Stdlib_printf[4],_b$_,f$3,cst_rem);
         case 5:
          var f$4=param[1];
          return caml_call3(Stdlib_printf[4],_ca_,f$4,cst_vw);
         case 6:
          var f$5=param[1];
          return caml_call3(Stdlib_printf[4],_cb_,f$5,cst_vh);
         case 7:
          var f$6=param[1];
          return caml_call3(Stdlib_printf[4],_cc_,f$6,cst_vm);
         case 8:
          var f$7=param[1];
          return caml_call3(Stdlib_printf[4],_cd_,f$7,cst_ch);
         case 9:
          var f$8=param[1];
          return caml_call3(Stdlib_printf[4],_ce_,f$8,cst_mm);
         case 10:
          var f$9=param[1];
          return caml_call3(Stdlib_printf[4],_cf_,f$9,cst_cm);
         case 11:
          var f$10=param[1];
          return caml_call3(Stdlib_printf[4],_cg_,f$10,cst_in);
         case 12:
          var f$11=param[1];
          return caml_call3(Stdlib_printf[4],_ch_,f$11,cst_pt);
         default:
          var f$12=param[1];
          return caml_call3(Stdlib_printf[4],_ci_,f$12,cst_pc)}}
    function js$0(t){return string_of_t$0(t).toString()}
    function ml$0(t)
     {var s=caml_js_to_string(t);
      if(runtime.caml_string_equal(s,cst_0$0))return 0;
      function fail(param)
       {throw [0,
               Invalid_argument,
               caml_call2(Stdlib[17],s,cst_is_not_a_valid_length)]}
      var re=regexp(cst_d_d_s_S),match=string_match(re,s,0);
      if(match)
       {var r=match[1],match$0=matched_group(r,1);
        if(match$0)
         {var f=match$0[1];
          try
           {var _cu_=caml_float_of_string(f)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Invalid_argument)
             {var s$0=exn[2];
              throw [0,
                     Invalid_argument,
                     caml_call2(Stdlib[17],cst_length_conversion_error,s$0)]}
            throw exn}
          var f$0=_cu_}
        else
         var f$0=fail(0);
        var match$1=matched_group(r,2);
        if(match$1)
         {var _cv_=match$1[1],switch$0=caml_string_compare(_cv_,cst_pc$0);
          if(0 <= switch$0)
           {if(! (0 < switch$0))return [13,f$0];
            if(! caml_string_notequal(_cv_,cst_pt$0))return [12,f$0];
            if(! caml_string_notequal(_cv_,cst_px$0))return [2,f$0];
            if(! caml_string_notequal(_cv_,cst_rem$0))return [4,f$0];
            if(! caml_string_notequal(_cv_,cst_vh$0))return [6,f$0];
            if(! caml_string_notequal(_cv_,cst_vm$0))return [7,f$0];
            if(! caml_string_notequal(_cv_,cst_vw$0))return [5,f$0]}
          else
           {if(! caml_string_notequal(_cv_,cst_ch$0))return [8,f$0];
            if(! caml_string_notequal(_cv_,cst_cm$0))return [10,f$0];
            if(! caml_string_notequal(_cv_,cst_em$1))return [0,f$0];
            if(! caml_string_notequal(_cv_,cst_ex$0))return [1,f$0];
            if(! caml_string_notequal(_cv_,cst_gd$0))return [3,f$0];
            if(! caml_string_notequal(_cv_,cst_in$0))return [11,f$0];
            if(! caml_string_notequal(_cv_,cst_mm$0))return [9,f$0]}
          return fail(0)}
        return fail(0)}
      return fail(0)}
    var Length=[0,string_of_t$0,js$0,ml$0];
    function string_of_t$1(param)
     {switch(param[0])
       {case 0:
         var f=param[1];return caml_call3(Stdlib_printf[4],_cj_,f,cst_deg);
        case 1:
         var f$0=param[1];
         return caml_call3(Stdlib_printf[4],_ck_,f$0,cst_grad);
        case 2:
         var f$1=param[1];
         return caml_call3(Stdlib_printf[4],_cl_,f$1,cst_rad);
        default:
         var f$2=param[1];
         return caml_call3(Stdlib_printf[4],_cm_,f$2,cst_turns)}}
    function js$1(t){return string_of_t$1(t).toString()}
    function ml$1(j)
     {var s=caml_js_to_string(j),re=regexp(cst_d_d_deg_grad_rad_turns);
      function fail(param)
       {throw [0,
               Invalid_argument,
               caml_call2(Stdlib[17],s,cst_is_not_a_valid_length$0)]}
      var match=string_match(re,s,0);
      if(match)
       {var r=match[1],match$0=matched_group(r,1);
        if(match$0)
         {var f=match$0[1];
          try
           {var _cs_=caml_float_of_string(f)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Invalid_argument)
             {var s$0=exn[2];
              throw [0,
                     Invalid_argument,
                     caml_call2(Stdlib[17],cst_length_conversion_error$0,s$0)]}
            throw exn}
          var f$0=_cs_}
        else
         var f$0=fail(0);
        var match$1=matched_group(r,2);
        if(match$1)
         {var _ct_=match$1[1];
          if(! caml_string_notequal(_ct_,cst_deg$0))return [0,f$0];
          if(! caml_string_notequal(_ct_,cst_grad$0))return [1,f$0];
          if(! caml_string_notequal(_ct_,cst_rad$0))return [2,f$0];
          if(! caml_string_notequal(_ct_,cst_turns$0))return [3,f$0]}
        return fail(0)}
      return fail(0)}
    var
     Angle=[0,string_of_t$1,js$1,ml$1],
     Js_of_ocaml_CSS=
      [0,
       [0,
        string_of_name,
        rgb_of_name,
        hex_of_rgb,
        rgb,
        hsl,
        string_of_t,
        js,
        ml,
        js_t_of_js_string],
       Length,
       Angle];
    caml_register_global(1637,Js_of_ocaml_CSS,"Js_of_ocaml__CSS");
    function listen(opt,target,typ,cb)
     {if(opt)var sth=opt[1],capture=sth;else var capture=0;
      var _cr_=! ! capture;
      return addEventListener
              (target,
               typ,
               full_handler(function(n,e){return ! ! caml_call2(cb,n,e)}),
               _cr_)}
    var Js_of_ocaml_Dom_events=[0,Event$0,listen,removeEventListener];
    caml_register_global
     (1638,Js_of_ocaml_Dom_events,"Js_of_ocaml__Dom_events");
    var
     xmlns="http://www.w3.org/2000/svg",
     SVGError=[248,cst_Js_of_ocaml_Dom_svg_SVGError,caml_fresh_oo_id(0)];
    function createElement$0(doc,name)
     {return doc.createElementNS(xmlns,name.toString())}
    function unsafeCreateElement$0(doc,name){return createElement$0(doc,name)}
    function createA$0(doc){return unsafeCreateElement$0(doc,cst_a$2)}
    function createAltGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_altglyph)}
    function createAltGlyphDef(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphdef)}
    function createAltGlyphItem(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphitem)}
    function createAnimate(doc){return unsafeCreateElement$0(doc,cst_animate)}
    function createAnimateColor(doc)
     {return unsafeCreateElement$0(doc,cst_animatecolor)}
    function createAnimateMotion(doc)
     {return unsafeCreateElement$0(doc,cst_animatemotion)}
    function createAnimateTransform(doc)
     {return unsafeCreateElement$0(doc,cst_animatetransform)}
    function createCircle(doc){return unsafeCreateElement$0(doc,cst_circle)}
    function createClipPath(doc)
     {return unsafeCreateElement$0(doc,cst_clippath)}
    function createCursor(doc){return unsafeCreateElement$0(doc,cst_cursor)}
    function createDefs(doc){return unsafeCreateElement$0(doc,cst_defs)}
    function createDesc(doc){return unsafeCreateElement$0(doc,cst_desc)}
    function createEllipse(doc){return unsafeCreateElement$0(doc,cst_ellipse)}
    function createFilter(doc){return unsafeCreateElement$0(doc,cst_filter)}
    function createFont(doc){return unsafeCreateElement$0(doc,cst_font)}
    function createFontFace(doc)
     {return unsafeCreateElement$0(doc,cst_font_face)}
    function createFontFaceFormat(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_format)}
    function createFontFaceName(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_name)}
    function createFontFaceSrc(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_src)}
    function createFontFaceUri(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_uri)}
    function createForeignObject(doc)
     {return unsafeCreateElement$0(doc,cst_foreignobject)}
    function createG(doc){return unsafeCreateElement$0(doc,cst_g$0)}
    function createGlyph(doc){return unsafeCreateElement$0(doc,cst_glyph)}
    function createGlyphRef(doc)
     {return unsafeCreateElement$0(doc,cst_glyphref)}
    function createhkern(doc){return unsafeCreateElement$0(doc,cst_hkern)}
    function createImage(doc){return unsafeCreateElement$0(doc,cst_image)}
    function createLineElement(doc)
     {return unsafeCreateElement$0(doc,cst_line)}
    function createLinearElement(doc)
     {return unsafeCreateElement$0(doc,cst_lineargradient)}
    function createMask(doc){return unsafeCreateElement$0(doc,cst_mask)}
    function createMetaData(doc)
     {return unsafeCreateElement$0(doc,cst_metadata)}
    function createMissingGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_missing_glyph)}
    function createMPath(doc){return unsafeCreateElement$0(doc,cst_mpath)}
    function createPath(doc){return unsafeCreateElement$0(doc,cst_path)}
    function createPattern(doc){return unsafeCreateElement$0(doc,cst_pattern)}
    function createPolygon(doc){return unsafeCreateElement$0(doc,cst_polygon)}
    function createPolyline(doc)
     {return unsafeCreateElement$0(doc,cst_polyline)}
    function createRadialgradient(doc)
     {return unsafeCreateElement$0(doc,cst_radialgradient)}
    function createRect(doc){return unsafeCreateElement$0(doc,cst_rect)}
    function createScript$0(doc)
     {return unsafeCreateElement$0(doc,cst_script$2)}
    function createSet(doc){return unsafeCreateElement$0(doc,cst_set)}
    function createStop(doc){return unsafeCreateElement$0(doc,cst_stop)}
    function createStyle$0(doc){return unsafeCreateElement$0(doc,cst_style$2)}
    function createSvg(doc){return unsafeCreateElement$0(doc,cst_svg)}
    function createSwitch(doc){return unsafeCreateElement$0(doc,cst_switch)}
    function createSymbol(doc){return unsafeCreateElement$0(doc,cst_symbol)}
    function createTextElement(doc)
     {return unsafeCreateElement$0(doc,cst_text$0)}
    function createTextpath(doc)
     {return unsafeCreateElement$0(doc,cst_textpath)}
    function createTitle$0(doc){return unsafeCreateElement$0(doc,cst_title$2)}
    function createTref(doc){return unsafeCreateElement$0(doc,cst_tref)}
    function createTspan(doc){return unsafeCreateElement$0(doc,cst_tspan)}
    function createUse(doc){return unsafeCreateElement$0(doc,cst_use)}
    function createView(doc){return unsafeCreateElement$0(doc,cst_view)}
    function createvkern(doc){return unsafeCreateElement$0(doc,cst_vkern)}
    var svg_element=Unsafe[1].SVGElement,document$1=Unsafe[1].document;
    function getElementById$0(id)
     {function _co_(e){if(e instanceof svg_element)return e;throw Not_found}
      function _cp_(param){throw Not_found}
      var _cq_=Unsafe[1].document.getElementById(id.toString());
      return caml_call3(Opt[7],_cq_,_cp_,_co_)}
    function element$2(e){return e instanceof svg_element?e:no_handler}
    function unsafeCoerce$0(e,tag)
     {var _cn_=tag.toString();
      return e.tagName.toLowerCase() === _cn_?e:no_handler}
    function a$0(e){return unsafeCoerce$0(e,cst_a$3)}
    function altGlyph(e){return unsafeCoerce$0(e,cst_altglyph$0)}
    function altGlyphDef(e){return unsafeCoerce$0(e,cst_altglyphdef$0)}
    function altGlyphItem(e){return unsafeCoerce$0(e,cst_altglyphitem$0)}
    function animate(e){return unsafeCoerce$0(e,cst_animate$0)}
    function animateColor(e){return unsafeCoerce$0(e,cst_animatecolor$0)}
    function animateMotion(e){return unsafeCoerce$0(e,cst_animatemotion$0)}
    function animateTransform(e)
     {return unsafeCoerce$0(e,cst_animatetransform$0)}
    function circle(e){return unsafeCoerce$0(e,cst_circle$0)}
    function clipPath(e){return unsafeCoerce$0(e,cst_clippath$0)}
    function cursor(e){return unsafeCoerce$0(e,cst_cursor$0)}
    function defs(e){return unsafeCoerce$0(e,cst_defs$0)}
    function desc(e){return unsafeCoerce$0(e,cst_desc$0)}
    function ellipse(e){return unsafeCoerce$0(e,cst_ellipse$0)}
    function filter(e){return unsafeCoerce$0(e,cst_filter$0)}
    function font(e){return unsafeCoerce$0(e,cst_font$0)}
    function fontFace(e){return unsafeCoerce$0(e,cst_font_face$0)}
    function fontFaceFormat(e)
     {return unsafeCoerce$0(e,cst_font_face_format$0)}
    function fontFaceName(e){return unsafeCoerce$0(e,cst_font_face_name$0)}
    function fontFaceSrc(e){return unsafeCoerce$0(e,cst_font_face_src$0)}
    function fontFaceUri(e){return unsafeCoerce$0(e,cst_font_face_uri$0)}
    function foreignObject(e){return unsafeCoerce$0(e,cst_foreignobject$0)}
    function g(e){return unsafeCoerce$0(e,cst_g$1)}
    function glyph(e){return unsafeCoerce$0(e,cst_glyph$0)}
    function glyphRef(e){return unsafeCoerce$0(e,cst_glyphref$0)}
    function hkern(e){return unsafeCoerce$0(e,cst_hkern$0)}
    function image(e){return unsafeCoerce$0(e,cst_image$0)}
    function lineElement(e){return unsafeCoerce$0(e,cst_line$0)}
    function linearElement(e){return unsafeCoerce$0(e,cst_lineargradient$0)}
    function mask(e){return unsafeCoerce$0(e,cst_mask$0)}
    function metaData(e){return unsafeCoerce$0(e,cst_metadata$0)}
    function missingGlyph(e){return unsafeCoerce$0(e,cst_missing_glyph$0)}
    function mPath(e){return unsafeCoerce$0(e,cst_mpath$0)}
    function path$0(e){return unsafeCoerce$0(e,cst_path$0)}
    function pattern(e){return unsafeCoerce$0(e,cst_pattern$0)}
    function polygon(e){return unsafeCoerce$0(e,cst_polygon$0)}
    function polyline(e){return unsafeCoerce$0(e,cst_polyline$0)}
    function radialgradient(e){return unsafeCoerce$0(e,cst_radialgradient$0)}
    function rect(e){return unsafeCoerce$0(e,cst_rect$0)}
    function script$0(e){return unsafeCoerce$0(e,cst_script$3)}
    function set$1(e){return unsafeCoerce$0(e,cst_set$0)}
    function stop(e){return unsafeCoerce$0(e,cst_stop$0)}
    function style$0(e){return unsafeCoerce$0(e,cst_style$3)}
    function svg(e){return unsafeCoerce$0(e,cst_svg$0)}
    function switch$0(e){return unsafeCoerce$0(e,cst_switch$0)}
    function symbol(e){return unsafeCoerce$0(e,cst_symbol$0)}
    function textElement(e){return unsafeCoerce$0(e,cst_text$1)}
    function textpath(e){return unsafeCoerce$0(e,cst_textpath$0)}
    function title$0(e){return unsafeCoerce$0(e,cst_title$3)}
    function tref(e){return unsafeCoerce$0(e,cst_tref$0)}
    function tspan(e){return unsafeCoerce$0(e,cst_tspan$0)}
    function use(e){return unsafeCoerce$0(e,cst_use$0)}
    function view(e){return unsafeCoerce$0(e,cst_view$0)}
    function vkern(e){return unsafeCoerce$0(e,cst_vkern$0)}
    var
     Js_of_ocaml_Dom_svg=
      [0,
       xmlns,
       SVGError,
       createElement$0,
       createA$0,
       createAltGlyph,
       createAltGlyphDef,
       createAltGlyphItem,
       createAnimate,
       createAnimateColor,
       createAnimateMotion,
       createAnimateTransform,
       createCircle,
       createClipPath,
       createCursor,
       createDefs,
       createDesc,
       createEllipse,
       createFilter,
       createFont,
       createFontFace,
       createFontFaceFormat,
       createFontFaceName,
       createFontFaceSrc,
       createFontFaceUri,
       createForeignObject,
       createG,
       createGlyph,
       createGlyphRef,
       createhkern,
       createImage,
       createLineElement,
       createLinearElement,
       createMask,
       createMetaData,
       createMissingGlyph,
       createMPath,
       createPath,
       createPattern,
       createPolygon,
       createPolyline,
       createRadialgradient,
       createRect,
       createScript$0,
       createSet,
       createStop,
       createStyle$0,
       createSvg,
       createSwitch,
       createSymbol,
       createTextElement,
       createTextpath,
       createTitle$0,
       createTref,
       createTspan,
       createUse,
       createView,
       createvkern,
       svg_element,
       document$1,
       getElementById$0,
       [0,
        element$2,
        a$0,
        altGlyph,
        altGlyphDef,
        altGlyphItem,
        animate,
        animateColor,
        animateMotion,
        animateTransform,
        circle,
        clipPath,
        cursor,
        defs,
        desc,
        ellipse,
        filter,
        font,
        fontFace,
        fontFaceFormat,
        fontFaceName,
        fontFaceSrc,
        fontFaceUri,
        foreignObject,
        g,
        glyph,
        glyphRef,
        hkern,
        image,
        lineElement,
        linearElement,
        mask,
        metaData,
        missingGlyph,
        mPath,
        path$0,
        pattern,
        polygon,
        polyline,
        radialgradient,
        rect,
        script$0,
        set$1,
        stop,
        style$0,
        svg,
        switch$0,
        symbol,
        textElement,
        textpath,
        title$0,
        tref,
        tspan,
        use,
        view,
        vkern]];
    caml_register_global(1639,Js_of_ocaml_Dom_svg,"Js_of_ocaml__Dom_svg");
    function withCredentials(b)
     {var init={};init.withCredentials = ! ! b;return init}
    var
     eventSource=Unsafe[1].EventSource,
     eventSource_options=Unsafe[1].EventSource,
     Js_of_ocaml_EventSource=
      [0,withCredentials,eventSource,eventSource_options,addEventListener];
    caml_register_global
     (1640,Js_of_ocaml_EventSource,"Js_of_ocaml__EventSource");
    var
     console=runtime.caml_js_get_console(0),
     Js_of_ocaml_Firebug=[0,console];
    caml_register_global(1641,Js_of_ocaml_Firebug,"Js_of_ocaml__Firebug");
    function empty_position_options(param){return {}}
    var
     x=Unsafe[1].navigator,
     geolocation=caml_call1(Optdef[5],x)?x.geolocation:x;
    function is_supported$1(param){return caml_call1(Optdef[5],geolocation)}
    var
     Js_of_ocaml_Geolocation=
      [0,empty_position_options,geolocation,is_supported$1];
    caml_register_global
     (1642,Js_of_ocaml_Geolocation,"Js_of_ocaml__Geolocation");
    function object_options(param){return {"localeMatcher":"best fit"}}
    function options(param)
     {return {"localeMatcher":"best fit",
              "usage":"sort",
              "sensitivity":"variant",
              "ignorePunctuation":false$0,
              "numeric":false$0,
              "caseFirst":"false"}}
    var Collator=[0,object_options,options];
    function options$0(param)
     {return {"localeMatcher":"best fit",
              "timeZone":t37,
              "hour12":t37,
              "hourCycle":t37,
              "formatMatcher":"best fit",
              "weekday":t37,
              "era":t37,
              "year":t37,
              "month":t37,
              "day":t37,
              "hour":t37,
              "minute":t37,
              "second":t37,
              "timeZoneName":t37}}
    var DateTimeFormat=[0,object_options,options$0];
    function options$1(param)
     {return {"localeMatcher":"best fit",
              "style":"decimal",
              "currency":t37,
              "currencyDisplay":t37,
              "useGrouping":true$0,
              "minimumIntegerDigits":t37,
              "minimumFractionDigits":t37,
              "maximumFractionDigits":t37,
              "minimumSignificantDigits":t37,
              "maximumSignificantDigits":t37}}
    var NumberFormat=[0,object_options,options$1];
    function options$2(param)
     {return {"localeMatcher":"best fit","type":"cardinal"}}
    var
     PluralRules=[0,object_options,options$2],
     intl=Unsafe[1].Intl,
     collator_constr=Unsafe[1].Intl.Collator,
     dateTimeFormat_constr=Unsafe[1].Intl.DateTimeFormat,
     numberFormat_constr=Unsafe[1].Intl.NumberFormat,
     pluralRules_constr=Unsafe[1].Intl.PluralRules;
    function is_supported$2(param){return caml_call1(Optdef[5],intl)}
    var
     Js_of_ocaml_Intl=
      [0,
       Collator,
       DateTimeFormat,
       NumberFormat,
       PluralRules,
       intl,
       collator_constr,
       dateTimeFormat_constr,
       numberFormat_constr,
       pluralRules_constr,
       is_supported$2];
    caml_register_global(1643,Js_of_ocaml_Intl,"Js_of_ocaml__Intl");
    var Js_of_ocaml$0=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    caml_register_global(1644,Js_of_ocaml$0,"Js_of_ocaml");
    return}
  (function(){return this}()));


//# 1 ".js/re/re.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_equal=runtime.caml_equal,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_compare=runtime.caml_int_compare,
     caml_lessthan=runtime.caml_lessthan,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_make_vect=runtime.caml_make_vect,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_new_string=runtime.caml_new_string,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Re_cset_pick=caml_new_string("Re_cset.pick"),
     cany=[0,[0,0,255],0],
     cst_eps=caml_new_string("eps"),
     cst_cst=caml_new_string("cst"),
     cst_alt=caml_new_string("alt"),
     cst_seq=caml_new_string("seq"),
     cst_rep=caml_new_string("rep"),
     cst_mark=caml_new_string("mark"),
     cst_erase=caml_new_string("erase"),
     cst_before=caml_new_string("before"),
     cst_after=caml_new_string("after"),
     cst_pmark=caml_new_string("pmark"),
     cst_Non_greedy=caml_new_string("Non_greedy"),
     cst_Greedy=caml_new_string("Greedy"),
     cst_first=caml_new_string("first"),
     cst_short=caml_new_string("short"),
     cst_long=caml_new_string("long"),
     eps_expr=[0,0,0],
     cst_Group=caml_new_string("Group"),
     dummy_offset=[0,-1,-1],
     dummy_string=caml_new_string(""),
     cst_Beg_of_line=caml_new_string("Beg_of_line"),
     cst_End_of_line=caml_new_string("End_of_line"),
     cst_Beg_of_word=caml_new_string("Beg_of_word"),
     cst_End_of_word=caml_new_string("End_of_word"),
     cst_Not_bound=caml_new_string("Not_bound"),
     cst_Beg_of_str=caml_new_string("Beg_of_str"),
     cst_End_of_str=caml_new_string("End_of_str"),
     cst_Last_end_of_line=caml_new_string("Last_end_of_line"),
     cst_Start=caml_new_string("Start"),
     cst_Stop=caml_new_string("Stop"),
     cst_Set=caml_new_string("Set"),
     cst_Sequence=caml_new_string("Sequence"),
     cst_Alternative=caml_new_string("Alternative"),
     cst_Repeat=caml_new_string("Repeat"),
     cst_Sem=caml_new_string("Sem"),
     cst_Sem_greedy=caml_new_string("Sem_greedy"),
     cst_Group$0=caml_new_string("Group"),
     cst_No_group=caml_new_string("No_group"),
     cst_Nest=caml_new_string("Nest"),
     cst_Case=caml_new_string("Case"),
     cst_No_case=caml_new_string("No_case"),
     cst_Intersection=caml_new_string("Intersection"),
     cst_Complement=caml_new_string("Complement"),
     cst_Difference=caml_new_string("Difference"),
     cst_Pmark=caml_new_string("Pmark"),
     cst$1=caml_new_string(""),
     cst$2=caml_new_string(""),
     cst_Re_replace=caml_new_string("Re.replace"),
     cst_Re_replace$0=caml_new_string("Re.replace"),
     cst_Re_split=caml_new_string("Re.split"),
     cst_Re_split$0=caml_new_string("Re.split"),
     cst_Re_all=caml_new_string("Re.all"),
     cst_Re_all$0=caml_new_string("Re.all"),
     cst_Re_exec_partial=caml_new_string("Re.exec_partial"),
     cst_Re_execp=caml_new_string("Re.execp"),
     cst_Re_exec_opt=caml_new_string("Re.exec_opt"),
     cst_Re_exec=caml_new_string("Re.exec"),
     cst_Re_diff=caml_new_string("Re.diff"),
     cst_Re_compl=caml_new_string("Re.compl"),
     cst_Re_inter=caml_new_string("Re.inter"),
     cst_Re_repn=caml_new_string("Re.repn"),
     cst_Re_repn$0=caml_new_string("Re.repn"),
     cst$0=caml_new_string("\t "),
     cst_Re_Emacs_Parse_error=caml_new_string("Re__Emacs.Parse_error"),
     cst_Re_Emacs_Not_supported=caml_new_string("Re__Emacs.Not_supported"),
     cst_Str_replace_illegal_backslash_sequence=
      caml_new_string("Str.replace: illegal backslash sequence"),
     cst$5=caml_new_string(""),
     cst$4=caml_new_string(""),
     cst$3=caml_new_string(""),
     cst_Str_group_end=caml_new_string("Str.group_end"),
     cst_Str_group_beginning=caml_new_string("Str.group_beginning"),
     beg=[0,caml_new_string(""),0],
     cst_Re_Glob_Parse_error=caml_new_string("Re__Glob.Parse_error"),
     cst$6=caml_new_string(":]"),
     cst_lower=caml_new_string("lower"),
     cst_alnum=caml_new_string("alnum"),
     cst_ascii=caml_new_string("ascii"),
     cst_blank=caml_new_string("blank"),
     cst_cntrl=caml_new_string("cntrl"),
     cst_digit=caml_new_string("digit"),
     cst_graph=caml_new_string("graph"),
     cst_print=caml_new_string("print"),
     cst_punct=caml_new_string("punct"),
     cst_space=caml_new_string("space"),
     cst_upper=caml_new_string("upper"),
     cst_word=caml_new_string("word"),
     cst_xdigit=caml_new_string("xdigit"),
     cst_Invalid_pcre_class=caml_new_string("Invalid pcre class: "),
     cst_Re_Perl_Parse_error=caml_new_string("Re__Perl.Parse_error"),
     cst_Re_Perl_Not_supported=caml_new_string("Re__Perl.Not_supported"),
     posix_class_strings=
      caml_list_of_js_array
       ([caml_new_string("alnum"),
         caml_new_string("ascii"),
         caml_new_string("blank"),
         caml_new_string("cntrl"),
         caml_new_string("digit"),
         caml_new_string("lower"),
         caml_new_string("print"),
         caml_new_string("space"),
         caml_new_string("upper"),
         caml_new_string("word"),
         caml_new_string("punct"),
         caml_new_string("graph"),
         caml_new_string("xdigit")]),
     cst_Re_Posix_Parse_error=caml_new_string("Re__Posix.Parse_error"),
     cst_Re_Posix_Not_supported=caml_new_string("Re__Posix.Not_supported"),
     include=global_data.Stdlib__format,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Stdlib=global_data.Stdlib,
     Assert_failure=global_data.Assert_failure,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_map=global_data.Stdlib__map,
     Stdlib_set=global_data.Stdlib__set,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_hashtbl=global_data.Stdlib__hashtbl,
     Stdlib_char=global_data.Stdlib__char,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Stdlib_string=global_data.Stdlib__string,
     Not_found=global_data.Not_found,
     Stdlib_seq=global_data.Stdlib__seq,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Re=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    caml_register_global(134,Re,"Re__");
    var
     _bm_=
      [0,[12,59,[17,[0,caml_new_string("@ "),1,0],0]],caml_new_string(";@ ")],
     _bn_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<3>"),0],caml_new_string("<3>")]],
        [12,
         91,
         [17,
          [0,caml_new_string("@ "),1,0],
          [15,[17,[0,caml_new_string("@ "),1,0],[12,93,[17,0,0]]]]]]],
       caml_new_string("@[<3>[@ %a@ ]@]")],
     _bl_=[0,[12,34,[2,0,[12,34,0]]],caml_new_string('"%s"')],
     _bk_=
      [0,
       [17,[0,caml_new_string("@ "),1,0],[4,0,0,0,0]],
       caml_new_string("@ %d")],
     _bj_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<3>"),0],caml_new_string("<3>")]],
        [12,40,[2,0,[17,[0,caml_new_string("@ "),1,0],[15,[12,41,[17,0,0]]]]]]],
       caml_new_string("@[<3>(%s@ %a)@]")],
     _br_=[0,caml_new_string("lib/cset.ml"),153,9],
     _bo_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bp_=[0,[4,0,0,0,[12,45,[4,0,0,0,0]]],caml_new_string("%d-%d")],
     _bF_=[0,caml_new_string("lib/automata.ml"),360,21],
     _bw_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [11,caml_new_string("(Seq"),[17,[0,caml_new_string("@ "),1,0],0]]],
       caml_new_string("@[<2>(Seq@ ")],
     _bx_=[0,[12,32,[15,[12,41,[17,0,0]]]],caml_new_string(" %a)@]")],
     _by_=
      [0,
       [11,
        caml_new_string("(Exp "),
        [4,
         0,
         0,
         0,
         [11,caml_new_string(" ("),[15,[11,caml_new_string(") (eps))"),0]]]]],
       caml_new_string("(Exp %d (%a) (eps))")],
     _bz_=
      [0,
       [11,
        caml_new_string("(Exp "),
        [4,
         0,
         0,
         0,
         [11,
          caml_new_string(" ("),
          [15,[11,caml_new_string(") "),[15,[12,41,0]]]]]]],
       caml_new_string("(Exp %d (%a) %a)")],
     _bA_=
      [0,
       [18,
        [1,[0,[11,caml_new_string("<2>"),0],caml_new_string("<2>")]],
        [11,
         caml_new_string("(Match"),
         [17,[0,caml_new_string("@ "),1,0],[15,[12,41,[17,0,0]]]]]],
       caml_new_string("@[<2>(Match@ %a)@]")],
     _bB_=[0,[11,caml_new_string(" | "),0],caml_new_string(" | ")],
     _bC_=[0,[11,caml_new_string("()"),0],caml_new_string("()")],
     _bD_=[0,0,0],
     _bv_=[1,0],
     _bu_=[0,[12,32,[4,0,0,0,[12,45,[4,0,0,0,0]]]],caml_new_string(" %d-%d")],
     _bt_=[0,[4,0,0,0,[12,45,[4,0,0,0,0]]],caml_new_string("%d-%d")],
     _bI_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [12,
         40,
         [2,
          0,
          [11,
           caml_new_string(" ("),
           [4,0,0,0,[12,32,[4,0,0,0,[11,caml_new_string("))"),[17,0,0]]]]]]]]],
       caml_new_string("@[(%s (%d %d))@]")],
     _bK_=
      [0,
       [15,[17,[0,caml_new_string("@ "),1,0],[4,0,0,0,[15,0]]]],
       caml_new_string("%a@ %d%a")],
     _bQ_=[0,caml_new_string("lib/core.ml"),690,4],
     _cb_=[0,caml_new_string("lib/core.ml"),1149,24],
     _cc_=[0,caml_new_string("lib/core.ml"),1160,27],
     _bS_=[0,1],
     _bR_=[0,caml_new_string("lib/core.ml"),723,13],
     _bP_=[0,caml_new_string("lib/core.ml"),493,35],
     _bJ_=[0,0,0,0,0,0,0,0,0,0,0],
     _bO_=[0,170,[0,181,[0,186,[0,223,[0,255,0]]]]],
     _ch_=[0,1],
     _cg_=[0,1],
     _ce_=[0,caml_new_string(""),0],
     _cf_=[0,caml_new_string(""),0],
     _cd_=[0,45],
     _ci_=[0,748194550,8],
     _cj_=[0,748194550,10],
     _ck_=[0,748194550,13],
     _cl_=[0,748194550,9],
     _cm_=[0,-1,-1];
    function equal(x,y){return x === y?1:0}
    var compare=caml_int_compare;
    function to_int(x){return x}
    var pp=include[17];
    function intersect(x,y){return 0 !== (x & y)?1:0}
    function _a_(x,y){return x | y}
    var
     dummy=-1,
     inexistant=1,
     letter=2,
     not_letter=4,
     newline=8,
     lastnewline=16,
     search_boundary=32;
    function from_char(param)
     {if(170 <= param)
       if(187 <= param)
        var
         _iU_=param - 192 | 0,
         switch$0=54 < _iU_ >>> 0?56 <= _iU_?1:0:23 === _iU_?0:1;
       else
        var _iV_=param - 171 | 0,switch$0=14 < _iV_ >>> 0?1:10 === _iV_?1:0;
      else
       if(65 <= param)
        var
         _iW_=param - 91 | 0,
         switch$0=5 < _iW_ >>> 0?32 <= _iW_?0:1:4 === _iW_?1:0;
       else
        if(48 <= param)
         var switch$0=58 <= param?0:1;
        else
         {if(10 === param)return 12;var switch$0=0}
      return switch$0?letter:not_letter}
    var
     Re_Category=
      [0,
       _a_,
       from_char,
       dummy,
       inexistant,
       letter,
       not_letter,
       newline,
       lastnewline,
       search_boundary,
       to_int,
       equal,
       compare,
       intersect,
       pp];
    caml_register_global(136,Re_Category,"Re__Category");
    var
     _n_=include[13],
     _r_=include[17],
     _z_=include[25],
     _B_=include[27],
     _a5_=include[112],
     _b_=include[1],
     _c_=include[2],
     _d_=include[3],
     _e_=include[4],
     _f_=include[5],
     _g_=include[6],
     _h_=include[7],
     _i_=include[8],
     _j_=include[9],
     _k_=include[10],
     _l_=include[11],
     _m_=include[12],
     _o_=include[14],
     _p_=include[15],
     _q_=include[16],
     _s_=include[18],
     _t_=include[19],
     _u_=include[20],
     _v_=include[21],
     _w_=include[22],
     _x_=include[23],
     _y_=include[24],
     _A_=include[26],
     _C_=include[28],
     _D_=include[29],
     _E_=include[30],
     _F_=include[31],
     _G_=include[32],
     _H_=include[33],
     _I_=include[34],
     _J_=include[35],
     _K_=include[36],
     _L_=include[37],
     _M_=include[38],
     _N_=include[39],
     _O_=include[40],
     _P_=include[41],
     _Q_=include[42],
     _R_=include[43],
     _S_=include[44],
     _T_=include[45],
     _U_=include[46],
     _V_=include[47],
     _W_=include[48],
     _X_=include[49],
     _Y_=include[50],
     _Z_=include[51],
     ___=include[52],
     _$_=include[53],
     _aa_=include[54],
     _ab_=include[55],
     _ac_=include[56],
     _ad_=include[57],
     _ae_=include[58],
     _af_=include[59],
     _ag_=include[60],
     _ah_=include[61],
     _ai_=include[62],
     _aj_=include[63],
     _ak_=include[64],
     _al_=include[65],
     _am_=include[66],
     _an_=include[67],
     _ao_=include[68],
     _ap_=include[69],
     _aq_=include[70],
     _ar_=include[71],
     _as_=include[72],
     _at_=include[73],
     _au_=include[74],
     _av_=include[75],
     _aw_=include[76],
     _ax_=include[77],
     _ay_=include[78],
     _az_=include[79],
     _aA_=include[80],
     _aB_=include[81],
     _aC_=include[82],
     _aD_=include[83],
     _aE_=include[84],
     _aF_=include[85],
     _aG_=include[86],
     _aH_=include[87],
     _aI_=include[88],
     _aJ_=include[89],
     _aK_=include[90],
     _aL_=include[91],
     _aM_=include[92],
     _aN_=include[93],
     _aO_=include[94],
     _aP_=include[95],
     _aQ_=include[96],
     _aR_=include[97],
     _aS_=include[98],
     _aT_=include[99],
     _aU_=include[100],
     _aV_=include[101],
     _aW_=include[102],
     _aX_=include[103],
     _aY_=include[104],
     _aZ_=include[105],
     _a0_=include[106],
     _a1_=include[107],
     _a2_=include[108],
     _a3_=include[109],
     _a4_=include[111],
     _a6_=include[113],
     _a7_=include[114],
     _a8_=include[115],
     _a9_=include[116],
     _a__=include[117],
     _a$_=include[118],
     _ba_=include[119],
     _bb_=include[120],
     _bc_=include[121],
     _bd_=include[122],
     _be_=include[123],
     _bf_=include[124],
     _bg_=include[125],
     _bh_=include[126],
     _bi_=include[127];
    function pp_print_list(opt,pp,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=_B_;
        if(param$0)
         {var _iS_=param$0[2],_iT_=param$0[1];
          if(_iS_)
           {caml_call2(pp,ppf,_iT_);
            caml_call2(pp_sep,ppf,0);
            var opt$1=[0,pp_sep],opt$0=opt$1,param$0=_iS_;
            continue}
          return caml_call2(pp,ppf,_iT_)}
        return 0}}
    function sexp(fmt,s,pp,x){return caml_call5(_a5_,fmt,_bj_,s,pp,x)}
    function pair(pp1,pp2,fmt,param)
     {var v2=param[2],v1=param[1];
      caml_call2(pp1,fmt,v1);
      caml_call2(_z_,fmt,0);
      return caml_call2(pp2,fmt,v2)}
    function triple(pp1,pp2,pp3,fmt,param)
     {var v3=param[3],v2=param[2],v1=param[1];
      caml_call2(pp1,fmt,v1);
      caml_call2(_z_,fmt,0);
      caml_call2(pp2,fmt,v2);
      caml_call2(_z_,fmt,0);
      return caml_call2(pp3,fmt,v3)}
    function optint(fmt,param)
     {if(param){var i=param[1];return caml_call3(_a5_,fmt,_bk_,i)}return 0}
    function quote(fmt,s){return caml_call3(include[112],fmt,_bl_,s)}
    function pp_olist(pp_elem,fmt)
     {var _iO_=[0,function(fmt,param){return caml_call2(_a5_,fmt,_bm_)}];
      function _iP_(_iQ_,_iR_){return pp_print_list(_iO_,pp_elem,_iQ_,_iR_)}
      return caml_call3(include[112],fmt,_bn_,_iP_)}
    function pp_str_list(_iN_){return pp_olist(quote,_iN_)}
    function to_to_string(pp,x)
     {var b=caml_call1(Stdlib_buffer[1],16),fmt=caml_call1(include[98],b);
      caml_call2(pp,fmt,x);
      return caml_call1(Stdlib_buffer[2],b)}
    var
     Re_Fmt=
      [0,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       _a6_,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       pp_print_list,
       pp_print_list,
       _n_,
       sexp,
       pair,
       triple,
       _r_,
       optint,
       quote,
       pp_olist,
       pp_str_list,
       to_to_string];
    caml_register_global(138,Re_Fmt,"Re__Fmt");
    function union(l$0,l)
     {var l$2=l$0,l$1=l;
      for(;;)
       {if(l$1)
         {if(l$2)
           {var
             r=l$1[2],
             _iM_=l$1[1],
             c2=_iM_[2],
             c1=_iM_[1],
             r$0=l$2[2],
             match=l$2[1],
             c2$0=match[2],
             c1$0=match[1];
            if((c2$0 + 1 | 0) < c1)return [0,[0,c1$0,c2$0],union(r$0,l$1)];
            if((c2 + 1 | 0) < c1$0)return [0,[0,c1,c2],union(l$2,r)];
            if(c2$0 < c2)
             {var
               l$3=[0,[0,caml_call2(Stdlib[5],c1$0,c1),c2],r],
               l$2=r$0,
               l$1=l$3;
              continue}
            var
             l$4=[0,[0,caml_call2(Stdlib[5],c1$0,c1),c2$0],r$0],
             l$2=l$4,
             l$1=r;
            continue}
          return l$1}
        return l$2}}
    function inter(l$0,l)
     {var l$2=l$0,l$1=l;
      for(;;)
       {if(l$1)
         {if(l$2)
           {var
             r=l$1[2],
             _iJ_=l$1[1],
             c2=_iJ_[2],
             c1=_iJ_[1],
             r$0=l$2[2],
             match=l$2[1],
             c2$0=match[2],
             c1$0=match[1];
            if(caml_lessthan(c2$0,c1)){var l$2=r$0;continue}
            if(caml_lessthan(c2,c1$0)){var l$1=r;continue}
            if(caml_lessthan(c2$0,c2))
             {var _iK_=inter(r$0,l$1);
              return [0,[0,caml_call2(Stdlib[6],c1$0,c1),c2$0],_iK_]}
            var _iL_=inter(l$2,r);
            return [0,[0,caml_call2(Stdlib[6],c1$0,c1),c2],_iL_]}
          return 0}
        return 0}}
    function diff(l$0,l)
     {var l$2=l$0,l$1=l;
      for(;;)
       {if(l$1)
         {if(l$2)
           {var
             r=l$1[2],
             _iI_=l$1[1],
             c2=_iI_[2],
             c1=_iI_[1],
             r$0=l$2[2],
             match=l$2[1],
             c2$0=match[2],
             c1$0=match[1];
            if(c2$0 < c1)return [0,[0,c1$0,c2$0],diff(r$0,l$1)];
            if(c2 < c1$0){var l$1=r;continue}
            var r$1=c2 < c2$0?[0,[0,c2 + 1 | 0,c2$0],r$0]:r$0;
            if(c1$0 < c1)return [0,[0,c1$0,c1 - 1 | 0],diff(r$1,r)];
            var l$2=r$1,l$1=r;
            continue}
          return 0}
        return l$2}}
    function single(c){return [0,[0,c,c],0]}
    function add(c,l){return union(single(c),l)}
    function seq(c$0,c)
     {return runtime.caml_lessequal(c$0,c)?[0,[0,c$0,c],0]:[0,[0,c,c$0],0]}
    function offset(o,l)
     {if(l)
       {var r=l[2],match=l[1],c2=match[2],c1=match[1];
        return [0,[0,c1 + o | 0,c2 + o | 0],offset(o,r)]}
      return 0}
    var empty=0;
    function mem(c,s)
     {var s$0=s;
      for(;;)
       {if(s$0)
         {var rem=s$0[2],match=s$0[1],c2=match[2],c1=match[1];
          if(c <= c2)return c1 <= c?1:0;
          var s$0=rem;
          continue}
        return 0}}
    function hash_rec(param)
     {if(param)
       {var r=param[2],match=param[1],j=match[2],i=match[1];
        return (i + (13 * j | 0) | 0) + (257 * hash_rec(r) | 0) | 0}
      return 0}
    function hash(l){return hash_rec(l) & 1073741823}
    function print_one(ch,param)
     {var c2=param[2],c1=param[1];
      return c1 === c2
              ?caml_call3(include[112],ch,_bo_,c1)
              :caml_call4(include[112],ch,_bp_,c1,c2)}
    var _bq_=0;
    function pp$0(_iG_,_iH_){return pp_print_list(_bq_,print_one,_iG_,_iH_)}
    function iter(t,f)
     {var t$0=t;
      for(;;)
       {if(t$0)
         {var xs=t$0[2],match=t$0[1],y=match[2],x=match[1];
          caml_call2(f,x,y);
          var t$0=xs;
          continue}
        return 0}}
    function one_char(param)
     {if(param)
       if(! param[2])
        {var match=param[1],j=match[2],i=match[1];
         if(caml_equal(i,j))return [0,i]}
      return 0}
    function compare$0(param,_iF_)
     {var v=_iF_[2],j=_iF_[1],u=param[2],i=param[1],c=caml_compare(i,j);
      return 0 === c?caml_compare(u,v):c}
    var CSetMap=caml_call1(Stdlib_map[1],[0,compare$0]);
    function fold_right(t,init,f){return caml_call3(Stdlib_list[21],f,t,init)}
    function csingle(c){return single(c)}
    function is_empty(param){return param?0:1}
    function prepend(s,x,l)
     {var s$0=s;
      for(;;)
       {if(s$0)
         {if(l)
           {var _iA_=l[1],_iB_=_iA_[1];
            if(_iB_)
             if(! _iB_[2])
              {var
                r=l[2],
                x$0=_iA_[2],
                _iC_=_iB_[1],
                d=_iC_[2],
                d$0=_iC_[1],
                r$0=s$0[2],
                match=s$0[1],
                c=match[2],
                c$0=match[1];
               if(c < d$0){var s$0=r$0;continue}
               if(c$0 <= d$0)
                {if(c < d)
                  {var
                    _iD_=
                     prepend(r$0,x,[0,[0,[0,[0,c + 1 | 0,d],0],x$0],r]);
                   return [0,
                           [0,[0,[0,d$0,c],0],caml_call2(Stdlib[26],x,x$0)],
                           _iD_]}
                 var _iE_=prepend(s$0,x,r);
                 return [0,
                         [0,[0,[0,d$0,d],0],caml_call2(Stdlib[26],x,x$0)],
                         _iE_]}
               return d < c$0
                       ?[0,[0,[0,[0,d$0,d],0],x$0],prepend(s$0,x,r)]
                       :[0,
                         [0,[0,[0,d$0,c$0 - 1 | 0],0],x$0],
                         prepend(s$0,x,[0,[0,[0,[0,c$0,d],0],x$0],r])]}
            throw [0,Assert_failure,_br_]}
          return 0}
        return l}}
    function pick(param)
     {if(param){var match=param[1],x=match[1];return x}
      return caml_call1(Stdlib[2],cst_Re_cset_pick)}
    var
     Re_Cset=
      [0,
       iter,
       union,
       inter,
       diff,
       offset,
       empty,
       single,
       seq,
       add,
       mem,
       hash,
       pp$0,
       one_char,
       fold_right,
       hash_rec,
       CSetMap,
       cany,
       csingle,
       is_empty,
       prepend,
       pick];
    caml_register_global(143,Re_Cset,"Re__Cset");
    function equal$0(x,y){return x === y?1:0}
    var compare$1=caml_int_compare,r=[0,0];
    function gen(param){r[1]++;return r[1]}
    var
     pp$1=include[17],
     Set=caml_call1(Stdlib_set[1],[0,compare$1]),
     Re_Pmark=[0,equal$0,compare$1,gen,pp$1,Set];
    caml_register_global(145,Re_Pmark,"Re__Pmark");
    function hash_combine(h,accu){return (accu * 65599 | 0) + h | 0}
    var empty$0=[0,0,Set[1]];
    function merge_marks_offset(old,param)
     {if(param)
       {var
         rem=param[2],
         match=param[1],
         v=match[2],
         i=match[1],
         nw=merge_marks_offset(caml_call2(Stdlib_list[45],i,old),rem);
        return -2 === v?nw:[0,[0,i,v],nw]}
      return old}
    function merge(old,nw)
     {var _iz_=caml_call2(Set[7],old[2],nw[2]);
      return [0,merge_marks_offset(old[1],nw[1]),_iz_]}
    function hash$0(m,accu$1)
     {var
       accu$2=hash_combine(caml_call1(Stdlib_hashtbl[27],m[2]),accu$1),
       l=m[1],
       accu=accu$2;
      for(;;)
       {if(l)
         {var
           r=l[2],
           match=l[1],
           i=match[2],
           a=match[1],
           accu$0=hash_combine(a,hash_combine(i,accu)),
           l=r,
           accu=accu$0;
          continue}
        return accu}}
    function _bs_(idx,marks)
     {if(marks)
       {var _iy_=marks[1];
        if(-1 === _iy_[2])
         {var rem=marks[2],a=_iy_[1];return [0,[0,a,idx],_bs_(idx,rem)]}}
      return marks}
    function marks_set_idx(marks,idx)
     {var _ix_=marks[2];return [0,_bs_(idx,marks[1]),_ix_]}
    function pp_marks(ch,t)
     {var _iv_=t[1];
      if(_iv_)
       {var r=_iv_[2],match=_iv_[1],i=match[2],a=match[1];
        caml_call4(include[112],ch,_bt_,a,i);
        var
         _iw_=
          function(param)
           {var i=param[2],a=param[1];
            return caml_call4(include[112],ch,_bu_,a,i)};
        return caml_call2(Stdlib_list[15],_iw_,r)}
      return 0}
    function pp_sem(ch,k)
     {var _iu_=-730718166 === k?cst_long:332064784 <= k?cst_first:cst_short;
      return caml_call2(include[13],ch,_iu_)}
    function pp_rep_kind(fmt,param)
     {return 620821490 <= param
              ?caml_call2(include[13],fmt,cst_Non_greedy)
              :caml_call2(include[13],fmt,cst_Greedy)}
    function pp$2(ch,e)
     {var _ih_=e[2];
      if(typeof _ih_ === "number")
       return caml_call2(_n_,ch,cst_eps);
      else
       switch(_ih_[0])
        {case 0:var l=_ih_[1];return sexp(ch,cst_cst,pp$0,l);
         case 1:
          var l$0=_ih_[1],_ii_=0;
          return sexp
                  (ch,
                   cst_alt,
                   function(_is_,_it_)
                    {return pp_print_list(_ii_,pp$2,_is_,_it_)},
                   l$0);
         case 2:
          var e$0=_ih_[3],e$1=_ih_[2],k=_ih_[1],_ij_=[0,k,e$1,e$0];
          return sexp
                  (ch,
                   cst_seq,
                   function(_iq_,_ir_)
                    {return triple(pp_sem,pp$2,pp$2,_iq_,_ir_)},
                   _ij_);
         case 3:
          var e$2=_ih_[3],k$0=_ih_[2],_ik_=[0,k$0,e$2];
          return sexp
                  (ch,
                   cst_rep,
                   function(_io_,_ip_){return pair(pp_sem,pp$2,_io_,_ip_)},
                   _ik_);
         case 4:var i=_ih_[1];return sexp(ch,cst_mark,_r_,i);
         case 5:
          var e$3=_ih_[2],b=_ih_[1],_il_=[0,b,e$3];
          return sexp
                  (ch,
                   cst_erase,
                   function(_im_,_in_){return pair(_r_,_r_,_im_,_in_)},
                   _il_);
         case 6:var c=_ih_[1];return sexp(ch,cst_before,pp,c);
         case 7:var c$0=_ih_[1];return sexp(ch,cst_after,pp,c$0);
         default:var i$0=_ih_[1];return sexp(ch,cst_pmark,_r_,i$0)}}
    function first(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var r=param$0[2],x=param$0[1],res=caml_call1(f,x);
          if(res)return res;
          var param$0=r;
          continue}
        return 0}}
    function create_ids(param){return [0,0]}
    function mk_expr(ids,def){ids[1]++;return [0,ids[1],def]}
    function empty$1(ids){return mk_expr(ids,_bv_)}
    function cst(ids,s){return is_empty(s)?empty$1(ids):mk_expr(ids,[0,s])}
    function alt(ids,l)
     {if(l){if(l[2])return mk_expr(ids,[1,l]);var c=l[1];return c}
      return empty$1(ids)}
    function seq$0(ids,kind,x,y)
     {var _if_=x[2],_ig_=y[2];
      if(typeof _if_ !== "number" && 1 === _if_[0])if(! _if_[1])return x;
      if(typeof _ig_ !== "number" && 1 === _ig_[0])if(! _ig_[1])return y;
      if(typeof _if_ === "number")return y;
      if(typeof _ig_ === "number")if(332064784 === kind)return x;
      return mk_expr(ids,[2,kind,x,y])}
    function is_eps(expr){return typeof expr[2] === "number"?1:0}
    function eps(ids){return mk_expr(ids,0)}
    function rep(ids,kind,sem,x){return mk_expr(ids,[3,kind,sem,x])}
    function mark(ids,m){return mk_expr(ids,[4,m])}
    function pmark(ids,i){return mk_expr(ids,[8,i])}
    function erase(ids,m$0,m){return mk_expr(ids,[5,m$0,m])}
    function before(ids,c){return mk_expr(ids,[6,c])}
    function after(ids,c){return mk_expr(ids,[7,c])}
    function rename(ids,x)
     {var _ib_=x[2];
      if(typeof _ib_ !== "number")
       switch(_ib_[0])
        {case 1:
          var l=_ib_[1],_ic_=function(_ie_){return rename(ids,_ie_)};
          return mk_expr(ids,[1,caml_call2(Stdlib_list[17],_ic_,l)]);
         case 2:
          var z=_ib_[3],y=_ib_[2],k=_ib_[1],_id_=rename(ids,z);
          return mk_expr(ids,[2,k,rename(ids,y),_id_]);
         case 3:
          var y$0=_ib_[3],k$0=_ib_[2],g=_ib_[1];
          return mk_expr(ids,[3,g,k$0,rename(ids,y$0)])
         }
      return mk_expr(ids,x[2])}
    function equal$1(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var _hU_=l1$0[1];
          switch(_hU_[0])
           {case 0:
             if(l2$0)
              {var _hV_=l2$0[1],_hW_=l1$0[2],_hX_=_hU_[2],_hY_=_hU_[1];
               if(0 === _hV_[0])
                {var
                  r2=l2$0[2],
                  e2=_hV_[2],
                  l2$1=_hV_[1],
                  _hZ_=_hX_[1] === e2[1]?1:0;
                 if(_hZ_)
                  {var _h0_=equal$1(_hY_,l2$1);
                   if(_h0_){var l1$0=_hW_,l2$0=r2;continue}
                   var _h1_=_h0_}
                 else
                  var _h1_=_hZ_;
                 return _h1_}}
             break;
            case 1:
             if(l2$0)
              {var _h2_=l2$0[1],_h3_=l1$0[2],_h4_=_hU_[2],_h5_=_hU_[1];
               if(1 === _h2_[0])
                {var
                  r2$0=l2$0[2],
                  e2$0=_h2_[2],
                  marks2=_h2_[1],
                  _h6_=_h4_[1] === e2$0[1]?1:0;
                 if(_h6_)
                  {var _h7_=caml_equal(_h5_,marks2);
                   if(_h7_){var l1$0=_h3_,l2$0=r2$0;continue}
                   var _h8_=_h7_}
                 else
                  var _h8_=_h6_;
                 return _h8_}}
             break;
            default:
             if(l2$0)
              {var _h9_=l2$0[1],_h__=l1$0[2],_h$_=_hU_[1];
               if(2 === _h9_[0])
                {var
                  r2$1=l2$0[2],
                  marks2$0=_h9_[1],
                  _ia_=caml_equal(_h$_,marks2$0);
                 if(_ia_){var l1$0=_h__,l2$0=r2$1;continue}
                 return _ia_}}}}
        else
         if(! l2$0)return 1;
        return 0}}
    function hash$1(l,accu)
     {var l$0=l,accu$0=accu;
      for(;;)
       {if(l$0)
         {var _hR_=l$0[1];
          switch(_hR_[0])
           {case 0:
             var
              r=l$0[2],
              e=_hR_[2],
              l$1=_hR_[1],
              _hS_=hash$1(l$1,accu$0),
              accu$1=hash_combine(388635598,hash_combine(e[1],_hS_)),
              l$0=r,
              accu$0=accu$1;
             continue;
            case 1:
             var
              r$0=l$0[2],
              e$0=_hR_[2],
              marks=_hR_[1],
              _hT_=hash$0(marks,accu$0),
              accu$2=hash_combine(726404471,hash_combine(e$0[1],_hT_)),
              l$0=r$0,
              accu$0=accu$2;
             continue;
            default:
             var
              r$1=l$0[2],
              marks$0=_hR_[1],
              accu$3=hash_combine(471882453,hash$0(marks$0,accu$0)),
              l$0=r$1,
              accu$0=accu$3;
             continue}}
        return accu$0}}
    function tseq(kind,x,y,rem)
     {if(x)
       {var _hQ_=x[1];
        if(1 === _hQ_[0])
         if(typeof _hQ_[2][2] === "number")
          if(! x[2]){var marks=_hQ_[1];return [0,[1,marks,y],rem]}
        return [0,[0,x,y,kind],rem]}
      return rem}
    function print_state_rec(ch,e,y)
     {switch(e[0])
       {case 0:
         var x=e[2],l=e[1];
         caml_call2(include[112],ch,_bw_);
         print_state_lst(ch,l,x);
         return caml_call4(include[112],ch,_bx_,pp$2,x);
        case 1:
         var _hO_=e[2],_hP_=e[1];
         return typeof _hO_[2] === "number"
                 ?caml_call5(include[112],ch,_by_,y[1],pp_marks,_hP_)
                 :caml_call7
                   (include[112],ch,_bz_,_hO_[1],pp_marks,_hP_,pp$2,_hO_);
        default:
         var marks=e[1];return caml_call4(include[112],ch,_bA_,pp_marks,marks)}}
    function print_state_lst(ch,l,y)
     {if(l)
       {var rem=l[2],e=l[1];
        print_state_rec(ch,e,y);
        var
         _hN_=
          function(e)
           {caml_call2(include[112],ch,_bB_);return print_state_rec(ch,e,y)};
        return caml_call2(Stdlib_list[15],_hN_,rem)}
      return caml_call2(include[112],ch,_bC_)}
    function pp$3(ch,t){return print_state_lst(ch,[0,t,0],_bD_)}
    var dummy$0=[0,-1,dummy,0,0,-1];
    function mk(idx,cat,desc)
     {return [0,
              idx,
              cat,
              desc,
              0,
              hash$1(desc,hash_combine(idx,hash_combine(cat,0))) & 1073741823]}
    function create(cat,e){return mk(0,cat,[0,[1,empty$0,e],0])}
    function equal$2(x,y)
     {var _hJ_=x[5] === y[5]?1:0;
      if(_hJ_)
       {var _hK_=x[1] === y[1]?1:0;
        if(_hK_)
         {var _hL_=x[2] === y[2]?1:0;
          if(_hL_)return equal$1(x[3],y[3]);
          var _hM_=_hL_}
        else
         var _hM_=_hK_}
      else
       var _hM_=_hJ_;
      return _hM_}
    function hash$2(t){return t[5]}
    var Table=caml_call1(Stdlib_hashtbl[25],[0,equal$2,hash$2]);
    function create_working_area(param){return [0,[0,0]]}
    function index_count(w){return w[1].length - 1}
    function mark_used_indices(tbl)
     {function _hE_(param)
       {if(0 === param[0])
         {var l=param[1];return caml_call1(mark_used_indices(tbl),l)}
        var marks=param[1],_hF_=marks[1];
        function _hG_(param)
         {var
           i=param[2],
           _hH_=0 <= i?1:0,
           _hI_=_hH_?caml_check_bound(tbl,i)[i + 1] = 1:_hH_;
          return _hI_}
        return caml_call2(Stdlib_list[15],_hG_,_hF_)}
      return caml_call1(Stdlib_list[15],_hE_)}
    function free_index(tbl_ref,l)
     {var tbl=tbl_ref[1];
      caml_call4(Stdlib_array[9],tbl,0,tbl.length - 1,0);
      caml_call1(mark_used_indices(tbl),l);
      var len=tbl.length - 1,idx=0;
      for(;;)
       {if(idx !== len)
         if(caml_check_bound(tbl,idx)[idx + 1])
          {var idx$0=idx + 1 | 0,idx=idx$0;continue}
        if(idx === len)tbl_ref[1] = caml_make_vect(2 * len | 0,0);
        return idx}}
    function _bE_(param){return 2 === param[0]?0:1}
    var remove_matches=caml_call1(Stdlib_list[35],_bE_);
    function split_at_match(l$1)
     {var l=0,param=l$1;
      for(;;)
       {if(param)
         {var _hC_=param[1];
          if(2 === _hC_[0])
           {var r=param[2],_hD_=caml_call1(remove_matches,r);
            return [0,caml_call1(Stdlib_list[9],l),_hD_]}
          var param$0=param[2],l$0=[0,_hC_,l],l=l$0,param=param$0;
          continue}
        throw [0,Assert_failure,_bF_]}}
    function remove_duplicates(prev,l,y)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var _hA_=l$0[1];
          switch(_hA_[0])
           {case 0:
             var
              r=l$0[2],
              kind=_hA_[3],
              x=_hA_[2],
              l$1=_hA_[1],
              match=remove_duplicates(prev,l$1,x),
              prev$0=match[2],
              l$2=match[1],
              match$0=remove_duplicates(prev$0,r,y),
              prev$1=match$0[2],
              r$0=match$0[1];
             return [0,tseq(kind,l$2,x,r$0),prev$1];
            case 1:
             var _hB_=_hA_[2];
             if(typeof _hB_[2] === "number")
              {var r$1=l$0[2];
               if(caml_call2(Stdlib_list[32],y[1],prev)){var l$0=r$1;continue}
               var
                match$1=remove_duplicates([0,y[1],prev],r$1,y),
                prev$2=match$1[2],
                r$2=match$1[1];
               return [0,[0,_hA_,r$2],prev$2]}
             var r$3=l$0[2];
             if(caml_call2(Stdlib_list[32],_hB_[1],prev))
              {var l$0=r$3;continue}
             var
              match$2=remove_duplicates([0,_hB_[1],prev],r$3,y),
              prev$3=match$2[2],
              r$4=match$2[1];
             return [0,[0,_hA_,r$4],prev$3];
            default:return [0,[0,_hA_,0],prev]}}
        return [0,0,prev]}}
    function set_idx(idx,param)
     {if(param)
       {var _hw_=param[1];
        switch(_hw_[0])
         {case 0:
           var
            r=param[2],
            kind=_hw_[3],
            x=_hw_[2],
            l=_hw_[1],
            _hx_=set_idx(idx,r);
           return [0,[0,set_idx(idx,l),x,kind],_hx_];
          case 1:
           var r$0=param[2],x$0=_hw_[2],marks=_hw_[1],_hy_=set_idx(idx,r$0);
           return [0,[1,marks_set_idx(marks,idx),x$0],_hy_];
          default:
           var r$1=param[2],marks$0=_hw_[1],_hz_=set_idx(idx,r$1);
           return [0,[2,marks_set_idx(marks$0,idx)],_hz_]}}
      return 0}
    function filter_marks(b,e,marks)
     {var _hr_=marks[2],_hs_=marks[1];
      function _ht_(param)
       {var i=param[1],_hu_=i < b?1:0,_hv_=_hu_ || (e < i?1:0);return _hv_}
      return [0,caml_call2(Stdlib_list[35],_ht_,_hs_),_hr_]}
    function delta_1$0(counter,init,c,next_cat,prev_cat,x,rem)
     {var _ho_=x[2];
      if(typeof _ho_ === "number")
       return [0,[2,init],rem];
      else
       switch(_ho_[0])
        {case 0:var s=_ho_[1];return mem(c,s)?[0,[1,init,eps_expr],rem]:rem;
         case 1:
          var l=_ho_[1];
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return delta_2$0(counter$1,init,c,next_cat,prev_cat,l,rem)}
          return caml_trampoline_return
                  (delta_2$0,[0,init,c,next_cat,prev_cat,l,rem]);
         case 2:
          var
           z=_ho_[3],
           y=_ho_[2],
           kind=_ho_[1],
           y$0=delta_1(init,c,next_cat,prev_cat,y,0);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return delta_seq$0(counter$0,c,next_cat,prev_cat,kind,y$0,z,rem)}
          return caml_trampoline_return
                  (delta_seq$0,[0,c,next_cat,prev_cat,kind,y$0,z,rem]);
         case 3:
          var
           y$1=_ho_[3],
           kind$0=_ho_[2],
           rep_kind=_ho_[1],
           y$2=delta_1(init,c,next_cat,prev_cat,y$1,0),
           match=
            first
             (function(param)
               {if(2 === param[0]){var marks=param[1];return [0,marks]}
                return 0},
              y$2);
          if(match)
           var
            marks=match[1],
            y$3=caml_call1(remove_matches,y$2),
            marks$0=marks;
          else
           var y$3=y$2,marks$0=init;
          return 620821490 <= rep_kind
                  ?[0,[2,init],tseq(kind$0,y$3,x,rem)]
                  :tseq(kind$0,y$3,x,[0,[2,marks$0],rem]);
         case 4:
          var
           i=_ho_[1],
           _hp_=init[2],
           marks$1=[0,[0,[0,i,-1],caml_call2(Stdlib_list[45],i,init[1])],_hp_];
          return [0,[2,marks$1],rem];
         case 5:
          var e=_ho_[2],b=_ho_[1];return [0,[2,filter_marks(b,e,init)],rem];
         case 6:
          var cat=_ho_[1];return intersect(next_cat,cat)?[0,[2,init],rem]:rem;
         case 7:
          var cat$0=_ho_[1];
          return intersect(prev_cat,cat$0)?[0,[2,init],rem]:rem;
         default:
          var
           i$0=_ho_[1],
           _hq_=caml_call2(Set[4],i$0,init[2]),
           marks$2=[0,init[1],_hq_];
          return [0,[2,marks$2],rem]}}
    function delta_2$0(counter,marks,c,next_cat,prev_cat,l,rem)
     {if(l)
       {var r=l[2],y=l[1],_hn_=delta_2(marks,c,next_cat,prev_cat,r,rem);
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return delta_1$0(counter$0,marks,c,next_cat,prev_cat,y,_hn_)}
        return caml_trampoline_return
                (delta_1$0,[0,marks,c,next_cat,prev_cat,y,_hn_])}
      return rem}
    function delta_seq$0(counter,c,next_cat,prev_cat,kind,y,z,rem)
     {var
       match=
        first
         (function(param)
           {if(2 === param[0]){var marks=param[1];return [0,marks]}return 0},
          y);
      if(match)
       {var marks=match[1];
        if(-730718166 === kind)
         {var _hl_=delta_1(marks,c,next_cat,prev_cat,z,rem);
          return tseq(kind,caml_call1(remove_matches,y),z,_hl_)}
        if(332064784 <= kind)
         {var match$0=split_at_match(y),y$0=match$0[2],y$1=match$0[1];
          return tseq
                  (kind,
                   y$1,
                   z,
                   delta_1(marks,c,next_cat,prev_cat,z,tseq(kind,y$0,z,rem)))}
        var _hm_=tseq(kind,caml_call1(remove_matches,y),z,rem);
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return delta_1$0(counter$0,marks,c,next_cat,prev_cat,z,_hm_)}
        return caml_trampoline_return
                (delta_1$0,[0,marks,c,next_cat,prev_cat,z,_hm_])}
      return tseq(kind,y,z,rem)}
    function delta_1(init,c,next_cat,prev_cat,x,rem)
     {return caml_trampoline(delta_1$0(0,init,c,next_cat,prev_cat,x,rem))}
    function delta_2(marks,c,next_cat,prev_cat,l,rem)
     {return caml_trampoline(delta_2$0(0,marks,c,next_cat,prev_cat,l,rem))}
    function delta_seq(c,next_cat,prev_cat,kind,y,z,rem)
     {return caml_trampoline(delta_seq$0(0,c,next_cat,prev_cat,kind,y,z,rem))}
    function delta_4(c,next_cat,prev_cat,l,rem)
     {if(l)
       {var r=l[2],y$1=l[1],rem$0=delta_4(c,next_cat,prev_cat,r,rem);
        switch(y$1[0])
         {case 0:
           var
            kind=y$1[3],
            z=y$1[2],
            y=y$1[1],
            y$0=delta_4(c,next_cat,prev_cat,y,0);
           return delta_seq(c,next_cat,prev_cat,kind,y$0,z,rem$0);
          case 1:
           var e=y$1[2],marks=y$1[1];
           return delta_1(marks,c,next_cat,prev_cat,e,rem$0);
          default:return [0,y$1,rem$0]}}
      return rem}
    function delta(tbl_ref,next_cat,char$0,st)
     {var
       prev_cat=st[2],
       match=
        remove_duplicates
         (0,delta_4(char$0,next_cat,prev_cat,st[3],0),eps_expr),
       expr=match[1],
       idx=free_index(tbl_ref,expr),
       expr$0=set_idx(idx,expr);
      return mk(idx,next_cat,expr$0)}
    function red_tr(l)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var _hk_=l$0[2];
          if(_hk_)
           {var
             rem=_hk_[2],
             tr2=_hk_[1],
             st2=tr2[2],
             s2=tr2[1],
             tr1=l$0[1],
             st1=tr1[2],
             s1=tr1[1];
            if(equal$2(st1,st2))
             {var l$1=[0,[0,union(s1,s2),st1],rem],l$0=l$1;continue}
            return [0,tr1,red_tr([0,tr2,rem])]}}
        return l$0}}
    function _bG_(param,l){var x=param[2],s=param[1];return prepend(s,x,l)}
    var prepend_deriv=caml_call1(Stdlib_list[21],_bG_);
    function restrict(s,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           rem=param$0[2],
           match=param$0[1],
           x=match[2],
           s$0=match[1],
           s$1=inter(s,s$0);
          if(is_empty(s$1)){var param$0=rem;continue}
          return [0,[0,s$1,x],restrict(s,rem)]}
        return 0}}
    function prepend_marks_expr_lst(m,l)
     {function _hj_(param)
       {switch(param[0])
         {case 0:
           var s=param[3],e=param[2],l=param[1];
           return [0,prepend_marks_expr_lst(m,l),e,s];
          case 1:var e$0=param[2],m$0=param[1];return [1,merge(m,m$0),e$0];
          default:var m$1=param[1];return [2,merge(m,m$1)]}}
      return caml_call2(Stdlib_list[17],_hj_,l)}
    function deriv_seq(all_chars,categories,cat,kind,y,z,rem)
     {function _ha_(param)
       {var xl=param[2];
        function _hi_(param){return 2 === param[0]?1:0}
        return caml_call2(Stdlib_list[28],_hi_,xl)}
      if(caml_call2(Stdlib_list[28],_ha_,y))
       {var
         z$0=deriv_1(all_chars,categories,empty$0,cat,z,[0,[0,all_chars,0],0]),
         _hb_=
          function(param,rem)
           {var
             y=param[2],
             s=param[1],
             match=
              first
               (function(param)
                 {if(2 === param[0]){var marks=param[1];return [0,marks]}
                  return 0},
                y);
            if(match)
             {var
               marks=match[1],
               _hd_=
                function(param)
                 {var x=param[2],s=param[1];
                  return [0,s,prepend_marks_expr_lst(marks,x)]},
               z$1=caml_call1(caml_call1(Stdlib_list[17],_hd_),z$0);
              if(-730718166 === kind)
               {var _he_=caml_call2(prepend_deriv,restrict(s,z$1),rem);
                return prepend
                        (s,tseq(kind,caml_call1(remove_matches,y),z,0),_he_)}
              if(332064784 <= kind)
               {var
                 match$0=split_at_match(y),
                 y$0=match$0[2],
                 y$1=match$0[1],
                 _hf_=prepend(s,tseq(kind,y$0,z,0),rem),
                 _hg_=caml_call2(prepend_deriv,restrict(s,z$1),_hf_);
                return prepend(s,tseq(kind,y$1,z,0),_hg_)}
              var
               _hh_=
                prepend(s,tseq(kind,caml_call1(remove_matches,y),z,0),rem);
              return caml_call2(prepend_deriv,restrict(s,z$1),_hh_)}
            return prepend(s,tseq(kind,y,z,0),rem)};
        return caml_call3(Stdlib_list[21],_hb_,y,rem)}
      function _hc_(param,rem)
       {var xl=param[2],s=param[1];return prepend(s,tseq(kind,xl,z,0),rem)}
      return caml_call3(Stdlib_list[21],_hc_,y,rem)}
    function deriv_1$0(counter,all_chars,categories,marks,cat,x,rem$1)
     {var _g6_=x[2];
      if(typeof _g6_ === "number")
       return prepend(all_chars,[0,[2,marks],0],rem$1);
      else
       switch(_g6_[0])
        {case 0:
          var s=_g6_[1];return prepend(s,[0,[1,marks,eps_expr],0],rem$1);
         case 1:
          var l=_g6_[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return deriv_2$0(counter$0,all_chars,categories,marks,cat,l,rem$1)}
          return caml_trampoline_return
                  (deriv_2$0,[0,all_chars,categories,marks,cat,l,rem$1]);
         case 2:
          var
           z=_g6_[3],
           y=_g6_[2],
           kind=_g6_[1],
           y$0=deriv_1(all_chars,categories,marks,cat,y,[0,[0,all_chars,0],0]);
          return deriv_seq(all_chars,categories,cat,kind,y$0,z,rem$1);
         case 3:
          var
           y$1=_g6_[3],
           kind$0=_g6_[2],
           rep_kind=_g6_[1],
           y$2=
            deriv_1(all_chars,categories,marks,cat,y$1,[0,[0,all_chars,0],0]),
           _g7_=
            function(param,rem)
             {var
               z=param[2],
               s=param[1],
               match=
                first
                 (function(param)
                   {if(2 === param[0]){var marks=param[1];return [0,marks]}
                    return 0},
                  z);
              if(match)
               var
                marks$0=match[1],
                z$0=caml_call1(remove_matches,z),
                marks$1=marks$0;
              else
               var z$0=z,marks$1=marks;
              var
               _g$_=
                620821490 <= rep_kind
                 ?[0,[2,marks],tseq(kind$0,z$0,x,0)]
                 :tseq(kind$0,z$0,x,[0,[2,marks$1],0]);
              return prepend(s,_g$_,rem)};
          return caml_call3(Stdlib_list[21],_g7_,y$2,rem$1);
         case 4:
          var i=_g6_[1],_g8_=marks[2];
          return prepend
                  (all_chars,
                   [0,
                    [2,
                     [0,[0,[0,i,-1],caml_call2(Stdlib_list[45],i,marks[1])],_g8_]],
                    0],
                   rem$1);
         case 5:
          var
           e$1=_g6_[2],
           b=_g6_[1],
           _g__=marks[2],
           e=e$1,
           rem=filter_marks(b,e$1,marks)[1],
           _g9_=0;
          for(;;)
           {if(e < b)
             return prepend(all_chars,[0,[2,[0,rem,_g__]],_g9_],rem$1);
            var rem$0=[0,[0,e,-2],rem],e$0=e - 1 | 0,e=e$0,rem=rem$0;
            continue}
         case 6:
          var cat$0=_g6_[1];
          return prepend
                  (caml_call2(Stdlib_list[40],cat$0,categories),
                   [0,[2,marks],0],
                   rem$1);
         case 7:
          var cat$1=_g6_[1];
          return intersect(cat,cat$1)
                  ?prepend(all_chars,[0,[2,marks],0],rem$1)
                  :rem$1;
         default:return prepend(all_chars,[0,[2,marks],0],rem$1)}}
    function deriv_2$0(counter,all_chars,categories,marks,cat,l,rem)
     {if(l)
       {var r=l[2],y=l[1],_g5_=deriv_2(all_chars,categories,marks,cat,r,rem);
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return deriv_1$0(counter$0,all_chars,categories,marks,cat,y,_g5_)}
        return caml_trampoline_return
                (deriv_1$0,[0,all_chars,categories,marks,cat,y,_g5_])}
      return rem}
    function deriv_1(all_chars,categories,marks,cat,x,rem)
     {return caml_trampoline
              (deriv_1$0(0,all_chars,categories,marks,cat,x,rem))}
    function deriv_2(all_chars,categories,marks,cat,l,rem)
     {return caml_trampoline
              (deriv_2$0(0,all_chars,categories,marks,cat,l,rem))}
    function deriv_4(all_chars,categories,cat,l,rem)
     {if(l)
       {var r=l[2],y$1=l[1],rem$0=deriv_4(all_chars,categories,cat,r,rem);
        switch(y$1[0])
         {case 0:
           var
            kind=y$1[3],
            z=y$1[2],
            y=y$1[1],
            y$0=deriv_4(all_chars,categories,cat,y,[0,[0,all_chars,0],0]);
           return deriv_seq(all_chars,categories,cat,kind,y$0,z,rem$0);
          case 1:
           var e=y$1[2],marks=y$1[1];
           return deriv_1(all_chars,categories,marks,cat,e,rem$0);
          default:return prepend(all_chars,[0,y$1,0],rem$0)}}
      return rem}
    function deriv(tbl_ref,all_chars,categories,st)
     {var
       der=deriv_4(all_chars,categories,st[2],st[3],[0,[0,all_chars,0],0]),
       _g0_=0;
      function _g1_(param,rem)
       {var
         expr=param[2],
         s=param[1],
         match=remove_duplicates(0,expr,eps_expr),
         expr$0=match[1],
         idx=free_index(tbl_ref,expr$0),
         expr$1=set_idx(idx,expr$0);
        function _g4_(param,rem)
         {var s$0=param[2],cat=param[1],s$1=inter(s,s$0);
          return is_empty(s$1)?rem:[0,[0,s$1,mk(idx,cat,expr$1)],rem]}
        return caml_call3(Stdlib_list[21],_g4_,categories,rem)}
      var l=caml_call3(Stdlib_list[21],_g1_,der,_g0_);
      function _gX_(param,_g3_)
       {var st2=_g3_[2],st1=param[2],c=caml_int_compare(st1[5],st2[5]);
        if(0 === c)
         {var c$0=caml_int_compare(st1[2],st2[2]);
          return 0 === c$0?caml_compare(st1[3],st2[3]):c$0}
        return c}
      var _gY_=red_tr(caml_call2(Stdlib_list[48],_gX_,l));
      function _gZ_(param,_g2_)
       {var s2=_g2_[1],s1=param[1];return caml_compare(s1,s2)}
      return caml_call2(Stdlib_list[48],_gZ_,_gY_)}
    function status(s)
     {var _gS_=s[4];
      if(_gS_){var st=_gS_[1];return st}
      var _gT_=s[3];
      if(_gT_)
       {var _gU_=_gT_[1];
        if(2 === _gU_[0])
         {var
           m=_gU_[1],
           _gW_=m[1],
           _gV_=m[2],
           _gP_=-1,
           _gQ_=
            function(ma,param)
             {var i=param[1];return caml_call2(Stdlib[6],ma,i)},
           ma=caml_call3(Stdlib_list[20],_gQ_,_gP_,_gW_),
           res=caml_make_vect(ma + 1 | 0,-1),
           _gR_=
            function(param)
             {var v=param[2],i=param[1];
              return caml_check_bound(res,i)[i + 1] = v};
          caml_call2(Stdlib_list[15],_gR_,_gW_);
          var st$0=[0,res,_gV_]}
        else
         var st$0=1}
      else
       var st$0=0;
      s[4] = [0,st$0];
      return st$0}
    var
     _bH_=[0,dummy$0,create,Table],
     Re_Automata=
      [0,
       pp_sem,
       pp_rep_kind,
       is_eps,
       pp$2,
       create_ids,
       cst,
       empty$1,
       alt,
       seq$0,
       eps,
       rep,
       mark,
       pmark,
       erase,
       before,
       after,
       rename,
       [0],
       [0,pp$3],
       _bH_,
       create_working_area,
       index_count,
       delta,
       deriv,
       status];
    caml_register_global(148,Re_Automata,"Re__Automata");
    function make(param){return caml_call2(Stdlib_bytes[1],257,0)}
    function flatten(cm)
     {var c=caml_create_bytes(256),color_repr=caml_create_bytes(256),v=[0,0];
      caml_bytes_set(c,0,0);
      caml_bytes_set(color_repr,0,0);
      var i=1;
      for(;;)
       {if(0 !== caml_bytes_get(cm,i))v[1]++;
        caml_bytes_set(c,i,caml_call1(Stdlib_char[1],v[1]));
        var _gN_=caml_call1(Stdlib_char[1],i);
        caml_bytes_set(color_repr,v[1],_gN_);
        var _gO_=i + 1 | 0;
        if(255 !== i){var i=_gO_;continue}
        var _gM_=v[1] + 1 | 0;
        return [0,
                c,
                caml_call3(Stdlib_bytes[7],color_repr,0,v[1] + 1 | 0),
                _gM_]}}
    function split(s,cm)
     {return iter
              (s,
               function(i,j)
                {caml_bytes_set(cm,i,1);return caml_bytes_set(cm,j + 1 | 0,1)})}
    var Re_Color_map=[0,make,flatten,split];
    caml_register_global(151,Re_Color_map,"Re__Color_map");
    function offset$0(t,i)
     {if(t[2].length - 1 <= ((2 * i | 0) + 1 | 0))throw Not_found;
      var _gJ_=2 * i | 0,m1=caml_check_bound(t[2],_gJ_)[_gJ_ + 1];
      if(-1 === m1)throw Not_found;
      var
       p1=caml_check_bound(t[4],m1)[m1 + 1] - 1 | 0,
       _gK_=(2 * i | 0) + 1 | 0,
       _gL_=caml_check_bound(t[2],_gK_)[_gK_ + 1],
       p2=caml_check_bound(t[4],_gL_)[_gL_ + 1] - 1 | 0;
      return [0,p1,p2]}
    function get(t,i)
     {var match=offset$0(t,i),p2=match[2],p1=match[1];
      return caml_call3(Stdlib_string[4],t[1],p1,p2 - p1 | 0)}
    function start(subs,i){return offset$0(subs,i)[1]}
    function stop(subs,i){return offset$0(subs,i)[2]}
    function test(t,i)
     {if(t[2].length - 1 <= (2 * i | 0))return 0;
      var _gI_=2 * i | 0,idx=caml_check_bound(t[2],_gI_)[_gI_ + 1];
      return -1 !== idx?1:0}
    function all_offset(t)
     {var
       res=caml_make_vect(t[5],dummy_offset),
       _gD_=((t[2].length - 1) / 2 | 0) - 1 | 0,
       _gC_=0;
      if(! (_gD_ < 0))
       {var i=_gC_;
        for(;;)
         {var _gE_=2 * i | 0,m1=caml_check_bound(t[2],_gE_)[_gE_ + 1];
          if(-1 !== m1)
           {var
             p1=caml_check_bound(t[4],m1)[m1 + 1],
             _gF_=(2 * i | 0) + 1 | 0,
             _gG_=caml_check_bound(t[2],_gF_)[_gF_ + 1],
             p2=caml_check_bound(t[4],_gG_)[_gG_ + 1];
            caml_check_bound(res,i)[i + 1] = [0,p1 - 1 | 0,p2 - 1 | 0]}
          var _gH_=i + 1 | 0;
          if(_gD_ !== i){var i=_gH_;continue}
          break}}
      return res}
    function all(t)
     {var
       res=caml_make_vect(t[5],dummy_string),
       _gw_=((t[2].length - 1) / 2 | 0) - 1 | 0,
       _gv_=0;
      if(! (_gw_ < 0))
       {var i=_gv_;
        for(;;)
         {var _gx_=2 * i | 0,m1=caml_check_bound(t[2],_gx_)[_gx_ + 1];
          if(-1 !== m1)
           {var
             p1=caml_check_bound(t[4],m1)[m1 + 1],
             _gy_=(2 * i | 0) + 1 | 0,
             _gz_=caml_check_bound(t[2],_gy_)[_gy_ + 1],
             p2=caml_check_bound(t[4],_gz_)[_gz_ + 1],
             _gA_=caml_call3(Stdlib_string[4],t[1],p1 - 1 | 0,p2 - p1 | 0);
            caml_check_bound(res,i)[i + 1] = _gA_}
          var _gB_=i + 1 | 0;
          if(_gw_ !== i){var i=_gB_;continue}
          break}}
      return res}
    function pp$4(fmt,t)
     {var offsets=all_offset(t),strs=all(t);
      function _gp_(i)
       {var _gu_=caml_check_bound(offsets,i)[i + 1];
        return [0,caml_check_bound(strs,i)[i + 1],_gu_]}
      var
       _gq_=caml_call2(Stdlib_array[2],strs.length - 1,_gp_),
       matches=caml_call1(Stdlib_array[11],_gq_);
      function pp_match(fmt,param)
       {var match=param[2],stop=match[2],start=match[1],str=param[1];
        return caml_call5(_a5_,fmt,_bI_,str,start,stop)}
      var _gr_=0;
      return sexp
              (fmt,
               cst_Group,
               function(_gs_,_gt_)
                {return pp_print_list(_gr_,pp_match,_gs_,_gt_)},
               matches)}
    function nb_groups(t){return t[5]}
    var Group=[0,get,offset$0,start,stop,all,all_offset,test,nb_groups,pp$4];
    caml_register_global(154,Group,"Re__Group");
    function iter$0(n,f,v)
     {var n$0=n,v$0=v;
      for(;;)
       {if(0 === n$0)return v$0;
        var v$1=caml_call1(f,v$0),n$1=n$0 - 1 | 0,n$0=n$1,v$0=v$1;
        continue}}
    var unknown=-2,break$0=-3;
    function print_re(ch,re){return pp$2(ch,re[1])}
    function category(re,color)
     {return -1 === color
              ?inexistant
              :color === re[6]?28:from_char(caml_bytes_get(re[4],color))}
    var dummy_next=[0],unknown_state=[0,unknown,0,dummy_next,0,_bH_[1]];
    function mk_state(ncol,desc)
     {var match=status(desc);
      if(typeof match === "number")
       if(0 === match)var switch$0=0;else var break_state=0,switch$0=1;
      else
       var switch$0=0;
      if(! switch$0)var break_state=1;
      var
       _gl_=0,
       _gm_=break_state?dummy_next:caml_make_vect(ncol,unknown_state),
       _gn_=desc[1],
       _go_=break_state?break$0:desc[1];
      return [0,_go_,_gn_,_gm_,_gl_,desc]}
    function find_state(re,desc)
     {try
       {var _gj_=caml_call2(_bH_[3][7],re[8],desc);return _gj_}
      catch(_gk_)
       {_gk_ = caml_wrap_exception(_gk_);
        if(_gk_ === Not_found)
         {var st=mk_state(re[5],desc);
          caml_call3(_bH_[3][5],re[8],desc,st);
          return st}
        throw _gk_}}
    function delta$0(info,cat,color,st)
     {var
       desc=delta(info[1][7],cat,color,st[5]),
       len=info[3].length - 1,
       _gh_=desc[1] === len?1:0,
       _gi_=_gh_?0 < len?1:0:_gh_;
      if(_gi_)
       {var pos=info[3];
        info[3] = caml_make_vect(2 * len | 0,0);
        caml_call5(Stdlib_array[10],pos,0,info[3],0,len)}
      return desc}
    function validate(info,s,pos,st)
     {var
       _gg_=caml_string_get(s,pos),
       color=caml_bytes_get(info[2],_gg_),
       cat=category(info[1],color),
       desc=delta$0(info,cat,color,st),
       st$0=find_state(info[1],desc);
      return caml_check_bound(st[3],color)[color + 1] = st$0}
    function final$0(info,st,cat)
     {try
       {var _ge_=caml_call2(Stdlib_list[40],cat,st[4]);return _ge_}
      catch(_gf_)
       {_gf_ = caml_wrap_exception(_gf_);
        if(_gf_ === Not_found)
         {var
           st$0=delta$0(info,cat,-1,st),
           _gd_=status(st$0),
           res=[0,st$0[1],_gd_];
          st[4] = [0,[0,cat,res],st[4]];
          return res}
        throw _gf_}}
    function find_initial_state(re,cat)
     {try
       {var _gb_=caml_call2(Stdlib_list[40],cat,re[2]);return _gb_}
      catch(_gc_)
       {_gc_ = caml_wrap_exception(_gc_);
        if(_gc_ === Not_found)
         {var st=find_state(re,caml_call2(_bH_[2],cat,re[1]));
          re[2] = [0,[0,cat,st],re[2]];
          return st}
        throw _gc_}}
    function get_color(re,s,pos)
     {if(0 <= pos)
       {var slen=caml_ml_string_length(s);
        if(slen <= pos)return -1;
        if(pos === (slen - 1 | 0))
         if(-1 !== re[6])if(10 === caml_string_get(s,pos))return re[6];
        var _ga_=caml_string_get(s,pos);
        return caml_bytes_get(re[3],_ga_)}
      return -1}
    function scan_str(info,s,st$8,groups)
     {var pos$4=info[4],last=info[5];
      if(last === caml_ml_string_length(s))
       if(-1 !== info[1][6])
        if(pos$4 < last)
         if(10 === caml_string_get(s,last - 1 | 0))
          {var
            info$0=[0,info[1],info[2],info[3],info[4],last - 1 | 0],
            st$9=scan_str(info$0,s,st$8,groups);
           if(st$9[1] === -3)return st$9;
           var pos$5=last - 1 | 0;
           for(;;)
            {var
              _f9_=info$0[1][6],
              st$6=caml_check_bound(st$9[3],_f9_)[_f9_ + 1];
             if(0 <= st$6[1])
              {if(groups)
                {var _f__=st$6[1];
                 caml_check_bound(info$0[3],_f__)[_f__ + 1] = pos$5 + 1 | 0}
               return st$6}
             if(st$6[1] === -3)
              {if(groups)
                {var _f$_=st$6[2];
                 caml_check_bound(info$0[3],_f$_)[_f$_ + 1] = pos$5 + 1 | 0}
               return st$6}
             var
              color=info$0[1][6],
              real_c=caml_bytes_get(info$0[2],10),
              cat=category(info$0[1],color),
              desc=delta$0(info$0,cat,real_c,st$9),
              st$7=find_state(info$0[1],desc);
             caml_check_bound(st$9[3],color)[color + 1] = st$7;
             continue}}
      if(groups)
       {var pos=pos$4,st=st$8;
        a:
        for(;;)
         {if(pos < info[5])
           {var
             _f0_=caml_string_get(s,pos),
             _f1_=caml_bytes_get(info[2],_f0_),
             st$0=caml_check_bound(st[3],_f1_)[_f1_ + 1],
             pos$0=pos,
             st$2=st,
             st$1=st$0;
            for(;;)
             {if(0 <= st$1[1])
               {var pos$1=pos$0 + 1 | 0;
                if(pos$1 < info[5])
                 {var
                   _f2_=caml_string_get(s,pos$1),
                   _f3_=caml_bytes_get(info[2],_f2_),
                   st$3=caml_check_bound(st$1[3],_f3_)[_f3_ + 1],
                   _f4_=st$1[1];
                  caml_check_bound(info[3],_f4_)[_f4_ + 1] = pos$1;
                  var pos$0=pos$1,st$2=st$1,st$1=st$3;
                  continue}
                var _f5_=st$1[1];
                caml_check_bound(info[3],_f5_)[_f5_ + 1] = pos$1;
                return st$1}
              if(st$1[1] === -3)
               {var _f6_=st$1[2];
                caml_check_bound(info[3],_f6_)[_f6_ + 1] = pos$0 + 1 | 0;
                return st$1}
              validate(info,s,pos$0,st$2);
              var pos=pos$0,st=st$2;
              continue a}}
          return st}}
      var pos$2=pos$4,st$4=st$8;
      for(;;)
       {if(pos$2 < last)
         {var
           _f7_=caml_string_get(s,pos$2),
           _f8_=caml_bytes_get(info[2],_f7_),
           st$5=caml_check_bound(st$4[3],_f8_)[_f8_ + 1];
          if(0 <= st$5[1])
           {var pos$3=pos$2 + 1 | 0,pos$2=pos$3,st$4=st$5;continue}
          if(st$5[1] === -3)return st$5;
          validate(info,s,pos$2,st$4);
          continue}
        return st$4}}
    function match_str(groups,partial,re,s,pos,len)
     {var slen=caml_ml_string_length(s),last=-1 === len?slen:pos + len | 0;
      if(groups)
       var
        n=index_count(re[7]) + 1 | 0,
        _fY_=10 < n?caml_make_vect(n,0):_bJ_.slice(),
        _fZ_=_fY_;
      else
       var _fZ_=[0];
      var
       info=[0,re,re[3],_fZ_,pos,last],
       initial_cat=0 === pos?33:32 | category(re,get_color(re,s,pos - 1 | 0)),
       initial_state=find_initial_state(re,initial_cat),
       st=scan_str(info,s,initial_state,groups);
      if(st[1] === -3)
       var switch$0=0;
      else
       if(partial)
        var switch$0=0;
       else
        {var
          final_cat=last === slen?33:32 | category(re,get_color(re,s,last)),
          match=final$0(info,st,final_cat),
          res$0=match[2],
          idx=match[1];
         if(groups)caml_check_bound(info[3],idx)[idx + 1] = last + 1 | 0;
         var res=res$0,switch$0=1}
      if(! switch$0)var res=status(st[5]);
      if(typeof res === "number")return 0 === res?0:1;
      var pmarks=res[2],marks=res[1];
      return [0,[0,s,marks,pmarks,info[3],re[9]]]}
    function cseq(c$0,c){return seq(c$0,c)}
    function cadd(c,s){return add(c,s)}
    function trans_set(cache,cm,s)
     {var match=one_char(s);
      if(match){var i=match[1];return csingle(caml_bytes_get(cm,i))}
      var v=[0,hash_rec(s),s];
      try
       {var _fV_=caml_call2(CSetMap[27],v,cache[1]);return _fV_}
      catch(_fW_)
       {_fW_ = caml_wrap_exception(_fW_);
        if(_fW_ === Not_found)
         {var
           l=
            fold_right
             (s,
              empty,
              function(param,l)
               {var j=param[2],i=param[1],_fX_=caml_bytes_get(cm,j);
                return union(cseq(caml_bytes_get(cm,i),_fX_),l)});
          cache[1] = caml_call3(CSetMap[4],v,l,cache[1]);
          return l}
        throw _fW_}}
    function view(t){return t}
    var View=[0,view];
    function pp$5(fmt,t)
     {function var$0(s,re){return sexp(fmt,s,pp$5,re)}
      function seq(s,rel)
       {var _fS_=0;
        return sexp
                (fmt,
                 s,
                 function(_fT_,_fU_)
                  {return pp_print_list(_fS_,pp$5,_fT_,_fU_)},
                 rel)}
      if(typeof t === "number")
       switch(t)
        {case 0:return caml_call2(_n_,fmt,cst_Beg_of_line);
         case 1:return caml_call2(_n_,fmt,cst_End_of_line);
         case 2:return caml_call2(_n_,fmt,cst_Beg_of_word);
         case 3:return caml_call2(_n_,fmt,cst_End_of_word);
         case 4:return caml_call2(_n_,fmt,cst_Not_bound);
         case 5:return caml_call2(_n_,fmt,cst_Beg_of_str);
         case 6:return caml_call2(_n_,fmt,cst_End_of_str);
         case 7:return caml_call2(_n_,fmt,cst_Last_end_of_line);
         case 8:return caml_call2(_n_,fmt,cst_Start);
         default:return caml_call2(_n_,fmt,cst_Stop)}
      else
       switch(t[0])
        {case 0:var s=t[1];return sexp(fmt,cst_Set,pp$0,s);
         case 1:var sq=t[1];return seq(cst_Sequence,sq);
         case 2:var alt=t[1];return seq(cst_Alternative,alt);
         case 3:
          var
           stop=t[3],
           start=t[2],
           re=t[1],
           pp=
            function(fmt,param)
             {return caml_call7(_a5_,fmt,_bK_,pp$5,re,start,optint,stop)};
          return sexp(fmt,cst_Repeat,pp,0);
         case 4:
          var re$0=t[2],sem=t[1],_fG_=[0,sem,re$0];
          return sexp
                  (fmt,
                   cst_Sem,
                   function(_fO_,_fP_){return pair(pp_sem,pp$5,_fO_,_fP_)},
                   _fG_);
         case 5:
          var re$1=t[2],k=t[1],_fH_=[0,k,re$1];
          return sexp
                  (fmt,
                   cst_Sem_greedy,
                   function(_fM_,_fN_){return pair(pp_rep_kind,pp$5,_fM_,_fN_)},
                   _fH_);
         case 6:var c=t[1];return var$0(cst_Group$0,c);
         case 7:var c$0=t[1];return var$0(cst_No_group,c$0);
         case 8:var c$1=t[1];return var$0(cst_Nest,c$1);
         case 9:var c$2=t[1];return var$0(cst_Case,c$2);
         case 10:var c$3=t[1];return var$0(cst_No_case,c$3);
         case 11:var c$4=t[1];return seq(cst_Intersection,c$4);
         case 12:var c$5=t[1];return seq(cst_Complement,c$5);
         case 13:
          var b=t[2],a=t[1],_fI_=[0,a,b];
          return sexp
                  (fmt,
                   cst_Difference,
                   function(_fK_,_fL_){return pair(pp$5,pp$5,_fK_,_fL_)},
                   _fI_);
         default:
          var r=t[2],m=t[1],_fJ_=[0,m,r];
          return sexp
                  (fmt,
                   cst_Pmark,
                   function(_fQ_,_fR_){return pair(pp$1,pp$5,_fQ_,_fR_)},
                   _fJ_)}}
    function is_charset(param)
     {var param$0=param;
      for(;;)
       {if(typeof param$0 === "number")
         var switch$0=1;
        else
         switch(param$0[0])
          {case 0:return 1;
           case 13:
            var r=param$0[2],r$0=param$0[1],_fF_=is_charset(r$0);
            if(_fF_){var param$0=r;continue}
            return _fF_;
           case 4:
           case 5:var param$1=param$0[2],switch$0=0;break;
           case 2:
           case 11:
           case 12:
            var l=param$0[1];return caml_call2(Stdlib_list[27],is_charset,l);
           case 7:
           case 9:
           case 10:var param$1=param$0[1],switch$0=0;break;
           default:var switch$0=1}
        if(switch$0)return 0;
        var param$0=param$1;
        continue}}
    var
     _bL_=cseq(216,222),
     _bM_=union(cseq(192,214),_bL_),
     cupper=union(cseq(65,90),_bM_),
     clower=offset(32,cupper),
     _bN_=union(clower,cupper),
     calpha=caml_call3(Stdlib_list[21],cadd,_bO_,_bN_),
     cdigit=cseq(48,57),
     calnum=union(calpha,cdigit),
     cword=cadd(95,calnum);
    function eq_list(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             r2=l2$0[2],
             x2=l2$0[1],
             r1=l1$0[2],
             x1=l1$0[1],
             _fE_=equal$3(x1,x2);
            if(_fE_){var l1$0=r1,l2$0=r2;continue}
            return _fE_}}
        else
         if(! l2$0)return 1;
        return 0}}
    function equal$3(x1,x2)
     {var x1$0=x1,x2$0=x2;
      for(;;)
       {if(typeof x1$0 === "number")
         switch(x1$0)
          {case 0:
            var switch$0=typeof x2$0 === "number"?0 === x2$0?1:0:0;break;
           case 1:
            var switch$0=typeof x2$0 === "number"?1 === x2$0?1:0:0;break;
           case 2:
            var switch$0=typeof x2$0 === "number"?2 === x2$0?1:0:0;break;
           case 3:
            var switch$0=typeof x2$0 === "number"?3 === x2$0?1:0:0;break;
           case 4:
            var switch$0=typeof x2$0 === "number"?4 === x2$0?1:0:0;break;
           case 5:
            var switch$0=typeof x2$0 === "number"?5 === x2$0?1:0:0;break;
           case 6:
            var switch$0=typeof x2$0 === "number"?6 === x2$0?1:0:0;break;
           case 7:
            var switch$0=typeof x2$0 === "number"?7 === x2$0?1:0:0;break;
           case 8:
            var switch$0=typeof x2$0 === "number"?8 === x2$0?1:0:0;break;
           default:var switch$0=typeof x2$0 === "number"?9 <= x2$0?1:0:0}
        else
         switch(x1$0[0])
          {case 0:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(0 === x2$0[0])
               {var s2=x2$0[1],s1=x1$0[1];return caml_equal(s1,s2)}
              var switch$0=0}
            break;
           case 1:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(1 === x2$0[0])
               {var l2=x2$0[1],l1=x1$0[1];return eq_list(l1,l2)}
              var switch$0=0}
            break;
           case 2:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(2 === x2$0[0])
               {var l2$0=x2$0[1],l1$0=x1$0[1];return eq_list(l1$0,l2$0)}
              var switch$0=0}
            break;
           case 3:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(3 === x2$0[0])
               {var
                 j2=x2$0[3],
                 i2=x2$0[2],
                 x2$1=x2$0[1],
                 j1=x1$0[3],
                 i1=x1$0[2],
                 x1$1=x1$0[1],
                 _fx_=i1 === i2?1:0;
                if(_fx_)
                 {var _fy_=caml_equal(j1,j2);
                  if(_fy_){var x1$0=x1$1,x2$0=x2$1;continue}
                  var _fz_=_fy_}
                else
                 var _fz_=_fx_;
                return _fz_}
              var switch$0=0}
            break;
           case 4:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(4 === x2$0[0])
               {var
                 x2$2=x2$0[2],
                 sem2=x2$0[1],
                 x1$2=x1$0[2],
                 sem1=x1$0[1],
                 _fA_=sem1 === sem2?1:0;
                if(_fA_){var x1$0=x1$2,x2$0=x2$2;continue}
                return _fA_}
              var switch$0=0}
            break;
           case 5:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(5 === x2$0[0])
               {var
                 x2$3=x2$0[2],
                 k2=x2$0[1],
                 x1$3=x1$0[2],
                 k1=x1$0[1],
                 _fB_=k1 === k2?1:0;
                if(_fB_){var x1$0=x1$3,x2$0=x2$3;continue}
                return _fB_}
              var switch$0=0}
            break;
           case 6:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(6 === x2$0[0])return 0;var switch$0=0}
            break;
           case 7:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(7 === x2$0[0])
               {var x2$4=x2$0[1],x1$4=x1$0[1],x1$0=x1$4,x2$0=x2$4;continue}
              var switch$0=0}
            break;
           case 8:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(8 === x2$0[0])
               {var x2$5=x2$0[1],x1$5=x1$0[1],x1$0=x1$5,x2$0=x2$5;continue}
              var switch$0=0}
            break;
           case 9:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(9 === x2$0[0])
               {var x2$6=x2$0[1],x1$6=x1$0[1],x1$0=x1$6,x2$0=x2$6;continue}
              var switch$0=0}
            break;
           case 10:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(10 === x2$0[0])
               {var x2$7=x2$0[1],x1$7=x1$0[1],x1$0=x1$7,x2$0=x2$7;continue}
              var switch$0=0}
            break;
           case 11:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(11 === x2$0[0])
               {var l2$1=x2$0[1],l1$1=x1$0[1];return eq_list(l1$1,l2$1)}
              var switch$0=0}
            break;
           case 12:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(12 === x2$0[0])
               {var l2$2=x2$0[1],l1$2=x1$0[1];return eq_list(l1$2,l2$2)}
              var switch$0=0}
            break;
           case 13:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(13 === x2$0[0])
               {var
                 x2$8=x2$0[2],
                 x2$9=x2$0[1],
                 x1$8=x1$0[2],
                 x1$9=x1$0[1],
                 _fC_=equal$3(x1$9,x2$9);
                if(_fC_){var x1$0=x1$8,x2$0=x2$8;continue}
                return _fC_}
              var switch$0=0}
            break;
           default:
            if(typeof x2$0 === "number")
             var switch$0=0;
            else
             {if(14 === x2$0[0])
               {var
                 r2=x2$0[2],
                 m2=x2$0[1],
                 r1=x1$0[2],
                 m1=x1$0[1],
                 _fD_=m1 === m2?1:0;
                if(_fD_){var x1$0=r1,x2$0=r2;continue}
                return _fD_}
              var switch$0=0}}
        return switch$0?1:0}}
    function sequence(l){if(l)if(! l[2]){var x=l[1];return x}return [1,l]}
    function merge_sequences(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _fs_=param$0[1];
          if(typeof _fs_ !== "number")
           switch(_fs_[0])
            {case 1:
              var _ft_=_fs_[1];
              if(_ft_)
               {var
                 r$0=param$0[2],
                 y=_ft_[2],
                 x=_ft_[1],
                 r$1=merge_sequences(r$0);
                if(r$1)
                 {var _fu_=r$1[1];
                  if(typeof _fu_ === "number")
                   var switch$0=0;
                  else
                   if(1 === _fu_[0])
                    {var _fv_=_fu_[1];
                     if(_fv_)
                      {var r$2=r$1[2],y$0=_fv_[2],x$0=_fv_[1];
                       if(equal$3(x,x$0))
                        {var _fw_=[0,sequence(y$0),0];
                         return [0,[1,[0,x,[0,[2,[0,sequence(y),_fw_]],0]]],r$2]}
                       var switch$0=1}
                     else
                      var switch$0=1}
                   else
                    var switch$0=0}
                return [0,[1,[0,x,y]],r$1]}
              break;
             case 2:
              var
               r$3=param$0[2],
               l=_fs_[1],
               param$1=caml_call2(Stdlib[26],l,r$3),
               param$0=param$1;
              continue
             }
          var r=param$0[2];
          return [0,_fs_,merge_sequences(r)]}
        return 0}}
    function enforce_kind(ids,kind,k,cr)
     {return 332064784 === kind?332064784 === k?cr:seq$0(ids,k,cr,eps(ids)):cr}
    function translate(ids,kind,ign_group,ign_case,greedy,pos,cache,c,param)
     {var ign_group$0=ign_group,greedy$0=greedy,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        switch(param$0)
         {case 0:return [0,after(ids,9),kind];
          case 1:return [0,before(ids,9),kind];
          case 2:
           var _fj_=before(ids,3);
           return [0,seq$0(ids,332064784,after(ids,5),_fj_),kind];
          case 3:
           var _fk_=before(ids,5);
           return [0,seq$0(ids,332064784,after(ids,3),_fk_),kind];
          case 4:
           var
            _fl_=before(ids,letter),
            _fm_=[0,seq$0(ids,332064784,after(ids,letter),_fl_),0],
            _fn_=before(ids,letter);
           return [0,
                   alt
                    (ids,[0,seq$0(ids,332064784,after(ids,letter),_fn_),_fm_]),
                   kind];
          case 5:return [0,after(ids,inexistant),kind];
          case 6:return [0,before(ids,inexistant),kind];
          case 7:return [0,before(ids,17),kind];
          case 8:return [0,after(ids,search_boundary),kind];
          default:return [0,before(ids,search_boundary),kind]}
       else
        switch(param$0[0])
         {case 0:
           var s=param$0[1];return [0,cst(ids,trans_set(cache,c,s)),kind];
          case 1:
           var l=param$0[1];
           return [0,
                   trans_seq
                    (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,l),
                   kind];
          case 2:
           var l$0=param$0[1],merged_sequences=merge_sequences(l$0);
           if(merged_sequences)
            if(! merged_sequences[2])
             {var
               r=merged_sequences[1],
               match=
                translate
                 (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r),
               kind$0=match[2],
               cr=match[1];
              return [0,enforce_kind(ids,kind,kind$0,cr),kind]}
           var
            _fo_=
             function(r)
              {var
                match=
                 translate
                  (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r),
                kind$0=match[2],
                cr=match[1];
               return enforce_kind(ids,kind,kind$0,cr)};
           return [0,
                   alt(ids,caml_call2(Stdlib_list[17],_fo_,merged_sequences)),
                   kind];
          case 3:
           var
            j=param$0[3],
            i=param$0[2],
            r$0=param$0[1],
            match$0=
             translate(ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$0),
            kind$1=match$0[2],
            cr$0=match$0[1];
           if(j)
            var
             j$0=j[1],
             f=
              620821490 <= greedy$0
               ?function(rem)
                 {var _fq_=[0,seq$0(ids,kind$1,rename(ids,cr$0),rem),0];
                  return alt(ids,[0,eps(ids),_fq_])}
               :function(rem)
                 {var _fr_=[0,eps(ids),0];
                  return alt
                          (ids,[0,seq$0(ids,kind$1,rename(ids,cr$0),rem),_fr_])},
             rem=iter$0(j$0 - i | 0,f,eps(ids));
           else
            var rem=rep(ids,greedy$0,kind$1,cr$0);
           return [0,
                   iter$0
                    (i,
                     function(rem){return seq$0(ids,kind$1,rename(ids,cr$0),rem)},
                     rem),
                   kind];
          case 4:
           var
            r$1=param$0[2],
            kind$2=param$0[1],
            match$1=
             translate
              (ids,kind$2,ign_group$0,ign_case,greedy$0,pos,cache,c,r$1),
            kind$3=match$1[2],
            cr$1=match$1[1];
           return [0,enforce_kind(ids,kind$2,kind$3,cr$1),kind$2];
          case 5:
           var
            param$1=param$0[2],
            greedy$1=param$0[1],
            greedy$0=greedy$1,
            param$0=param$1;
           continue;
          case 6:
           var r$2=param$0[1];
           if(ign_group$0){var param$0=r$2;continue}
           var p=pos[1];
           pos[1] = pos[1] + 2 | 0;
           var
            match$2=
             translate(ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$2),
            kind$4=match$2[2],
            cr$2=match$2[1],
            _fp_=seq$0(ids,332064784,cr$2,mark(ids,p + 1 | 0));
           return [0,seq$0(ids,332064784,mark(ids,p),_fp_),kind$4];
          case 7:
           var param$2=param$0[1],ign_group$0=1,param$0=param$2;continue;
          case 8:
           var
            r$3=param$0[1],
            b=pos[1],
            match$3=
             translate(ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$3),
            kind$5=match$3[2],
            cr$3=match$3[1],
            e=pos[1] - 1 | 0;
           return e < b
                   ?[0,cr$3,kind$5]
                   :[0,seq$0(ids,332064784,erase(ids,b,e),cr$3),kind$5];
          case 14:
           var
            r$4=param$0[2],
            i$0=param$0[1],
            match$4=
             translate(ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$4),
            kind$6=match$4[2],
            cr$4=match$4[1];
           return [0,seq$0(ids,332064784,pmark(ids,i$0),cr$4),kind$6];
          default:throw [0,Assert_failure,_bQ_]}}
    function trans_seq(ids,kind,ign_group,ign_case,greedy,pos,cache,c,param)
     {if(param)
       {var _fh_=param[2],_fi_=param[1];
        if(_fh_)
         {var
           match=
            translate(ids,kind,ign_group,ign_case,greedy,pos,cache,c,_fi_),
           kind$0=match[2],
           cr=match[1],
           cr$0=trans_seq(ids,kind,ign_group,ign_case,greedy,pos,cache,c,_fh_);
          return is_eps(cr$0)?cr:is_eps(cr)?cr$0:seq$0(ids,kind$0,cr,cr$0)}
        var
         match$0=
          translate(ids,kind,ign_group,ign_case,greedy,pos,cache,c,_fi_),
         kind$1=match$0[2],
         cr$1=match$0[1];
        return enforce_kind(ids,kind,kind$1,cr$1)}
      return eps(ids)}
    function as_set(param)
     {if(typeof param !== "number" && 0 === param[0]){var s=param[1];return s}
      throw [0,Assert_failure,_bR_]}
    function handle_case(ign_case,r)
     {var ign_case$0=ign_case,r$0=r;
      for(;;)
       if(typeof r$0 === "number")
        return r$0;
       else
        switch(r$0[0])
         {case 0:
           var s=r$0[1];
           if(ign_case$0)
            var
             _e7_=offset(-32,inter(s,clower)),
             _e8_=union(s,union(offset(32,inter(s,cupper)),_e7_));
           else
            var _e8_=s;
           return [0,_e8_];
          case 1:
           var
            l=r$0[1],
            _e9_=function(_fg_){return handle_case(ign_case$0,_fg_)};
           return [1,caml_call2(Stdlib_list[17],_e9_,l)];
          case 2:
           var
            l$0=r$0[1],
            _e__=function(_ff_){return handle_case(ign_case$0,_ff_)},
            l$1=caml_call2(Stdlib_list[17],_e__,l$0);
           if(is_charset([2,l$1]))
            {var _e$_=function(s,r){return union(s,as_set(r))};
             return [0,caml_call3(Stdlib_list[20],_e$_,empty,l$1)]}
           return [2,l$1];
          case 3:
           var j=r$0[3],i=r$0[2],r$1=r$0[1];
           return [3,handle_case(ign_case$0,r$1),i,j];
          case 4:
           var r$2=r$0[2],k=r$0[1],r$3=handle_case(ign_case$0,r$2);
           return is_charset(r$3)?r$3:[4,k,r$3];
          case 5:
           var r$4=r$0[2],k$0=r$0[1],r$5=handle_case(ign_case$0,r$4);
           return is_charset(r$5)?r$5:[5,k$0,r$5];
          case 6:var r$6=r$0[1];return [6,handle_case(ign_case$0,r$6)];
          case 7:
           var r$7=r$0[1],r$8=handle_case(ign_case$0,r$7);
           return is_charset(r$8)?r$8:[7,r$8];
          case 8:
           var r$9=r$0[1],r$10=handle_case(ign_case$0,r$9);
           return is_charset(r$10)?r$10:[8,r$10];
          case 9:var r$11=r$0[1],ign_case$0=0,r$0=r$11;continue;
          case 10:var r$12=r$0[1],ign_case$0=1,r$0=r$12;continue;
          case 11:
           var
            l$2=r$0[1],
            _fa_=function(r){return handle_case(ign_case$0,r)},
            l$3=caml_call2(Stdlib_list[17],_fa_,l$2),
            _fb_=function(s,r){return inter(s,as_set(r))};
           return [0,caml_call3(Stdlib_list[20],_fb_,cany,l$3)];
          case 12:
           var
            l$4=r$0[1],
            _fc_=function(r){return handle_case(ign_case$0,r)},
            l$5=caml_call2(Stdlib_list[17],_fc_,l$4),
            _fd_=function(s,r){return union(s,as_set(r))};
           return [0,diff(cany,caml_call3(Stdlib_list[20],_fd_,empty,l$5))];
          case 13:
           var
            r$13=r$0[2],
            r$14=r$0[1],
            _fe_=diff(cany,as_set(handle_case(ign_case$0,r$13)));
           return [0,inter(as_set(handle_case(ign_case$0,r$14)),_fe_)];
          default:
           var r$15=r$0[2],i$0=r$0[1];
           return [14,i$0,handle_case(ign_case$0,r$15)]}}
    function anchored(param)
     {var param$0=param;
      for(;;)
       {if(typeof param$0 === "number")
         switch(param$0){case 5:case 8:return 1;default:var switch$0=0}
        else
         switch(param$0[0])
          {case 1:
            var l=param$0[1];return caml_call2(Stdlib_list[28],anchored,l);
           case 2:
            var l$0=param$0[1];
            return caml_call2(Stdlib_list[27],anchored,l$0);
           case 3:
            var i=param$0[2],r=param$0[1],_e6_=0 < i?1:0;
            if(_e6_){var param$0=r;continue}
            return _e6_;
           case 4:
           case 5:
           case 14:var param$1=param$0[2],switch$0=1;break;
           case 0:
           case 11:
           case 12:
           case 13:var switch$0=0;break;
           default:var param$1=param$0[1],switch$0=1}
        if(switch$0){var param$0=param$1;continue}
        return 0}}
    function str(s)
     {var l=[0,0],_e3_=caml_ml_string_length(s) - 1 | 0;
      if(! (_e3_ < 0))
       {var i=_e3_;
        for(;;)
         {var _e4_=l[1];
          l[1] = [0,[0,csingle(caml_string_get(s,i))],_e4_];
          var _e5_=i - 1 | 0;
          if(0 !== i){var i=_e5_;continue}
          break}}
      return [1,l[1]]}
    function char$0(c){return [0,csingle(c)]}
    function alt$0(l){if(l)if(! l[2]){var r=l[1];return r}return [2,l]}
    function seq$1(l){if(l)if(! l[2]){var r=l[1];return r}return [1,l]}
    var empty$2=alt$0(0),epsilon=seq$1(0);
    function repn(r,i,j)
     {if(i < 0)caml_call1(Stdlib[2],cst_Re_repn);
      if(j)
       var
        j$0=j[1],
        switch$0=j$0 < i?(caml_call1(Stdlib[2],cst_Re_repn$0),1):0;
      else
       var switch$0=0;
      return [3,r,i,j]}
    function rep$0(r){return repn(r,0,0)}
    function rep1(r){return repn(r,1,0)}
    function opt(r){return repn(r,0,_bS_)}
    var bol=0,eol=1,bow=2,eow=3;
    function word(r){return seq$1([0,bow,[0,r,[0,eow,0]]])}
    var not_boundary=4,bos=5,eos=6;
    function whole_string(r){return seq$1([0,bos,[0,r,[0,eos,0]]])}
    var leol=7,start$0=8,stop$0=9;
    function longest(r){return [4,-730718166,r]}
    function shortest(r){return [4,-1034406550,r]}
    function first$0(r){return [4,332064784,r]}
    function greedy(r){return [5,-904640576,r]}
    function non_greedy(r){return [5,620821490,r]}
    function group(r){return [6,r]}
    function no_group(r){return [7,r]}
    function nest(r){return [8,r]}
    function mark$0(r){var i=gen(0);return [0,i,[14,i,r]]}
    function set(str)
     {var s=[0,empty],_e0_=caml_ml_string_length(str) - 1 | 0,_eZ_=0;
      if(! (_e0_ < 0))
       {var i=_eZ_;
        for(;;)
         {var _e1_=s[1];
          s[1] = union(csingle(caml_string_get(str,i)),_e1_);
          var _e2_=i + 1 | 0;
          if(_e0_ !== i){var i=_e2_;continue}
          break}}
      return [0,s[1]]}
    function rg(c$0,c){return [0,cseq(c$0,c)]}
    function inter$0(l)
     {var r=[11,l];return is_charset(r)?r:caml_call1(Stdlib[2],cst_Re_inter)}
    function compl(l)
     {var r=[12,l];return is_charset(r)?r:caml_call1(Stdlib[2],cst_Re_compl)}
    function diff$0(r$0,r)
     {var r$1=[13,r$0,r];
      return is_charset(r$1)?r$1:caml_call1(Stdlib[2],cst_Re_diff)}
    var
     any=[0,cany],
     notnl=[0,diff(cany,csingle(10))],
     _bT_=[0,rg(248,255),0],
     _bU_=[0,rg(223,246),_bT_],
     _bV_=[0,char$0(181),_bU_],
     lower=alt$0([0,rg(97,122),_bV_]),
     _bW_=[0,rg(216,222),0],
     _bX_=[0,rg(192,214),_bW_],
     upper=alt$0([0,rg(65,90),_bX_]),
     _bY_=[0,char$0(186),0],
     alpha=alt$0([0,lower,[0,upper,[0,char$0(170),_bY_]]]),
     digit=rg(48,57),
     alnum=alt$0([0,alpha,[0,digit,0]]),
     wordc=alt$0([0,alnum,[0,char$0(95),0]]),
     ascii=rg(0,127),
     blank=set(cst$0),
     _bZ_=[0,rg(127,159),0],
     cntrl=alt$0([0,rg(0,31),_bZ_]),
     _b0_=[0,rg(160,255),0],
     graph=alt$0([0,rg(33,126),_b0_]),
     _b1_=[0,rg(160,255),0],
     print=alt$0([0,rg(32,126),_b1_]),
     _b2_=[0,char$0(247),0],
     _b3_=[0,char$0(215),_b2_],
     _b4_=[0,rg(187,191),_b3_],
     _b5_=[0,rg(182,185),_b4_],
     _b6_=[0,rg(171,180),_b5_],
     _b7_=[0,rg(160,169),_b6_],
     _b8_=[0,rg(123,126),_b7_],
     _b9_=[0,rg(91,96),_b8_],
     _b__=[0,rg(58,64),_b9_],
     punct=alt$0([0,rg(33,47),_b__]),
     _b$_=[0,rg(9,13),0],
     space=alt$0([0,char$0(32),_b$_]),
     _ca_=[0,rg(65,70),0],
     xdigit=alt$0([0,digit,[0,rg(97,102),_ca_]]);
    function case$0(r){return [9,r]}
    function no_case(r){return [10,r]}
    function compile(r$0)
     {var
       _eY_=
        anchored(r$0)?[6,r$0]:seq$1([0,shortest(rep$0(any)),[0,[6,r$0],0]]),
       regexp=handle_case(0,_eY_),
       c=make(0),
       lnl=[0,0];
      function colorize(regexp)
       {var regexp$0=regexp;
        for(;;)
         {if(typeof regexp$0 === "number")
           switch(regexp$0)
            {case 7:lnl[1] = 1;return 0;
             case 0:
             case 1:return split(csingle(10),c);
             case 2:
             case 3:
             case 4:return split(cword,c);
             default:return 0}
          else
           switch(regexp$0[0])
            {case 0:var s=regexp$0[1];return split(s,c);
             case 1:
              var l=regexp$0[1];return caml_call2(Stdlib_list[15],colorize,l);
             case 2:
              var l$0=regexp$0[1];
              return caml_call2(Stdlib_list[15],colorize,l$0);
             case 3:var regexp$1=regexp$0[1],regexp$0=regexp$1;continue;
             case 4:
             case 5:
             case 14:var regexp$2=regexp$0[2];break;
             case 6:
             case 7:
             case 8:var regexp$2=regexp$0[1];break;
             default:throw [0,Assert_failure,_bP_]}
          var regexp$0=regexp$2;
          continue}}
      colorize(regexp);
      var
       _eX_=lnl[1],
       match=flatten(c),
       ncolor=match[3],
       color_repr=match[2],
       colors=match[1],
       lnl$0=_eX_?ncolor:-1,
       ncolor$0=_eX_?ncolor + 1 | 0:ncolor,
       ids=create_ids(0),
       pos=[0,0],
       match$0=
        translate
         (ids,332064784,0,0,-904640576,pos,[0,CSetMap[1]],colors,regexp),
       kind=match$0[2],
       r=match$0[1],
       initial=enforce_kind(ids,332064784,kind,r),
       group_count=pos[1] / 2 | 0,
       _eW_=caml_call1(_bH_[3][1],97);
      return [0,
              initial,
              0,
              colors,
              color_repr,
              ncolor$0,
              lnl$0,
              create_working_area(0),
              _eW_,
              group_count]}
    function exec_internal(name,opt,_eS_,partial,groups,re,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(_eS_)var sth$0=_eS_[1],len=sth$0;else var len=-1;
      var _eT_=pos < 0?1:0;
      if(_eT_)
       var _eU_=_eT_;
      else
       var
        _eV_=len < -1?1:0,
        _eU_=_eV_ || (caml_ml_string_length(s) < (pos + len | 0)?1:0);
      if(_eU_)caml_call1(Stdlib[2],name);
      return match_str(groups,partial,re,s,pos,len)}
    function exec(pos,len,re,s)
     {var match=exec_internal(cst_Re_exec,pos,len,0,1,re,s);
      if(typeof match === "number")throw Not_found;
      var substr=match[1];
      return substr}
    function exec_opt(pos,len,re,s)
     {var match=exec_internal(cst_Re_exec_opt,pos,len,0,1,re,s);
      if(typeof match === "number")return 0;
      var substr=match[1];
      return [0,substr]}
    function execp(pos,len,re,s)
     {var match=exec_internal(cst_Re_execp,pos,len,0,0,re,s);
      return typeof match === "number"?0:1}
    function exec_partial(pos,len,re,s)
     {var match=exec_internal(cst_Re_exec_partial,pos,len,1,0,re,s);
      return typeof match === "number"
              ?0 === match?-1062743954:939392865
              :782112175}
    function marked(g,p){return caml_call2(Set[3],p,g[3])}
    function mark_set(g){return g[3]}
    function all_seq(opt,len,re,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(pos < 0)caml_call1(Stdlib[2],cst_Re_all);
      if(len)
       {var
         l=len[1],
         _eO_=l < 0?1:0,
         _eP_=_eO_ || (caml_ml_string_length(s) < (pos + l | 0)?1:0);
        if(_eP_)caml_call1(Stdlib[2],cst_Re_all$0);
        var limit=pos + l | 0}
      else
       var limit=caml_ml_string_length(s);
      function aux(pos,param)
       {if(limit <= pos)return 0;
        var match=match_str(1,0,re,s,pos,limit - pos | 0);
        if(typeof match === "number")return 0;
        var
         substr=match[1],
         match$0=caml_call2(Group[2],substr,0),
         p2=match$0[2],
         p1=match$0[1],
         pos$0=p1 === p2?p2 + 1 | 0:p2;
        return [0,substr,function(_eR_){return aux(pos$0,_eR_)}]}
      return function(_eQ_){return aux(pos,_eQ_)}}
    function matches_seq(pos,len,re,s)
     {var _eM_=all_seq(pos,len,re,s);
      function _eN_(sub){return caml_call2(Group[1],sub,0)}
      return caml_call2(Stdlib_seq[3],_eN_,_eM_)}
    function split_full_seq(opt,len,re,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(pos < 0)caml_call1(Stdlib[2],cst_Re_split);
      if(len)
       {var
         l=len[1],
         _eB_=l < 0?1:0,
         _eC_=_eB_ || (caml_ml_string_length(s) < (pos + l | 0)?1:0);
        if(_eC_)caml_call1(Stdlib[2],cst_Re_split$0);
        var limit=pos + l | 0}
      else
       var limit=caml_ml_string_length(s);
      function aux(state,i,pos$0,param)
       {if(typeof state === "number")
         {if(limit <= pos$0)
           {if(i < limit)
             {var
               sub=caml_call3(Stdlib_string[4],s,i,limit - i | 0),
               _eF_=i + 1 | 0;
              return [0,
                      [0,936573133,sub],
                      function(_eL_){return aux(state,_eF_,pos$0,_eL_)}]}
            return 0}
          var match=match_str(1,0,re,s,pos$0,limit - pos$0 | 0);
          if(typeof match === "number")
           {if(0 === match)
             {if(i < limit)
               {var text=caml_call3(Stdlib_string[4],s,i,limit - i | 0);
                return [0,
                        [0,936573133,text],
                        function(_eK_){return aux(state,limit,pos$0,_eK_)}]}
              return 0}
            return 0}
          var
           substr=match[1],
           match$0=caml_call2(Group[2],substr,0),
           p2=match$0[2],
           p1=match$0[1],
           pos$1=p1 === p2?p2 + 1 | 0:p2;
          if(pos < p1)
           {var
             text$0=caml_call3(Stdlib_string[4],s,i,p1 - i | 0),
             state$0=[0,73271853,[0,-363573681,substr]];
            return [0,
                    [0,936573133,text$0],
                    function(_eJ_){return aux(state$0,p2,pos$1,_eJ_)}]}
          return [0,
                  [0,-363573681,substr],
                  function(_eI_){return aux(state,p2,pos$1,_eI_)}]}
        var x=state[2],_eG_=814535476;
        return [0,x,function(_eH_){return aux(_eG_,i,pos$0,_eH_)}]}
      var _eD_=814535476;
      return function(_eE_){return aux(_eD_,pos,pos,_eE_)}}
    function split_seq(pos,len,re,s)
     {var seq=split_full_seq(pos,len,re,s);
      function filter(seq,param)
       {var seq$0=seq;
        for(;;)
         {var match=caml_call1(seq$0,0);
          if(match)
           {var _ez_=match[1];
            if(936573133 <= _ez_[1])
             {var tl=match[2],s=_ez_[2];
              return [0,s,function(_eA_){return filter(tl,_eA_)}]}
            var seq$1=match[2],seq$0=seq$1;
            continue}
          return 0}}
      return function(_ey_){return filter(seq,_ey_)}}
    function list_of_seq(s)
     {var _ev_=0;
      function _ew_(l,x){return [0,x,l]}
      var _ex_=caml_call3(Stdlib_seq[7],_ew_,_ev_,s);
      return caml_call1(Stdlib_list[9],_ex_)}
    function all$0(pos,len,re,s){return list_of_seq(all_seq(pos,len,re,s))}
    function matches(pos,len,re,s)
     {return list_of_seq(matches_seq(pos,len,re,s))}
    function split_full(pos,len,re,s)
     {return list_of_seq(split_full_seq(pos,len,re,s))}
    function split$0(pos,len,re,s)
     {return list_of_seq(split_seq(pos,len,re,s))}
    function gen_of_seq(s)
     {var r=[0,s];
      return function(param)
       {var match=caml_call1(r[1],0);
        if(match){var tl=match[2],x=match[1];r[1] = tl;return [0,x]}
        return 0}}
    function split_gen(pos,len,re,s)
     {return gen_of_seq(split_seq(pos,len,re,s))}
    function split_full_gen(pos,len,re,s)
     {return gen_of_seq(split_full_seq(pos,len,re,s))}
    function all_gen(pos,len,re,s){return gen_of_seq(all_seq(pos,len,re,s))}
    function matches_gen(pos,len,re,s)
     {return gen_of_seq(matches_seq(pos,len,re,s))}
    function replace(opt,len,_er_,re,f,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(_er_)var sth$0=_er_[1],all=sth$0;else var all=1;
      if(pos < 0)caml_call1(Stdlib[2],cst_Re_replace);
      if(len)
       {var
         l=len[1],
         _es_=l < 0?1:0,
         _et_=_es_ || (caml_ml_string_length(s) < (pos + l | 0)?1:0);
        if(_et_)caml_call1(Stdlib[2],cst_Re_replace$0);
        var limit=pos + l | 0}
      else
       var limit=caml_ml_string_length(s);
      var buf=caml_call1(Stdlib_buffer[1],caml_ml_string_length(s)),pos$0=pos;
      for(;;)
       {if(pos$0 < limit)
         {var match=match_str(1,0,re,s,pos$0,limit - pos$0 | 0);
          if(typeof match === "number")
           {if(0 === match)
             caml_call4(Stdlib_buffer[16],buf,s,pos$0,limit - pos$0 | 0)}
          else
           {var
             substr=match[1],
             match$0=caml_call2(Group[2],substr,0),
             p2=match$0[2],
             p1=match$0[1];
            caml_call4(Stdlib_buffer[16],buf,s,pos$0,p1 - pos$0 | 0);
            var replacing=caml_call1(f,substr);
            caml_call2(Stdlib_buffer[14],buf,replacing);
            if(all)
             {if(p1 === p2)
               {if(p2 < limit)
                 {var _eu_=caml_string_get(s,p2);
                  caml_call2(Stdlib_buffer[10],buf,_eu_)}
                var pos$1=p2 + 1 | 0}
              else
               var pos$1=p2;
              var pos$0=pos$1;
              continue}
            caml_call4(Stdlib_buffer[16],buf,s,p2,limit - p2 | 0)}}
        return caml_call1(Stdlib_buffer[2],buf)}}
    function replace_string(pos,len,all,re,by,s)
     {return replace(pos,len,all,re,function(param){return by},s)}
    function witness(t)
     {function witness(param)
       {var param$0=param;
        for(;;)
         {if(typeof param$0 === "number")
           return cst$1;
          else
           switch(param$0[0])
            {case 0:
              var
               c=param$0[1],
               _el_=pick(c),
               _em_=caml_call1(Stdlib_char[1],_el_);
              return caml_call2(Stdlib_string[1],1,_em_);
             case 1:
              var xs=param$0[1],_en_=caml_call2(Stdlib_list[17],witness,xs);
              return caml_call2(Stdlib_string[7],cst$2,_en_);
             case 2:
              var _eo_=param$0[1];
              if(_eo_){var param$1=_eo_[1],param$0=param$1;continue}
              throw [0,Assert_failure,_cb_];
             case 3:
              var
               from=param$0[2],
               r=param$0[1],
               w=witness(r),
               b=
                caml_call1
                 (Stdlib_buffer[1],
                  runtime.caml_mul(caml_ml_string_length(w),from)),
               _ep_=1;
              if(! (from < 1))
               {var i=_ep_;
                for(;;)
                 {caml_call2(Stdlib_buffer[14],b,w);
                  var _eq_=i + 1 | 0;
                  if(from !== i){var i=_eq_;continue}
                  break}}
              return caml_call1(Stdlib_buffer[2],b);
             case 10:var param$3=param$0[1],param$0=param$3;continue;
             case 4:
             case 5:
             case 14:var param$2=param$0[2];break;
             case 11:
             case 12:
             case 13:throw [0,Assert_failure,_cc_];
             default:var param$2=param$0[1]}
          var param$0=param$2;
          continue}}
      return witness(handle_case(0,t))}
    var
     get$0=Group[1],
     get_ofs=Group[2],
     get_all=Group[5],
     get_all_ofs=Group[6],
     test$0=Group[7],
     Seq=[0,all_seq,matches_seq,split_seq,split_full_seq],
     Mark=[0,marked,Set,mark_set,equal$0,compare$1],
     include$0=
      [0,
       Group,
       compile,
       exec,
       exec_opt,
       execp,
       exec_partial,
       Mark,
       Seq,
       all$0,
       all_gen,
       all_seq,
       matches,
       matches_gen,
       matches_seq,
       split$0,
       split_gen,
       split_seq,
       split_full,
       split_full_gen,
       split_full_seq,
       replace,
       replace_string,
       str,
       char$0,
       alt$0,
       seq$1,
       empty$2,
       epsilon,
       rep$0,
       rep1,
       repn,
       opt,
       bol,
       eol,
       bow,
       eow,
       bos,
       eos,
       leol,
       start$0,
       stop$0,
       word,
       not_boundary,
       whole_string,
       longest,
       shortest,
       first$0,
       greedy,
       non_greedy,
       group,
       no_group,
       nest,
       mark$0,
       set,
       rg,
       inter$0,
       diff$0,
       compl,
       any,
       notnl,
       alnum,
       wordc,
       alpha,
       ascii,
       blank,
       cntrl,
       digit,
       graph,
       lower,
       print,
       punct,
       space,
       upper,
       xdigit,
       case$0,
       no_case,
       pp$5,
       print_re,
       print_re,
       View,
       witness,
       get$0,
       get_ofs,
       get_all,
       get_all_ofs,
       test$0,
       marked,
       mark_set];
    caml_register_global(156,include$0,"Re__Core");
    var
     Parse_error=[248,cst_Re_Emacs_Parse_error,caml_fresh_oo_id(0)],
     Not_supported=[248,cst_Re_Emacs_Not_supported,caml_fresh_oo_id(0)];
    function re(opt$0,s)
     {if(opt$0)var sth=opt$0[1],case$0=sth;else var case$0=1;
      var i=[0,0],l=caml_ml_string_length(s);
      function eos$0(param){return i[1] === l?1:0}
      function test2(c$0,c)
       {var _ei_=(i[1] + 1 | 0) < l?1:0;
        if(_ei_)
         var
          _ej_=caml_string_get(s,i[1]) === c$0?1:0,
          _ek_=_ej_?caml_string_get(s,i[1] + 1 | 0) === c?1:0:_ej_;
        else
         var _ek_=_ei_;
        return _ek_}
      function accept(c)
       {var
         _eg_=1 - eos$0(0),
         _eh_=_eg_?caml_string_get(s,i[1]) === c?1:0:_eg_;
        if(_eh_)i[1]++;
        return _eh_}
      function accept2(c$0,c)
       {var r=test2(c$0,c);if(r)i[1] = i[1] + 2 | 0;return r}
      function get(param){var r=caml_string_get(s,i[1]);i[1]++;return r}
      function regexp(param)
       {var left=branch(0),left$0=left;
        for(;;)
         {if(accept2(92,124))
           {var left$1=alt$0([0,left$0,[0,branch(0),0]]),left$0=left$1;
            continue}
          return left$0}}
      function branch(param)
       {var left=0;
        for(;;)
         {if(! eos$0(0))
           if(! test2(92,124))
            if(! test2(92,41))
             {if(accept(46))
               var r=notnl;
              else
               if(accept(94))
                var r=bol;
               else
                if(accept(36))
                 var r=eol;
                else
                 if(accept(91))
                  var r=accept(94)?compl(bracket(0)):alt$0(bracket(0));
                 else
                  if(accept(92))
                   if(accept(40))
                    {var r$0=regexp(0);
                     if(1 - accept2(92,41))throw Parse_error;
                     var r=[6,r$0]}
                   else
                    if(accept(96))
                     var r=bos;
                    else
                     if(accept(39))
                      var r=eos;
                     else
                      if(accept(61))
                       var r=start$0;
                      else
                       if(accept(98))
                        var r=alt$0([0,bow,[0,eow,0]]);
                       else
                        if(accept(66))
                         var r=not_boundary;
                        else
                         if(accept(60))
                          var r=bow;
                         else
                          if(accept(62))
                           var r=eow;
                          else
                           if(accept(119))
                            var r=alt$0([0,alnum,[0,char$0(95),0]]);
                           else
                            if(accept(87))
                             var r=compl([0,alnum,[0,char$0(95),0]]);
                            else
                             {if(eos$0(0))throw Parse_error;
                              var c=get(0);
                              if(63 <= c)
                               var switch$0=91 <= c?95 <= c?0:1:64 <= c?0:1;
                              else
                               if(48 <= c)
                                {if(! (58 <= c))throw Not_supported;var switch$0=0}
                               else
                                if(36 <= c)
                                 switch(c - 36 | 0)
                                  {case 0:
                                   case 6:
                                   case 7:
                                   case 10:var switch$0=1;break;
                                   default:var switch$0=0}
                                else
                                 var switch$0=0;
                              if(! switch$0)throw Parse_error;
                              var r=char$0(c)}
                  else
                   {if(eos$0(0))throw Parse_error;
                    var
                     c$0=get(0),
                     switch$1=44 <= c$0?63 === c$0?1:0:42 <= c$0?1:0;
                    if(switch$1)throw Parse_error;
                    var r=char$0(c$0)}
              var
               _ef_=accept(42)?rep$0(r):accept(43)?rep1(r):accept(63)?opt(r):r,
               left$0=[0,_ef_,left],
               left=left$0;
              continue}
          return seq$1(caml_call1(Stdlib_list[9],left))}}
      function bracket(s)
       {var s$0=s;
        for(;;)
         {if(0 !== s$0)if(accept(93))return s$0;
          var c=char$1(0);
          if(accept(45))
           {if(accept(93))
             {var _ee_=[0,char$0(45),s$0];return [0,char$0(c),_ee_]}
            var c$0=char$1(0),s$1=[0,rg(c,c$0),s$0],s$0=s$1;
            continue}
          var s$2=[0,char$0(c),s$0],s$0=s$2;
          continue}}
      function char$1(param){if(eos$0(0))throw Parse_error;return get(0)}
      var r=regexp(0);
      if(1 - eos$0(0))throw Parse_error;
      return case$0?r:[10,r]}
    function compile_pat(opt,s)
     {if(opt)var sth=opt[1],case$0=sth;else var case$0=1;
      return compile(re([0,case$0],s))}
    var Re_Emacs=[0,Parse_error,Not_supported,re,compile,compile_pat];
    caml_register_global(157,Re_Emacs,"Re__Emacs");
    function compile_regexp(s,c)
     {var
       re$0=re([0,1 - c],s),
       _eb_=[246,function(_ed_){return compile(re$0)}];
      return [0,
              re$0,
              [246,
               function(_ec_){return compile(seq$1([0,start$0,[0,re$0,0]]))}],
              _eb_]}
    var state=[0,0];
    function string_match(re,s,p)
     {try
       {var
         _d8_=re[2],
         _d9_=caml_obj_tag(_d8_),
         _d__=
          250 === _d9_
           ?_d8_[1]
           :246 === _d9_?caml_call1(CamlinternalLazy[2],_d8_):_d8_;
        state[1] = [0,exec([0,p],0,_d__,s)];
        var _d$_=1;
        return _d$_}
      catch(_ea_)
       {_ea_ = caml_wrap_exception(_ea_);
        if(_ea_ === Not_found){state[1] = 0;return 0}
        throw _ea_}}
    function string_partial_match(re,s,p)
     {var
       _d5_=re[2],
       _d6_=caml_obj_tag(_d5_),
       _d7_=
        250 === _d6_
         ?_d5_[1]
         :246 === _d6_?caml_call1(CamlinternalLazy[2],_d5_):_d5_,
       match=exec_partial([0,p],0,_d7_,s);
      return 782112175 === match?string_match(re,s,p):939392865 <= match?1:0}
    function search_forward(re,s,p)
     {try
       {var
         _d0_=re[3],
         _d1_=caml_obj_tag(_d0_),
         _d2_=
          250 === _d1_
           ?_d0_[1]
           :246 === _d1_?caml_call1(CamlinternalLazy[2],_d0_):_d0_,
         res=exec([0,p],0,_d2_,s);
        state[1] = [0,res];
        var _d3_=caml_call2(Group[2],res,0)[1];
        return _d3_}
      catch(_d4_)
       {_d4_ = caml_wrap_exception(_d4_);
        if(_d4_ === Not_found){state[1] = 0;throw Not_found}
        throw _d4_}}
    function search_backward(re,s,p)
     {var p$0=p;
      for(;;)
       try
        {var
          _dW_=re[2],
          _dX_=caml_obj_tag(_dW_),
          _dY_=
           250 === _dX_
            ?_dW_[1]
            :246 === _dX_?caml_call1(CamlinternalLazy[2],_dW_):_dW_,
          res=exec([0,p$0],0,_dY_,s);
         state[1] = [0,res];
         return p$0}
       catch(_dZ_)
        {_dZ_ = caml_wrap_exception(_dZ_);
         if(_dZ_ === Not_found)
          {state[1] = 0;
           if(0 === p$0)throw Not_found;
           var p$1=p$0 - 1 | 0,p$0=p$1;
           continue}
         throw _dZ_}}
    function valid_group(n)
     {var _dS_=0 <= n?1:0;
      if(_dS_)
       {var _dT_=n < 10?1:0;
        if(_dT_)
         {var _dU_=state[1];
          if(_dU_){var m=_dU_[1];return n < caml_call1(Group[8],m)?1:0}
          var _dV_=0}
        else
         var _dV_=_dT_}
      else
       var _dV_=_dS_;
      return _dV_}
    function offset_group(i)
     {var _dR_=state[1];
      if(_dR_){var m=_dR_[1];return caml_call2(Group[2],m,i)}
      throw Not_found}
    function group_len(i)
     {try
       {var match=offset_group(i),e=match[2],b=match[1],_dP_=e - b | 0;
        return _dP_}
      catch(_dQ_)
       {_dQ_ = caml_wrap_exception(_dQ_);
        if(_dQ_ === Not_found)return 0;
        throw _dQ_}}
    function replace$0(orig,repl,p,res,q,len)
     {var p$0=p,q$0=q;
      for(;;)
       {var _dN_=p$0 < len?1:0;
        if(_dN_)
         {var c=caml_string_get(repl,p$0);
          if(92 === c)
           {var c$0=caml_string_get(repl,p$0 + 1 | 0);
            if(58 <= c$0)
             {if(92 === c$0)
               {caml_bytes_set(res,q$0,92);
                var q$1=q$0 + 1 | 0,p$1=p$0 + 2 | 0,p$0=p$1,q$0=q$1;
                continue}}
            else
             if(48 <= c$0)
              {try
                {var
                  match=offset_group(c$0 - 48 | 0),
                  e=match[2],
                  b=match[1],
                  d$0=e - b | 0;
                 if(0 < d$0)caml_call5(Stdlib_string[6],orig,b,res,q$0,d$0);
                 var d=d$0}
               catch(_dO_)
                {_dO_ = caml_wrap_exception(_dO_);
                 if(_dO_ !== Not_found)throw _dO_;
                 var d=0}
               var q$3=q$0 + d | 0,p$3=p$0 + 2 | 0,p$0=p$3,q$0=q$3;
               continue}
            caml_bytes_set(res,q$0,92);
            caml_bytes_set(res,q$0 + 1 | 0,c$0);
            var q$2=q$0 + 2 | 0,p$2=p$0 + 2 | 0,p$0=p$2,q$0=q$2;
            continue}
          caml_bytes_set(res,q$0,c);
          var q$4=q$0 + 1 | 0,p$4=p$0 + 1 | 0,p$0=p$4,q$0=q$4;
          continue}
        return _dN_}}
    function replacement_text(repl,orig)
     {var len=caml_ml_string_length(repl),p=0,q=0;
      for(;;)
       {if(p < len)
         {if(92 === caml_string_get(repl,p))
           {var p$0=p + 1 | 0;
            if(p$0 === len)
             caml_call1(Stdlib[3],cst_Str_replace_illegal_backslash_sequence);
            var c=caml_string_get(repl,p$0);
            if(58 <= c)
             if(92 === c)var q$0=q + 1 | 0,switch$0=1;else var switch$0=0;
            else
             if(48 <= c)
              var q$0=q + group_len(c - 48 | 0) | 0,switch$0=1;
             else
              var switch$0=0;
            if(! switch$0)var q$0=q + 2 | 0;
            var p$1=p$0 + 1 | 0,p=p$1,q=q$0;
            continue}
          var q$1=q + 1 | 0,p$2=p + 1 | 0,p=p$2,q=q$1;
          continue}
        var res=caml_create_bytes(q);
        replace$0(orig,repl,0,res,0,caml_ml_string_length(repl));
        return caml_call1(Stdlib_bytes[42],res)}}
    function quote$0(s)
     {var
       len=caml_ml_string_length(s),
       buf=caml_call1(Stdlib_buffer[1],2 * len | 0),
       _dJ_=len - 1 | 0,
       _dI_=0;
      if(! (_dJ_ < 0))
       {var i=_dI_;
        for(;;)
         {var c=caml_string_get(s,i),_dK_=c - 63 | 0;
          if(31 < _dK_ >>> 0)
           {var _dL_=_dK_ + 27 | 0;
            if(10 < _dL_ >>> 0)
             var switch$0=0;
            else
             switch(_dL_)
              {case 0:
               case 6:
               case 7:
               case 10:var switch$0=1;break;
               default:var switch$0=0}}
          else
           var switch$0=26 < (_dK_ - 1 | 0) >>> 0?1:0;
          if(switch$0)
           {caml_call2(Stdlib_buffer[10],buf,92);
            caml_call2(Stdlib_buffer[10],buf,c)}
          else
           caml_call2(Stdlib_buffer[10],buf,c);
          var _dM_=i + 1 | 0;
          if(_dJ_ !== i){var i=_dM_;continue}
          break}}
      return caml_call1(Stdlib_buffer[2],buf)}
    function string_before(s,n){return caml_call3(Stdlib_string[4],s,0,n)}
    function string_after(s,n)
     {return caml_call3(Stdlib_string[4],s,n,caml_ml_string_length(s) - n | 0)}
    function first_chars(s,n){return caml_call3(Stdlib_string[4],s,0,n)}
    function last_chars(s,n)
     {return caml_call3(Stdlib_string[4],s,caml_ml_string_length(s) - n | 0,n)}
    function regexp(e){return compile_regexp(e,0)}
    function regexp_case_fold(e){return compile_regexp(e,1)}
    function regexp_string(s){return compile_regexp(quote$0(s),0)}
    function regexp_string_case_fold(s){return compile_regexp(quote$0(s),1)}
    function group_beginning(n)
     {if(1 - valid_group(n))caml_call1(Stdlib[2],cst_Str_group_beginning);
      var pos=offset_group(n)[1];
      if(-1 === pos)throw Not_found;
      return pos}
    function group_end(n)
     {if(1 - valid_group(n))caml_call1(Stdlib[2],cst_Str_group_end);
      var pos=offset_group(n)[2];
      if(-1 === pos)throw Not_found;
      return pos}
    function matched_group(n,txt)
     {var match=offset_group(n),e=match[2],b=match[1];
      return caml_call3(Stdlib_string[4],txt,b,e - b | 0)}
    function replace_matched(repl,matched)
     {return replacement_text(repl,matched)}
    function match_beginning(param){return group_beginning(0)}
    function match_end(param){return group_end(0)}
    function matched_string(txt){return matched_group(0,txt)}
    function substitute_first(expr,repl_fun,text)
     {try
       {var
         pos=search_forward(expr,text,0),
         _dD_=[0,string_after(text,match_end(0)),0],
         _dE_=[0,caml_call1(repl_fun,text),_dD_],
         _dF_=[0,string_before(text,pos),_dE_],
         _dG_=caml_call2(Stdlib_string[7],cst$3,_dF_);
        return _dG_}
      catch(_dH_)
       {_dH_ = caml_wrap_exception(_dH_);
        if(_dH_ === Not_found)return text;
        throw _dH_}}
    function global_substitute(expr,repl_fun,text)
     {function replace(accu,start,last_was_empty)
       {try
         {var startpos=last_was_empty?start + 1 | 0:start;
          if(caml_ml_string_length(text) < startpos)throw Not_found;
          var
           pos=search_forward(expr,text,startpos),
           end_pos=match_end(0),
           repl_text=caml_call1(repl_fun,text),
           _dB_=
            replace
             ([0,
               repl_text,
               [0,
                caml_call3(Stdlib_string[4],text,start,pos - start | 0),
                accu]],
              end_pos,
              end_pos === pos?1:0);
          return _dB_}
        catch(_dC_)
         {_dC_ = caml_wrap_exception(_dC_);
          if(_dC_ === Not_found)return [0,string_after(text,start),accu];
          throw _dC_}}
      var _dz_=replace(0,0,0),_dA_=caml_call1(Stdlib_list[9],_dz_);
      return caml_call2(Stdlib_string[7],cst$4,_dA_)}
    function global_replace(expr,repl,text)
     {return global_substitute
              (expr,function(_dy_){return replacement_text(repl,_dy_)},text)}
    function replace_first(expr,repl,text)
     {return substitute_first
              (expr,function(_dx_){return replacement_text(repl,_dx_)},text)}
    function search_forward_progress(re,s,p)
     {var pos=search_forward(re,s,p);
      if(p < match_end(0))return pos;
      if(p < caml_ml_string_length(s))return search_forward(re,s,p + 1 | 0);
      throw Not_found}
    function bounded_split(expr,text,num)
     {var start=string_match(expr,text,0)?match_end(0):0;
      function split(accu,start,n)
       {if(caml_ml_string_length(text) <= start)return accu;
        if(1 === n)return [0,string_after(text,start),accu];
        try
         {var
           pos=search_forward_progress(expr,text,start),
           _du_=match_end(0),
           _dv_=
            split
             ([0,caml_call3(Stdlib_string[4],text,start,pos - start | 0),accu],
              _du_,
              n - 1 | 0);
          return _dv_}
        catch(_dw_)
         {_dw_ = caml_wrap_exception(_dw_);
          if(_dw_ === Not_found)return [0,string_after(text,start),accu];
          throw _dw_}}
      var _dt_=split(0,start,num);
      return caml_call1(Stdlib_list[9],_dt_)}
    function split$1(expr,text){return bounded_split(expr,text,0)}
    function bounded_split_delim(expr,text,num)
     {function split(accu,start,n)
       {if(caml_ml_string_length(text) < start)return accu;
        if(1 === n)return [0,string_after(text,start),accu];
        try
         {var
           pos=search_forward_progress(expr,text,start),
           _dq_=match_end(0),
           _dr_=
            split
             ([0,caml_call3(Stdlib_string[4],text,start,pos - start | 0),accu],
              _dq_,
              n - 1 | 0);
          return _dr_}
        catch(_ds_)
         {_ds_ = caml_wrap_exception(_ds_);
          if(_ds_ === Not_found)return [0,string_after(text,start),accu];
          throw _ds_}}
      if(runtime.caml_string_equal(text,cst$5))return 0;
      var _dp_=split(0,0,num);
      return caml_call1(Stdlib_list[9],_dp_)}
    function split_delim(expr,text){return bounded_split_delim(expr,text,0)}
    function bounded_full_split(expr,text,num)
     {function split(accu,start,n)
       {if(caml_ml_string_length(text) <= start)return accu;
        if(1 === n)return [0,[0,string_after(text,start)],accu];
        try
         {var
           pos=search_forward_progress(expr,text,start),
           s=matched_string(text);
          if(start < pos)
           var
            _dm_=match_end(0),
            _dn_=
             split
              ([0,
                [1,s],
                [0,
                 [0,caml_call3(Stdlib_string[4],text,start,pos - start | 0)],
                 accu]],
               _dm_,
               n - 1 | 0);
          else
           var _dn_=split([0,[1,s],accu],match_end(0),n - 1 | 0);
          return _dn_}
        catch(_do_)
         {_do_ = caml_wrap_exception(_do_);
          if(_do_ === Not_found)return [0,[0,string_after(text,start)],accu];
          throw _do_}}
      var _dl_=split(0,0,num);
      return caml_call1(Stdlib_list[9],_dl_)}
    function full_split(expr,text){return bounded_full_split(expr,text,0)}
    var
     Re_Str=
      [0,
       regexp,
       regexp_case_fold,
       quote$0,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_backward,
       string_partial_match,
       matched_string,
       match_beginning,
       match_end,
       matched_group,
       group_beginning,
       group_end,
       global_replace,
       replace_first,
       global_substitute,
       substitute_first,
       replace_matched,
       split$1,
       bounded_split,
       split_delim,
       bounded_split_delim,
       full_split,
       bounded_full_split,
       string_before,
       string_after,
       first_chars,
       last_chars];
    caml_register_global(159,Re_Str,"Re__Str");
    var Parse_error$0=[248,cst_Re_Glob_Parse_error,caml_fresh_oo_id(0)];
    function mul(l$0,l)
     {function _di_(s)
       {function _dk_(s$0){return caml_call2(Stdlib[17],s,s$0)}
        return caml_call2(Stdlib_list[17],_dk_,l)}
      var _dj_=caml_call2(Stdlib_list[17],_di_,l$0);
      return caml_call1(Stdlib_list[14],_dj_)}
    function explicit_period(t)
     {var _de_=t[6];
      if(_de_)
       {var _df_=t[3];
        if(_df_)var _dg_=_df_;else var _dh_=t[4],_dg_=_dh_?t[5]:_dh_}
      else
       var _dg_=_de_;
      return _dg_}
    function append(opt,t,piece)
     {if(opt)
       var sth=opt[1],am_at_start_of_component=sth;
      else
       var am_at_start_of_component=0;
      return [0,[0,piece,t[1]],t[2],0,am_at_start_of_component,t[5],t[6]]}
    function next(t)
     {var _dd_=t[2];
      if(_dd_)
       {var remaining=_dd_[2],piece=_dd_[1];
        return [0,[0,piece,[0,t[1],remaining,t[3],t[4],t[5],t[6]]]]}
      return 0}
    function one(explicit_slash,explicit_period)
     {var
       _c$_=0,
       _da_=explicit_period?[0,char$0(46),0]:0,
       _db_=[0,_da_,_c$_],
       _dc_=explicit_slash?[0,char$0(47),0]:0;
      return compl(caml_call1(Stdlib_list[13],[0,_dc_,_db_]))}
    function enclosed(enclosed)
     {if(0 === enclosed[0]){var c=enclosed[1];return char$0(c)}
      var high=enclosed[2],low=enclosed[1];
      return rg(low,high)}
    function enclosed_set(explicit_slash,explicit_period,kind,set)
     {var
       set$0=caml_call2(Stdlib_list[17],enclosed,set),
       enclosure=596216810 <= kind?alt$0(set$0):compl(set$0);
      return inter$0([0,enclosure,[0,one(explicit_slash,explicit_period),0]])}
    function exactly(state,c){return append([0,47 === c?1:0],state,char$0(c))}
    function glob(opt$0,_cZ_,_cY_,_cX_,s)
     {if(opt$0)var sth=opt$0[1],anchored=sth;else var anchored=0;
      if(_cZ_)var sth$0=_cZ_[1],pathname=sth$0;else var pathname=1;
      if(_cY_)var sth$1=_cY_[1],period=sth$1;else var period=1;
      if(_cX_)var sth$2=_cX_[1],expand_braces=sth$2;else var expand_braces=0;
      function to_re(s)
       {var i=[0,0],l=caml_ml_string_length(s);
        function eos(param){return i[1] === l?1:0}
        function read(c)
         {var _c__=1 - eos(0),r=_c__?caml_string_get(s,i[1]) === c?1:0:_c__;
          if(r)i[1]++;
          return r}
        function char$0(param)
         {read(92);
          if(eos(0))throw Parse_error$0;
          var r=caml_string_get(s,i[1]);
          i[1]++;
          return r}
        function enclosed(param)
         {var s=0;
          for(;;)
           {if(0 !== s)if(read(93))return s;
            var c=char$0(0);
            if(read(45))
             {if(read(93))return [0,[0,c],[0,_cd_,s]];
              var c$0=char$0(0),s$0=[0,[1,c,c$0],s],s=s$0;
              continue}
            var s$1=[0,[0,c],s],s=s$1;
            continue}}
        var pieces=0;
        for(;;)
         {if(eos(0))
           {var
             glob=caml_call1(Stdlib_list[9],pieces),
             state=[0,0,glob,1,1,pathname,period],
             state$7=state;
            for(;;)
             {var match$0=next(state$7);
              if(match$0)
               {var
                 match$1=match$0[1],
                 state$8=match$1[2],
                 p=match$1[1],
                 explicit_slash$0=state$8[5],
                 explicit_period$1=explicit_period(state$8);
                if(typeof p === "number")
                 if(0 === p)
                  var
                   state$9=
                    append(0,state$8,one(explicit_slash$0,explicit_period$1));
                 else
                  {var
                    explicit_slash=state$8[5],
                    explicit_period$0=explicit_period(state$8);
                   if(explicit_period$0)
                    if(explicit_slash)
                     {var
                       _c3_=[0,rep$0(one(1,0)),0],
                       not_empty=seq$1([0,one(1,1),_c3_]),
                       maybe_empty=opt(not_empty),
                       enclosed_set$1=
                        function(not_empty)
                         {function enclosed_set$0(state,kind,set)
                           {var
                             _c9_=
                              [0,seq$1([0,not_empty,[0,enclosed_set(1,0,kind,set),0]]),0];
                            return append
                                    (0,state,alt$0([0,enclosed_set(1,1,kind,set),_c9_]))}
                          return enclosed_set$0},
                       enclosed_set$0=enclosed_set$1(not_empty),
                       state$0=state$8;
                      for(;;)
                       {var match=next(state$0);
                        if(match)
                         {var _c4_=match[1],_c5_=_c4_[1];
                          if(typeof _c5_ === "number")
                           {if(0 !== _c5_)
                             {var state$2=_c4_[2],state$0=state$2;continue}
                            var state$1=_c4_[2],_c6_=append(0,state$1,not_empty)}
                          else
                           switch(_c5_[0])
                            {case 0:
                              var
                               state$3=_c4_[2],
                               c=_c5_[1],
                               not_empty$0=46 === c?not_empty:maybe_empty,
                               state$4=append(0,state$3,not_empty$0),
                               _c6_=exactly(state$4,c);
                              break;
                             case 1:
                              var
                               state$5=_c4_[2],
                               enclosed$0=_c5_[1],
                               _c6_=enclosed_set$0(state$5,596216810,enclosed$0);
                              break;
                             default:
                              var
                               state$6=_c4_[2],
                               enclosed$1=_c5_[1],
                               _c6_=enclosed_set$0(state$6,-188280562,enclosed$1)}}
                        else
                         var _c6_=append(0,state$0,maybe_empty);
                        var _c8_=_c6_;
                        break}}
                    else
                     var
                      _c7_=[0,rep$0(one(0,0)),0],
                      _c8_=
                       append
                        (0,state$8,opt(seq$1([0,one(0,explicit_period$0),_c7_])));
                   else
                    var
                     _c8_=
                      append
                       (0,state$8,rep$0(one(explicit_slash,explicit_period$0)));
                   var state$9=_c8_}
                else
                 switch(p[0])
                  {case 0:var c$0=p[1],state$9=exactly(state$8,c$0);break;
                   case 1:
                    var
                     enclosed$2=p[1],
                     state$9=
                      append
                       (0,
                        state$8,
                        enclosed_set
                         (explicit_slash$0,explicit_period$1,596216810,enclosed$2));
                    break;
                   default:
                    var
                     enclosed$3=p[1],
                     state$9=
                      append
                       (0,
                        state$8,
                        enclosed_set
                         (explicit_slash$0,explicit_period$1,-188280562,enclosed$3))}
                var state$7=state$9;
                continue}
              var re=seq$1(caml_call1(Stdlib_list[9],state$7[1]));
              return anchored?whole_string(re):re}}
          if(read(42))
           var _c2_=1;
          else
           if(read(63))
            var _c2_=0;
           else
            if(read(91))
             {if(read(94))
               var switch$0=0;
              else
               if(read(33))
                var switch$0=0;
               else
                var _c2_=[1,enclosed(0)],switch$0=1;
              if(! switch$0)var _c2_=[2,enclosed(0)]}
            else
             var _c2_=[0,char$0(0)];
          var pieces$0=[0,_c2_,pieces],pieces=pieces$0;
          continue}}
      if(expand_braces)
       {var
         l=caml_ml_string_length(s),
         expl=
          function(inner,s$0,i,acc,beg$0)
           {var s$1=s$0,i$0=i,acc$0=acc,beg$1=beg$0;
            for(;;)
             {if(l <= i$0)
               {if(inner)throw Parse_error$0;
                return [0,
                        mul
                         (beg$1,
                          [0,caml_call3(Stdlib_string[4],s,s$1,i$0 - s$1 | 0),0]),
                        i$0]}
              var match=caml_string_get(s,i$0);
              if(44 === match)
               {if(inner)
                 {var
                   _c0_=
                    mul
                     (beg$1,
                      [0,caml_call3(Stdlib_string[4],s,s$1,i$0 - s$1 | 0),0]),
                   acc$1=caml_call2(Stdlib[26],_c0_,acc$0),
                   i$1=i$0 + 1 | 0,
                   s$2=i$0 + 1 | 0,
                   s$1=s$2,
                   i$0=i$1,
                   acc$0=acc$1,
                   beg$1=beg;
                  continue}}
              else
               if(123 <= match)
                {if(! (126 <= match))
                  {var switcher=match - 123 | 0;
                   switch(switcher)
                    {case 0:
                      var
                       match$0=expl(1,i$0 + 1 | 0,i$0 + 1 | 0,0,_ce_),
                       i$3=match$0[2],
                       t=match$0[1],
                       beg$2=
                        mul
                         (beg$1,
                          mul
                           ([0,caml_call3(Stdlib_string[4],s,s$1,i$0 - s$1 | 0),0],t)),
                       s$1=i$3,
                       i$0=i$3,
                       beg$1=beg$2;
                      continue;
                     case 1:break;
                     default:
                      if(inner)
                       {var
                         _c1_=
                          mul
                           (beg$1,
                            [0,caml_call3(Stdlib_string[4],s,s$1,i$0 - s$1 | 0),0]);
                        return [0,caml_call2(Stdlib[26],_c1_,acc$0),i$0 + 1 | 0]}}}}
               else
                if(92 === match){var i$4=i$0 + 2 | 0,i$0=i$4;continue}
              var i$2=i$0 + 1 | 0,i$0=i$2;
              continue}},
         _cV_=expl(0,0,0,0,_cf_)[1],
         _cW_=caml_call1(Stdlib_list[9],_cV_);
        return alt$0(caml_call2(Stdlib_list[17],to_re,_cW_))}
      return to_re(s)}
    function glob$0(anchored,period,s){return glob(anchored,0,[0,period],0,s)}
    function globx(anchored,s){return glob(anchored,0,0,_cg_,s)}
    function globx$0(anchored,period,s)
     {return glob(anchored,0,[0,period],_ch_,s)}
    var Re_Glob=[0,Parse_error$0,glob,glob$0,globx,globx$0];
    caml_register_global(160,Re_Glob,"Re__Glob");
    var
     Parse_error$1=[248,cst_Re_Perl_Parse_error,caml_fresh_oo_id(0)],
     Not_supported$0=[248,cst_Re_Perl_Not_supported,caml_fresh_oo_id(0)];
    function posix_class_of_string(class$0)
     {var switch$0=runtime.caml_string_compare(class$0,cst_lower);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return lower;
        if(! caml_string_notequal(class$0,cst_print))return print;
        if(! caml_string_notequal(class$0,cst_punct))return punct;
        if(! caml_string_notequal(class$0,cst_space))return space;
        if(! caml_string_notequal(class$0,cst_upper))return upper;
        if(! caml_string_notequal(class$0,cst_word))return wordc;
        if(! caml_string_notequal(class$0,cst_xdigit))return xdigit}
      else
       {if(! caml_string_notequal(class$0,cst_alnum))return alnum;
        if(! caml_string_notequal(class$0,cst_ascii))return ascii;
        if(! caml_string_notequal(class$0,cst_blank))return blank;
        if(! caml_string_notequal(class$0,cst_cntrl))return cntrl;
        if(! caml_string_notequal(class$0,cst_digit))return digit;
        if(! caml_string_notequal(class$0,cst_graph))return graph}
      var _cU_=caml_call2(Stdlib[17],cst_Invalid_pcre_class,class$0);
      return caml_call1(Stdlib[2],_cU_)}
    function re$0(opt$0,s)
     {if(opt$0)var sth=opt$0[1],opts=sth;else var opts=0;
      var
       ungreedy=caml_call2(Stdlib_list[32],-243745063,opts),
       dotall=caml_call2(Stdlib_list[32],-424303016,opts),
       dollar_endonly=caml_call2(Stdlib_list[32],-712595228,opts),
       multiline=caml_call2(Stdlib_list[32],1071952589,opts),
       i=[0,0],
       l=caml_ml_string_length(s);
      function eos$0(param){return i[1] === l?1:0}
      function test(c)
       {var
         _cS_=1 - eos$0(0),
         _cT_=_cS_?caml_string_get(s,i[1]) === c?1:0:_cS_;
        return _cT_}
      function accept(c){var r=test(c);if(r)i[1]++;return r}
      function accept_s(s$0)
       {var len=caml_ml_string_length(s$0);
        try
         {var _cM_=len - 1 | 0,_cL_=0;
          if(! (_cM_ < 0))
           {var j=_cL_;
            for(;;)
             {try
               {var _cO_=caml_string_get(s,i[1] + j | 0);
                if(caml_string_get(s$0,j) !== _cO_)throw Stdlib[4]}
              catch(_cR_){throw Stdlib[4]}
              var _cP_=j + 1 | 0;
              if(_cM_ !== j){var j=_cP_;continue}
              break}}
          i[1] = i[1] + len | 0;
          var _cN_=1;
          return _cN_}
        catch(_cQ_)
         {_cQ_ = caml_wrap_exception(_cQ_);
          if(_cQ_ === Stdlib[4])return 0;
          throw _cQ_}}
      function get(param){var r=caml_string_get(s,i[1]);i[1]++;return r}
      function unget(param){i[1] += -1;return 0}
      function greedy_mod(r)
       {var gr=accept(63),gr$0=ungreedy?1 - gr:gr;
        return gr$0?non_greedy(r):greedy(r)}
      function regexp(param)
       {var left=branch(0),left$0=left;
        for(;;)
         {if(accept(124))
           {var left$1=alt$0([0,left$0,[0,branch(0),0]]),left$0=left$1;
            continue}
          return left$0}}
      function branch(param)
       {var left=0;
        for(;;)
         {if(! eos$0(0))
           if(! test(124))
            if(! test(41))
             {if(accept(46))
               var r=dotall?any:notnl;
              else
               if(accept(40))
                if(accept(63))
                 if(accept(58))
                  {var r$0=regexp(0);
                   if(1 - accept(41))throw Parse_error$1;
                   var r=r$0}
                 else
                  {if(! accept(35))throw Parse_error$1;
                   for(;;)
                    {if(eos$0(0))throw Parse_error$1;
                     if(! accept(41)){i[1]++;continue}
                     var r=epsilon;
                     break}}
                else
                 {var r$1=regexp(0);
                  if(1 - accept(41))throw Parse_error$1;
                  var r=[6,r$1]}
               else
                if(accept(94))
                 var r=multiline?bol:bos;
                else
                 if(accept(36))
                  var r=multiline?eol:dollar_endonly?leol:eos;
                 else
                  if(accept(91))
                   var r=accept(94)?compl(bracket(0)):alt$0(bracket(0));
                  else
                   if(accept(92))
                    {if(eos$0(0))throw Parse_error$1;
                     var c=get(0),switcher=c - 48 | 0;
                     if(74 < switcher >>> 0)
                      var switch$0=0;
                     else
                      switch(switcher)
                       {case 17:var r=bos,switch$0=1;break;
                        case 18:var r=not_boundary,switch$0=1;break;
                        case 20:var r=compl([0,digit,0]),switch$0=1;break;
                        case 23:var r=start$0,switch$0=1;break;
                        case 35:var r=compl([0,space,0]),switch$0=1;break;
                        case 39:
                         var r=compl([0,alnum,[0,char$0(95),0]]),switch$0=1;break;
                        case 42:var r=leol,switch$0=1;break;
                        case 50:var r=alt$0([0,bow,[0,eow,0]]),switch$0=1;break;
                        case 52:var r=digit,switch$0=1;break;
                        case 67:var r=space,switch$0=1;break;
                        case 71:
                         var r=alt$0([0,alnum,[0,char$0(95),0]]),switch$0=1;break;
                        case 74:var r=eos,switch$0=1;break;
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:throw Not_supported$0;
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 48:var switch$0=0;break;
                        default:throw Parse_error$1}
                     if(! switch$0)var r=char$0(c)}
                   else
                    {if(eos$0(0))throw Parse_error$1;
                     var
                      c$0=get(0),
                      switch$1=
                       64 <= c$0
                        ?92 === c$0?1:123 === c$0?1:0
                        :44 <= c$0?63 <= c$0?1:0:42 <= c$0?1:0;
                     if(switch$1)throw Parse_error$1;
                     var r=char$0(c$0)}
              if(accept(42))
               var _cK_=greedy_mod(rep$0(r));
              else
               if(accept(43))
                var _cK_=greedy_mod(rep1(r));
               else
                if(accept(63))
                 var _cK_=greedy_mod(opt(r));
                else
                 if(accept(123))
                  {var match=integer(0);
                   if(match)
                    {var i$0=match[1],j=accept(44)?integer(0):[0,i$0];
                     if(1 - accept(125))throw Parse_error$1;
                     if(j){var j$0=j[1];if(j$0 < i$0)throw Parse_error$1}
                     var _cK_=greedy_mod(repn(r,i$0,j))}
                   else
                    {unget(0);var _cK_=r}}
                 else
                  var _cK_=r;
              var left$0=[0,_cK_,left],left=left$0;
              continue}
          return seq$1(caml_call1(Stdlib_list[9],left))}}
      function integer(param)
       {if(eos$0(0))return 0;
        var d=get(0),switcher=d - 48 | 0;
        if(9 < switcher >>> 0){unget(0);return 0}
        var i=d - 48 | 0,i$0=i;
        for(;;)
         {if(eos$0(0))return [0,i$0];
          var d$0=get(0),switcher$0=d$0 - 48 | 0;
          if(9 < switcher$0 >>> 0){unget(0);return [0,i$0]}
          var i$1=(10 * i$0 | 0) + (d$0 - 48 | 0) | 0;
          if(i$1 < i$0)throw Parse_error$1;
          var i$0=i$1;
          continue}}
      function bracket(s)
       {var s$0=s;
        for(;;)
         {if(0 !== s$0)if(accept(93))return s$0;
          var match=char$1(0);
          if(748194550 <= match[1])
           {var c=match[2];
            if(accept(45))
             {if(accept(93))
               {var _cI_=[0,char$0(45),s$0];return [0,char$0(c),_cI_]}
              var match$0=char$1(0);
              if(748194550 <= match$0[1])
               {var c$0=match$0[2],s$1=[0,rg(c,c$0),s$0],s$0=s$1;continue}
              var
               st=match$0[2],
               _cJ_=[0,char$0(45),[0,st,s$0]],
               s$2=[0,char$0(c),_cJ_],
               s$0=s$2;
              continue}
            var s$3=[0,char$0(c),s$0],s$0=s$3;
            continue}
          var st$0=match[2],s$4=[0,st$0,s$0],s$0=s$4;
          continue}}
      function char$1(param)
       {if(eos$0(0))throw Parse_error$1;
        var c=get(0);
        if(91 === c)
         {if(accept(61))throw Not_supported$0;
          if(accept(58))
           {var compl$0=accept(94);
            try
             {var cls=caml_call2(Stdlib_list[33],accept_s,posix_class_strings)}
            catch(_cH_)
             {_cH_ = caml_wrap_exception(_cH_);
              if(_cH_ === Not_found)throw Parse_error$1;
              throw _cH_}
            if(1 - accept_s(cst$6))throw Parse_error$1;
            var
             posix_class=posix_class_of_string(cls),
             re=compl$0?compl([0,posix_class,0]):posix_class;
            return [0,4150146,re]}
          if(accept(46))
           {if(eos$0(0))throw Parse_error$1;
            var c$0=get(0);
            if(1 - accept(46))throw Not_supported$0;
            if(1 - accept(93))throw Parse_error$1;
            return [0,748194550,c$0]}
          return [0,748194550,c]}
        if(92 === c)
         {if(eos$0(0))throw Parse_error$1;
          var c$1=get(0);
          if(58 <= c$1)
           {if(! (123 <= c$1))
             {var switcher=c$1 - 58 | 0;
              switch(switcher)
               {case 10:return [0,4150146,compl([0,digit,0])];
                case 25:return [0,4150146,compl([0,space,0])];
                case 29:return [0,4150146,compl([0,alnum,[0,char$0(95),0]])];
                case 40:return _ci_;
                case 42:return [0,4150146,digit];
                case 52:return _cj_;
                case 56:return _ck_;
                case 57:return [0,4150146,space];
                case 58:return _cl_;
                case 61:return [0,4150146,alt$0([0,alnum,[0,char$0(95),0]])];
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:break;
                default:throw Parse_error$1}}}
          else
           if(48 <= c$1)throw Not_supported$0;
          return [0,748194550,c$1]}
        return [0,748194550,c]}
      var r=regexp(0);
      if(1 - eos$0(0))throw Parse_error$1;
      var
       r$0=
        caml_call2(Stdlib_list[32],616470068,opts)
         ?seq$1([0,start$0,[0,r,0]])
         :r,
       r$1=caml_call2(Stdlib_list[32],604571177,opts)?[10,r$0]:r$0;
      return r$1}
    function compile_pat$0(opt,s)
     {if(opt)var sth=opt[1],opts=sth;else var opts=0;
      return compile(re$0([0,opts],s))}
    var Re_Perl=[0,Parse_error$1,Not_supported$0,re$0,compile,compile_pat$0];
    caml_register_global(161,Re_Perl,"Re__Perl");
    function re$1(opt,pat)
     {if(opt)var sth=opt[1],flags=sth;else var flags=0;
      function _cG_(param)
       {return 601676297 === param
                ?604571177
                :613575188 <= param?616470068:1071952589}
      var opts=caml_call2(Stdlib_list[17],_cG_,flags);
      return re$0([0,opts],pat)}
    function regexp$0(flags,pat){return compile(re$1(flags,pat))}
    function extract(rex,s)
     {var _cF_=exec(0,0,rex,s);return caml_call1(Group[5],_cF_)}
    function exec$0(rex,pos,s){return exec(pos,0,rex,s)}
    function get_substring(s,i){return caml_call2(Group[1],s,i)}
    function get_substring_ofs(s,i){return caml_call2(Group[2],s,i)}
    function pmatch(rex,s){return execp(0,0,rex,s)}
    function substitute(rex,subst,str)
     {var b=caml_call1(Stdlib_buffer[1],1024),pos=0;
      for(;;)
       {if(caml_ml_string_length(str) <= pos)
         return caml_call1(Stdlib_buffer[2],b);
        if(execp([0,pos],0,rex,str))
         {var
           ss=exec([0,pos],0,rex,str),
           match=caml_call2(Group[2],ss,0),
           fin=match[2],
           start=match[1],
           pat=caml_call2(Group[1],ss,0);
          caml_call4(Stdlib_buffer[16],b,str,pos,start - pos | 0);
          var _cE_=caml_call1(subst,pat);
          caml_call2(Stdlib_buffer[14],b,_cE_);
          var pos=fin;
          continue}
        caml_call4
         (Stdlib_buffer[16],b,str,pos,caml_ml_string_length(str) - pos | 0);
        var pos$0=caml_ml_string_length(str),pos=pos$0;
        continue}}
    function split$2(rex,str)
     {var accu=0,pos=0;
      for(;;)
       {if(caml_ml_string_length(str) <= pos)
         return caml_call1(Stdlib_list[9],accu);
        if(execp([0,pos],0,rex,str))
         {var
           ss=exec([0,pos],0,rex,str),
           match=caml_call2(Group[2],ss,0),
           fin=match[2],
           start=match[1],
           s=caml_call3(Stdlib_string[4],str,pos,start - pos | 0),
           accu$0=[0,s,accu],
           accu=accu$0,
           pos=fin;
          continue}
        var
         s$0=
          caml_call3
           (Stdlib_string[4],str,pos,caml_ml_string_length(str) - pos | 0),
         pos$0=caml_ml_string_length(str),
         accu$1=[0,s$0,accu],
         accu=accu$1,
         pos=pos$0;
        continue}}
    function quote$1(s)
     {var
       len=caml_ml_string_length(s),
       s$0=caml_create_bytes(len << 1),
       pos=[0,0],
       _cA_=len - 1 | 0,
       _cz_=0;
      if(! (_cA_ < 0))
       {var i=_cz_;
        for(;;)
         {var c=runtime.caml_string_unsafe_get(s,i);
          if(91 <= c)
           var
            _cC_=c - 93 | 0,
            switch$0=29 < _cC_ >>> 0?32 <= _cC_?0:1:1 === _cC_?1:0;
          else
           if(47 <= c)
            var switch$0=63 === c?1:0;
           else
            if(36 <= c)
             switch(c - 36 | 0)
              {case 1:
               case 2:
               case 3:
               case 8:
               case 9:var switch$0=0;break;
               default:var switch$0=1}
            else
             var switch$0=0;
          if(switch$0)
           {caml_bytes_unsafe_set(s$0,pos[1],92);
            pos[1]++;
            caml_bytes_unsafe_set(s$0,pos[1],c);
            pos[1]++}
          else
           {caml_bytes_unsafe_set(s$0,pos[1],c);pos[1]++}
          var _cD_=i + 1 | 0;
          if(_cA_ !== i){var i=_cD_;continue}
          break}}
      var _cB_=pos[1],r=caml_create_bytes(_cB_);
      runtime.caml_blit_bytes(s$0,0,r,0,_cB_);
      return caml_call1(Stdlib_bytes[42],r)}
    function full_split$0(opt,rex,s)
     {if(opt)var sth=opt[1],max=sth;else var max=0;
      if(0 === caml_ml_string_length(s))return 0;
      if(1 === max)return [0,[0,s],0];
      var results=split_full(0,0,rex,s);
      function _ct_(param)
       {if(936573133 <= param[1]){var s=param[2];return [0,[0,s],0]}
        var
         d=param[2],
         matches=caml_call1(Group[6],d),
         delim=caml_call2(Group[1],d,0),
         l=[0,0],
         _cv_=matches.length - 1 - 1 | 0,
         _cu_=1;
        if(! (_cv_ < 1))
         {var i=_cu_;
          for(;;)
           {var
             _cw_=l[1],
             _cx_=
              caml_equal(caml_check_bound(matches,i)[i + 1],_cm_)
               ?0
               :[2,i,caml_call2(Group[1],d,i)];
            l[1] = [0,_cx_,_cw_];
            var _cy_=i + 1 | 0;
            if(_cv_ !== i){var i=_cy_;continue}
            break}}
        return [0,[1,delim],caml_call1(Stdlib_list[9],l[1])]}
      var matches=caml_call2(Stdlib_list[17],_ct_,results);
      return caml_call1(Stdlib_list[13],matches)}
    var
     Re_Pcre=
      [0,
       re$1,
       regexp$0,
       extract,
       exec$0,
       get_substring,
       get_substring_ofs,
       pmatch,
       substitute,
       full_split$0,
       split$2,
       quote$1];
    caml_register_global(162,Re_Pcre,"Re__Pcre");
    var
     Parse_error$2=[248,cst_Re_Posix_Parse_error,caml_fresh_oo_id(0)],
     Not_supported$1=[248,cst_Re_Posix_Not_supported,caml_fresh_oo_id(0)];
    function re$2(opt$0,s)
     {if(opt$0)var sth=opt$0[1],opts=sth;else var opts=0;
      var
       newline=caml_call2(Stdlib_list[32],-638074828,opts),
       i=[0,0],
       l=caml_ml_string_length(s);
      function eos$0(param){return i[1] === l?1:0}
      function test(c)
       {var
         _cr_=1 - eos$0(0),
         _cs_=_cr_?caml_string_get(s,i[1]) === c?1:0:_cr_;
        return _cs_}
      function accept(c){var r=test(c);if(r)i[1]++;return r}
      function get(param){var r=caml_string_get(s,i[1]);i[1]++;return r}
      function unget(param){i[1] += -1;return 0}
      function regexp(param)
       {var left=branch(0),left$0=left;
        for(;;)
         {if(accept(124))
           {var left$1=alt$0([0,left$0,[0,branch(0),0]]),left$0=left$1;
            continue}
          return left$0}}
      function branch(param)
       {var left=0;
        for(;;)
         {if(! eos$0(0))
           if(! test(124))
            if(! test(41))
             {if(accept(46))
               var r=newline?notnl:any;
              else
               if(accept(40))
                {var r$0=regexp(0);
                 if(1 - accept(41))throw Parse_error$2;
                 var r=[6,r$0]}
               else
                if(accept(94))
                 var r=newline?bol:bos;
                else
                 if(accept(36))
                  var r=newline?eol:eos;
                 else
                  if(accept(91))
                   if(accept(94))
                    var _cp_=char$0(10),r=diff$0(compl(bracket(0)),_cp_);
                   else
                    var r=alt$0(bracket(0));
                  else
                   if(accept(92))
                    {if(eos$0(0))throw Parse_error$2;
                     var c=get(0);
                     if(91 <= c)
                      var
                       _cq_=c - 93 | 0,
                       switch$0=29 < _cq_ >>> 0?32 <= _cq_?0:1:1 === _cq_?1:0;
                     else
                      if(47 <= c)
                       var switch$0=63 === c?1:0;
                      else
                       if(36 <= c)
                        switch(c - 36 | 0)
                         {case 1:
                          case 2:
                          case 3:
                          case 8:
                          case 9:var switch$0=0;break;
                          default:var switch$0=1}
                       else
                        var switch$0=0;
                     if(! switch$0)throw Parse_error$2;
                     var r=char$0(c)}
                   else
                    {if(eos$0(0))throw Parse_error$2;
                     var
                      c$0=get(0),
                      switch$1=
                       64 <= c$0
                        ?92 === c$0?1:123 === c$0?1:0
                        :44 <= c$0?63 <= c$0?1:0:42 <= c$0?1:0;
                     if(switch$1)throw Parse_error$2;
                     var r=char$0(c$0)}
              if(accept(42))
               var _co_=rep$0([8,r]);
              else
               if(accept(43))
                var _co_=rep1([8,r]);
               else
                if(accept(63))
                 var _co_=opt(r);
                else
                 if(accept(123))
                  {var match=integer(0);
                   if(match)
                    {var i=match[1],j=accept(44)?integer(0):[0,i];
                     if(1 - accept(125))throw Parse_error$2;
                     if(j){var j$0=j[1];if(j$0 < i)throw Parse_error$2}
                     var _co_=repn([8,r],i,j)}
                   else
                    {unget(0);var _co_=r}}
                 else
                  var _co_=r;
              var left$0=[0,_co_,left],left=left$0;
              continue}
          return seq$1(caml_call1(Stdlib_list[9],left))}}
      function integer(param)
       {if(eos$0(0))return 0;
        var d=get(0),switcher=d - 48 | 0;
        if(9 < switcher >>> 0){unget(0);return 0}
        var i=d - 48 | 0,i$0=i;
        for(;;)
         {if(eos$0(0))return [0,i$0];
          var d$0=get(0),switcher$0=d$0 - 48 | 0;
          if(9 < switcher$0 >>> 0){unget(0);return [0,i$0]}
          var i$1=(10 * i$0 | 0) + (d$0 - 48 | 0) | 0;
          if(i$1 < i$0)throw Parse_error$2;
          var i$0=i$1;
          continue}}
      function bracket(s)
       {var s$0=s;
        for(;;)
         {if(0 !== s$0)if(accept(93))return s$0;
          var c=char$1(0);
          if(accept(45))
           {if(accept(93))
             {var _cn_=[0,char$0(45),s$0];return [0,char$0(c),_cn_]}
            var c$0=char$1(0),s$1=[0,rg(c,c$0),s$0],s$0=s$1;
            continue}
          var s$2=[0,char$0(c),s$0],s$0=s$2;
          continue}}
      function char$1(param)
       {if(eos$0(0))throw Parse_error$2;
        var c=get(0);
        if(91 === c)
         {if(accept(61))throw Not_supported$1;
          if(accept(58))throw Not_supported$1;
          if(accept(46))
           {if(eos$0(0))throw Parse_error$2;
            var c$0=get(0);
            if(1 - accept(46))throw Not_supported$1;
            if(1 - accept(93))throw Parse_error$2;
            return c$0}
          return c}
        return c}
      var r=regexp(0);
      if(1 - eos$0(0))throw Parse_error$2;
      var
       r$0=caml_call2(Stdlib_list[32],886285209,opts)?[10,r]:r,
       r$1=caml_call2(Stdlib_list[32],853495711,opts)?[7,r$0]:r$0;
      return r$1}
    function compile$0(re){return compile(longest(re))}
    function compile_pat$1(opt,s)
     {if(opt)var sth=opt[1],opts=sth;else var opts=0;
      return compile$0(re$2([0,opts],s))}
    var
     Re_Posix=
      [0,Parse_error$2,Not_supported$1,re$2,compile$0,compile_pat$1];
    caml_register_global(163,Re_Posix,"Re__Posix");
    var
     Re$0=
      [0,
       Group,
       compile,
       exec,
       exec_opt,
       execp,
       exec_partial,
       Mark,
       Seq,
       all$0,
       all_gen,
       all_seq,
       matches,
       matches_gen,
       matches_seq,
       split$0,
       split_gen,
       split_seq,
       split_full,
       split_full_gen,
       split_full_seq,
       replace,
       replace_string,
       str,
       char$0,
       alt$0,
       seq$1,
       empty$2,
       epsilon,
       rep$0,
       rep1,
       repn,
       opt,
       bol,
       eol,
       bow,
       eow,
       bos,
       eos,
       leol,
       start$0,
       stop$0,
       word,
       not_boundary,
       whole_string,
       longest,
       shortest,
       first$0,
       greedy,
       non_greedy,
       group,
       no_group,
       nest,
       mark$0,
       set,
       rg,
       inter$0,
       diff$0,
       compl,
       any,
       notnl,
       alnum,
       wordc,
       alpha,
       ascii,
       blank,
       cntrl,
       digit,
       graph,
       lower,
       print,
       punct,
       space,
       upper,
       xdigit,
       case$0,
       no_case,
       pp$5,
       print_re,
       print_re,
       View,
       witness,
       get$0,
       get_ofs,
       get_all,
       get_all_ofs,
       test$0,
       marked,
       mark_set,
       0,
       0,
       0,
       0,
       0,
       0];
    caml_register_global(164,Re$0,"Re");
    return}
  (function(){return this}()));


//# 1 ".js/uutf/uutf.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_blit_bytes=runtime.caml_blit_bytes,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_check_bound=runtime.caml_check_bound,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_new_string=runtime.caml_new_string,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_UTF_8$0=caml_new_string("UTF-8"),
     cst_US_ASCII$0=caml_new_string("US-ASCII"),
     cst_ISO_8859_1$1=caml_new_string("ISO-8859-1"),
     cst_UTF_16$0=caml_new_string("UTF-16"),
     cst_UTF_16LE$0=caml_new_string("UTF-16LE"),
     cst_UTF_16BE$0=caml_new_string("UTF-16BE"),
     cst_ISO646_US=caml_new_string("ISO646-US"),
     cst_CSISOLATIN1=caml_new_string("CSISOLATIN1"),
     cst_ANSI_X3_4_1968=caml_new_string("ANSI_X3.4-1968"),
     cst_ANSI_X3_4_1986=caml_new_string("ANSI_X3.4-1986"),
     cst_ASCII=caml_new_string("ASCII"),
     cst_CP367=caml_new_string("CP367"),
     cst_CP819=caml_new_string("CP819"),
     cst_CSASCII=caml_new_string("CSASCII"),
     cst_IBM367=caml_new_string("IBM367"),
     cst_IBM819=caml_new_string("IBM819"),
     cst_ISO_8859_1$0=caml_new_string("ISO-8859-1"),
     cst_ISO_IR_100=caml_new_string("ISO-IR-100"),
     cst_ISO_IR_6=caml_new_string("ISO-IR-6"),
     cst_US=caml_new_string("US"),
     cst_ISO_646_IRV_1991=caml_new_string("ISO_646.IRV:1991"),
     cst_ISO_8859_1=caml_new_string("ISO_8859-1"),
     cst_ISO_8859_1_1987=caml_new_string("ISO_8859-1:1987"),
     cst_L1=caml_new_string("L1"),
     cst_LATIN1=caml_new_string("LATIN1"),
     cst_US_ASCII=caml_new_string("US-ASCII"),
     cst_UTF_16=caml_new_string("UTF-16"),
     cst_UTF_16BE=caml_new_string("UTF-16BE"),
     cst_UTF_16LE=caml_new_string("UTF-16LE"),
     cst_UTF_8=caml_new_string("UTF-8"),
     cst_expected_Await_encode=caml_new_string("expected `Await encode"),
     Stdlib_uchar=global_data.Stdlib__uchar,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Stdlib=global_data.Stdlib,
     Assert_failure=global_data.Assert_failure,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_printf=global_data.Stdlib__printf,
     Stdlib_format=global_data.Stdlib__format,
     _a_=Stdlib_format[112],
     _B_=[0,caml_new_string("src/uutf.ml"),364,9],
     _u_=[0,[11,caml_new_string("`Await"),0],caml_new_string("`Await")],
     _v_=[0,[11,caml_new_string("`End"),0],caml_new_string("`End")],
     _w_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [11,caml_new_string("`Uchar U+"),[4,8,[0,2,4],0,[17,0,0]]]],
       caml_new_string("@[`Uchar U+%04X@]")],
     _x_=
      [0,
       [18,
        [1,[0,0,caml_new_string("")]],
        [11,caml_new_string("`Malformed ("),0]],
       caml_new_string("@[`Malformed (")],
     _y_=[0,[4,8,[0,2,2],0,0],caml_new_string("%02X")],
     _A_=[0,[12,32,[4,8,[0,2,2],0,0]],caml_new_string(" %02X")],
     _z_=[0,[12,41,[17,0,0]],caml_new_string(")@]")],
     _p_=[0,-211555818,3299808],
     _k_=[0,-211558048,3299808],
     _q_=[0,684370880,3299808],
     _o_=[0,684370880,427938126],
     _l_=[0,-211558048,427938126],
     _m_=[0,caml_new_string("src/uutf.ml"),154,55],
     _n_=[0,684370880,427938126],
     _r_=[0,caml_new_string("src/uutf.ml"),153,55],
     _s_=[0,caml_new_string("src/uutf.ml"),155,55],
     _t_=[0,684370880,3455931],
     _j_=[0,caml_new_string("src/uutf.ml"),121,9],
     _c_=[0,684370880],
     _d_=[0,-211555818],
     _e_=[0,-211558048],
     _f_=[0,143365725],
     _g_=[0,423112016],
     _h_=[0,338302576],
     _b_=
      [0,
       [11,
        caml_new_string("invalid bounds (index "),
        [4,0,0,0,[11,caml_new_string(", length "),[4,0,0,0,[12,41,0]]]]],
       caml_new_string("invalid bounds (index %d, length %d)")],
     _i_=
      [0,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       4,
       4,
       4,
       4,
       4,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0];
    function invalid_bounds(j,l)
     {var _aF_=caml_call3(Stdlib_printf[4],_b_,j,l);
      return caml_call1(Stdlib[2],_aF_)}
    function unsafe_set_byte(s,j,byte$0)
     {runtime.caml_bytes_unsafe_set(s,j,byte$0);return 0}
    var
     u_bom=caml_call1(Stdlib_uchar[9],65279),
     u_rep=caml_call1(Stdlib_uchar[9],65533);
    function encoding_of_string(s)
     {var
       match=caml_call1(Stdlib_string[25],s),
       _aD_=caml_string_compare(match,cst_ISO646_US);
      if(0 <= _aD_)
       if(0 < _aD_)
        {var switch$0=caml_string_compare(match,cst_US);
         if(0 <= switch$0)
          if(0 < switch$0)
           if(caml_string_notequal(match,cst_US_ASCII))
            {if(! caml_string_notequal(match,cst_UTF_16))return _f_;
             if(! caml_string_notequal(match,cst_UTF_16BE))return _e_;
             if(! caml_string_notequal(match,cst_UTF_16LE))return _d_;
             if(! caml_string_notequal(match,cst_UTF_8))return _c_;
             var switch$1=0}
           else
            var switch$1=1;
          else
           var switch$1=1;
         else
          var
           switch$1=
            caml_string_notequal(match,cst_ISO_646_IRV_1991)
             ?caml_string_notequal(match,cst_ISO_8859_1)
               ?caml_string_notequal(match,cst_ISO_8859_1_1987)
                 ?caml_string_notequal(match,cst_L1)
                   ?caml_string_notequal(match,cst_LATIN1)?0:2
                   :2
                 :2
               :2
             :1}
       else
        var switch$1=1;
      else
       var
        _aE_=caml_string_compare(match,cst_CSISOLATIN1),
        switch$1=
         0 <= _aE_
          ?0 < _aE_
            ?caml_string_notequal(match,cst_IBM367)
              ?caml_string_notequal(match,cst_IBM819)
                ?caml_string_notequal(match,cst_ISO_8859_1$0)
                  ?caml_string_notequal(match,cst_ISO_IR_100)
                    ?caml_string_notequal(match,cst_ISO_IR_6)?0:1
                    :2
                  :2
                :2
              :1
            :2
          :caml_string_notequal(match,cst_ANSI_X3_4_1968)
            ?caml_string_notequal(match,cst_ANSI_X3_4_1986)
              ?caml_string_notequal(match,cst_ASCII)
                ?caml_string_notequal(match,cst_CP367)
                  ?caml_string_notequal(match,cst_CP819)
                    ?caml_string_notequal(match,cst_CSASCII)?0:1
                    :2
                  :1
                :1
              :1
            :1;
      switch(switch$1){case 0:return 0;case 1:return _g_;default:return _h_}}
    function encoding_to_string(param)
     {return 143365725 <= param
              ?423112016 <= param
                ?684370880 <= param?cst_UTF_8$0:cst_US_ASCII$0
                :338302576 <= param?cst_ISO_8859_1$1:cst_UTF_16$0
              :-211555818 <= param?cst_UTF_16LE$0:cst_UTF_16BE$0}
    function malformed(s,j,l)
     {return [0,659980059,caml_call3(Stdlib_bytes[8],s,j,l)]}
    function malformed_pair(be,hi,s,j,l)
     {var bs1=caml_call3(Stdlib_bytes[7],s,j,l),bs0=caml_create_bytes(2);
      if(be)var j0=0,j1=1;else var j0=1,j1=0;
      unsafe_set_byte(bs0,j0,hi >>> 8 | 0);
      unsafe_set_byte(bs0,j1,hi & 255);
      var _aC_=caml_call2(Stdlib_bytes[14],bs0,bs1);
      return [0,659980059,caml_call1(Stdlib_bytes[42],_aC_)]}
    var utf_8_len=_i_.slice();
    function r_utf_8(s,j,l)
     {function uchar(c){return [0,852405675,caml_call1(Stdlib_uchar[9],c)]}
      var switcher=l - 1 | 0;
      if(3 < switcher >>> 0)throw [0,Assert_failure,_j_];
      switch(switcher)
       {case 0:return uchar(caml_bytes_unsafe_get(s,j));
        case 1:
         var
          b0=caml_bytes_unsafe_get(s,j),
          b1=caml_bytes_unsafe_get(s,j + 1 | 0);
         return 2 === (b1 >>> 6 | 0)
                 ?uchar((b0 & 31) << 6 | b1 & 63)
                 :malformed(s,j,l);
        case 2:
         var
          b0$0=caml_bytes_unsafe_get(s,j),
          b1$0=caml_bytes_unsafe_get(s,j + 1 | 0),
          b2=caml_bytes_unsafe_get(s,j + 2 | 0),
          c=(b0$0 & 15) << 12 | (b1$0 & 63) << 6 | b2 & 63;
         if(2 === (b2 >>> 6 | 0))
          {if(224 === b0$0)
            {if(160 <= b1$0)if(! (191 < b1$0))return uchar(c);
             return malformed(s,j,l)}
           if(237 === b0$0)
            {if(128 <= b1$0)if(! (159 < b1$0))return uchar(c);
             return malformed(s,j,l)}
           return 2 === (b1$0 >>> 6 | 0)?uchar(c):malformed(s,j,l)}
         return malformed(s,j,l);
        default:
         var
          b0$1=caml_bytes_unsafe_get(s,j),
          b1$1=caml_bytes_unsafe_get(s,j + 1 | 0),
          b2$0=caml_bytes_unsafe_get(s,j + 2 | 0),
          b3=caml_bytes_unsafe_get(s,j + 3 | 0),
          c$0=
           (b0$1 & 7)
           <<
           18
           |
           (b1$1 & 63)
           <<
           12
           |
           (b2$0 & 63)
           <<
           6
           |
           b3
           &
           63;
         if(2 === (b3 >>> 6 | 0))
          if(2 === (b2$0 >>> 6 | 0))
           {if(240 === b0$1)
             {if(144 <= b1$1)if(! (191 < b1$1))return uchar(c$0);
              return malformed(s,j,l)}
            if(244 === b0$1)
             {if(128 <= b1$1)if(! (143 < b1$1))return uchar(c$0);
              return malformed(s,j,l)}
            return 2 === (b1$1 >>> 6 | 0)?uchar(c$0):malformed(s,j,l)}
         return malformed(s,j,l)}}
    function r_utf_16(s,j0,j1)
     {var
       b0=caml_bytes_unsafe_get(s,j0),
       b1=caml_bytes_unsafe_get(s,j1),
       u=b0 << 8 | b1;
      if(55296 <= u)
       if(! (57343 < u))
        return 56319 < u
                ?malformed(s,caml_call2(Stdlib[5],j0,j1),2)
                :[0,16161,u];
      return [0,852405675,caml_call1(Stdlib_uchar[9],u)]}
    function r_utf_16_lo(hi,s,j0,j1)
     {var
       b0=caml_bytes_unsafe_get(s,j0),
       b1=caml_bytes_unsafe_get(s,j1),
       lo=b0 << 8 | b1;
      if(56320 <= lo)
       if(! (57343 < lo))
        return [0,
                852405675,
                caml_call1
                 (Stdlib_uchar[9],((hi & 1023) << 10 | lo & 1023) + 65536 | 0)];
      return malformed_pair(j0 < j1?1:0,hi,s,caml_call2(Stdlib[5],j0,j1),2)}
    function r_encoding(s,j,l)
     {function some(i){return i < l?[0,caml_bytes_unsafe_get(s,j + i | 0)]:0}
      var match=some(0),match$0=some(1),match$1=some(2);
      if(match)
       {var _aB_=match[1];
        if(240 <= _aB_)
         if(254 === _aB_)
          if(match$0)
           {if(255 === match$0[1])return _k_;var switch$0=0}
          else
           var switch$0=1;
         else
          if(255 === _aB_)
           if(match$0)
            {if(254 === match$0[1])return _p_;var switch$0=0}
           else
            var switch$0=1;
          else
           var switch$0=0;
        else
         if(0 === _aB_)
          if(match$0)
           {var p=match$0[1];
            if(0 < p)return [0,-211558048,[0,605782321,p]];
            var switch$0=0}
          else
           var switch$0=1;
         else
          if(239 <= _aB_)
           if(match$0)
            if(187 === match$0[1])
             if(match$1)
              {if(191 === match$1[1])return _q_;var switch$0=1}
             else
              var switch$0=1;
            else
             var switch$0=0;
           else
            var switch$0=1;
          else
           var switch$0=0;
        if(! switch$0)
         if(match$0)
          if(0 === match$0[1])
           if(0 < _aB_)return [0,-211555818,[0,605782321,_aB_]];
        if(0 === caml_check_bound(utf_8_len,_aB_)[_aB_ + 1])
         {if(match$0)return _l_;
          if(match$1)throw [0,Assert_failure,_m_];
          return _n_}
        return _o_}
      if(match$0)throw [0,Assert_failure,_r_];
      if(match$1)throw [0,Assert_failure,_s_];
      return _t_}
    function pp_decode(ppf,param)
     {if(typeof param === "number")
       return 1006505782 <= param
               ?caml_call2(_a_,ppf,_u_)
               :caml_call2(_a_,ppf,_v_);
      if(852405675 <= param[1])
       {var u=param[2];
        return caml_call3(_a_,ppf,_w_,caml_call1(Stdlib_uchar[10],u))}
      var bs=param[2],l=caml_ml_string_length(bs);
      caml_call2(_a_,ppf,_x_);
      if(0 < l)caml_call3(_a_,ppf,_y_,caml_string_get(bs,0));
      var _az_=l - 1 | 0,_ay_=1;
      if(! (_az_ < 1))
       {var i=_ay_;
        for(;;)
         {caml_call3(_a_,ppf,_A_,caml_string_get(bs,i));
          var _aA_=i + 1 | 0;
          if(_az_ !== i){var i=_aA_;continue}
          break}}
      return caml_call2(_a_,ppf,_z_)}
    function i_rem(d){return (d[7] - d[6] | 0) + 1 | 0}
    function eoi(d){d[5] = Stdlib_bytes[3];d[6] = 0;d[7] = Stdlib[9];return 0}
    function src(d,s,j,l)
     {if(0 <= j)
       if(0 <= l)
        if(! (caml_ml_bytes_length(s) < (j + l | 0)))
         return 0 === l
                 ?eoi(d)
                 :(d[5] = s,d[6] = j,d[7] = (j + l | 0) - 1 | 0,0);
      return invalid_bounds(j,l)}
    function refill(k,d)
     {var _ax_=d[1];
      if(typeof _ax_ === "number"){d[18] = k;return 1006505782}
      if(438511779 <= _ax_[1])
       {var
         ic=_ax_[2],
         rc=caml_call4(Stdlib[73],ic,d[5],0,caml_ml_bytes_length(d[5]));
        src(d,d[5],0,rc);
        return caml_call1(k,d)}
      eoi(d);
      return caml_call1(k,d)}
    function t_need(d,need){d[9] = 0;d[10] = need;return 0}
    function t_fill(k,d)
     {function blit(d,l)
       {caml_blit_bytes(d[5],d[6],d[8],d[9],l);
        d[6] = d[6] + l | 0;
        d[9] = d[9] + l | 0;
        return 0}
      var rem=i_rem(d);
      if(0 <= rem)
       {var need=d[10] - d[9] | 0;
        return rem < need
                ?(blit(d,rem),refill(function(_aw_){return t_fill(k,_aw_)},d))
                :(blit(d,need),caml_call1(k,d))}
      return caml_call1(k,d)}
    function ret(k,v,byte_count,d)
     {d[18] = k;d[15] = d[15] + byte_count | 0;return caml_call2(d[17],d,v)}
    function decode_us_ascii(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var j=d[6];
        d[6] = d[6] + 1 | 0;
        var
         _au_=d[5],
         b0=caml_bytes_unsafe_get(_au_,j),
         _at_=1,
         _av_=
          127 < b0
           ?malformed(_au_,j,1)
           :[0,852405675,caml_call1(Stdlib_uchar[9],b0)];
        return ret(decode_us_ascii,_av_,_at_,d)}
      return 0 <= rem?refill(decode_us_ascii,d):3455931}
    function decode_iso_8859_1(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var j=d[6];
        d[6] = d[6] + 1 | 0;
        return ret
                (decode_iso_8859_1,
                 [0,
                  852405675,
                  caml_call1(Stdlib_uchar[9],caml_bytes_unsafe_get(d[5],j))],
                 1,
                 d)}
      return 0 <= rem?refill(decode_iso_8859_1,d):3455931}
    function t_decode_utf_8(d)
     {if(d[9] < d[10])
       {var _ar_=d[9];return ret(decode_utf_8,malformed(d[8],0,d[9]),_ar_,d)}
      var _as_=d[9];
      return ret(decode_utf_8,r_utf_8(d[8],0,d[9]),_as_,d)}
    function decode_utf_8(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {var need=utf_8_len[caml_bytes_unsafe_get(d[5],d[6]) + 1];
        if(rem < need){t_need(d,need);return t_fill(t_decode_utf_8,d)}
        var j=d[6];
        return 0 === need
                ?(d[6]
                  =
                  d[6]
                  +
                  1
                  |
                  0,
                  ret(decode_utf_8,malformed(d[5],j,1),1,d))
                :(d[6]
                  =
                  d[6]
                  +
                  need
                  |
                  0,
                  ret(decode_utf_8,r_utf_8(d[5],j,need),need,d))}
      return 0 <= rem?refill(decode_utf_8,d):3455931}
    function t_decode_utf_16be_lo(hi,d)
     {var bcount=d[9] + 2 | 0;
      return d[9] < d[10]
              ?ret(decode_utf_16be,malformed_pair(1,hi,d[8],0,d[9]),bcount,d)
              :ret(decode_utf_16be,r_utf_16_lo(hi,d[8],0,1),bcount,d)}
    function decode_utf_16be_lo(v,d)
     {if(659980059 <= v[1])return ret(decode_utf_16be,v,2,d);
      var hi=v[2],rem=i_rem(d);
      if(2 <= rem)
       {var j=d[6];
        d[6] = d[6] + 2 | 0;
        return ret(decode_utf_16be,r_utf_16_lo(hi,d[5],j,j + 1 | 0),4,d)}
      t_need(d,2);
      return t_fill(function(_aq_){return t_decode_utf_16be_lo(hi,_aq_)},d)}
    function t_decode_utf_16be(d)
     {if(d[9] < d[10])
       {var _ap_=d[9];
        return ret(decode_utf_16be,malformed(d[8],0,d[9]),_ap_,d)}
      return decode_utf_16be_lo(r_utf_16(d[8],0,1),d)}
    function decode_utf_16be(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {if(2 <= rem)
         {var j=d[6];
          d[6] = d[6] + 2 | 0;
          return decode_utf_16be_lo(r_utf_16(d[5],j,j + 1 | 0),d)}
        t_need(d,2);
        return t_fill(t_decode_utf_16be,d)}
      return 0 <= rem?refill(decode_utf_16be,d):3455931}
    function t_decode_utf_16_lo(hi,d)
     {var bcount=d[9] + 2 | 0;
      return d[9] < d[10]
              ?ret(decode_utf_16,malformed_pair(0,hi,d[8],0,d[9]),bcount,d)
              :ret(decode_utf_16,r_utf_16_lo(hi,d[8],1,0),bcount,d)}
    function decode_utf_16le_lo(v,d)
     {if(659980059 <= v[1])return ret(decode_utf_16,v,2,d);
      var hi=v[2],rem=i_rem(d);
      if(2 <= rem)
       {var j=d[6];
        d[6] = d[6] + 2 | 0;
        return ret(decode_utf_16,r_utf_16_lo(hi,d[5],j + 1 | 0,j),4,d)}
      t_need(d,2);
      return t_fill(function(_ao_){return t_decode_utf_16_lo(hi,_ao_)},d)}
    function t_decode_utf_16(d)
     {if(d[9] < d[10])
       {var _an_=d[9];return ret(decode_utf_16,malformed(d[8],0,d[9]),_an_,d)}
      return decode_utf_16le_lo(r_utf_16(d[8],1,0),d)}
    function decode_utf_16(d)
     {var rem=i_rem(d);
      if(0 < rem)
       {if(2 <= rem)
         {var j=d[6];
          d[6] = d[6] + 2 | 0;
          return decode_utf_16le_lo(r_utf_16(d[5],j + 1 | 0,j),d)}
        t_need(d,2);
        return t_fill(t_decode_utf_16,d)}
      return 0 <= rem?refill(decode_utf_16,d):3455931}
    function guessed_utf_16(d,be,v)
     {if(be)
       var
        decode_utf_16$0=decode_utf_16be,
        t_decode_utf_16$0=t_decode_utf_16be,
        t_decode_utf_16_lo$0=t_decode_utf_16be_lo,
        j0=0,
        j1=1;
      else
       var
        decode_utf_16$0=decode_utf_16,
        t_decode_utf_16$0=t_decode_utf_16,
        t_decode_utf_16_lo$0=t_decode_utf_16_lo,
        j0=1,
        j1=0;
      function b3(k,d)
       {return 3 <= d[9]
                ?(d[10]
                  =
                  2,
                  d[9]
                  =
                  1,
                  unsafe_set_byte(d[8],0,caml_bytes_unsafe_get(d[8],2)),
                  t_fill(k,d))
                :decode_utf_16$0(d)}
      if(typeof v === "number")
       {if(427938126 <= v)
         {var v$0=r_utf_16(d[8],j0,j1);
          if(659980059 <= v$0[1])
           {var _ad_=2;
            return ret
                    (function(_am_){return b3(t_decode_utf_16$0,_am_)},
                     v$0,
                     _ad_,
                     d)}
          var hi=v$0[2];
          if(3 <= d[9])
           return b3(function(_al_){return t_decode_utf_16_lo$0(hi,_al_)},d);
          var _ae_=d[9];
          return ret
                  (decode_utf_16$0,
                   malformed_pair(be,hi,Stdlib_bytes[3],0,0),
                   _ae_,
                   d)}
        var _af_=2,_ag_=[0,852405675,u_bom];
        return ret
                (function(_ak_){return b3(t_decode_utf_16$0,_ak_)},
                 _ag_,
                 _af_,
                 d)}
      var u=v[2],_ah_=2,_ai_=[0,852405675,caml_call1(Stdlib_uchar[9],u)];
      return ret
              (function(_aj_){return b3(t_decode_utf_16$0,_aj_)},_ai_,_ah_,d)}
    function k(d)
     {function setup(d)
       {var match=r_encoding(d[8],0,d[9]),_ac_=match[1];
        if(-211555818 === _ac_)
         {var r=match[2];
          d[2] = -211555818;
          d[18] = decode_utf_16;
          return guessed_utf_16(d,0,r)}
        if(684370880 <= _ac_)
         {var r$0=match[2];
          d[2] = 684370880;
          d[18] = decode_utf_8;
          if(3455931 === r$0)return 3455931;
          if(427938126 <= r$0)
           {var
             b3=
              function(d)
               {var
                 b3=caml_bytes_unsafe_get(d[8],2),
                 n=caml_check_bound(utf_8_len,b3)[b3 + 1];
                return 0 === n
                        ?ret(decode_utf_8,malformed(d[8],2,1),1,d)
                        :(d[10]
                          =
                          n,
                          d[9]
                          =
                          1,
                          unsafe_set_byte(d[8],0,b3),
                          t_fill(t_decode_utf_8,d))},
             b2=
              function(d)
               {var
                 b2=caml_bytes_unsafe_get(d[8],1),
                 b3$0=2 < d[9]?b3:decode_utf_8,
                 n=caml_check_bound(utf_8_len,b2)[b2 + 1];
                if(0 === n)return ret(b3$0,malformed(d[8],1,1),1,d);
                if(1 === n)return ret(b3$0,r_utf_8(d[8],1,1),1,d);
                d[10] = n;
                unsafe_set_byte(d[8],0,b2);
                if(3 <= d[9])
                 {d[9] = 2;
                  unsafe_set_byte(d[8],1,caml_bytes_unsafe_get(d[8],2))}
                else
                 d[9] = 1;
                return t_fill(t_decode_utf_8,d)},
             b1=caml_bytes_unsafe_get(d[8],0),
             b2$0=1 < d[9]?b2:decode_utf_8,
             n=caml_check_bound(utf_8_len,b1)[b1 + 1];
            if(4 < n >>> 0)throw [0,Assert_failure,_B_];
            switch(n)
             {case 0:return ret(b2$0,malformed(d[8],0,1),1,d);
              case 1:return ret(b2$0,r_utf_8(d[8],0,1),1,d);
              case 2:
               return 2 <= d[9]
                       ?3 <= d[9]
                         ?ret(b3,r_utf_8(d[8],0,2),2,d)
                         :ret(decode_utf_8,r_utf_8(d[8],0,2),2,d)
                       :ret(decode_utf_8,malformed(d[8],0,1),1,d);
              case 3:
               if(3 <= d[9])return ret(decode_utf_8,r_utf_8(d[8],0,3),3,d);
               var _aa_=d[9];
               return ret(decode_utf_8,malformed(d[8],0,d[9]),_aa_,d);
              default:
               if(3 <= d[9]){d[10] = 4;return t_fill(t_decode_utf_8,d)}
               var _ab_=d[9];
               return ret(decode_utf_8,malformed(d[8],0,d[9]),_ab_,d)}}
          return ret(decode_utf_8,[0,852405675,u_bom],3,d)}
        var r$1=match[2];
        d[2] = -211558048;
        d[18] = decode_utf_16be;
        return guessed_utf_16(d,1,r$1)}
      t_need(d,3);
      return t_fill(setup,d)}
    function nline(d){d[14] = 0;d[13] = d[13] + 1 | 0;return 0}
    function ncol(d){d[14] = d[14] + 1 | 0;return 0}
    function ncount(d){d[16] = d[16] + 1 | 0;return 0}
    function cr(d,b){d[12] = b;return 0}
    function pp(d,v)
     {if(852405675 <= v[1])
       {var u=v[2],match=caml_call1(Stdlib_uchar[10],u),_$_=match - 133 | 0;
        if(8100 < _$_ >>> 0)
         {var switcher=_$_ + 123 | 0;
          if(3 < switcher >>> 0)
           var switch$0=0;
          else
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              ncount(d);
              return last_cr?v:(nline(d),v);
             case 1:var switch$0=0;break;
             case 2:var switch$0=1;break;
             default:cr(d,1);ncount(d);nline(d);return v}}
        else
         var switch$0=8097 < (_$_ - 1 | 0) >>> 0?1:0;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_readline(d,v)
     {if(852405675 <= v[1])
       {var u=v[2],match=caml_call1(Stdlib_uchar[10],u),___=match - 133 | 0;
        if(8100 < ___ >>> 0)
         {var switcher=___ + 123 | 0;
          if(3 < switcher >>> 0)
           var switch$0=0;
          else
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:var switch$0=0;break;
             case 2:var switch$0=1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         var switch$0=8097 < (___ - 1 | 0) >>> 0?1:0;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),[0,852405675,d[4]])
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_nlf(d,v)
     {if(852405675 <= v[1])
       {var u=v[2],match=caml_call1(Stdlib_uchar[10],u);
        if(14 <= match)
         if(8232 <= match)
          var switch$0=8234 <= match?0:1;
         else
          {if(133 === match)
            {cr(d,0);ncount(d);nline(d);return [0,852405675,d[4]]}
           var switch$0=0}
        else
         if(10 <= match)
          {var switcher=match - 10 | 0;
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:var switch$0=0;break;
             case 2:var switch$0=1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
         else
          var switch$0=0;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function pp_nln_ascii(d,v)
     {if(852405675 <= v[1])
       {var u=v[2],match=caml_call1(Stdlib_uchar[10],u),_Z_=match - 133 | 0;
        if(8100 < _Z_ >>> 0)
         {var switcher=_Z_ + 123 | 0;
          if(3 < switcher >>> 0)
           var switch$0=0;
          else
           switch(switcher)
            {case 0:
              var last_cr=d[12];
              cr(d,0);
              return last_cr
                      ?caml_call1(d[18],d)
                      :(ncount(d),nline(d),[0,852405675,d[4]]);
             case 1:var switch$0=0;break;
             case 2:var switch$0=1;break;
             default:cr(d,1);ncount(d);nline(d);return [0,852405675,d[4]]}}
        else
         var switch$0=8097 < (_Z_ - 1 | 0) >>> 0?1:0;
        return switch$0
                ?(cr(d,0),ncount(d),nline(d),v)
                :(cr(d,0),ncount(d),ncol(d),v)}
      cr(d,0);
      ncount(d);
      ncol(d);
      return v}
    function decode_fun(param)
     {return 143365725 <= param
              ?423112016 <= param
                ?684370880 <= param?decode_utf_8:decode_us_ascii
                :338302576 <= param?decode_iso_8859_1:decode_utf_16be
              :-211555818 <= param?decode_utf_16:decode_utf_16be}
    function decoder(nln,encoding,src)
     {if(nln)
       {var _X_=nln[1],_Y_=_X_[1];
        if(3895880 === _Y_)
         var nl=_X_[2],pp$0=pp_nln_nlf,nl$0=nl;
        else
         if(605782321 <= _Y_)
          var nl$1=_X_[2],pp$0=pp_nln_ascii,nl$0=nl$1;
         else
          var nl$2=_X_[2],pp$0=pp_nln_readline,nl$0=nl$2}
      else
       var nl$3=caml_call1(Stdlib_uchar[9],10),pp$0=pp,nl$0=nl$3;
      if(encoding)
       var e=encoding[1],encoding$0=e,k$0=decode_fun(e);
      else
       var encoding$0=684370880,k$0=k;
      if(typeof src === "number")
       var i=Stdlib_bytes[3],i_pos=1,i_max=0;
      else
       if(438511779 <= src[1])
        var i=caml_create_bytes(65536),i_pos=1,i_max=0;
       else
        var
         s=src[2],
         i_max$0=caml_ml_string_length(s) - 1 | 0,
         i$0=caml_call1(Stdlib_bytes[43],s),
         i=i$0,
         i_pos=0,
         i_max=i_max$0;
      var utf16=143365725 === encoding$0?1:0;
      return [0,
              src,
              encoding$0,
              nln,
              nl$0,
              i,
              i_pos,
              i_max,
              caml_create_bytes(4),
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              function(d,v)
               {if(852405675 <= v[1])
                 {var u=v[2],match=caml_call1(Stdlib_uchar[10],u);
                  if(65279 === match)
                   {if(utf16){d[2] = -211558048;d[18] = decode_utf_16be}
                    d[11] = 1;
                    d[17] = pp$0;
                    return caml_call1(d[18],d)}
                  if(65534 === match)
                   if(utf16)
                    {d[2] = -211555818;
                     d[18] = decode_utf_16;
                     d[11] = 1;
                     d[17] = pp$0;
                     return caml_call1(d[18],d)}
                  d[11] = 0;
                  d[17] = pp$0;
                  return caml_call2(d[17],d,v)}
                d[11] = 0;
                d[17] = pp$0;
                return caml_call2(d[17],d,v)},
              k$0]}
    function decode(d){return caml_call1(d[18],d)}
    function decoder_line(d){return d[13]}
    function decoder_col(d){return d[14]}
    function decoder_byte_count(d){return d[15]}
    function decoder_count(d){return d[16]}
    function decoder_removed_bom(d){return d[11]}
    function decoder_src(d){return d[1]}
    function decoder_nln(d){return d[3]}
    function decoder_encoding(d){return d[2]}
    function set_decoder_encoding(d,e)
     {d[2] = e;d[18] = decode_fun(e);return 0}
    function o_rem(e){return (e[5] - e[4] | 0) + 1 | 0}
    function dst(e,s,j,l)
     {var _U_=j < 0?1:0;
      if(_U_)
       var _V_=_U_;
      else
       var
        _W_=l < 0?1:0,
        _V_=_W_ || (caml_ml_bytes_length(s) < (j + l | 0)?1:0);
      if(_V_)invalid_bounds(j,l);
      e[3] = s;
      e[4] = j;
      e[5] = (j + l | 0) - 1 | 0;
      return 0}
    function flush(k,e)
     {var _T_=e[1];
      if(typeof _T_ === "number")
       {e[9]
        =
        function(e,param)
         {if(typeof param === "number")
           if(1006505782 <= param)return caml_call1(k,e);
          return caml_call1(Stdlib[2],cst_expected_Await_encode)};
        return 939392865}
      if(438511779 <= _T_[1])
       {var oc=_T_[2];
        caml_call4(Stdlib[57],oc,e[3],0,e[4]);
        e[4] = 0;
        return caml_call1(k,e)}
      var b=_T_[2],o=caml_call1(Stdlib_bytes[42],e[3]);
      caml_call4(Stdlib_buffer[16],b,o,0,e[4]);
      e[4] = 0;
      return caml_call1(k,e)}
    function t_range(e,max){e[7] = 0;e[8] = max;return 0}
    function t_flush(k,e)
     {function blit(e,l)
       {caml_blit_bytes(e[6],e[7],e[3],e[4],l);
        e[4] = e[4] + l | 0;
        e[7] = e[7] + l | 0;
        return 0}
      var rem=o_rem(e),len=(e[8] - e[7] | 0) + 1 | 0;
      return rem < len
              ?(blit(e,rem),flush(function(_S_){return t_flush(k,_S_)},e))
              :(blit(e,len),caml_call1(k,e))}
    function encode_utf_8(e,v)
     {function k(e){e[9] = encode_utf_8;return 17724}
      if(typeof v === "number")return 1006505782 <= v?k(e):flush(k,e);
      var u=v[2],u$0=caml_call1(Stdlib_uchar[10],u),rem=o_rem(e);
      if(127 < u$0)
       {if(2047 < u$0)
         {if(65535 < u$0)
           {if(4 <= rem)
             {var j=e[4];e[4] = e[4] + 4 | 0;var s=e[3],j$0=j,k$0=k}
            else
             {t_range(e,3);
              var
               _M_=function(_R_){return t_flush(k,_R_)},
               s=e[6],
               j$0=0,
               k$0=_M_}
            unsafe_set_byte(s,j$0,240 | u$0 >>> 18 | 0);
            unsafe_set_byte(s,j$0 + 1 | 0,128 | (u$0 >>> 12 | 0) & 63);
            unsafe_set_byte(s,j$0 + 2 | 0,128 | (u$0 >>> 6 | 0) & 63);
            unsafe_set_byte(s,j$0 + 3 | 0,128 | u$0 & 63);
            return k$0(e)}
          if(3 <= rem)
           {var j$1=e[4];e[4] = e[4] + 3 | 0;var s$0=e[3],j$2=j$1,k$1=k}
          else
           {t_range(e,2);
            var
             _N_=function(_Q_){return t_flush(k,_Q_)},
             s$0=e[6],
             j$2=0,
             k$1=_N_}
          unsafe_set_byte(s$0,j$2,224 | u$0 >>> 12 | 0);
          unsafe_set_byte(s$0,j$2 + 1 | 0,128 | (u$0 >>> 6 | 0) & 63);
          unsafe_set_byte(s$0,j$2 + 2 | 0,128 | u$0 & 63);
          return k$1(e)}
        if(2 <= rem)
         {var j$3=e[4];e[4] = e[4] + 2 | 0;var s$1=e[3],j$4=j$3,k$2=k}
        else
         {t_range(e,1);
          var _O_=function(_P_){return t_flush(k,_P_)},s$1=e[6],j$4=0,k$2=_O_}
        unsafe_set_byte(s$1,j$4,192 | u$0 >>> 6 | 0);
        unsafe_set_byte(s$1,j$4 + 1 | 0,128 | u$0 & 63);
        return k$2(e)}
      return 1 <= rem
              ?(unsafe_set_byte(e[3],e[4],u$0),e[4] = e[4] + 1 | 0,k(e))
              :flush(function(e){return encode_utf_8(e,v)},e)}
    function encode_utf_16be(e,v)
     {function k(e){e[9] = encode_utf_16be;return 17724}
      if(typeof v === "number")return 1006505782 <= v?k(e):flush(k,e);
      var u=v[2],u$0=caml_call1(Stdlib_uchar[10],u),rem=o_rem(e);
      if(65536 <= u$0)
       {if(4 <= rem)
         {var j=e[4];e[4] = e[4] + 4 | 0;var s=e[3],j$0=j,k$0=k}
        else
         {t_range(e,3);
          var _I_=function(_L_){return t_flush(k,_L_)},s=e[6],j$0=0,k$0=_I_}
        var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        unsafe_set_byte(s,j$0,hi >>> 8 | 0);
        unsafe_set_byte(s,j$0 + 1 | 0,hi & 255);
        unsafe_set_byte(s,j$0 + 2 | 0,lo >>> 8 | 0);
        unsafe_set_byte(s,j$0 + 3 | 0,lo & 255);
        return k$0(e)}
      if(2 <= rem)
       {var j$1=e[4];e[4] = e[4] + 2 | 0;var s$0=e[3],j$2=j$1,k$1=k}
      else
       {t_range(e,1);
        var _J_=function(_K_){return t_flush(k,_K_)},s$0=e[6],j$2=0,k$1=_J_}
      unsafe_set_byte(s$0,j$2,u$0 >>> 8 | 0);
      unsafe_set_byte(s$0,j$2 + 1 | 0,u$0 & 255);
      return k$1(e)}
    function encode_utf_16le(e,v)
     {function k(e){e[9] = encode_utf_16le;return 17724}
      if(typeof v === "number")return 1006505782 <= v?k(e):flush(k,e);
      var u=v[2],u$0=caml_call1(Stdlib_uchar[10],u),rem=o_rem(e);
      if(65536 <= u$0)
       {if(4 <= rem)
         {var j=e[4];e[4] = e[4] + 4 | 0;var s=e[3],j$0=j,k$0=k}
        else
         {t_range(e,3);
          var _E_=function(_H_){return t_flush(k,_H_)},s=e[6],j$0=0,k$0=_E_}
        var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        unsafe_set_byte(s,j$0,hi & 255);
        unsafe_set_byte(s,j$0 + 1 | 0,hi >>> 8 | 0);
        unsafe_set_byte(s,j$0 + 2 | 0,lo & 255);
        unsafe_set_byte(s,j$0 + 3 | 0,lo >>> 8 | 0);
        return k$0(e)}
      if(2 <= rem)
       {var j$1=e[4];e[4] = e[4] + 2 | 0;var s$0=e[3],j$2=j$1,k$1=k}
      else
       {t_range(e,1);
        var _F_=function(_G_){return t_flush(k,_G_)},s$0=e[6],j$2=0,k$1=_F_}
      unsafe_set_byte(s$0,j$2,u$0 & 255);
      unsafe_set_byte(s$0,j$2 + 1 | 0,u$0 >>> 8 | 0);
      return k$1(e)}
    function encoder(encoding,dst)
     {if(typeof dst === "number")
       var o=Stdlib_bytes[3],o_pos=1,o_max=0;
      else
       var o$0=caml_create_bytes(65536),o=o$0,o_pos=0,o_max=65535;
      var
       _D_=
        143365725 <= encoding
         ?684370880 <= encoding?encode_utf_8:encode_utf_16be
         :-211555818 <= encoding?encode_utf_16le:encode_utf_16be;
      return [0,dst,encoding,o,o_pos,o_max,caml_create_bytes(4),1,0,_D_]}
    function encode(e,v){return caml_call2(e[9],e,v)}
    function encoder_encoding(e){return e[2]}
    function encoder_dst(e){return e[1]}
    var Manual=[0,src,dst,o_rem];
    function encoding_guess(s)
     {var
       s$0=caml_call1(Stdlib_bytes[43],s),
       match=
        r_encoding(s$0,0,caml_call2(Stdlib[6],caml_ml_bytes_length(s$0),3)),
       _C_=match[1];
      if(-211555818 === _C_)
       {var d=match[2];return [0,-211555818,3299808 === d?1:0]}
      if(684370880 <= _C_)
       {var d$0=match[2];return [0,684370880,3299808 === d$0?1:0]}
      var d$1=match[2];
      return [0,-211558048,3299808 === d$1?1:0]}
    function fold_utf_8(opt,len,f,acc,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(len)
       var l=len[1],len$0=l;
      else
       var len$0=caml_ml_string_length(s) - pos | 0;
      var
       last=(pos + len$0 | 0) - 1 | 0,
       s$0=caml_call1(Stdlib_bytes[43],s),
       acc$0=acc,
       i=pos;
      for(;;)
       {if(last < i)return acc$0;
        var need=utf_8_len[caml_bytes_unsafe_get(s$0,i) + 1];
        if(0 === need)
         {var
           i$0=i + 1 | 0,
           acc$1=caml_call3(f,acc$0,i,malformed(s$0,i,1)),
           acc$0=acc$1,
           i=i$0;
          continue}
        var rem=(last - i | 0) + 1 | 0;
        if(rem < need)return caml_call3(f,acc$0,i,malformed(s$0,i,rem));
        var
         i$1=i + need | 0,
         acc$2=caml_call3(f,acc$0,i,r_utf_8(s$0,i,need)),
         acc$0=acc$2,
         i=i$1;
        continue}}
    function fold_utf_16be(opt,len,f,acc,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(len)
       var l=len[1],len$0=l;
      else
       var len$0=caml_ml_string_length(s) - pos | 0;
      var
       last=(pos + len$0 | 0) - 1 | 0,
       s$0=caml_call1(Stdlib_bytes[43],s),
       acc$0=acc,
       i=pos;
      for(;;)
       {if(last < i)return acc$0;
        var rem=(last - i | 0) + 1 | 0;
        if(2 <= rem)
         {var v=r_utf_16(s$0,i,i + 1 | 0);
          if(659980059 <= v[1])
           {var i$0=i + 2 | 0,acc$1=caml_call3(f,acc$0,i,v),acc$0=acc$1,i=i$0;
            continue}
          var hi=v[2];
          if(4 <= rem)
           {var
             i$1=i + 4 | 0,
             acc$2=
              caml_call3(f,acc$0,i,r_utf_16_lo(hi,s$0,i + 2 | 0,i + 3 | 0)),
             acc$0=acc$2,
             i=i$1;
            continue}
          return caml_call3(f,acc$0,i,malformed(s$0,i,rem))}
        return caml_call3(f,acc$0,i,malformed(s$0,i,1))}}
    function fold_utf_16le(opt,len,f,acc,s)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(len)
       var l=len[1],len$0=l;
      else
       var len$0=caml_ml_string_length(s) - pos | 0;
      var
       last=(pos + len$0 | 0) - 1 | 0,
       s$0=caml_call1(Stdlib_bytes[43],s),
       acc$0=acc,
       i=pos;
      for(;;)
       {if(last < i)return acc$0;
        var rem=(last - i | 0) + 1 | 0;
        if(2 <= rem)
         {var v=r_utf_16(s$0,i + 1 | 0,i);
          if(659980059 <= v[1])
           {var i$0=i + 2 | 0,acc$1=caml_call3(f,acc$0,i,v),acc$0=acc$1,i=i$0;
            continue}
          var hi=v[2];
          if(4 <= rem)
           {var
             i$1=i + 4 | 0,
             acc$2=
              caml_call3(f,acc$0,i,r_utf_16_lo(hi,s$0,i + 3 | 0,i + 2 | 0)),
             acc$0=acc$2,
             i=i$1;
            continue}
          return caml_call3(f,acc$0,i,malformed(s$0,i,rem))}
        return caml_call3(f,acc$0,i,malformed(s$0,i,1))}}
    var String=[0,encoding_guess,fold_utf_8,fold_utf_16be,fold_utf_16le];
    function add_utf_8(b,u)
     {var u$0=caml_call1(Stdlib_uchar[10],u);
      function w(byte$0){return caml_call2(Stdlib_buffer[10],b,byte$0)}
      return 127 < u$0
              ?2047 < u$0
                ?65535 < u$0
                  ?(w(240 | u$0 >>> 18 | 0),
                    w(128 | (u$0 >>> 12 | 0) & 63),
                    w(128 | (u$0 >>> 6 | 0) & 63),
                    w(128 | u$0 & 63))
                  :(w(224 | u$0 >>> 12 | 0),
                    w(128 | (u$0 >>> 6 | 0) & 63),
                    w(128 | u$0 & 63))
                :(w(192 | u$0 >>> 6 | 0),w(128 | u$0 & 63))
              :w(u$0)}
    function add_utf_16be(b,u)
     {var u$0=caml_call1(Stdlib_uchar[10],u);
      function w(byte$0){return caml_call2(Stdlib_buffer[10],b,byte$0)}
      if(65536 <= u$0)
       {var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        w(hi >>> 8 | 0);
        w(hi & 255);
        w(lo >>> 8 | 0);
        return w(lo & 255)}
      w(u$0 >>> 8 | 0);
      return w(u$0 & 255)}
    function add_utf_16le(b,u)
     {var u$0=caml_call1(Stdlib_uchar[10],u);
      function w(byte$0){return caml_call2(Stdlib_buffer[10],b,byte$0)}
      if(65536 <= u$0)
       {var
         u$1=u$0 - 65536 | 0,
         hi=55296 | u$1 >>> 10 | 0,
         lo=56320 | u$1 & 1023;
        w(hi & 255);
        w(hi >>> 8 | 0);
        w(lo & 255);
        return w(lo >>> 8 | 0)}
      w(u$0 & 255);
      return w(u$0 >>> 8 | 0)}
    var
     Buffer=[0,add_utf_8,add_utf_16be,add_utf_16le],
     Uutf=
      [0,
       u_bom,
       u_rep,
       encoding_of_string,
       encoding_to_string,
       decoder,
       decode,
       decoder_encoding,
       set_decoder_encoding,
       decoder_line,
       decoder_col,
       decoder_byte_count,
       decoder_count,
       decoder_removed_bom,
       decoder_src,
       decoder_nln,
       pp_decode,
       encoder,
       encode,
       encoder_encoding,
       encoder_dst,
       Manual,
       String,
       Buffer];
    runtime.caml_register_global(66,Uutf,"Uutf");
    return}
  (function(){return this}()));


//# 1 ".js/tyxml.functor/tyxml_f.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_new_string=runtime.caml_new_string,
     caml_register_global=runtime.caml_register_global,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_notequal=runtime.caml_string_notequal;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call11(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
     {return f.length == 11
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Xml_stream_Malformed_stream=
      caml_new_string("Xml_stream.Malformed_stream"),
     cst_xmlns$1=caml_new_string("xmlns"),
     cst$30=caml_new_string(""),
     cst_xmlns$2=caml_new_string("xmlns"),
     cst$26=caml_new_string(""),
     cst$27=caml_new_string(" -->\n"),
     cst$28=caml_new_string("<!-- "),
     cst$29=caml_new_string("\n"),
     cst$12=caml_new_string(" "),
     cst$13=caml_new_string(" />"),
     cst$14=caml_new_string("<"),
     cst$15=caml_new_string(">"),
     cst$16=caml_new_string("></"),
     cst$17=caml_new_string("<"),
     cst$18=caml_new_string(">"),
     cst$19=caml_new_string("</"),
     cst$20=caml_new_string(">"),
     cst$21=caml_new_string("<"),
     cst$22=caml_new_string("-->"),
     cst$23=caml_new_string("<!--"),
     cst$24=caml_new_string(";"),
     cst$25=caml_new_string("&"),
     cst$11=caml_new_string(", "),
     cst$10=caml_new_string(" "),
     cst_xmlns=caml_new_string("xmlns"),
     cst_xmlns$0=caml_new_string("xmlns"),
     partial=[12,62,0],
     cst$9=caml_new_string(" "),
     cst_lt$0=caml_new_string("&lt;"),
     cst_gt$4=caml_new_string("&gt;"),
     cst_amp$0=caml_new_string("&amp;"),
     cst_quot$0=caml_new_string("&quot;"),
     cst_Infinity=caml_new_string("Infinity"),
     cst_Infinity$0=caml_new_string("-Infinity"),
     cst_NaN=caml_new_string("NaN"),
     cst$5=caml_new_string("--!>"),
     cst$6=caml_new_string("-->"),
     cst$7=caml_new_string("->"),
     cst$8=caml_new_string(">"),
     cst_gt$0=caml_new_string("&gt;"),
     cst_gt$1=caml_new_string("-&gt;"),
     cst_gt$2=caml_new_string("--&gt;"),
     cst_gt$3=caml_new_string("--!&gt;"),
     cst_1_0=caml_new_string("1.0"),
     cst_UTF_8=caml_new_string("UTF-8"),
     cst_64=caml_new_string("&#64;"),
     cst_lt=caml_new_string("&lt;"),
     cst_gt=caml_new_string("&gt;"),
     cst_amp=caml_new_string("&amp;"),
     cst_quot=caml_new_string("&quot;"),
     cst=caml_new_string("&#"),
     cst$0=caml_new_string(";"),
     cst$1=caml_new_string("--!>"),
     cst$2=caml_new_string("-->"),
     cst$3=caml_new_string("->"),
     cst$4=caml_new_string(">"),
     cst$38=caml_new_string(" "),
     cst$37=caml_new_string(""),
     partial$0=[12,32,[8,9,0,0,[12,41,0]]],
     cst_none$1=caml_new_string("none"),
     cst_auto$2=caml_new_string("auto"),
     cst$36=caml_new_string("%"),
     cst_strokePaint=caml_new_string("strokePaint"),
     cst_sourceAlpha=caml_new_string("sourceAlpha"),
     cst_fillPaint=caml_new_string("fillPaint"),
     cst_sourceGraphic=caml_new_string("sourceGraphic"),
     cst_backgroundImage=caml_new_string("backgroundImage"),
     cst_backgroundAlpha=caml_new_string("backgroundAlpha"),
     cst_nochange=caml_new_string("nochange"),
     cst_alphabetic$1=caml_new_string("alphabetic"),
     cst_auto$1=caml_new_string("auto"),
     cst_hanging$1=caml_new_string("hanging"),
     cst_mathematical$1=caml_new_string("mathematical"),
     cst_inherit$1=caml_new_string("inherit"),
     cst_middle$1=caml_new_string("middle"),
     cst_central$0=caml_new_string("central"),
     cst_usescript=caml_new_string("usescript"),
     cst_ideographic$1=caml_new_string("ideographic"),
     cst_textbeforeedge=caml_new_string("textbeforeedge"),
     cst_resetsize=caml_new_string("resetsize"),
     cst_textafteredge=caml_new_string("textafteredge"),
     cst_stitch=caml_new_string("stitch"),
     cst_onRequest=caml_new_string("onRequest"),
     cst_repeat=caml_new_string("repeat"),
     cst_wrap=caml_new_string("wrap"),
     cst_remove=caml_new_string("remove"),
     cst_reflect=caml_new_string("reflect"),
     cst_noStitch=caml_new_string("noStitch"),
     cst$35=caml_new_string(""),
     cst_over=caml_new_string("over"),
     cst_none$0=caml_new_string("none"),
     cst_medial=caml_new_string("medial"),
     cst_never=caml_new_string("never"),
     cst_butt=caml_new_string("butt"),
     cst_auto$0=caml_new_string("auto"),
     cst_atop=caml_new_string("atop"),
     cst_arithmetic=caml_new_string("arithmetic"),
     cst_underline=caml_new_string("underline"),
     cst_gamma=caml_new_string("gamma"),
     cst_linear=caml_new_string("linear"),
     cst_overline=caml_new_string("overline"),
     cst_onLoad=caml_new_string("onLoad"),
     cst_turbulence=caml_new_string("turbulence"),
     cst_table=caml_new_string("table"),
     cst_geometricPrecision=caml_new_string("geometricPrecision"),
     cst_optimizeSpeed=caml_new_string("optimizeSpeed"),
     cst_miter=caml_new_string("miter"),
     cst_initial=caml_new_string("initial"),
     cst_start=caml_new_string("start"),
     cst_whenNotActive=caml_new_string("whenNotActive"),
     cst_identity=caml_new_string("identity"),
     cst_skewY=caml_new_string("skewY"),
     cst_skewX=caml_new_string("skewX"),
     cst_square=caml_new_string("square"),
     cst_scale$0=caml_new_string("scale"),
     cst_exact=caml_new_string("exact"),
     cst_perceptual=caml_new_string("perceptual"),
     cst_discrete=caml_new_string("discrete"),
     cst_erode=caml_new_string("erode"),
     cst_middle$0=caml_new_string("middle"),
     cst_round=caml_new_string("round"),
     cst_xor=caml_new_string("xor"),
     cst_XML=caml_new_string("XML"),
     cst_sum=caml_new_string("sum"),
     cst_pad=caml_new_string("pad"),
     cst_out=caml_new_string("out"),
     cst_new=caml_new_string("new"),
     cst_end=caml_new_string("end"),
     cst_CSS=caml_new_string("CSS"),
     cst_in$1=caml_new_string("in"),
     cst_v=caml_new_string("v"),
     cst_r$0=caml_new_string("r"),
     cst_h=caml_new_string("h"),
     cst_g$0=caml_new_string("g"),
     cst_b=caml_new_string("b"),
     cst_a$0=caml_new_string("a"),
     cst_rotate$0=caml_new_string("rotate"),
     cst_disable=caml_new_string("disable"),
     cst_screen=caml_new_string("screen"),
     cst_absolute_colorimetric=caml_new_string("absolute_colorimetric"),
     cst_inherit$0=caml_new_string("inherit"),
     cst_always=caml_new_string("always"),
     cst_spacingAndGlyphs=caml_new_string("spacingAndGlyphs"),
     cst_replace=caml_new_string("replace"),
     cst_multiply=caml_new_string("multiply"),
     cst_spline=caml_new_string("spline"),
     cst_matrix=caml_new_string("matrix"),
     cst_saturation=caml_new_string("saturation"),
     cst_dilate=caml_new_string("dilate"),
     cst_translate=caml_new_string("translate"),
     cst_default=caml_new_string("default"),
     cst_lighten=caml_new_string("lighten"),
     cst_normal=caml_new_string("normal"),
     cst_freeze=caml_new_string("freeze"),
     cst_magnify=caml_new_string("magnify"),
     cst_hueRotate=caml_new_string("hueRotate"),
     cst_spacing$0=caml_new_string("spacing"),
     cst_fractalNoise=caml_new_string("fractalNoise"),
     cst_saturate=caml_new_string("saturate"),
     cst_userSpaceOnUse=caml_new_string("userSpaceOnUse"),
     cst_objectBoundingBox=caml_new_string("objectBoundingBox"),
     cst_darken=caml_new_string("darken"),
     cst_paced=caml_new_string("paced"),
     cst_isolated=caml_new_string("isolated"),
     cst_optimizeLegibility=caml_new_string("optimizeLegibility"),
     cst_luminanceToAlpha=caml_new_string("luminanceToAlpha"),
     cst_line_through=caml_new_string("line-through"),
     cst_other=caml_new_string("other"),
     cst_terminal=caml_new_string("terminal"),
     cst_blink=caml_new_string("blink"),
     cst_stroke_width$0=caml_new_string("stroke-width"),
     cst_stretch=caml_new_string("stretch"),
     cst_bevel=caml_new_string("bevel"),
     cst_duplicate=caml_new_string("duplicate"),
     cst_preserve=caml_new_string("preserve"),
     cst_relative_colorimetric=caml_new_string("relative_colorimetric"),
     cst_after_edge=caml_new_string("after-edge"),
     cst_alphabetic$0=caml_new_string("alphabetic"),
     cst_auto=caml_new_string("auto"),
     cst_hanging$0=caml_new_string("hanging"),
     cst_mathematical$0=caml_new_string("mathematical"),
     cst_inherit=caml_new_string("inherit"),
     cst_middle=caml_new_string("middle"),
     cst_baseline=caml_new_string("baseline"),
     cst_central=caml_new_string("central"),
     cst_ideographic$0=caml_new_string("ideographic"),
     cst_text_before_edge=caml_new_string("text-before-edge"),
     cst_before_edge=caml_new_string("before-edge"),
     cst_text_after_edge=caml_new_string("text-after-edge"),
     cst_http_www_w3_org_1999_xlink=
      caml_new_string("http://www.w3.org/1999/xlink"),
     cst_xmlns_xlink=caml_new_string("xmlns:xlink"),
     cst_http_www_w3_org_2000_svg=
      caml_new_string("http://www.w3.org/2000/svg"),
     cst_xmlns$3=caml_new_string("xmlns"),
     cst_svg$0=caml_new_string("svg"),
     cst_stroke_dasharray=caml_new_string("stroke-dasharray"),
     cst_stroke_linejoin=caml_new_string("stroke-linejoin"),
     cst_stroke_linecap=caml_new_string("stroke-linecap"),
     cst_dominant_baseline=caml_new_string("dominant-baseline"),
     cst_alignment_baseline=caml_new_string("alignment-baseline"),
     cst_arabic_form=caml_new_string("arabic-form"),
     cst_orientation=caml_new_string("orientation"),
     cst_accumulate=caml_new_string("accumulate"),
     cst_additive=caml_new_string("additive"),
     cst_calcMode=caml_new_string("calcMode"),
     cst_fill$0=caml_new_string("fill"),
     cst_restart=caml_new_string("restart"),
     cst_attributeType=caml_new_string("attributeType"),
     cst_xlink_actuate=caml_new_string("xlink:actuate"),
     cst_xlink_show=caml_new_string("xlink:show"),
     cst_type$2=caml_new_string("type"),
     cst_stitchTiles=caml_new_string("stitchTiles"),
     cst_operator$0=caml_new_string("operator"),
     cst_yChannelSelector=caml_new_string("yChannelSelector"),
     cst_xChannelSelector=caml_new_string("xChannelSelector"),
     cst_targetY$0=caml_new_string("targetY"),
     cst_operator=caml_new_string("operator"),
     cst_type$1=caml_new_string("type"),
     cst_type$0=caml_new_string("type"),
     cst_mode=caml_new_string("mode"),
     cst_in2=caml_new_string("in2"),
     cst_in$0=caml_new_string("in"),
     cst_primitiveUnits=caml_new_string("primitiveUnits"),
     cst_maskContentUnits=caml_new_string("maskContentUnits"),
     cst_maskUnits=caml_new_string("maskUnits"),
     cst_clipPathUnits=caml_new_string("clipPathUnits"),
     cst_patternTransform=caml_new_string("patternTransform"),
     cst_patternContentUnits=caml_new_string("patternContentUnits"),
     cst_patternUnits=caml_new_string("patternUnits"),
     cst_offset=caml_new_string("offset"),
     cst_spreadMethod=caml_new_string("spreadMethod"),
     cst_gradientUnits=caml_new_string("gradientUnits"),
     cst_rendering_intent=caml_new_string("rendering-intent"),
     cst_orient=caml_new_string("orient"),
     cst_markerUnits=caml_new_string("markerUnits"),
     cst_spacing=caml_new_string("spacing"),
     cst_method=caml_new_string("method"),
     cst_text_rendering=caml_new_string("text-rendering"),
     cst_text_decoration=caml_new_string("text-decoration"),
     cst_text_anchor=caml_new_string("text-anchor"),
     cst_lengthAdjust=caml_new_string("lengthAdjust"),
     cst_xml_space=caml_new_string("xml:space"),
     cst_zoomAndSpan=caml_new_string("zoomAndSpan"),
     cst_foreignObject=caml_new_string("foreignObject"),
     cst_metadata=caml_new_string("metadata"),
     content_type=caml_new_string("image/svg+xml"),
     version=caml_new_string("SVG 1.1"),
     standard=caml_new_string("http://www.w3.org/TR/svg11/"),
     namespace=caml_new_string("http://www.w3.org/2000/svg"),
     cst_svg=caml_new_string("svg"),
     cst_version=caml_new_string("version"),
     cst_baseProfile=caml_new_string("baseProfile"),
     cst_x=caml_new_string("x"),
     cst_y=caml_new_string("y"),
     cst_width=caml_new_string("width"),
     cst_height=caml_new_string("height"),
     cst_preserveAspectRatio=caml_new_string("preserveAspectRatio"),
     cst_contentScriptType=caml_new_string("contentScriptType"),
     cst_contentStyleType=caml_new_string("contentStyleType"),
     cst_href=caml_new_string("href"),
     cst_xlink_href=caml_new_string("xlink:href"),
     cst_requiredFeatures=caml_new_string("requiredFeatures"),
     cst_requiredExtension=caml_new_string("requiredExtension"),
     cst_systemLanguage=caml_new_string("systemLanguage"),
     cst_externalRessourcesRequired=
      caml_new_string("externalRessourcesRequired"),
     cst_id=caml_new_string("id"),
     cst_xml_base=caml_new_string("xml:base"),
     cst_xml_lang=caml_new_string("xml:lang"),
     cst_type=caml_new_string("type"),
     cst_media=caml_new_string("media"),
     cst_xlink_title=caml_new_string("xlink:title"),
     cst_class=caml_new_string("class"),
     cst_style=caml_new_string("style"),
     cst_transform=caml_new_string("transform"),
     cst_viewBox=caml_new_string("viewBox"),
     cst_d=caml_new_string("d"),
     cst_pathLength=caml_new_string("pathLength"),
     cst_rx=caml_new_string("rx"),
     cst_ry=caml_new_string("ry"),
     cst_cx=caml_new_string("cx"),
     cst_cy=caml_new_string("cy"),
     cst_r=caml_new_string("r"),
     cst_x1=caml_new_string("x1"),
     cst_y1=caml_new_string("y1"),
     cst_x2=caml_new_string("x2"),
     cst_y2=caml_new_string("y2"),
     cst_points=caml_new_string("points"),
     cst_x$0=caml_new_string("x"),
     cst_y$0=caml_new_string("y"),
     cst_dx=caml_new_string("dx"),
     cst_dy=caml_new_string("dy"),
     cst_dx$0=caml_new_string("dx"),
     cst_dy$0=caml_new_string("dy"),
     cst_textLength=caml_new_string("textLength"),
     cst_rotate=caml_new_string("rotate"),
     cst_startOffset=caml_new_string("startOffset"),
     cst_glyphRef=caml_new_string("glyphRef"),
     cst_format=caml_new_string("format"),
     cst_refX=caml_new_string("refX"),
     cst_refY=caml_new_string("refY"),
     cst_markerWidth=caml_new_string("markerWidth"),
     cst_markerHeight=caml_new_string("markerHeight"),
     cst_local=caml_new_string("local"),
     cst_gradientTransform=caml_new_string("gradientTransform"),
     cst_fx=caml_new_string("fx"),
     cst_fy=caml_new_string("fy"),
     cst_filterResUnits=caml_new_string("filterResUnits"),
     cst_result=caml_new_string("result"),
     cst_azimuth=caml_new_string("azimuth"),
     cst_elevation=caml_new_string("elevation"),
     cst_pointsAtX=caml_new_string("pointsAtX"),
     cst_pointsAtY=caml_new_string("pointsAtY"),
     cst_pointsAtZ=caml_new_string("pointsAtZ"),
     cst_specularExponent=caml_new_string("specularExponent"),
     cst_specularConstant=caml_new_string("specularConstant"),
     cst_limitingConeAngle=caml_new_string("limitingConeAngle"),
     cst_values=caml_new_string("values"),
     cst_tableValues=caml_new_string("tableValues"),
     cst_intercept=caml_new_string("intercept"),
     cst_amplitude=caml_new_string("amplitude"),
     cst_exponent=caml_new_string("exponent"),
     cst_offset$0=caml_new_string("offset"),
     cst_k1=caml_new_string("k1"),
     cst_k2=caml_new_string("k2"),
     cst_k3=caml_new_string("k3"),
     cst_k4=caml_new_string("k4"),
     cst_order=caml_new_string("order"),
     cst_kernelMatrix=caml_new_string("kernelMatrix"),
     cst_divisor=caml_new_string("divisor"),
     cst_bias=caml_new_string("bias"),
     cst_kernelUnitLength=caml_new_string("kernelUnitLength"),
     cst_targetX=caml_new_string("targetX"),
     cst_targetY=caml_new_string("targetY"),
     cst_preserveAlpha=caml_new_string("preserveAlpha"),
     cst_surfaceScale=caml_new_string("surfaceScale"),
     cst_diffuseConstant=caml_new_string("diffuseConstant"),
     cst_scale=caml_new_string("scale"),
     cst_stdDeviation=caml_new_string("stdDeviation"),
     cst_radius=caml_new_string("radius"),
     cst_baseFrequency=caml_new_string("baseFrequency"),
     cst_numOctaves=caml_new_string("numOctaves"),
     cst_seed=caml_new_string("seed"),
     cst_xlink_target=caml_new_string("xlink:target"),
     cst_viewTarget=caml_new_string("viewTarget"),
     cst_attributeName=caml_new_string("attributeName"),
     cst_begin=caml_new_string("begin"),
     cst_dur=caml_new_string("dur"),
     cst_min=caml_new_string("min"),
     cst_max=caml_new_string("max"),
     cst_repeatCount=caml_new_string("repeatCount"),
     cst_repeatDur=caml_new_string("repeatDur"),
     cst_fill=caml_new_string("fill"),
     cst_values$0=caml_new_string("values"),
     cst_keyTimes=caml_new_string("keyTimes"),
     cst_keySplines=caml_new_string("keySplines"),
     cst_from=caml_new_string("from"),
     cst_to=caml_new_string("to"),
     cst_by=caml_new_string("by"),
     cst_keyPoints=caml_new_string("keyPoints"),
     cst_path=caml_new_string("path"),
     cst_type$3=caml_new_string("type"),
     cst_horiz_origin_x=caml_new_string("horiz-origin-x"),
     cst_horiz_origin_y=caml_new_string("horiz-origin-y"),
     cst_horiz_adv_x=caml_new_string("horiz-adv-x"),
     cst_vert_origin_x=caml_new_string("vert-origin-x"),
     cst_vert_origin_y=caml_new_string("vert-origin-y"),
     cst_vert_adv_y=caml_new_string("vert-adv-y"),
     cst_unicode=caml_new_string("unicode"),
     cst_glyphname=caml_new_string("glyphname"),
     cst_lang=caml_new_string("lang"),
     cst_u1=caml_new_string("u1"),
     cst_u2=caml_new_string("u2"),
     cst_g1=caml_new_string("g1"),
     cst_g2=caml_new_string("g2"),
     cst_k=caml_new_string("k"),
     cst_font_family=caml_new_string("font-family"),
     cst_font_style=caml_new_string("font-style"),
     cst_font_variant=caml_new_string("font-variant"),
     cst_font_weight=caml_new_string("font-weight"),
     cst_font_stretch=caml_new_string("font-stretch"),
     cst_font_size=caml_new_string("font-size"),
     cst_unicode_range=caml_new_string("unicode-range"),
     cst_units_per_em=caml_new_string("units-per-em"),
     cst_stemv=caml_new_string("stemv"),
     cst_stemh=caml_new_string("stemh"),
     cst_slope=caml_new_string("slope"),
     cst_cap_height=caml_new_string("cap-height"),
     cst_x_height=caml_new_string("x-height"),
     cst_accent_height=caml_new_string("accent-height"),
     cst_ascent=caml_new_string("ascent"),
     cst_widths=caml_new_string("widths"),
     cst_bbox=caml_new_string("bbox"),
     cst_ideographic=caml_new_string("ideographic"),
     cst_alphabetic=caml_new_string("alphabetic"),
     cst_mathematical=caml_new_string("mathematical"),
     cst_hanging=caml_new_string("hanging"),
     cst_v_ideographic=caml_new_string("v-ideographic"),
     cst_v_alphabetic=caml_new_string("v-alphabetic"),
     cst_v_mathematical=caml_new_string("v-mathematical"),
     cst_v_hanging=caml_new_string("v-hanging"),
     cst_underline_position=caml_new_string("underline-position"),
     cst_underline_thickness=caml_new_string("underline-thickness"),
     cst_strikethrough_position=caml_new_string("strikethrough-position"),
     cst_strikethrough_thickness=caml_new_string("strikethrough-thickness"),
     cst_overline_position=caml_new_string("overline-position"),
     cst_overline_thickness=caml_new_string("overline-thickness"),
     cst_string=caml_new_string("string"),
     cst_name=caml_new_string("name"),
     cst_onabort=caml_new_string("onabort"),
     cst_onactivate=caml_new_string("onactivate"),
     cst_onbegin=caml_new_string("onbegin"),
     cst_onend=caml_new_string("onend"),
     cst_onerror=caml_new_string("onerror"),
     cst_onfocusin=caml_new_string("onfocusin"),
     cst_onfocusout=caml_new_string("onfocusout"),
     cst_onload=caml_new_string("onload"),
     cst_onrepeat=caml_new_string("onrepeat"),
     cst_onresize=caml_new_string("onresize"),
     cst_onscroll=caml_new_string("onscroll"),
     cst_onunload=caml_new_string("onunload"),
     cst_onzoom=caml_new_string("onzoom"),
     cst_onclick=caml_new_string("onclick"),
     cst_onmousdown=caml_new_string("onmousdown"),
     cst_onmouseup=caml_new_string("onmouseup"),
     cst_onmouseover=caml_new_string("onmouseover"),
     cst_onmouseout=caml_new_string("onmouseout"),
     cst_onmousemove=caml_new_string("onmousemove"),
     cst_ontouchstart=caml_new_string("ontouchstart"),
     cst_ontouchend=caml_new_string("ontouchend"),
     cst_ontouchmove=caml_new_string("ontouchmove"),
     cst_ontouchcancel=caml_new_string("ontouchcancel"),
     cst_stop_color=caml_new_string("stop-color"),
     cst_stop_opacity=caml_new_string("stop-opacity"),
     cst_stroke=caml_new_string("stroke"),
     cst_stroke_width=caml_new_string("stroke-width"),
     cst_stroke_miterlimit=caml_new_string("stroke-miterlimit"),
     cst_stroke_dashoffset=caml_new_string("stroke-dashoffset"),
     cst_stroke_opacity=caml_new_string("stroke-opacity"),
     cst_g=caml_new_string("g"),
     cst_defs=caml_new_string("defs"),
     cst_desc=caml_new_string("desc"),
     cst_title=caml_new_string("title"),
     cst_symbol=caml_new_string("symbol"),
     cst_use=caml_new_string("use"),
     cst_image=caml_new_string("image"),
     cst_switch=caml_new_string("switch"),
     cst_style$0=caml_new_string("style"),
     cst_path$0=caml_new_string("path"),
     cst_rect=caml_new_string("rect"),
     cst_circle=caml_new_string("circle"),
     cst_ellipse=caml_new_string("ellipse"),
     cst_line=caml_new_string("line"),
     cst_polyline=caml_new_string("polyline"),
     cst_polygon=caml_new_string("polygon"),
     cst_text=caml_new_string("text"),
     cst_tspan=caml_new_string("tspan"),
     cst_tref=caml_new_string("tref"),
     cst_textPath=caml_new_string("textPath"),
     cst_altGlyph=caml_new_string("altGlyph"),
     cst_altGlyphDef=caml_new_string("altGlyphDef"),
     cst_altGlyphItem=caml_new_string("altGlyphItem"),
     cst_glyphRef$0=caml_new_string("glyphRef"),
     cst_marker=caml_new_string("marker"),
     cst_color_profile=caml_new_string("color-profile"),
     cst_linearGradient=caml_new_string("linearGradient"),
     cst_radialGradient=caml_new_string("radialGradient"),
     cst_stop=caml_new_string("stop"),
     cst_pattern=caml_new_string("pattern"),
     cst_clipPath=caml_new_string("clipPath"),
     cst_filter=caml_new_string("filter"),
     cst_feDistantLight=caml_new_string("feDistantLight"),
     cst_fePointLight=caml_new_string("fePointLight"),
     cst_feSpotLight=caml_new_string("feSpotLight"),
     cst_feBlend=caml_new_string("feBlend"),
     cst_feColorMatrix=caml_new_string("feColorMatrix"),
     cst_feComponentTransfer=caml_new_string("feComponentTransfer"),
     cst_feFuncA=caml_new_string("feFuncA"),
     cst_feFuncG=caml_new_string("feFuncG"),
     cst_feFuncB=caml_new_string("feFuncB"),
     cst_feFuncR=caml_new_string("feFuncR"),
     cst_feComposite=caml_new_string("feComposite"),
     cst_feConvolveMatrix=caml_new_string("feConvolveMatrix"),
     cst_feDiffuseLighting=caml_new_string("feDiffuseLighting"),
     cst_feDisplacementMap=caml_new_string("feDisplacementMap"),
     cst_feFlood=caml_new_string("feFlood"),
     cst_feGaussianBlur=caml_new_string("feGaussianBlur"),
     cst_feImage=caml_new_string("feImage"),
     cst_feMerge=caml_new_string("feMerge"),
     cst_feMorphology=caml_new_string("feMorphology"),
     cst_feOffset=caml_new_string("feOffset"),
     cst_feSpecularLighting=caml_new_string("feSpecularLighting"),
     cst_feTile=caml_new_string("feTile"),
     cst_feTurbulence=caml_new_string("feTurbulence"),
     cst_cursor=caml_new_string("cursor"),
     cst_a=caml_new_string("a"),
     cst_view=caml_new_string("view"),
     cst_script=caml_new_string("script"),
     cst_animate=caml_new_string("animate"),
     cst_set=caml_new_string("set"),
     cst_animateMotion=caml_new_string("animateMotion"),
     cst_mpath=caml_new_string("mpath"),
     cst_animateColor=caml_new_string("animateColor"),
     cst_animateTransform=caml_new_string("animateTransform"),
     cst_font=caml_new_string("font"),
     cst_glyph=caml_new_string("glyph"),
     cst_missing_glyph=caml_new_string("missing-glyph"),
     cst_hkern=caml_new_string("hkern"),
     cst_vkern=caml_new_string("vkern"),
     cst_font_face=caml_new_string("font-face"),
     cst_font_face_src=caml_new_string("font-face-src"),
     cst_font_face_uri=caml_new_string("font-face-uri"),
     cst_font_face_uri$0=caml_new_string("font-face-uri"),
     cst_font_face_name=caml_new_string("font-face-name"),
     cst$34=caml_new_string(" "),
     cst_none=caml_new_string("none"),
     cst_currentColor=caml_new_string("currentColor"),
     cst$33=caml_new_string(" "),
     sep=caml_new_string(" "),
     cst_px=caml_new_string("px"),
     cst_pt=caml_new_string("pt"),
     cst_pc=caml_new_string("pc"),
     cst_in=caml_new_string("in"),
     cst_mm=caml_new_string("mm"),
     cst_ex=caml_new_string("ex"),
     cst_em=caml_new_string("em"),
     cst_cm=caml_new_string("cm"),
     cst$32=caml_new_string("%"),
     cst_grad=caml_new_string("grad"),
     cst_deg=caml_new_string("deg"),
     cst_rad=caml_new_string("rad"),
     cst$31=caml_new_string(""),
     cst$45=caml_new_string(", "),
     cst$44=caml_new_string(" "),
     cst$43=caml_new_string(", "),
     cst$42=caml_new_string(","),
     cst$41=caml_new_string(" "),
     cst$40=caml_new_string(" "),
     cst_any$1=caml_new_string("any"),
     cst_any$0=caml_new_string("any"),
     cst$39=caml_new_string(""),
     cst_on=caml_new_string("on"),
     cst_off=caml_new_string("off"),
     cst_week=caml_new_string("week"),
     cst_time$0=caml_new_string("time"),
     cst_text$0=caml_new_string("text"),
     cst_file=caml_new_string("file"),
     cst_date=caml_new_string("date"),
     cst_datetime_local=caml_new_string("datetime-local"),
     cst_password=caml_new_string("password"),
     cst_month=caml_new_string("month"),
     cst_search$1=caml_new_string("search"),
     cst_button$0=caml_new_string("button"),
     cst_checkbox$0=caml_new_string("checkbox"),
     cst_email$0=caml_new_string("email"),
     cst_hidden$1=caml_new_string("hidden"),
     cst_url$0=caml_new_string("url"),
     cst_tel$0=caml_new_string("tel"),
     cst_reset=caml_new_string("reset"),
     cst_range=caml_new_string("range"),
     cst_radio$0=caml_new_string("radio"),
     cst_readonly$1=caml_new_string("readonly"),
     cst_color=caml_new_string("color"),
     cst_number=caml_new_string("number"),
     cst_image$0=caml_new_string("image"),
     cst_submit=caml_new_string("submit"),
     cst_datetime$0=caml_new_string("datetime"),
     cst_external$0=caml_new_string("external"),
     cst_0=caml_new_string("0"),
     cst_formnovalidate$0=caml_new_string("formnovalidate"),
     cst_audio$0=caml_new_string("audio"),
     cst_async$0=caml_new_string("async"),
     cst_toolbar=caml_new_string("toolbar"),
     cst_soft=caml_new_string("soft"),
     cst_rows$0=caml_new_string("rows"),
     cst_rect$0=caml_new_string("rect"),
     cst_prev$0=caml_new_string("prev"),
     cst_POST=caml_new_string("POST"),
     cst_poly=caml_new_string("poly"),
     cst_open$0=caml_new_string("open"),
     cst_none$2=caml_new_string("none"),
     cst_next$0=caml_new_string("next"),
     cst_loop$0=caml_new_string("loop"),
     cst_left=caml_new_string("left"),
     cst_last$0=caml_new_string("last"),
     cst_kana=caml_new_string("kana"),
     cst_icon$1=caml_new_string("icon"),
     cst_help$0=caml_new_string("help"),
     cst_hard=caml_new_string("hard"),
     cst_cols$0=caml_new_string("cols"),
     cst_char$0=caml_new_string("char"),
     cst_auto$3=caml_new_string("auto"),
     cst_noreferrer$0=caml_new_string("noreferrer"),
     cst_author$0=caml_new_string("author"),
     cst_muted$0=caml_new_string("muted"),
     cst_autoplay$0=caml_new_string("autoplay"),
     cst_anonymous=caml_new_string("anonymous"),
     cst_metadata$0=caml_new_string("metadata"),
     cst_license$0=caml_new_string("license"),
     cst_search$0=caml_new_string("search"),
     cst_first$0=caml_new_string("first"),
     cst_novalidate$0=caml_new_string("novalidate"),
     cst_controls$0=caml_new_string("controls"),
     cst_bookmark$0=caml_new_string("bookmark"),
     cst_required$0=caml_new_string("required"),
     cst_selected$0=caml_new_string("selected"),
     cst_circle$0=caml_new_string("circle"),
     cst_rowgroup=caml_new_string("rowgroup"),
     cst_checkbox=caml_new_string("checkbox"),
     cst_katakana=caml_new_string("katakana"),
     cst_email=caml_new_string("email"),
     cst_latin=caml_new_string("latin"),
     cst_hidden$0=caml_new_string("hidden"),
     cst_yes=caml_new_string("yes"),
     cst_url=caml_new_string("url"),
     cst_tel=caml_new_string("tel"),
     cst_tag$0=caml_new_string("tag"),
     cst_rtl=caml_new_string("rtl"),
     cst_row=caml_new_string("row"),
     cst_1=caml_new_string("1"),
     cst_ltr=caml_new_string("ltr"),
     cst_GET=caml_new_string("GET"),
     cst_col$0=caml_new_string("col"),
     cst_any=caml_new_string("any"),
     cst_all$0=caml_new_string("all"),
     cst_up$0=caml_new_string("up"),
     cst_no=caml_new_string("no"),
     cst_right=caml_new_string("right"),
     cst_scoped$0=caml_new_string("scoped"),
     cst_numeric=caml_new_string("numeric"),
     cst_pingback$0=caml_new_string("pingback"),
     cst_radio=caml_new_string("radio"),
     cst_pubdate$0=caml_new_string("pubdate"),
     cst_multiple$0=caml_new_string("multiple"),
     cst_latin_name=caml_new_string("latin-name"),
     cst_autofocus$0=caml_new_string("autofocus"),
     cst_nofollow$0=caml_new_string("nofollow"),
     cst_defer$0=caml_new_string("defer"),
     cst_full_width_latin=caml_new_string("full-width-latin"),
     cst_default$0=caml_new_string("default"),
     cst_context=caml_new_string("context"),
     cst_verbatim=caml_new_string("verbatim"),
     cst_checked$0=caml_new_string("checked"),
     cst_stylesheet$0=caml_new_string("stylesheet"),
     cst_reserved$0=caml_new_string("reserved"),
     cst_alternate$0=caml_new_string("alternate"),
     cst_http_www_w3_org_1999_xhtml=
      caml_new_string("http://www.w3.org/1999/xhtml"),
     cst_disabled$0=caml_new_string("disabled"),
     cst_ismap$0=caml_new_string("ismap"),
     cst_use_credentials=caml_new_string("use-credentials"),
     cst_index$0=caml_new_string("index"),
     cst_justify=caml_new_string("justify"),
     cst_groups=caml_new_string("groups"),
     cst_command$0=caml_new_string("command"),
     cst_sidebar$0=caml_new_string("sidebar"),
     cst_latin_prose=caml_new_string("latin-prose"),
     cst_readonly$0=caml_new_string("readonly"),
     cst_colgroup$0=caml_new_string("colgroup"),
     cst_archives$0=caml_new_string("archives"),
     cst_seamless$0=caml_new_string("seamless"),
     cst_preserve$0=caml_new_string("preserve"),
     cst_prefetch$0=caml_new_string("prefetch"),
     cst_projection=caml_new_string("projection"),
     cst_aural=caml_new_string("aural"),
     cst_handheld=caml_new_string("handheld"),
     cst_embossed=caml_new_string("embossed"),
     cst_tty=caml_new_string("tty"),
     cst_all=caml_new_string("all"),
     cst_tv=caml_new_string("tv"),
     cst_screen$0=caml_new_string("screen"),
     cst_speech=caml_new_string("speech"),
     cst_print=caml_new_string("print"),
     cst_braille=caml_new_string("braille"),
     cst_external=caml_new_string("external"),
     cst_canonical=caml_new_string("canonical"),
     cst_prev=caml_new_string("prev"),
     cst_next=caml_new_string("next"),
     cst_last=caml_new_string("last"),
     cst_icon$0=caml_new_string("icon"),
     cst_help=caml_new_string("help"),
     cst_noreferrer=caml_new_string("noreferrer"),
     cst_author=caml_new_string("author"),
     cst_license=caml_new_string("license"),
     cst_search=caml_new_string("search"),
     cst_noopener=caml_new_string("noopener"),
     cst_first=caml_new_string("first"),
     cst_bookmark=caml_new_string("bookmark"),
     cst_tag=caml_new_string("tag"),
     cst_up=caml_new_string("up"),
     cst_pingback=caml_new_string("pingback"),
     cst_nofollow=caml_new_string("nofollow"),
     cst_stylesheet=caml_new_string("stylesheet"),
     cst_alternate=caml_new_string("alternate"),
     cst_index=caml_new_string("index"),
     cst_sidebar=caml_new_string("sidebar"),
     cst_archives=caml_new_string("archives"),
     cst_prefetch=caml_new_string("prefetch"),
     cst_allow_same_origin=caml_new_string("allow-same-origin"),
     cst_allow_popups=caml_new_string("allow-popups"),
     cst_allow_forms=caml_new_string("allow-forms"),
     cst_allow_pointer_lock=caml_new_string("allow-pointer-lock"),
     cst_allow_script=caml_new_string("allow-script"),
     cst_allow_top_navigation=caml_new_string("allow-top-navigation"),
     cst_link=caml_new_string("link"),
     cst_style$2=caml_new_string("style"),
     cst_img=caml_new_string("img"),
     cst_object=caml_new_string("object"),
     cst_table$0=caml_new_string("table"),
     cst_figure=caml_new_string("figure"),
     cst_optgroup=caml_new_string("optgroup"),
     cst_fieldset=caml_new_string("fieldset"),
     cst_details=caml_new_string("details"),
     cst_datalist=caml_new_string("datalist"),
     cst_menu=caml_new_string("menu"),
     cst_command=caml_new_string("command"),
     cst_area=caml_new_string("area"),
     cst_coords=caml_new_string("coords"),
     cst_shape=caml_new_string("shape"),
     cst_bdo=caml_new_string("bdo"),
     cst_nbsp=caml_new_string("nbsp"),
     cst_html$0=caml_new_string("html"),
     cst_aria=caml_new_string("aria-"),
     cst_scrolling=caml_new_string("scrolling"),
     cst_frameborder=caml_new_string("frameborder"),
     cst_char=caml_new_string("char"),
     cst_rules=caml_new_string("rules"),
     cst_scope=caml_new_string("scope"),
     cst_align=caml_new_string("align"),
     cst_type$8=caml_new_string("type"),
     cst_type$7=caml_new_string("type"),
     cst_type$6=caml_new_string("type"),
     cst_type$5=caml_new_string("type"),
     cst_wrap$0=caml_new_string("wrap"),
     cst_step=caml_new_string("step"),
     cst_sizes=caml_new_string("sizes"),
     cst_spellcheck=caml_new_string("spellcheck"),
     cst_sandbox=caml_new_string("sandbox"),
     cst_preload=caml_new_string("preload"),
     cst_inputmode=caml_new_string("inputmode"),
     cst_draggable=caml_new_string("draggable"),
     cst_dir=caml_new_string("dir"),
     cst_contenteditable=caml_new_string("contenteditable"),
     cst_crossorigin=caml_new_string("crossorigin"),
     cst_autocomplete=caml_new_string("autocomplete"),
     cst_method$0=caml_new_string("method"),
     cst_width$0=caml_new_string("width"),
     cst_height$0=caml_new_string("height"),
     cst_download=caml_new_string("download"),
     cst_accesskey=caml_new_string("accesskey"),
     cst_xml_space$0=caml_new_string("xml:space"),
     cst_xmlns$4=caml_new_string("xmlns"),
     cst_data=caml_new_string("data-"),
     content_type$0=caml_new_string("text/html"),
     alternative_content_types=
      [0,
       caml_new_string("application/xhtml+xml"),
       [0,
        caml_new_string("application/xml"),
        [0,caml_new_string("text/xml"),0]]],
     version$0=caml_new_string("HTML5-draft"),
     standard$0=caml_new_string("http://www.w3.org/TR/html5/"),
     namespace$0=caml_new_string("http://www.w3.org/1999/xhtml"),
     cst_html=caml_new_string("html"),
     emptytags=
      caml_list_of_js_array
       ([caml_new_string("area"),
         caml_new_string("base"),
         caml_new_string("br"),
         caml_new_string("col"),
         caml_new_string("command"),
         caml_new_string("embed"),
         caml_new_string("hr"),
         caml_new_string("img"),
         caml_new_string("input"),
         caml_new_string("keygen"),
         caml_new_string("link"),
         caml_new_string("meta"),
         caml_new_string("param"),
         caml_new_string("source"),
         caml_new_string("wbr")]),
     cst_class$0=caml_new_string("class"),
     cst_id$0=caml_new_string("id"),
     cst_title$0=caml_new_string("title"),
     cst_xml_lang$0=caml_new_string("xml:lang"),
     cst_lang$0=caml_new_string("lang"),
     cst_style$1=caml_new_string("style"),
     cst_property=caml_new_string("property"),
     cst_onabort$0=caml_new_string("onabort"),
     cst_onafterprint=caml_new_string("onafterprint"),
     cst_onbeforeprint=caml_new_string("onbeforeprint"),
     cst_onbeforeunload=caml_new_string("onbeforeunload"),
     cst_onblur=caml_new_string("onblur"),
     cst_oncanplay=caml_new_string("oncanplay"),
     cst_oncanplaythrough=caml_new_string("oncanplaythrough"),
     cst_onchange=caml_new_string("onchange"),
     cst_ondurationchange=caml_new_string("ondurationchange"),
     cst_onemptied=caml_new_string("onemptied"),
     cst_onended=caml_new_string("onended"),
     cst_onerror$0=caml_new_string("onerror"),
     cst_onfocus=caml_new_string("onfocus"),
     cst_onformchange=caml_new_string("onformchange"),
     cst_onforminput=caml_new_string("onforminput"),
     cst_onhashchange=caml_new_string("onhashchange"),
     cst_oninput=caml_new_string("oninput"),
     cst_oninvalid=caml_new_string("oninvalid"),
     cst_onoffline=caml_new_string("onoffline"),
     cst_ononline=caml_new_string("ononline"),
     cst_onpause=caml_new_string("onpause"),
     cst_onplay=caml_new_string("onplay"),
     cst_onplaying=caml_new_string("onplaying"),
     cst_onpagehide=caml_new_string("onpagehide"),
     cst_onpageshow=caml_new_string("onpageshow"),
     cst_onpopstate=caml_new_string("onpopstate"),
     cst_onprogress=caml_new_string("onprogress"),
     cst_onratechange=caml_new_string("onratechange"),
     cst_onreadystatechange=caml_new_string("onreadystatechange"),
     cst_onredo=caml_new_string("onredo"),
     cst_onresize$0=caml_new_string("onresize"),
     cst_onscroll$0=caml_new_string("onscroll"),
     cst_onseeked=caml_new_string("onseeked"),
     cst_onseeking=caml_new_string("onseeking"),
     cst_onselect=caml_new_string("onselect"),
     cst_onshow=caml_new_string("onshow"),
     cst_onstalled=caml_new_string("onstalled"),
     cst_onstorage=caml_new_string("onstorage"),
     cst_onsubmit=caml_new_string("onsubmit"),
     cst_onsuspend=caml_new_string("onsuspend"),
     cst_ontimeupdate=caml_new_string("ontimeupdate"),
     cst_onundo=caml_new_string("onundo"),
     cst_onunload$0=caml_new_string("onunload"),
     cst_onvolumechange=caml_new_string("onvolumechange"),
     cst_onwaiting=caml_new_string("onwaiting"),
     cst_onload$0=caml_new_string("onload"),
     cst_onloadeddata=caml_new_string("onloadeddata"),
     cst_onloadedmetadata=caml_new_string("onloadedmetadata"),
     cst_onloadstart=caml_new_string("onloadstart"),
     cst_onmessage=caml_new_string("onmessage"),
     cst_onmousewheel=caml_new_string("onmousewheel"),
     cst_onclick$0=caml_new_string("onclick"),
     cst_oncontextmenu=caml_new_string("oncontextmenu"),
     cst_ondblclick=caml_new_string("ondblclick"),
     cst_ondrag=caml_new_string("ondrag"),
     cst_ondragend=caml_new_string("ondragend"),
     cst_ondragenter=caml_new_string("ondragenter"),
     cst_ondragleave=caml_new_string("ondragleave"),
     cst_ondragover=caml_new_string("ondragover"),
     cst_ondragstart=caml_new_string("ondragstart"),
     cst_ondrop=caml_new_string("ondrop"),
     cst_onmousedown=caml_new_string("onmousedown"),
     cst_onmouseup$0=caml_new_string("onmouseup"),
     cst_onmouseover$0=caml_new_string("onmouseover"),
     cst_onmousemove$0=caml_new_string("onmousemove"),
     cst_onmouseout$0=caml_new_string("onmouseout"),
     cst_ontouchstart$0=caml_new_string("ontouchstart"),
     cst_ontouchend$0=caml_new_string("ontouchend"),
     cst_ontouchmove$0=caml_new_string("ontouchmove"),
     cst_ontouchcancel$0=caml_new_string("ontouchcancel"),
     cst_onkeypress=caml_new_string("onkeypress"),
     cst_onkeydown=caml_new_string("onkeydown"),
     cst_onkeyup=caml_new_string("onkeyup"),
     cst_version$0=caml_new_string("version"),
     cst_manifest=caml_new_string("manifest"),
     cst_cite=caml_new_string("cite"),
     cst_charset=caml_new_string("charset"),
     cst_accept_charset=caml_new_string("accept-charset"),
     cst_accept=caml_new_string("accept"),
     cst_href$0=caml_new_string("href"),
     cst_hreflang=caml_new_string("hreflang"),
     cst_rel=caml_new_string("rel"),
     cst_tabindex=caml_new_string("tabindex"),
     cst_type$4=caml_new_string("type"),
     cst_alt=caml_new_string("alt"),
     cst_src=caml_new_string("src"),
     cst_for=caml_new_string("for"),
     cst_for$0=caml_new_string("for"),
     cst_selected=caml_new_string("selected"),
     cst_value=caml_new_string("value"),
     cst_value$0=caml_new_string("value"),
     cst_value$1=caml_new_string("value"),
     cst_value$2=caml_new_string("value"),
     cst_action=caml_new_string("action"),
     cst_enctype=caml_new_string("enctype"),
     cst_checked=caml_new_string("checked"),
     cst_disabled=caml_new_string("disabled"),
     cst_readonly=caml_new_string("readonly"),
     cst_maxlength=caml_new_string("maxlength"),
     cst_minlength=caml_new_string("minlength"),
     cst_name$0=caml_new_string("name"),
     cst_async=caml_new_string("async"),
     cst_autofocus=caml_new_string("autofocus"),
     cst_autoplay=caml_new_string("autoplay"),
     cst_muted=caml_new_string("muted"),
     cst_mediagroup=caml_new_string("mediagroup"),
     cst_challenge=caml_new_string("challenge"),
     cst_contextmenu=caml_new_string("contextmenu"),
     cst_controls=caml_new_string("controls"),
     cst_form=caml_new_string("form"),
     cst_formaction=caml_new_string("formaction"),
     cst_formenctype=caml_new_string("formenctype"),
     cst_formnovalidate=caml_new_string("formnovalidate"),
     cst_formtarget=caml_new_string("formtarget"),
     cst_hidden=caml_new_string("hidden"),
     cst_high=caml_new_string("high"),
     cst_icon=caml_new_string("icon"),
     cst_ismap=caml_new_string("ismap"),
     cst_keytype=caml_new_string("keytype"),
     cst_list=caml_new_string("list"),
     cst_loop=caml_new_string("loop"),
     cst_low=caml_new_string("low"),
     cst_max$0=caml_new_string("max"),
     cst_max$1=caml_new_string("max"),
     cst_min$0=caml_new_string("min"),
     cst_min$1=caml_new_string("min"),
     cst_novalidate=caml_new_string("novalidate"),
     cst_open=caml_new_string("open"),
     cst_optimum=caml_new_string("optimum"),
     cst_pattern$0=caml_new_string("pattern"),
     cst_placeholder=caml_new_string("placeholder"),
     cst_poster=caml_new_string("poster"),
     cst_pubdate=caml_new_string("pubdate"),
     cst_radiogroup=caml_new_string("radiogroup"),
     cst_required=caml_new_string("required"),
     cst_reserved=caml_new_string("reserved"),
     cst_scoped=caml_new_string("scoped"),
     cst_seamless=caml_new_string("seamless"),
     cst_span=caml_new_string("span"),
     cst_xml_lang$1=caml_new_string("xml:lang"),
     cst_srcset=caml_new_string("srcset"),
     cst_sizes$0=caml_new_string("sizes"),
     cst_start$0=caml_new_string("start"),
     cst_size=caml_new_string("size"),
     cst_multiple=caml_new_string("multiple"),
     cst_cols=caml_new_string("cols"),
     cst_rows=caml_new_string("rows"),
     cst_summary=caml_new_string("summary"),
     cst_axis=caml_new_string("axis"),
     cst_colspan=caml_new_string("colspan"),
     cst_headers=caml_new_string("headers"),
     cst_rowspan=caml_new_string("rowspan"),
     cst_border=caml_new_string("border"),
     cst_data$0=caml_new_string("data"),
     cst_codetype=caml_new_string("codetype"),
     cst_marginheight=caml_new_string("marginheight"),
     cst_marginwidth=caml_new_string("marginwidth"),
     cst_target=caml_new_string("target"),
     cst_content=caml_new_string("content"),
     cst_http_equiv=caml_new_string("http-equiv"),
     cst_media$0=caml_new_string("media"),
     cst_role=caml_new_string("role"),
     cst_body=caml_new_string("body"),
     cst_head=caml_new_string("head"),
     cst_title$1=caml_new_string("title"),
     cst_footer=caml_new_string("footer"),
     cst_header=caml_new_string("header"),
     cst_section=caml_new_string("section"),
     cst_nav=caml_new_string("nav"),
     cst_h1=caml_new_string("h1"),
     cst_h2=caml_new_string("h2"),
     cst_h3=caml_new_string("h3"),
     cst_h4=caml_new_string("h4"),
     cst_h5=caml_new_string("h5"),
     cst_h6=caml_new_string("h6"),
     cst_hgroup=caml_new_string("hgroup"),
     cst_address=caml_new_string("address"),
     cst_blockquote=caml_new_string("blockquote"),
     cst_div=caml_new_string("div"),
     cst_p=caml_new_string("p"),
     cst_pre=caml_new_string("pre"),
     cst_abbr=caml_new_string("abbr"),
     cst_br=caml_new_string("br"),
     cst_cite$0=caml_new_string("cite"),
     cst_code=caml_new_string("code"),
     cst_dfn=caml_new_string("dfn"),
     cst_em$0=caml_new_string("em"),
     cst_kbd=caml_new_string("kbd"),
     cst_q=caml_new_string("q"),
     cst_samp=caml_new_string("samp"),
     cst_span$0=caml_new_string("span"),
     cst_strong=caml_new_string("strong"),
     cst_time=caml_new_string("time"),
     cst_var=caml_new_string("var"),
     cst_a$1=caml_new_string("a"),
     cst_dl=caml_new_string("dl"),
     cst_ol=caml_new_string("ol"),
     cst_ul=caml_new_string("ul"),
     cst_dd=caml_new_string("dd"),
     cst_dt=caml_new_string("dt"),
     cst_li=caml_new_string("li"),
     cst_hr=caml_new_string("hr"),
     cst_b$0=caml_new_string("b"),
     cst_i=caml_new_string("i"),
     cst_u=caml_new_string("u"),
     cst_small=caml_new_string("small"),
     cst_sub=caml_new_string("sub"),
     cst_sup=caml_new_string("sup"),
     cst_mark=caml_new_string("mark"),
     cst_rp=caml_new_string("rp"),
     cst_rt=caml_new_string("rt"),
     cst_ruby=caml_new_string("ruby"),
     cst_wbr=caml_new_string("wbr"),
     cst_datetime=caml_new_string("datetime"),
     cst_usemap=caml_new_string("usemap"),
     cst_defer=caml_new_string("defer"),
     cst_label=caml_new_string("label"),
     cst_map=caml_new_string("map"),
     cst_del=caml_new_string("del"),
     cst_ins=caml_new_string("ins"),
     cst_script$0=caml_new_string("script"),
     cst_noscript=caml_new_string("noscript"),
     cst_article=caml_new_string("article"),
     cst_aside=caml_new_string("aside"),
     cst_main=caml_new_string("main"),
     cst_audio=caml_new_string("audio"),
     cst_video=caml_new_string("video"),
     cst_canvas=caml_new_string("canvas"),
     cst_embed=caml_new_string("embed"),
     cst_source=caml_new_string("source"),
     cst_meter=caml_new_string("meter"),
     cst_output=caml_new_string("output"),
     cst_form$0=caml_new_string("form"),
     cst_input=caml_new_string("input"),
     cst_keygen=caml_new_string("keygen"),
     cst_label$0=caml_new_string("label"),
     cst_option=caml_new_string("option"),
     cst_select=caml_new_string("select"),
     cst_textarea=caml_new_string("textarea"),
     cst_button=caml_new_string("button"),
     cst_progress=caml_new_string("progress"),
     cst_legend=caml_new_string("legend"),
     cst_summary$0=caml_new_string("summary"),
     cst_figcaption=caml_new_string("figcaption"),
     cst_caption=caml_new_string("caption"),
     cst_td=caml_new_string("td"),
     cst_th=caml_new_string("th"),
     cst_tr=caml_new_string("tr"),
     cst_colgroup=caml_new_string("colgroup"),
     cst_col=caml_new_string("col"),
     cst_thead=caml_new_string("thead"),
     cst_tbody=caml_new_string("tbody"),
     cst_tfoot=caml_new_string("tfoot"),
     cst_iframe=caml_new_string("iframe"),
     cst_param=caml_new_string("param"),
     cst_meta=caml_new_string("meta"),
     cst_base=caml_new_string("base"),
     Stdlib=global_data.Stdlib,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_seq=global_data.Stdlib__seq,
     Stdlib_printf=global_data.Stdlib__printf,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_format=global_data.Stdlib__format,
     Stdlib_set=global_data.Stdlib__set,
     Stdlib_uchar=global_data.Stdlib__uchar,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Uutf=global_data.Uutf,
     Re_Core=global_data.Re__Core,
     Re=global_data.Re,
     _L_=[0,[2,0,[12,61,[2,0,0]]],caml_new_string("%s=%s")],
     _H_=[0,[12,34,[2,0,[12,34,0]]],caml_new_string('"%s"')],
     _I_=[0,[12,34,[4,0,0,0,[12,34,0]]],caml_new_string('"%d"')],
     _J_=[0,[12,34,[2,0,[12,34,0]]],caml_new_string('"%s"')],
     _K_=[0,[12,34,[2,0,[12,34,0]]],caml_new_string('"%s"')],
     _F_=
      [0,[2,0,[17,[0,caml_new_string("@,"),0,0],0]],caml_new_string("%s@,")],
     _G_=
      [0,
       [11,
        caml_new_string("<!-- "),
        [2,
         0,
         [11,caml_new_string(" -->"),[17,[0,caml_new_string("@,"),0,0],0]]]],
       caml_new_string("<!-- %s -->@,")],
     _C_=
      [0,
       [12,
        60,
        [16,
         [15,
          [12,62,[16,[15,[16,[16,[11,caml_new_string("</"),[2,0,partial]]]]]]]]]],
       caml_new_string("<%t%a>%t%a%t%t</%s>")],
     _D_=
      [0,
       [11,caml_new_string("<!--"),[2,0,[11,caml_new_string("-->"),0]]],
       caml_new_string("<!--%s-->")],
     _E_=[0,[12,38,[2,0,[12,59,0]]],caml_new_string("&%s;")],
     _A_=
      [0,[12,60,[15,[11,caml_new_string("/>"),0]]],caml_new_string("<%a/>")],
     _B_=
      [0,
       [12,60,[15,[12,62,[16,[11,caml_new_string("</"),[2,0,[12,62,0]]]]]]],
       caml_new_string("<%a>%t</%s>")],
     _z_=[0,[2,0,[15,[16,0]]],caml_new_string("%s%a%t")],
     _y_=[0,[16,[2,0,[12,61,[15,0]]]],caml_new_string("%t%s=%a")],
     _u_=[0,[12,34,[15,[12,34,0]]],caml_new_string('"%a"')],
     _v_=[0,[12,34,[4,0,0,0,[12,34,0]]],caml_new_string('"%d"')],
     _w_=[0,[12,34,[2,0,[12,34,0]]],caml_new_string('"%s"')],
     _x_=[0,[12,34,[15,[12,34,0]]],caml_new_string('"%a"')],
     _t_=[0,[12,44,[16,0]],caml_new_string(",%t")],
     _s_=
      [0,
       [18,[1,[0,0,caml_new_string("")]],[15,[17,0,0]]],
       caml_new_string("@[%a@]")],
     _r_=[0,[15,0],caml_new_string("%a")],
     _n_=[0,[4,0,0,0,[12,101,[4,0,0,0,0]]],caml_new_string("%de%d")],
     _o_=[0,[8,9,0,[0,12],0],caml_new_string("%.12g")],
     _p_=[0,[8,9,0,[0,15],0],caml_new_string("%.15g")],
     _q_=[0,[8,9,0,[0,18],0],caml_new_string("%.18g")],
     _m_=[0,1],
     _c_=[0,[12,34,[2,0,[12,34,0]]],caml_new_string('"%s"')],
     _d_=
      [0,
       [11,caml_new_string(" PUBLIC "),[15,0]],
       caml_new_string(" PUBLIC %a")],
     _e_=
      [0,
       [11,caml_new_string("<!DOCTYPE "),[2,0,[15,[12,62,0]]]],
       caml_new_string("<!DOCTYPE %s%a>")],
     _b_=
      [0,
       [11,
        caml_new_string('<?xml version="'),
        [2,
         0,
         [11,
          caml_new_string('" encoding="'),
          [2,0,[11,caml_new_string('"?>\\n'),0]]]]],
       caml_new_string('<?xml version="%s" encoding="%s"?>\\n')],
     _X_=
      [0,
       [11,caml_new_string("skewY("),[2,0,[12,41,0]]],
       caml_new_string("skewY(%s)")],
     _Y_=
      [0,
       [11,caml_new_string("skewX("),[2,0,[12,41,0]]],
       caml_new_string("skewX(%s)")],
     _Z_=
      [0,
       [11,caml_new_string("scale("),[2,0,[12,41,0]]],
       caml_new_string("scale(%s)")],
     ___=[0,[8,9,0,0,[12,32,[8,9,0,0,0]]],caml_new_string("%g %g")],
     _$_=
      [0,
       [11,caml_new_string("rotate("),[2,0,[12,32,[2,0,[12,41,0]]]]],
       caml_new_string("rotate(%s %s)")],
     _aa_=
      [0,
       [11,
        caml_new_string("matrix("),
        [8,
         9,
         0,
         0,
         [12,
          32,
          [8,
           9,
           0,
           0,
           [12,32,[8,9,0,0,[12,32,[8,9,0,0,[12,32,[8,9,0,0,partial$0]]]]]]]]]],
       caml_new_string("matrix(%g %g %g %g %g %g)")],
     _ab_=
      [0,
       [11,caml_new_string("translate("),[2,0,[12,41,0]]],
       caml_new_string("translate(%s)")],
     _U_=
      [0,
       [8,9,0,0,[11,caml_new_string(", "),[8,9,0,0,0]]],
       caml_new_string("%g, %g")],
     _V_=[0,[8,9,0,0,0],caml_new_string("%g")],
     _T_=
      [0,
       [2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,0]]]]]]],
       caml_new_string("%s %s %s %s")],
     _S_=
      [0,
       [8,9,0,0,[11,caml_new_string(", "),[8,9,0,0,0]]],
       caml_new_string("%g, %g")],
     _W_=[0,caml_new_string("; ")],
     _R_=
      [0,
       caml_new_string("-//W3C//DTD SVG 1.1//EN"),
       [0,
        caml_new_string("http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"),
        0]],
     _Q_=[0,[8,9,0,0,[2,0,0]],caml_new_string("%g%s")],
     _P_=
      [0,
       [11,caml_new_string("url("),[2,0,[12,41,0]]],
       caml_new_string("url(%s)")],
     _ag_=[0,[2,0,[12,32,[2,0,[12,120,0]]]],caml_new_string("%s %sx")],
     _af_=[0,[2,0,[12,32,[2,0,[12,119,0]]]],caml_new_string("%s %sw")],
     _ae_=[0,[4,0,0,0,[12,120,[4,0,0,0,0]]],caml_new_string("%dx%d")];
    function fmap(f){return f}
    function nil(param){return 0}
    function singleton(x){return [0,x,0]}
    function cons(x,xs){return [0,x,xs]}
    function append(x,y){return caml_call2(Stdlib[26],x,y)}
    var
     map=Stdlib_list[17],
     Xml_wrap=
      [0,[0,function(_ni_){return _ni_},fmap,nil,singleton,cons,append,map]];
    caml_register_global(1069,Xml_wrap,"Xml_wrap");
    var
     Malformed_stream=
      [248,cst_Xml_stream_Malformed_stream,runtime.caml_fresh_oo_id(0)];
    function _a_(Xml)
     {function of_list(l)
       {var _nf_=caml_call1(Xml[1][3],0);
        function _ng_(a,b)
         {var _nh_=caml_call1(Xml[1][1],a);
          return caml_call2(Xml[1][5],_nh_,b)}
        return caml_call3(Stdlib_list[21],_ng_,l,_nf_)}
      function mk(children,seq)
       {var children$0=children,seq$0=seq;
        for(;;)
         {var match=caml_call1(seq$0,0);
          if(match)
           {var _m9_=match[1];
            if(typeof _m9_ === "number")
             {var rest=match[2];
              return [0,of_list(caml_call1(Stdlib_list[9],children$0)),rest]}
            var _m__=_m9_[1];
            if(856096383 === _m__)
             {var
               q=match[2],
               _m$_=_m9_[2],
               attrs=_m$_[2],
               match$0=_m$_[1],
               name=match$0[2],
               f=
                function(param)
                 {var
                   v=param[2],
                   match=param[1],
                   name=match[2],
                   _ne_=caml_call1(Xml[1][1],v);
                  return caml_call2(Xml[6],name,_ne_)},
               a=caml_call2(Stdlib_list[17],f,attrs),
               match$1=mk(0,q),
               rest$0=match$1[2],
               sub_children=match$1[1],
               children$1=
                [0,caml_call3(Xml[21],[0,a],name,sub_children),children$0],
               children$0=children$1,
               seq$0=rest$0;
              continue}
            if(936573133 <= _m__)
             {var
               q$0=match[2],
               s=_m9_[2],
               _na_=
                function(x)
                 {var _nd_=caml_call1(Xml[1][1],x);
                  return caml_call1(Xml[17],_nd_)},
               _nb_=caml_call2(Stdlib_list[17],_na_,s),
               children$2=caml_call2(Stdlib[26],_nb_,children$0),
               children$0=children$2,
               seq$0=q$0;
              continue}
            var
             q$1=match[2],
             s$0=_m9_[2],
             children$3=[0,caml_call1(Xml[16],s$0),children$0],
             children$0=children$3,
             seq$0=q$1;
            continue}
          var _nc_=Stdlib_seq[1];
          return [0,of_list(caml_call1(Stdlib_list[9],children$0)),_nc_]}}
      function of_seq(seq)
       {var
         match=mk(0,seq),
         rest=match[2],
         l=match[1],
         match$0=caml_call1(rest,0);
        if(match$0)throw Malformed_stream;
        return l}
      return [0,of_seq]}
    var Xml_stream=[0,Malformed_stream,_a_];
    caml_register_global(1071,Xml_stream,"Xml_stream");
    function add_unsafe_char(b,c)
     {if(34 === c)return caml_call2(Stdlib_buffer[14],b,cst_quot);
      if(60 <= c)
       {if(! (63 <= c))
         {var switcher=c - 60 | 0;
          switch(switcher)
           {case 0:return caml_call2(Stdlib_buffer[14],b,cst_lt);
            case 1:break;
            default:return caml_call2(Stdlib_buffer[14],b,cst_gt)}}}
      else
       if(38 === c)return caml_call2(Stdlib_buffer[14],b,cst_amp);
      var _m2_=c <= 8?1:0;
      if(_m2_)
       var _m3_=_m2_;
      else
       {var _m4_=11 === c?1:0;
        if(_m4_)
         var _m3_=_m4_;
        else
         {var _m5_=12 === c?1:0;
          if(_m5_)
           var _m3_=_m5_;
          else
           var
            _m6_=14 <= c?1:0,
            _m7_=_m6_?c <= 31?1:0:_m6_,
            _m3_=_m7_ || (127 === c?1:0)}}
      if(_m3_)
       {caml_call2(Stdlib_buffer[14],b,cst);
        var _m8_=caml_call1(Stdlib[22],c);
        caml_call2(Stdlib_buffer[14],b,_m8_);
        return caml_call2(Stdlib_buffer[14],b,cst$0)}
      return caml_call2(Stdlib_buffer[10],b,c)}
    function encode_unsafe_char(s)
     {var b=caml_call1(Stdlib_buffer[1],caml_ml_string_length(s));
      function _m0_(_m1_){return add_unsafe_char(b,_m1_)}
      caml_call2(Stdlib_string[8],_m0_,s);
      return caml_call1(Stdlib_buffer[2],b)}
    function encode_unsafe_char_and_at(s)
     {var b=caml_call1(Stdlib_buffer[1],caml_ml_string_length(s));
      function f(c)
       {return 64 === c
                ?caml_call2(Stdlib_buffer[14],b,cst_64)
                :add_unsafe_char(b,c)}
      caml_call2(Stdlib_string[8],f,s);
      return caml_call1(Stdlib_buffer[2],b)}
    function compose_decl(opt,_mZ_,param)
     {if(opt)var sth=opt[1],version=sth;else var version=cst_1_0;
      if(_mZ_)var sth$0=_mZ_[1],encoding=sth$0;else var encoding=cst_UTF_8;
      return caml_call3(Stdlib_format[115],_b_,version,encoding)}
    function compose_doctype(dt,args)
     {function pp_args(fmt,l)
       {if(l)
         {var
           _mX_=function(fmt){return caml_call2(Stdlib_format[112],fmt,_c_)},
           _mY_=caml_call2(Stdlib_format[110],[0,Stdlib_format[25]],_mX_);
          return caml_call4(Stdlib_format[112],fmt,_d_,_mY_,l)}
        return 0}
      return caml_call4(Stdlib_format[116],_e_,dt,pp_args,args)}
    var
     _f_=[0,caml_call1(Re[23],cst$1),0],
     _g_=[0,caml_call1(Re[23],cst$2),_f_],
     _h_=[0,caml_call1(Re[23],cst$3),0],
     _i_=[0,caml_call1(Re[26],[0,Re[37],_h_]),_g_],
     _j_=[0,caml_call1(Re[23],cst$4),0],
     _k_=[0,caml_call1(Re[26],[0,Re[37],_j_]),_i_],
     _l_=caml_call1(Re[25],_k_),
     re_end_comment=caml_call1(Re[2],_l_);
    function pp_number(fmt,v)
     {if(v == Stdlib[11])
       return caml_call2(Stdlib_format[13],fmt,cst_Infinity);
      if(v == Stdlib[12])
       return caml_call2(Stdlib_format[13],fmt,cst_Infinity$0);
      if(v != v)return caml_call2(Stdlib_format[13],fmt,cst_NaN);
      var n=v | 0;
      if(n == v)
       {var n$0=n,i=0;
        for(;;)
         {if(0 !== n$0)
           if(0 === (n$0 % 10 | 0))
            {var i$0=i + 1 | 0,n$1=n$0 / 10 | 0,n$0=n$1,i=i$0;continue}
          return 2 < i
                  ?caml_call4(Stdlib_format[112],fmt,_n_,n$0,i)
                  :caml_call2(Stdlib_format[17],fmt,n)}}
      var s1=caml_call2(Stdlib_printf[4],_o_,v);
      if(v == caml_float_of_string(s1))
       return caml_call2(Stdlib_format[13],fmt,s1);
      var s2=caml_call2(Stdlib_printf[4],_p_,v);
      return v == caml_float_of_string(s2)
              ?caml_call2(Stdlib_format[13],fmt,s2)
              :caml_call3(Stdlib_format[112],fmt,_q_,v)}
    function string_of_number(v)
     {return caml_call3(Stdlib_format[116],_r_,pp_number,v)}
    function normalize(src)
     {var
       warn=[0,0],
       buffer=caml_call1(Stdlib_buffer[1],caml_ml_string_length(src)),
       _mT_=0;
      function _mU_(param,_mW_,d)
       {if(852405675 <= d[1])
         {var code=d[2];return caml_call2(Uutf[23][1],buffer,code)}
        caml_call2(Uutf[23][1],buffer,Uutf[2]);
        warn[1] = 1;
        return 0}
      caml_call5(Uutf[22][2],0,0,_mU_,_mT_,src);
      var _mV_=warn[1];
      return [0,caml_call1(Stdlib_buffer[2],buffer),_mV_]}
    function normalize_html(src)
     {var l=caml_ml_string_length(src),i=0;
      for(;;)
       {var _mN_=i < l?1:0;
        if(_mN_)
         {var
           match=runtime.caml_string_get(src,i),
           switch$0=
            35 <= match
             ?61 <= match
               ?62 === match?1:127 <= match?0:2
               :38 === match?1:60 <= match?1:2
             :11 <= match
               ?32 <= match?34 <= match?1:2:13 === match?2:0
               :9 <= match?2:0;
          switch(switch$0)
           {case 0:var _mO_=1;break;
            case 1:var _mO_=1;break;
            default:var i$0=i + 1 | 0,i=i$0;continue}}
        else
         var _mO_=_mN_;
        if(_mO_)
         {var
           warn=[0,0],
           buffer=caml_call1(Stdlib_buffer[1],caml_ml_string_length(src)),
           _mP_=0,
           _mQ_=
            function(param,_mS_,d)
             {if(852405675 <= d[1])
               {var u=d[2],code=caml_call1(Stdlib_uchar[10],u);
                if(34 === code)
                 return caml_call2(Stdlib_buffer[14],buffer,cst_quot$0);
                if(60 <= code)
                 {if(! (63 <= code))
                   {var switcher=code - 60 | 0;
                    switch(switcher)
                     {case 0:
                       return caml_call2(Stdlib_buffer[14],buffer,cst_lt$0);
                      case 1:break;
                      default:return caml_call2(Stdlib_buffer[14],buffer,cst_gt$4)}}}
                else
                 if(38 === code)
                  return caml_call2(Stdlib_buffer[14],buffer,cst_amp$0);
                var
                 switch$0=
                  31 < code?0:9 === code?0:10 === code?0:13 === code?0:1;
                if(switch$0)
                 var switch$1=0;
                else
                 {if(127 <= code)
                   if(159 < code)var switch$2=1;else var switch$1=0,switch$2=0;
                  else
                   var switch$2=1;
                  if(switch$2)
                   if(65534 === (code & 65535))
                    var switch$1=0;
                   else
                    if(65535 === (code & 65535))
                     var switch$1=0;
                    else
                     var u$0=u,switch$1=1}
                if(! switch$1){warn[1] = 1;var u$0=Uutf[2]}
                return caml_call2(Uutf[23][1],buffer,u$0)}
              caml_call2(Uutf[23][1],buffer,Uutf[2]);
              warn[1] = 1;
              return 0};
          caml_call5(Uutf[22][2],0,0,_mQ_,_mP_,src);
          var _mR_=warn[1];
          return [0,caml_call1(Stdlib_buffer[2],buffer),_mR_]}
        return [0,src,0]}}
    function pp_noop(fmt,param){return 0}
    function Make_fmt(Xml,_lW_)
     {function open_box(indent,fmt)
       {return indent?caml_call2(Stdlib_format[1],fmt,0):0}
      function close_box(indent,fmt)
       {return indent?caml_call2(Stdlib_format[3],fmt,0):0}
      function sp(indent,fmt)
       {return indent
                ?caml_call2(Stdlib_format[25],fmt,0)
                :caml_call2(Stdlib_format[13],fmt,cst$9)}
      function cut(indent,fmt)
       {return indent?caml_call2(Stdlib_format[27],fmt,0):0}
      var S=caml_call1(Stdlib_set[1],[0,Stdlib_string[33]]),_lX_=_lW_[1];
      if(_lX_)
       var
        _lY_=S[1],
        _lZ_=function(s,x){return caml_call2(S[4],x,s)},
        set=caml_call3(Stdlib_list[20],_lZ_,_lY_,_lX_),
        is_emptytag=function(x){return caml_call2(S[3],x,set)};
      else
       var is_emptytag=function(param){return 0};
      function pp_encode(encode,indent,fmt,s)
       {var s$0=caml_call1(encode,s);
        return indent
                ?caml_call4(Stdlib_format[112],fmt,_s_,Stdlib_format[111],s$0)
                :caml_call2(Stdlib_format[13],fmt,s$0)}
      function pp_sep(indent,param)
       {return 0 === param
                ?function(fmt,param){return sp(indent,fmt)}
                :function(fmt,param)
                  {function _mL_(_mM_){return sp(indent,_mM_)}
                   return caml_call3(Stdlib_format[112],fmt,_t_,_mL_)}}
      function pp_attrib_value(encode,indent,fmt,a)
       {var match=caml_call1(Xml[26],a);
        switch(match[0])
         {case 0:
           var f=match[1];
           return caml_call4(Stdlib_format[112],fmt,_u_,pp_number,f);
          case 1:
           var i=match[1];return caml_call3(Stdlib_format[112],fmt,_v_,i);
          case 2:
           var s=match[1],_mF_=caml_call1(encode,s);
           return caml_call3(Stdlib_format[112],fmt,_w_,_mF_);
          default:
           var
            slist=match[2],
            sep=match[1],
            _mG_=
             function(_mJ_,_mK_){return pp_encode(encode,indent,_mJ_,_mK_)},
            _mH_=[0,pp_sep(indent,sep)],
            _mI_=caml_call2(Stdlib_format[110],_mH_,_mG_);
           return caml_call4(Stdlib_format[112],fmt,_x_,_mI_,slist)}}
      function pp_attrib(encode,indent,fmt,a)
       {function _mz_(_mD_,_mE_)
         {return pp_attrib_value(encode,indent,_mD_,_mE_)}
        var _mA_=caml_call1(Xml[25],a);
        function _mB_(_mC_){return sp(indent,_mC_)}
        return caml_call6(Stdlib_format[112],fmt,_y_,_mB_,_mA_,_mz_,a)}
      function pp_attribs(encode,indent)
       {function _mw_(_mx_,_my_){return pp_attrib(encode,indent,_mx_,_my_)}
        return caml_call2(Stdlib_format[110],[0,pp_noop],_mw_)}
      function pp_tag_and_attribs(encode,indent,fmt,param)
       {var attrs=param[2],tag=param[1];
        open_box(indent,fmt);
        function _mt_(_mv_){return cut(indent,_mv_)}
        var _mu_=pp_attribs(encode,indent);
        caml_call6(Stdlib_format[112],fmt,_z_,tag,_mu_,attrs,_mt_);
        return close_box(indent,fmt)}
      function pp_closedtag(encode,indent,fmt,tag,attrs)
       {if(is_emptytag(tag))
         {var
           _mj_=[0,tag,attrs],
           _mk_=
            function(_mr_,_ms_)
             {return pp_tag_and_attribs(encode,indent,_mr_,_ms_)};
          return caml_call4(Stdlib_format[112],fmt,_A_,_mk_,_mj_)}
        open_box(indent,fmt);
        function _ml_(_mq_){return cut(indent,_mq_)}
        var _mm_=[0,tag,attrs];
        function _mn_(_mo_,_mp_)
         {return pp_tag_and_attribs(encode,indent,_mo_,_mp_)}
        caml_call6(Stdlib_format[112],fmt,_B_,_mn_,_mm_,_ml_,tag);
        return close_box(indent,fmt)}
      function pp_tag(encode,indent,fmt,tag,attrs,children)
       {if(children)
         {open_box(indent,fmt);
          var
           _l8_=function(_mi_){return cut(indent,_mi_)},
           _l9_=function(_mh_){return close_box(indent,_mh_)},
           _l__=pp_elts(encode,indent),
           _l$_=function(_mg_){return cut(indent,_mg_)},
           _ma_=[0,tag,attrs],
           _mb_=
            function(_me_,_mf_)
             {return pp_tag_and_attribs(encode,indent,_me_,_mf_)},
           _mc_=function(_md_){return open_box(indent,_md_)};
          caml_call11
           (Stdlib_format[112],
            fmt,
            _C_,
            _mc_,
            _mb_,
            _ma_,
            _l$_,
            _l__,
            children,
            _l9_,
            _l8_,
            tag);
          return close_box(indent,fmt)}
        return pp_closedtag(encode,indent,fmt,tag,attrs)}
      function pp_elt(encode,indent,fmt,elt)
       {var match=caml_call1(Xml[27],elt);
        if(typeof match === "number")
         return 0;
        else
         switch(match[0])
          {case 0:
            var
             texte=match[1],
             f=
              function(g)
               {var s=caml_call2(Re_Core[1][1],g,0);
                return caml_string_notequal(s,cst$5)
                        ?caml_string_notequal(s,cst$6)
                          ?caml_string_notequal(s,cst$7)
                            ?caml_string_notequal(s,cst$8)?s:cst_gt$0
                            :cst_gt$1
                          :cst_gt$2
                        :cst_gt$3},
             _l7_=caml_call6(Re[21],0,0,_m_,re_end_comment,f,texte);
            return caml_call3(Stdlib_format[112],fmt,_D_,_l7_);
           case 1:
            var texte$0=match[1];
            return caml_call2(Stdlib_format[13],fmt,texte$0);
           case 2:
            var texte$1=match[1];return pp_encode(encode,indent,fmt,texte$1);
           case 3:
            var e=match[1];return caml_call3(Stdlib_format[112],fmt,_E_,e);
           case 4:
            var xh_attrs=match[2],name=match[1];
            return pp_closedtag(encode,indent,fmt,name,xh_attrs);
           default:
            var xh_taglist=match[3],xh_attrs$0=match[2],name$0=match[1];
            return pp_tag(encode,indent,fmt,name$0,xh_attrs$0,xh_taglist)}}
      function pp_elts(encode,indent)
       {function _l3_(_l5_,_l6_){return pp_elt(encode,indent,_l5_,_l6_)}
        var _l4_=[0,function(fmt,param){return cut(indent,fmt)}];
        return caml_call2(Stdlib_format[110],_l4_,_l3_)}
      function pp(opt,_l0_,param)
       {if(opt)var sth=opt[1],encode=sth;else var encode=encode_unsafe_char;
        if(_l0_)var sth$0=_l0_[1],indent=sth$0;else var indent=0;
        return function(_l1_,_l2_){return pp_elt(encode,indent,_l1_,_l2_)}}
      return [0,
              open_box,
              close_box,
              sp,
              cut,
              S,
              is_emptytag,
              pp_encode,
              pp_sep,
              pp_attrib_value,
              pp_attrib,
              pp_attribs,
              pp_tag_and_attribs,
              pp_closedtag,
              pp_tag,
              pp_elt,
              pp_elts,
              pp]}
    function Make(Xml,I,O)
     {var _ll_=O[2];
      function separator_to_string(param){return 0 === param?cst$10:cst$11}
      function attrib_value_to_string(encode,a)
       {var match=caml_call1(Xml[26],a);
        switch(match[0])
         {case 0:
           var f=match[1],_lS_=string_of_number(f);
           return caml_call2(Stdlib_printf[4],_H_,_lS_);
          case 1:var i=match[1];return caml_call2(Stdlib_printf[4],_I_,i);
          case 2:
           var s=match[1],_lT_=caml_call1(encode,s);
           return caml_call2(Stdlib_printf[4],_J_,_lT_);
          default:
           var
            slist=match[2],
            sep=match[1],
            _lU_=separator_to_string(sep),
            _lV_=caml_call1(encode,caml_call2(Stdlib_string[7],_lU_,slist));
           return caml_call2(Stdlib_printf[4],_K_,_lV_)}}
      function attrib_to_string(encode,a)
       {var _lQ_=attrib_value_to_string(encode,a),_lR_=caml_call1(Xml[25],a);
        return caml_call3(Stdlib_printf[4],_L_,_lR_,_lQ_)}
      function xh_print_attrs(encode,attrs)
       {if(attrs)
         {var
           queue=attrs[2],
           attr=attrs[1],
           _lN_=xh_print_attrs(encode,queue),
           _lO_=attrib_to_string(encode,attr),
           _lP_=caml_call2(Stdlib[17],cst$12,_lO_);
          return caml_call2(_ll_,caml_call1(O[3],_lP_),_lN_)}
        return O[1]}
      function xh_print_closedtag(encode,tag,attrs)
       {if(0 !== I[1])
         if(! caml_call2(Stdlib_list[31],tag,I[1]))
          {var
            _lI_=caml_call2(Stdlib[17],tag,cst$15),
            _lJ_=caml_call2(Stdlib[17],cst$16,_lI_),
            _lK_=caml_call1(O[3],_lJ_),
            _lL_=xh_print_attrs(encode,attrs),
            _lM_=caml_call2(Stdlib[17],cst$17,tag);
           return caml_call2
                   (_ll_,caml_call2(_ll_,caml_call1(O[3],_lM_),_lL_),_lK_)}
        var
         _lF_=caml_call1(O[3],cst$13),
         _lG_=xh_print_attrs(encode,attrs),
         _lH_=caml_call2(Stdlib[17],cst$14,tag);
        return caml_call2
                (_ll_,caml_call2(_ll_,caml_call1(O[3],_lH_),_lG_),_lF_)}
      function xh_print_tag(encode,tag,attrs,taglist)
       {if(0 === taglist)return xh_print_closedtag(encode,tag,attrs);
        var
         _ly_=caml_call2(Stdlib[17],tag,cst$18),
         _lz_=caml_call2(Stdlib[17],cst$19,_ly_),
         _lA_=caml_call1(O[3],_lz_),
         _lB_=xh_print_taglist(encode,taglist),
         _lC_=caml_call1(O[3],cst$20),
         _lD_=xh_print_attrs(encode,attrs),
         _lE_=caml_call2(Stdlib[17],cst$21,tag);
        return caml_call2
                (_ll_,
                 caml_call2
                  (_ll_,
                   caml_call2
                    (_ll_,caml_call2(_ll_,caml_call1(O[3],_lE_),_lD_),_lC_),
                   _lB_),
                 _lA_)}
      function print_nodes(encode,name,xh_attrs,xh_taglist,queue)
       {var _lx_=xh_print_taglist(encode,queue);
        return caml_call2
                (_ll_,xh_print_tag(encode,name,xh_attrs,xh_taglist),_lx_)}
      function xh_print_taglist(encode,taglist)
       {var taglist$0=taglist;
        for(;;)
         {if(taglist$0)
           {var
             queue=taglist$0[2],
             elt=taglist$0[1],
             match=caml_call1(Xml[27],elt);
            if(typeof match === "number")
             {var taglist$0=queue;continue}
            else
             switch(match[0])
              {case 0:
                var
                 texte=match[1],
                 _ln_=xh_print_taglist(encode,queue),
                 _lo_=caml_call1(encode,texte),
                 _lp_=caml_call2(Stdlib[17],_lo_,cst$22),
                 _lq_=caml_call2(Stdlib[17],cst$23,_lp_);
                return caml_call2(_ll_,caml_call1(O[3],_lq_),_ln_);
               case 1:
                var texte$0=match[1],_lr_=xh_print_taglist(encode,queue);
                return caml_call2(_ll_,caml_call1(O[3],texte$0),_lr_);
               case 2:
                var
                 texte$1=match[1],
                 _ls_=xh_print_taglist(encode,queue),
                 _lt_=caml_call1(encode,texte$1);
                return caml_call2(_ll_,caml_call1(O[3],_lt_),_ls_);
               case 3:
                var
                 e=match[1],
                 _lu_=xh_print_taglist(encode,queue),
                 _lv_=caml_call2(Stdlib[17],e,cst$24),
                 _lw_=caml_call2(Stdlib[17],cst$25,_lv_);
                return caml_call2(_ll_,caml_call1(O[3],_lw_),_lu_);
               case 4:
                var xh_attrs=match[2],name=match[1];
                return print_nodes(encode,name,xh_attrs,0,queue);
               default:
                var xh_taglist=match[3],xh_attrs$0=match[2],name$0=match[1];
                return print_nodes(encode,name$0,xh_attrs$0,xh_taglist,queue)}}
          return O[1]}}
      function print_list(opt,foret)
       {if(opt)var sth=opt[1],encode=sth;else var encode=encode_unsafe_char;
        var _lm_=xh_print_taglist(encode,foret);
        return caml_call1(O[4],_lm_)}
      return [0,
              _ll_,
              separator_to_string,
              attrib_value_to_string,
              attrib_to_string,
              xh_print_attrs,
              xh_print_closedtag,
              xh_print_tag,
              print_nodes,
              xh_print_taglist,
              print_list]}
    function Make_typed(Xml,Typed_xml,O)
     {var P=Make(Xml,[0,Typed_xml[1][7]],O),_lb_=O[2];
      function print_list(opt,foret)
       {if(opt)var sth=opt[1],encode=sth;else var encode=encode_unsafe_char;
        var
         _lj_=caml_call2(Stdlib_list[17],Typed_xml[2],foret),
         _lk_=caml_call2(P[9],encode,_lj_);
        return caml_call1(O[4],_lk_)}
      function print(opt,_lc_,doc)
       {if(opt)var sth=opt[1],encode=sth;else var encode=encode_unsafe_char;
        if(_lc_)var sth$0=_lc_[1],advert=sth$0;else var advert=cst$30;
        var
         doc$0=caml_call1(Typed_xml[3],doc),
         match=caml_call1(Xml[27],doc$0);
        if(typeof match === "number")
         var switch$0=0;
        else
         if(5 === match[0])
          var
           c=match[3],
           a=match[2],
           n=match[1],
           _li_=
            function(a)
             {return caml_string_equal(caml_call1(Xml[25],a),cst_xmlns$1)},
           a$0=
            caml_call2(Stdlib_list[28],_li_,a)
             ?a
             :[0,caml_call2(Xml[6],cst_xmlns$2,Typed_xml[1][5]),a],
           doc$1=caml_call3(Xml[21],[0,a$0],n,c),
           switch$0=1;
         else
          var switch$0=0;
        if(! switch$0)var doc$1=doc$0;
        var _ld_=caml_call2(P[9],encode,[0,doc$1,0]);
        if(caml_string_notequal(advert,cst$26))
         var
          _le_=caml_call2(Stdlib[17],advert,cst$27),
          _lf_=caml_call2(Stdlib[17],cst$28,_le_);
        else
         var _lf_=cst$29;
        var
         _lg_=caml_call1(O[3],_lf_),
         _lh_=
          caml_call2
           (_lb_,caml_call2(_lb_,caml_call1(O[3],Typed_xml[1][6]),_lg_),_ld_);
        return caml_call1(O[4],_lh_)}
      return [0,P,_lb_,print_list,print]}
    function Simple_output(M)
     {function empty(param){return 0}
      function concat(f1,f2,param){caml_call1(f1,0);return caml_call1(f2,0)}
      function put(s,param){return caml_call1(M[1],s)}
      function make(f){return caml_call1(f,0)}
      return [0,empty,concat,put,make]}
    function Make_simple(Xml,I)
     {function print_list(output)
       {return Make(Xml,I,Simple_output([0,output]))[10]}
      return [0,print_list]}
    function Make_typed_simple(Xml,Typed_xml)
     {function print_list(output)
       {return Make_typed(Xml,Typed_xml,Simple_output([0,output]))[3]}
      function print(output)
       {return Make_typed(Xml,Typed_xml,Simple_output([0,output]))[4]}
      return [0,print_list,print]}
    function _M_(_k$_,_k__,_k9_)
     {var _la_=Make_typed(_k$_,_k__,_k9_);return [0,_la_[3],_la_[4]]}
    function _N_(_k8_,_k7_,_k6_){return [0,Make(_k8_,_k7_,_k6_)[10]]}
    function _O_(_k5_,_k4_){return [0,Make_fmt(_k5_,_k4_)[17]]}
    var
     Xml_print=
      [0,
       encode_unsafe_char,
       encode_unsafe_char_and_at,
       [0,normalize,normalize_html],
       compose_decl,
       compose_doctype,
       string_of_number,
       pp_number,
       function(Xml,Typed_xml)
        {var P=Make_fmt(Xml,[0,Typed_xml[1][7]]);
         function pp_elt(opt,_k2_,param,fmt,foret)
          {if(opt)
            var sth=opt[1],encode=sth;
           else
            var encode=encode_unsafe_char;
           if(_k2_)var sth$0=_k2_[1],indent=sth$0;else var indent=0;
           var _k3_=caml_call1(Typed_xml[2],foret);
           return caml_call4(P[15],encode,indent,fmt,_k3_)}
         function pp(opt,_k0_,advert,param,fmt,doc$0)
          {if(opt)
            var sth=opt[1],encode=sth;
           else
            var encode=encode_unsafe_char;
           if(_k0_)var sth$0=_k0_[1],indent=sth$0;else var indent=0;
           caml_call2(Stdlib_format[7],fmt,0);
           caml_call3(Stdlib_format[112],fmt,_F_,Typed_xml[1][6]);
           if(advert)
            {var s=advert[1];caml_call3(Stdlib_format[112],fmt,_G_,s)}
           var
            doc=caml_call1(Typed_xml[3],doc$0),
            match=caml_call1(Xml[27],doc);
           if(typeof match === "number")
            var switch$0=0;
           else
            if(5 === match[0])
             var
              c=match[3],
              a=match[2],
              n=match[1],
              _kZ_=
               function(a)
                {return caml_string_equal(caml_call1(Xml[25],a),cst_xmlns)},
              a$0=
               caml_call2(Stdlib_list[28],_kZ_,a)
                ?a
                :[0,caml_call2(Xml[6],cst_xmlns$0,Typed_xml[1][5]),a],
              _k1_=caml_call3(Xml[21],[0,a$0],n,c),
              switch$0=1;
            else
             var switch$0=0;
           if(! switch$0)var _k1_=doc;
           caml_call4(P[15],encode,indent,fmt,_k1_);
           return caml_call2(Stdlib_format[3],fmt,0)}
         return [0,pp_elt,pp]},
       _O_,
       _N_,
       _M_,
       Make_simple,
       Make_typed_simple];
    caml_register_global(1081,Xml_print,"Xml_print");
    var
     Xml_iter=
      [0,
       function(Xml)
        {function amap1(f,n)
          {var match=caml_call1(Xml[27],n);
           if(typeof match !== "number")
            switch(match[0])
             {case 4:
               var
                attribs=match[2],
                name=match[1],
                _kX_=[0,caml_call2(f,name,attribs)];
               return caml_call2(Xml[20],_kX_,name);
              case 5:
               var
                elts=match[3],
                attribs$0=match[2],
                name$0=match[1],
                _kY_=[0,caml_call2(f,name$0,attribs$0)];
               return caml_call3(Xml[21],_kY_,name$0,elts)
              }
           return n}
         function amap(f,n)
          {var match=caml_call1(Xml[27],n);
           if(typeof match !== "number")
            switch(match[0])
             {case 4:
               var
                attribs=match[2],
                name=match[1],
                _kS_=[0,caml_call2(f,name,attribs)];
               return caml_call2(Xml[20],_kS_,name);
              case 5:
               var
                elts=match[3],
                attribs$0=match[2],
                name$0=match[1],
                _kT_=function(_kW_){return amap(f,_kW_)},
                _kU_=caml_call2(Stdlib_list[17],_kT_,elts),
                _kV_=[0,caml_call2(f,name$0,attribs$0)];
               return caml_call3(Xml[21],_kV_,name$0,_kU_)
              }
           return n}
         function add_float_attrib(name,value,param)
          {if(param)
            {var tail=param[2],head=param[1];
             return caml_string_equal(caml_call1(Xml[25],head),name)
                     ?[0,caml_call2(Xml[4],name,value),tail]
                     :[0,head,add_float_attrib(name,value,tail)]}
           return [0,caml_call2(Xml[4],name,value),0]}
         function map_float_attrib(is_attrib,f,l)
          {function aux(head)
            {var match=caml_call1(Xml[26],head);
             if(0 === match[0])
              {var value=match[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {var _kQ_=caml_call1(f,value),_kR_=caml_call1(Xml[25],head);
                 return caml_call2(Xml[4],_kR_,_kQ_)}}
             return head}
           return caml_call2(Stdlib_list[17],aux,l)}
         function add_int_attrib(name,value,param)
          {if(param)
            {var tail=param[2],head=param[1];
             return caml_string_equal(caml_call1(Xml[25],head),name)
                     ?[0,caml_call2(Xml[5],name,value),tail]
                     :[0,head,add_int_attrib(name,value,tail)]}
           return [0,caml_call2(Xml[5],name,value),0]}
         function rm_attrib(is_attrib,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var tail=param$0[2],head=param$0[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {var param$0=tail;continue}
               return [0,head,rm_attrib(is_attrib,tail)]}
             return 0}}
         function map_int_attrib(is_attrib,f,l)
          {function aux(head)
            {var match=caml_call1(Xml[26],head);
             if(1 === match[0])
              {var value=match[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {var _kO_=caml_call1(f,value),_kP_=caml_call1(Xml[25],head);
                 return caml_call2(Xml[5],_kP_,_kO_)}}
             return head}
           return caml_call2(Stdlib_list[17],aux,l)}
         function add_string_attrib(name,value,param)
          {if(param)
            {var tail=param[2],head=param[1];
             return caml_string_equal(caml_call1(Xml[25],head),name)
                     ?[0,caml_call2(Xml[6],name,value),tail]
                     :[0,head,add_string_attrib(name,value,tail)]}
           return [0,caml_call2(Xml[6],name,value),0]}
         function map_string_attrib(is_attrib,f,l)
          {function aux(head)
            {var match=caml_call1(Xml[26],head);
             if(2 === match[0])
              {var value=match[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {var _kM_=caml_call1(f,value),_kN_=caml_call1(Xml[25],head);
                 return caml_call2(Xml[6],_kN_,_kM_)}}
             return head}
           return caml_call2(Stdlib_list[17],aux,l)}
         function add_space_sep_attrib(name,value,param)
          {if(param)
            {var tail=param[2],head=param[1],match=caml_call1(Xml[26],head);
             if(3 === match[0])
              if(0 === match[1])
               {var values=match[2];
                if(caml_string_equal(caml_call1(Xml[25],head),name))
                 return [0,caml_call2(Xml[7],name,[0,value,values]),tail]}
             return caml_string_equal(caml_call1(Xml[25],head),name)
                     ?[0,caml_call2(Xml[7],name,[0,value,0]),tail]
                     :[0,head,add_space_sep_attrib(name,value,tail)]}
           return [0,caml_call2(Xml[7],name,[0,value,0]),0]}
         function add_comma_sep_attrib(name,value,param)
          {if(param)
            {var tail=param[2],head=param[1],match=caml_call1(Xml[26],head);
             if(3 === match[0])
              if(0 !== match[1])
               {var values=match[2];
                if(caml_string_equal(caml_call1(Xml[25],head),name))
                 return [0,caml_call2(Xml[8],name,[0,value,values]),tail]}
             return caml_string_equal(caml_call1(Xml[25],head),name)
                     ?[0,caml_call2(Xml[8],name,[0,value,0]),tail]
                     :[0,head,add_comma_sep_attrib(name,value,tail)]}
           return [0,caml_call2(Xml[8],name,[0,value,0]),0]}
         function rm_attrib_from_list(is_attrib,is_value,param)
          {if(param)
            {var tail=param[2],head=param[1],match=caml_call1(Xml[26],head);
             if(3 === match[0])
              {var values=match[2],sep=match[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {var
                  _kJ_=function(v){return 1 - caml_call1(is_value,v)},
                  values$0=caml_call2(Stdlib_list[35],_kJ_,values);
                 if(values$0)
                  {if(0 === sep)
                    {var _kK_=caml_call1(Xml[25],head);
                     return [0,caml_call2(Xml[7],_kK_,values$0),tail]}
                   var _kL_=caml_call1(Xml[25],head);
                   return [0,caml_call2(Xml[8],_kL_,values$0),tail]}
                 return tail}}
             return [0,head,rm_attrib_from_list(is_attrib,is_value,tail)]}
           return 0}
         function map_string_attrib_in_list(is_attrib,f,l)
          {function aux(head)
            {var match=caml_call1(Xml[26],head);
             if(3 === match[0])
              {var values=match[2],sep=match[1];
               if(caml_call1(is_attrib,caml_call1(Xml[25],head)))
                {if(0 === sep)
                  {var
                    _kF_=caml_call2(Stdlib_list[17],f,values),
                    _kG_=caml_call1(Xml[25],head);
                   return caml_call2(Xml[7],_kG_,_kF_)}
                 var
                  _kH_=caml_call2(Stdlib_list[17],f,values),
                  _kI_=caml_call1(Xml[25],head);
                 return caml_call2(Xml[8],_kI_,_kH_)}}
             return head}
           return caml_call2(Stdlib_list[17],aux,l)}
         function fold
          (of_empty,
           of_comment,
           of_txt,
           of_encodedpcdata,
           of_entity,
           of_leaf,
           of_node,
           n)
          {var match=caml_call1(Xml[27],n);
           if(typeof match === "number")
            return caml_call1(of_empty,0);
           else
            switch(match[0])
             {case 0:var s=match[1];return caml_call1(of_comment,s);
              case 1:var s$0=match[1];return caml_call1(of_encodedpcdata,s$0);
              case 2:var s$1=match[1];return caml_call1(of_txt,s$1);
              case 3:var s$2=match[1];return caml_call1(of_entity,s$2);
              case 4:
               var attribs=match[2],name=match[1];
               return caml_call2(of_leaf,name,attribs);
              default:
               var
                elts=match[3],
                attribs$0=match[2],
                name$0=match[1],
                _kD_=
                 function(_kE_)
                  {return fold
                           (of_empty,
                            of_comment,
                            of_txt,
                            of_encodedpcdata,
                            of_entity,
                            of_leaf,
                            of_node,
                            _kE_)};
               return caml_call3
                       (of_node,
                        name$0,
                        attribs$0,
                        caml_call2(Stdlib_list[17],_kD_,elts))}}
         function all_entities(elt)
          {function f(param){return 0}
           function _kC_(ename,attribs,elts)
            {return caml_call1(Stdlib_list[14],elts)}
           return fold(f,f,f,f,f,function(ename,attribs){return 0},_kC_,elt)}
         function flatmap(f,l)
          {var _kB_=caml_call2(Stdlib_list[17],f,l);
           return caml_call1(Stdlib_list[13],_kB_)}
         function translate
          (root_leaf,root_node,sub_leaf,sub_node,update_state,state,n)
          {function translate(state,n)
            {var match=caml_call1(Xml[27],n);
             if(typeof match !== "number")
              switch(match[0])
               {case 4:
                 var attribs=match[2],name=match[1];
                 return caml_call3(sub_leaf,state,name,attribs);
                case 5:
                 var
                  elts=match[3],
                  attribs$0=match[2],
                  name$0=match[1],
                  _kz_=caml_call3(update_state,name$0,attribs$0,state);
                 return caml_call4
                         (sub_node,
                          state,
                          name$0,
                          attribs$0,
                          flatmap(function(_kA_){return translate(_kz_,_kA_)},elts))
                }
             return [0,n,0]}
           var match=caml_call1(Xml[27],n);
           if(typeof match !== "number")
            switch(match[0])
             {case 4:
               var attribs=match[2],name=match[1];
               return caml_call2(root_leaf,name,attribs);
              case 5:
               var elts=match[3],attribs$0=match[2],name$0=match[1];
               return caml_call3
                       (root_node,
                        name$0,
                        attribs$0,
                        flatmap(function(_ky_){return translate(state,_ky_)},elts))
              }
           return n}
         return [0,
                 amap,
                 amap1,
                 rm_attrib,
                 rm_attrib_from_list,
                 map_int_attrib,
                 map_float_attrib,
                 map_string_attrib,
                 map_string_attrib_in_list,
                 add_int_attrib,
                 add_float_attrib,
                 add_string_attrib,
                 add_comma_sep_attrib,
                 add_space_sep_attrib,
                 fold,
                 all_entities,
                 translate]}];
    caml_register_global(1082,Xml_iter,"Xml_iter");
    function string_of_iri(x){return caml_call2(Stdlib_printf[4],_P_,x)}
    function to_string(f,param)
     {var unit=param[2],n=param[1];
      if(unit)
       var unit$0=unit[1],_kx_=caml_call1(f,unit$0);
      else
       var _kx_=cst$31;
      return caml_call3(Stdlib_printf[4],_Q_,n,_kx_)}
    function angle_names(param)
     {return 4099509 === param?cst_rad:793050094 <= param?cst_grad:cst_deg}
    function string_of_angle(a){return to_string(angle_names,a)}
    function length_names(param)
     {return 16389 <= param
              ?17280 === param
                ?cst_mm
                :17956 <= param
                  ?17960 <= param?cst_px:cst_pt
                  :17939 <= param?cst_pc:cst_in
              :15496 <= param
                ?15507 <= param?cst_ex:cst_em
                :15050 <= param?cst_cm:cst$32}
    function string_of_length(a){return to_string(length_names,a)}
    function list(opt,f,l)
     {if(opt)var sth=opt[1],sep=sth;else var sep=cst$33;
      var _kw_=caml_call2(Stdlib_list[17],f,l);
      return caml_call2(Stdlib_string[7],sep,_kw_)}
    function string_of_paint_whitout_icc(param)
     {if(typeof param === "number")
       return 870530776 <= param?cst_none:cst_currentColor;
      var match=param[2],icc=match[2],c=match[1];
      if(icc)
       {var x=icc[1],_kv_=caml_call2(Stdlib[17],sep,x);
        return caml_call2(Stdlib[17],c,_kv_)}
      return c}
    function string_of_paint(c)
     {if(typeof c !== "number")
       if(3652393 <= c[1])
        {var _kp_=c[2],_kq_=_kp_[2],_kr_=_kp_[1];
         if(_kq_)
          {var
            b=_kq_[1],
            _ks_=string_of_paint_whitout_icc(b),
            _kt_=caml_call2(Stdlib[17],cst$34,_ks_),
            _ku_=string_of_iri(_kr_);
           return caml_call2(Stdlib[17],_ku_,_kt_)}
         return string_of_iri(_kr_)}
      return string_of_paint_whitout_icc(c)}
    function Make_with_wrapped_functions(Xml,C)
     {var
       doctype=compose_doctype(cst_svg,_R_),
       Info=[0,content_type,0,0,version,standard,namespace,doctype],
       W=0,
       _fg_=Xml[2],
       _fh_=Xml[3];
      function tot(x){return x}
      function totl(x){return x}
      function toelt(x){return x}
      function toeltl(x){return x}
      function to_attrib(x){return x}
      function nullary(tag,a,param)
       {var _ko_=caml_call1(Xml[1][3],0);
        return caml_call3(Xml[21],a,tag,_ko_)}
      function unary(tag,a,elt)
       {var _kn_=caml_call1(Xml[1][4],elt);
        return caml_call3(Xml[21],a,tag,_kn_)}
      function star(tag,a,elts){return caml_call3(Xml[21],a,tag,elts)}
      function to_xmlattribs(x){return x}
      var _fi_=Xml[4],_fj_=Xml[6],_fk_=C[10],_fl_=C[10],_fm_=C[11];
      function user_attrib(f,name,v)
       {var _km_=caml_call2(Xml[1][2],f,v);
        return caml_call2(Xml[6],name,_km_)}
      var _fn_=Xml[6];
      function metadata(a,children)
       {return caml_call3(Xml[21],a,cst_metadata,children)}
      function foreignObject(a,children)
       {return caml_call3(Xml[21],a,cst_foreignObject,children)}
      function pcdata(s){return caml_call1(Xml[17],s)}
      var
       a_version=caml_call1(_fj_,cst_version),
       a_baseProfile=caml_call1(_fj_,cst_baseProfile);
      function a_x(_kl_){return user_attrib(_fk_,cst_x,_kl_)}
      function a_y(_kk_){return user_attrib(_fk_,cst_y,_kk_)}
      function a_width(_kj_){return user_attrib(_fl_,cst_width,_kj_)}
      function a_height(_ki_){return user_attrib(_fl_,cst_height,_ki_)}
      var
       a_preserveAspectRatio=caml_call1(_fj_,cst_preserveAspectRatio),
       a_contentScriptType=caml_call1(_fj_,cst_contentScriptType),
       a_contentStyleType=caml_call1(_fj_,cst_contentStyleType);
      function a_zoomAndPan(x){return user_attrib(C[4],cst_zoomAndSpan,x)}
      var
       a_href=caml_call1(_fj_,cst_href),
       a_xlink_href=caml_call1(_fj_,cst_xlink_href),
       a_requiredFeatures=caml_call1(Xml[7],cst_requiredFeatures),
       a_requiredExtensions=caml_call1(Xml[7],cst_requiredExtension),
       a_systemLanguage=caml_call1(Xml[8],cst_systemLanguage),
       _fo_=C[3];
      function a_externalRessourcesRequired(_kh_)
       {return user_attrib(_fo_,cst_externalRessourcesRequired,_kh_)}
      var
       a_id=caml_call1(_fj_,cst_id),
       a_xml_base=caml_call1(_fj_,cst_xml_base),
       a_xml_lang=caml_call1(_fj_,cst_xml_lang);
      function a_xml_space(x){return user_attrib(C[4],cst_xml_space,x)}
      var
       a_type=caml_call1(_fj_,cst_type),
       a_media=caml_call1(Xml[8],cst_media),
       a_xlink_title=caml_call1(_fj_,cst_xlink_title),
       a_class=caml_call1(Xml[7],cst_class),
       a_style=caml_call1(_fj_,cst_style),
       _fp_=C[21];
      function a_transform(_kg_){return user_attrib(_fp_,cst_transform,_kg_)}
      var _fq_=C[7];
      function a_viewBox(_kf_){return user_attrib(_fq_,cst_viewBox,_kf_)}
      var
       a_d=caml_call1(_fj_,cst_d),
       a_pathLength=caml_call1(_fi_,cst_pathLength);
      function a_rx(_ke_){return user_attrib(_fl_,cst_rx,_ke_)}
      function a_ry(_kd_){return user_attrib(_fl_,cst_ry,_kd_)}
      function a_cx(_kc_){return user_attrib(_fl_,cst_cx,_kc_)}
      function a_cy(_kb_){return user_attrib(_fl_,cst_cy,_kb_)}
      function a_r(_ka_){return user_attrib(_fl_,cst_r,_ka_)}
      function a_x1(_j$_){return user_attrib(_fk_,cst_x1,_j$_)}
      function a_y1(_j__){return user_attrib(_fk_,cst_y1,_j__)}
      function a_x2(_j9_){return user_attrib(_fk_,cst_x2,_j9_)}
      function a_y2(_j8_){return user_attrib(_fk_,cst_y2,_j8_)}
      var _fr_=C[5];
      function a_points(_j7_){return user_attrib(_fr_,cst_points,_j7_)}
      function a_x_list(_j6_){return user_attrib(_fm_,cst_x$0,_j6_)}
      function a_y_list(_j5_){return user_attrib(_fm_,cst_y$0,_j5_)}
      var _fs_=C[12];
      function a_dx(_j4_){return user_attrib(_fs_,cst_dx,_j4_)}
      var _ft_=C[12];
      function a_dy(_j3_){return user_attrib(_ft_,cst_dy,_j3_)}
      function a_dx_list(_j2_){return user_attrib(_fm_,cst_dx$0,_j2_)}
      function a_dy_list(_j1_){return user_attrib(_fm_,cst_dy$0,_j1_)}
      function a_lengthAdjust(x){return user_attrib(C[4],cst_lengthAdjust,x)}
      function a_textLength(_j0_)
       {return user_attrib(_fl_,cst_textLength,_j0_)}
      function a_text_anchor(x){return user_attrib(C[4],cst_text_anchor,x)}
      function a_text_decoration(x)
       {return user_attrib(C[4],cst_text_decoration,x)}
      function a_text_rendering(x)
       {return user_attrib(C[4],cst_text_rendering,x)}
      var _fu_=C[14];
      function a_rotate(_jZ_){return user_attrib(_fu_,cst_rotate,_jZ_)}
      function a_startOffset(_jY_)
       {return user_attrib(_fl_,cst_startOffset,_jY_)}
      function a_method(x){return user_attrib(C[4],cst_method,x)}
      function a_spacing(x){return user_attrib(C[4],cst_spacing,x)}
      var
       a_glyphRef=caml_call1(_fj_,cst_glyphRef),
       a_format=caml_call1(_fj_,cst_format);
      function a_markerUnits(x){return user_attrib(C[4],cst_markerUnits,x)}
      function a_refX(_jX_){return user_attrib(_fk_,cst_refX,_jX_)}
      function a_refY(_jW_){return user_attrib(_fk_,cst_refY,_jW_)}
      function a_markerWidth(_jV_)
       {return user_attrib(_fl_,cst_markerWidth,_jV_)}
      function a_markerHeight(_jU_)
       {return user_attrib(_fl_,cst_markerHeight,_jU_)}
      function a_orient(x){return user_attrib(C[17],cst_orient,x)}
      var a_local=caml_call1(_fj_,cst_local);
      function a_rendering_intent(x)
       {return user_attrib(C[4],cst_rendering_intent,x)}
      function a_gradientUnits(x)
       {return user_attrib(C[4],cst_gradientUnits,x)}
      var _fv_=C[21];
      function a_gradientTransform(_jT_)
       {return user_attrib(_fv_,cst_gradientTransform,_jT_)}
      function a_spreadMethod(x){return user_attrib(C[4],cst_spreadMethod,x)}
      function a_fx(_jS_){return user_attrib(_fk_,cst_fx,_jS_)}
      function a_fy(_jR_){return user_attrib(_fk_,cst_fy,_jR_)}
      function a_offset(x){return user_attrib(C[16],cst_offset,x)}
      function a_patternUnits(x){return user_attrib(C[4],cst_patternUnits,x)}
      function a_patternContentUnits(x)
       {return user_attrib(C[4],cst_patternContentUnits,x)}
      function a_patternTransform(x)
       {return user_attrib(C[21],cst_patternTransform,x)}
      function a_clipPathUnits(x)
       {return user_attrib(C[4],cst_clipPathUnits,x)}
      function a_maskUnits(x){return user_attrib(C[4],cst_maskUnits,x)}
      function a_maskContentUnits(x)
       {return user_attrib(C[4],cst_maskContentUnits,x)}
      function a_primitiveUnits(x)
       {return user_attrib(C[4],cst_primitiveUnits,x)}
      var _fw_=C[13];
      function a_filterRes(_jQ_)
       {return user_attrib(_fw_,cst_filterResUnits,_jQ_)}
      var a_result=caml_call1(_fj_,cst_result);
      function a_in(x){return user_attrib(C[8],cst_in$0,x)}
      function a_in2(x){return user_attrib(C[8],cst_in2,x)}
      var
       a_azimuth=caml_call1(_fi_,cst_azimuth),
       a_elevation=caml_call1(_fi_,cst_elevation),
       a_pointsAtX=caml_call1(_fi_,cst_pointsAtX),
       a_pointsAtY=caml_call1(_fi_,cst_pointsAtY),
       a_pointsAtZ=caml_call1(_fi_,cst_pointsAtZ),
       a_specularExponent=caml_call1(_fi_,cst_specularExponent),
       a_specularConstant=caml_call1(_fi_,cst_specularConstant),
       a_limitingConeAngle=caml_call1(_fi_,cst_limitingConeAngle);
      function a_mode(x){return user_attrib(C[4],cst_mode,x)}
      function a_feColorMatrix_type(x){return user_attrib(C[4],cst_type$0,x)}
      var _fx_=C[14];
      function a_values(_jP_){return user_attrib(_fx_,cst_values,_jP_)}
      function a_transfer_type(x){return user_attrib(C[4],cst_type$1,x)}
      var _fy_=C[14];
      function a_tableValues(_jO_)
       {return user_attrib(_fy_,cst_tableValues,_jO_)}
      var _fz_=C[12];
      function a_intercept(_jN_){return user_attrib(_fz_,cst_intercept,_jN_)}
      var _fA_=C[12];
      function a_amplitude(_jM_){return user_attrib(_fA_,cst_amplitude,_jM_)}
      var _fB_=C[12];
      function a_exponent(_jL_){return user_attrib(_fB_,cst_exponent,_jL_)}
      var _fC_=C[12];
      function a_transfer_offset(_jK_)
       {return user_attrib(_fC_,cst_offset$0,_jK_)}
      function a_feComposite_operator(x)
       {return user_attrib(C[4],cst_operator,x)}
      var _fD_=C[12];
      function a_k1(_jJ_){return user_attrib(_fD_,cst_k1,_jJ_)}
      var _fE_=C[12];
      function a_k2(_jI_){return user_attrib(_fE_,cst_k2,_jI_)}
      var _fF_=C[12];
      function a_k3(_jH_){return user_attrib(_fF_,cst_k3,_jH_)}
      var _fG_=C[12];
      function a_k4(_jG_){return user_attrib(_fG_,cst_k4,_jG_)}
      var _fH_=C[13];
      function a_order(_jF_){return user_attrib(_fH_,cst_order,_jF_)}
      var _fI_=C[14];
      function a_kernelMatrix(_jE_)
       {return user_attrib(_fI_,cst_kernelMatrix,_jE_)}
      var _fJ_=C[12];
      function a_divisor(_jD_){return user_attrib(_fJ_,cst_divisor,_jD_)}
      var _fK_=C[12];
      function a_bias(_jC_){return user_attrib(_fK_,cst_bias,_jC_)}
      var _fL_=C[13];
      function a_kernelUnitLength(_jB_)
       {return user_attrib(_fL_,cst_kernelUnitLength,_jB_)}
      var _fM_=C[9];
      function a_targetX(_jA_){return user_attrib(_fM_,cst_targetX,_jA_)}
      var _fN_=C[9];
      function a_targetY(_jz_){return user_attrib(_fN_,cst_targetY,_jz_)}
      function a_edgeMode(x){return user_attrib(C[4],cst_targetY$0,x)}
      var _fO_=C[3];
      function a_preserveAlpha(_jy_)
       {return user_attrib(_fO_,cst_preserveAlpha,_jy_)}
      var _fP_=C[12];
      function a_surfaceScale(_jx_)
       {return user_attrib(_fP_,cst_surfaceScale,_jx_)}
      var _fQ_=C[12];
      function a_diffuseConstant(_jw_)
       {return user_attrib(_fQ_,cst_diffuseConstant,_jw_)}
      var _fR_=C[12];
      function a_scale(_jv_){return user_attrib(_fR_,cst_scale,_jv_)}
      function a_xChannelSelector(x)
       {return user_attrib(C[4],cst_xChannelSelector,x)}
      function a_yChannelSelector(x)
       {return user_attrib(C[4],cst_yChannelSelector,x)}
      var _fS_=C[13];
      function a_stdDeviation(_ju_)
       {return user_attrib(_fS_,cst_stdDeviation,_ju_)}
      function a_feMorphology_operator(x)
       {return user_attrib(C[4],cst_operator$0,x)}
      var _fT_=C[13];
      function a_radius(_jt_){return user_attrib(_fT_,cst_radius,_jt_)}
      var _fU_=C[13];
      function a_baseFrenquency(_js_)
       {return user_attrib(_fU_,cst_baseFrequency,_js_)}
      var _fV_=C[9];
      function a_numOctaves(_jr_)
       {return user_attrib(_fV_,cst_numOctaves,_jr_)}
      var _fW_=C[12];
      function a_seed(_jq_){return user_attrib(_fW_,cst_seed,_jq_)}
      function a_stitchTiles(x){return user_attrib(C[4],cst_stitchTiles,x)}
      function a_feTurbulence_type(x){return user_attrib(C[4],cst_type$2,x)}
      function a_xlink_show(x){return user_attrib(C[4],cst_xlink_show,x)}
      function a_xlink_actuate(x)
       {return user_attrib(C[4],cst_xlink_actuate,x)}
      var
       a_target=caml_call1(_fj_,cst_xlink_target),
       a_viewTarget=caml_call1(_fj_,cst_viewTarget),
       a_attributeName=caml_call1(_fj_,cst_attributeName);
      function a_attributeType(x)
       {return user_attrib(C[4],cst_attributeType,x)}
      var
       a_begin=caml_call1(_fj_,cst_begin),
       a_dur=caml_call1(_fj_,cst_dur),
       a_min=caml_call1(_fj_,cst_min),
       a_max=caml_call1(_fj_,cst_max);
      function a_restart(x){return user_attrib(C[4],cst_restart,x)}
      var
       a_repeatCount=caml_call1(_fj_,cst_repeatCount),
       a_repeatDur=caml_call1(_fj_,cst_repeatDur),
       _fX_=C[18];
      function a_fill(_jp_){return user_attrib(_fX_,cst_fill,_jp_)}
      function a_animation_fill(x){return user_attrib(C[4],cst_fill$0,x)}
      function a_calcMode(x){return user_attrib(C[4],cst_calcMode,x)}
      var
       a_animation_values=caml_call1(Xml[8],cst_values$0),
       a_keyTimes=caml_call1(Xml[8],cst_keyTimes),
       a_keySplines=caml_call1(Xml[8],cst_keySplines),
       a_from=caml_call1(_fj_,cst_from),
       a_to=caml_call1(_fj_,cst_to),
       a_by=caml_call1(_fj_,cst_by);
      function a_additive(x){return user_attrib(C[4],cst_additive,x)}
      function a_accumulate(x){return user_attrib(C[4],cst_accumulate,x)}
      var _fY_=C[15];
      function a_keyPoints(_jo_){return user_attrib(_fY_,cst_keyPoints,_jo_)}
      var a_path=caml_call1(_fj_,cst_path),_fZ_=C[4];
      function a_animateTransform_type(_jn_)
       {return user_attrib(_fZ_,cst_type$3,_jn_)}
      var _f0_=C[12];
      function a_horiz_origin_x(_jm_)
       {return user_attrib(_f0_,cst_horiz_origin_x,_jm_)}
      var _f1_=C[12];
      function a_horiz_origin_y(_jl_)
       {return user_attrib(_f1_,cst_horiz_origin_y,_jl_)}
      var _f2_=C[12];
      function a_horiz_adv_x(_jk_)
       {return user_attrib(_f2_,cst_horiz_adv_x,_jk_)}
      var _f3_=C[12];
      function a_vert_origin_x(_jj_)
       {return user_attrib(_f3_,cst_vert_origin_x,_jj_)}
      var _f4_=C[12];
      function a_vert_origin_y(_ji_)
       {return user_attrib(_f4_,cst_vert_origin_y,_ji_)}
      var _f5_=C[12];
      function a_vert_adv_y(_jh_)
       {return user_attrib(_f5_,cst_vert_adv_y,_jh_)}
      var
       a_unicode=caml_call1(_fj_,cst_unicode),
       a_glyph_name=caml_call1(_fj_,cst_glyphname);
      function a_orientation(x){return user_attrib(C[4],cst_orientation,x)}
      function a_arabic_form(x){return user_attrib(C[4],cst_arabic_form,x)}
      var
       a_lang=caml_call1(_fj_,cst_lang),
       a_u1=caml_call1(_fj_,cst_u1),
       a_u2=caml_call1(_fj_,cst_u2),
       a_g1=caml_call1(_fj_,cst_g1),
       a_g2=caml_call1(_fj_,cst_g2),
       a_k=caml_call1(_fj_,cst_k),
       a_font_family=caml_call1(_fj_,cst_font_family),
       a_font_style=caml_call1(_fj_,cst_font_style),
       a_font_variant=caml_call1(_fj_,cst_font_variant),
       a_font_weight=caml_call1(_fj_,cst_font_weight),
       a_font_stretch=caml_call1(_fj_,cst_font_stretch),
       a_font_size=caml_call1(_fj_,cst_font_size),
       a_unicode_range=caml_call1(_fj_,cst_unicode_range),
       a_units_per_em=caml_call1(_fj_,cst_units_per_em),
       _f6_=C[12];
      function a_stemv(_jg_){return user_attrib(_f6_,cst_stemv,_jg_)}
      var _f7_=C[12];
      function a_stemh(_jf_){return user_attrib(_f7_,cst_stemh,_jf_)}
      var _f8_=C[12];
      function a_slope(_je_){return user_attrib(_f8_,cst_slope,_je_)}
      var _f9_=C[12];
      function a_cap_height(_jd_)
       {return user_attrib(_f9_,cst_cap_height,_jd_)}
      var _f__=C[12];
      function a_x_height(_jc_){return user_attrib(_f__,cst_x_height,_jc_)}
      var _f$_=C[12];
      function a_accent_height(_jb_)
       {return user_attrib(_f$_,cst_accent_height,_jb_)}
      var _ga_=C[12];
      function a_ascent(_ja_){return user_attrib(_ga_,cst_ascent,_ja_)}
      var
       a_widths=caml_call1(_fj_,cst_widths),
       a_bbox=caml_call1(_fj_,cst_bbox),
       _gb_=C[12];
      function a_ideographic(_i$_)
       {return user_attrib(_gb_,cst_ideographic,_i$_)}
      var _gc_=C[12];
      function a_alphabetic(_i__)
       {return user_attrib(_gc_,cst_alphabetic,_i__)}
      var _gd_=C[12];
      function a_mathematical(_i9_)
       {return user_attrib(_gd_,cst_mathematical,_i9_)}
      var _ge_=C[12];
      function a_hanging(_i8_){return user_attrib(_ge_,cst_hanging,_i8_)}
      var _gf_=C[12];
      function a_videographic(_i7_)
       {return user_attrib(_gf_,cst_v_ideographic,_i7_)}
      var _gg_=C[12];
      function a_v_alphabetic(_i6_)
       {return user_attrib(_gg_,cst_v_alphabetic,_i6_)}
      var _gh_=C[12];
      function a_v_mathematical(_i5_)
       {return user_attrib(_gh_,cst_v_mathematical,_i5_)}
      var _gi_=C[12];
      function a_v_hanging(_i4_){return user_attrib(_gi_,cst_v_hanging,_i4_)}
      var _gj_=C[12];
      function a_underline_position(_i3_)
       {return user_attrib(_gj_,cst_underline_position,_i3_)}
      var _gk_=C[12];
      function a_underline_thickness(_i2_)
       {return user_attrib(_gk_,cst_underline_thickness,_i2_)}
      var _gl_=C[12];
      function a_strikethrough_position(_i1_)
       {return user_attrib(_gl_,cst_strikethrough_position,_i1_)}
      var _gm_=C[12];
      function a_strikethrough_thickness(_i0_)
       {return user_attrib(_gm_,cst_strikethrough_thickness,_i0_)}
      var _gn_=C[12];
      function a_overline_position(_iZ_)
       {return user_attrib(_gn_,cst_overline_position,_iZ_)}
      var _go_=C[12];
      function a_overline_thickness(_iY_)
       {return user_attrib(_go_,cst_overline_thickness,_iY_)}
      var
       a_string=caml_call1(_fj_,cst_string),
       a_name=caml_call1(_fj_,cst_name);
      function a_alignment_baseline(x)
       {return user_attrib(C[2],cst_alignment_baseline,x)}
      function a_dominant_baseline(x)
       {return user_attrib(C[6],cst_dominant_baseline,x)}
      var
       a_onabort=caml_call1(Xml[9],cst_onabort),
       a_onactivate=caml_call1(Xml[9],cst_onactivate),
       a_onbegin=caml_call1(Xml[9],cst_onbegin),
       a_onend=caml_call1(Xml[9],cst_onend),
       a_onerror=caml_call1(Xml[9],cst_onerror),
       a_onfocusin=caml_call1(Xml[9],cst_onfocusin),
       a_onfocusout=caml_call1(Xml[9],cst_onfocusout),
       a_onload=caml_call1(Xml[9],cst_onload),
       a_onrepeat=caml_call1(Xml[9],cst_onrepeat),
       a_onresize=caml_call1(Xml[9],cst_onresize),
       a_onscroll=caml_call1(Xml[9],cst_onscroll),
       a_onunload=caml_call1(Xml[9],cst_onunload),
       a_onzoom=caml_call1(Xml[9],cst_onzoom),
       a_onclick=caml_call1(Xml[10],cst_onclick),
       a_onmousedown=caml_call1(Xml[10],cst_onmousdown),
       a_onmouseup=caml_call1(Xml[10],cst_onmouseup),
       a_onmouseover=caml_call1(Xml[10],cst_onmouseover),
       a_onmouseout=caml_call1(Xml[10],cst_onmouseout),
       a_onmousemove=caml_call1(Xml[10],cst_onmousemove),
       a_ontouchstart=caml_call1(Xml[12],cst_ontouchstart),
       a_ontouchend=caml_call1(Xml[12],cst_ontouchend),
       a_ontouchmove=caml_call1(Xml[12],cst_ontouchmove),
       a_ontouchcancel=caml_call1(Xml[12],cst_ontouchcancel),
       a_stop_color=caml_call1(_fn_,cst_stop_color),
       _gp_=C[12];
      function a_stop_opacity(_iX_)
       {return user_attrib(_gp_,cst_stop_opacity,_iX_)}
      var _gq_=C[18];
      function a_stroke(_iW_){return user_attrib(_gq_,cst_stroke,_iW_)}
      var _gr_=C[10];
      function a_stroke_width(_iV_)
       {return user_attrib(_gr_,cst_stroke_width,_iV_)}
      function a_stroke_linecap(x)
       {return user_attrib(C[4],cst_stroke_linecap,x)}
      function a_stroke_linejoin(x)
       {return user_attrib(C[4],cst_stroke_linejoin,x)}
      var _gs_=C[12];
      function a_stroke_miterlimit(_iU_)
       {return user_attrib(_gs_,cst_stroke_miterlimit,_iU_)}
      function a_stroke_dasharray(x)
       {return user_attrib(C[19],cst_stroke_dasharray,x)}
      var _gt_=C[10];
      function a_stroke_dashoffset(_iT_)
       {return user_attrib(_gt_,cst_stroke_dashoffset,_iT_)}
      var _gu_=C[12];
      function a_stroke_opacity(_iS_)
       {return user_attrib(_gu_,cst_stroke_opacity,_iS_)}
      function svg(opt,children)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var
         _iR_=
          [0,
           caml_call2
            (_fj_,
             cst_xmlns_xlink,
             caml_call1(Xml[1][1],cst_http_www_w3_org_1999_xlink)),
           a],
         attribs=
          [0,
           caml_call2
            (_fj_,
             cst_xmlns$3,
             caml_call1(Xml[1][1],cst_http_www_w3_org_2000_svg)),
           _iR_];
        return star(cst_svg$0,[0,attribs],children)}
      function g(_iP_,_iQ_){return star(cst_g,_iP_,_iQ_)}
      function defs(_iN_,_iO_){return star(cst_defs,_iN_,_iO_)}
      function desc(_iL_,_iM_){return unary(cst_desc,_iL_,_iM_)}
      function title(_iJ_,_iK_){return unary(cst_title,_iJ_,_iK_)}
      function symbol(_iH_,_iI_){return star(cst_symbol,_iH_,_iI_)}
      function use(_iF_,_iG_){return star(cst_use,_iF_,_iG_)}
      function image(_iD_,_iE_){return star(cst_image,_iD_,_iE_)}
      function switch$0(_iB_,_iC_){return star(cst_switch,_iB_,_iC_)}
      function style(_iz_,_iA_){return unary(cst_style$0,_iz_,_iA_)}
      function path(_ix_,_iy_){return star(cst_path$0,_ix_,_iy_)}
      function rect(_iv_,_iw_){return star(cst_rect,_iv_,_iw_)}
      function circle(_it_,_iu_){return star(cst_circle,_it_,_iu_)}
      function ellipse(_ir_,_is_){return star(cst_ellipse,_ir_,_is_)}
      function line(_ip_,_iq_){return star(cst_line,_ip_,_iq_)}
      function polyline(_in_,_io_){return star(cst_polyline,_in_,_io_)}
      function polygon(_il_,_im_){return star(cst_polygon,_il_,_im_)}
      function text(_ij_,_ik_){return star(cst_text,_ij_,_ik_)}
      function tspan(_ih_,_ii_){return star(cst_tspan,_ih_,_ii_)}
      function tref(_if_,_ig_){return star(cst_tref,_if_,_ig_)}
      function textPath(_id_,_ie_){return star(cst_textPath,_id_,_ie_)}
      function altGlyph(_ib_,_ic_){return unary(cst_altGlyph,_ib_,_ic_)}
      function altGlyphDef(_h$_,_ia_){return unary(cst_altGlyphDef,_h$_,_ia_)}
      function altGlyphItem(_h9_,_h__)
       {return star(cst_altGlyphItem,_h9_,_h__)}
      function glyphRef(_h7_,_h8_){return nullary(cst_glyphRef$0,_h7_,_h8_)}
      function marker(_h5_,_h6_){return star(cst_marker,_h5_,_h6_)}
      function color_profile(_h3_,_h4_)
       {return star(cst_color_profile,_h3_,_h4_)}
      function linearGradient(_h1_,_h2_)
       {return star(cst_linearGradient,_h1_,_h2_)}
      function radialGradient(_hZ_,_h0_)
       {return star(cst_radialGradient,_hZ_,_h0_)}
      function stop(_hX_,_hY_){return star(cst_stop,_hX_,_hY_)}
      function pattern(_hV_,_hW_){return star(cst_pattern,_hV_,_hW_)}
      function clipPath(_hT_,_hU_){return star(cst_clipPath,_hT_,_hU_)}
      function filter(_hR_,_hS_){return star(cst_filter,_hR_,_hS_)}
      function feDistantLight(_hP_,_hQ_)
       {return star(cst_feDistantLight,_hP_,_hQ_)}
      function fePointLight(_hN_,_hO_)
       {return star(cst_fePointLight,_hN_,_hO_)}
      function feSpotLight(_hL_,_hM_){return star(cst_feSpotLight,_hL_,_hM_)}
      function feBlend(_hJ_,_hK_){return star(cst_feBlend,_hJ_,_hK_)}
      function feColorMatrix(_hH_,_hI_)
       {return star(cst_feColorMatrix,_hH_,_hI_)}
      function feComponentTransfer(_hF_,_hG_)
       {return star(cst_feComponentTransfer,_hF_,_hG_)}
      function feFuncA(_hD_,_hE_){return star(cst_feFuncA,_hD_,_hE_)}
      function feFuncG(_hB_,_hC_){return star(cst_feFuncG,_hB_,_hC_)}
      function feFuncB(_hz_,_hA_){return star(cst_feFuncB,_hz_,_hA_)}
      function feFuncR(_hx_,_hy_){return star(cst_feFuncR,_hx_,_hy_)}
      function feComposite(_hv_,_hw_){return star(cst_feComposite,_hv_,_hw_)}
      function feConvolveMatrix(_ht_,_hu_)
       {return star(cst_feConvolveMatrix,_ht_,_hu_)}
      function feDiffuseLighting(_hr_,_hs_)
       {return star(cst_feDiffuseLighting,_hr_,_hs_)}
      function feDisplacementMap(_hp_,_hq_)
       {return star(cst_feDisplacementMap,_hp_,_hq_)}
      function feFlood(_hn_,_ho_){return star(cst_feFlood,_hn_,_ho_)}
      function feGaussianBlur(_hl_,_hm_)
       {return star(cst_feGaussianBlur,_hl_,_hm_)}
      function feImage(_hj_,_hk_){return star(cst_feImage,_hj_,_hk_)}
      function feMerge(_hh_,_hi_){return star(cst_feMerge,_hh_,_hi_)}
      function feMorphology(_hf_,_hg_)
       {return star(cst_feMorphology,_hf_,_hg_)}
      function feOffset(_hd_,_he_){return star(cst_feOffset,_hd_,_he_)}
      function feSpecularLighting(_hb_,_hc_)
       {return star(cst_feSpecularLighting,_hb_,_hc_)}
      function feTile(_g$_,_ha_){return star(cst_feTile,_g$_,_ha_)}
      function feTurbulence(_g9_,_g__)
       {return star(cst_feTurbulence,_g9_,_g__)}
      function cursor(_g7_,_g8_){return star(cst_cursor,_g7_,_g8_)}
      function a(_g5_,_g6_){return star(cst_a,_g5_,_g6_)}
      function view(_g3_,_g4_){return star(cst_view,_g3_,_g4_)}
      function script(_g1_,_g2_){return unary(cst_script,_g1_,_g2_)}
      function animation(_gZ_,_g0_){return star(cst_animate,_gZ_,_g0_)}
      function set(_gX_,_gY_){return star(cst_set,_gX_,_gY_)}
      function animateMotion(_gV_,_gW_)
       {return star(cst_animateMotion,_gV_,_gW_)}
      function mpath(_gT_,_gU_){return star(cst_mpath,_gT_,_gU_)}
      function animateColor(_gR_,_gS_)
       {return star(cst_animateColor,_gR_,_gS_)}
      function animateTransform(_gP_,_gQ_)
       {return star(cst_animateTransform,_gP_,_gQ_)}
      function font(_gN_,_gO_){return star(cst_font,_gN_,_gO_)}
      function glyph(_gL_,_gM_){return star(cst_glyph,_gL_,_gM_)}
      function missing_glyph(_gJ_,_gK_)
       {return star(cst_missing_glyph,_gJ_,_gK_)}
      function hkern(_gH_,_gI_){return nullary(cst_hkern,_gH_,_gI_)}
      function vkern(_gF_,_gG_){return nullary(cst_vkern,_gF_,_gG_)}
      function font_face(_gD_,_gE_){return nullary(cst_font_face,_gD_,_gE_)}
      function font_face_src(_gB_,_gC_)
       {return star(cst_font_face_src,_gB_,_gC_)}
      function font_face_uri(_gz_,_gA_)
       {return star(cst_font_face_uri,_gz_,_gA_)}
      function font_face_format(_gx_,_gy_)
       {return nullary(cst_font_face_uri$0,_gx_,_gy_)}
      function font_face_name(_gv_,_gw_)
       {return nullary(cst_font_face_name,_gv_,_gw_)}
      function doc_toelt(x){return x}
      var I=_a_(Xml);
      function of_seq(s){return caml_call1(I[1],s)}
      function data(s){return caml_call1(Xml[18],s)}
      function leaf(tag,a,param){return caml_call2(Xml[20],a,tag)}
      function node(tag,a,elts){return caml_call3(Xml[21],a,tag,elts)}
      function coerce_elt(x){return x}
      var float_attrib=Xml[4],int_attrib=Xml[5],string_attrib=Xml[6];
      function uri_attrib(a,s){return caml_call2(Xml[13],a,s)}
      var
       space_sep_attrib=Xml[7],
       comma_sep_attrib=Xml[8],
       Unsafe=
        [0,
         data,
         leaf,
         node,
         coerce_elt,
         float_attrib,
         int_attrib,
         string_attrib,
         uri_attrib,
         space_sep_attrib,
         comma_sep_attrib];
      return [0,
              Xml,
              W,
              Info,
              _fg_,
              _fh_,
              tot,
              totl,
              toelt,
              toeltl,
              to_attrib,
              nullary,
              unary,
              star,
              to_xmlattribs,
              _fi_,
              _fj_,
              _fk_,
              _fl_,
              _fm_,
              user_attrib,
              _fi_,
              _fn_,
              metadata,
              foreignObject,
              pcdata,
              pcdata,
              a_version,
              a_baseProfile,
              a_x,
              a_y,
              a_width,
              a_height,
              a_preserveAspectRatio,
              a_contentScriptType,
              a_contentStyleType,
              a_zoomAndPan,
              a_href,
              a_xlink_href,
              a_requiredFeatures,
              a_requiredExtensions,
              a_systemLanguage,
              a_externalRessourcesRequired,
              a_id,
              a_xml_base,
              a_xml_lang,
              a_xml_space,
              a_type,
              a_media,
              a_xlink_title,
              a_class,
              a_style,
              a_transform,
              a_viewBox,
              a_d,
              a_pathLength,
              a_rx,
              a_ry,
              a_cx,
              a_cy,
              a_r,
              a_x1,
              a_y1,
              a_x2,
              a_y2,
              a_points,
              a_x_list,
              a_y_list,
              a_dx,
              a_dy,
              a_dx_list,
              a_dy_list,
              a_lengthAdjust,
              a_textLength,
              a_text_anchor,
              a_text_decoration,
              a_text_rendering,
              a_rotate,
              a_startOffset,
              a_method,
              a_spacing,
              a_glyphRef,
              a_format,
              a_markerUnits,
              a_refX,
              a_refY,
              a_markerWidth,
              a_markerHeight,
              a_orient,
              a_local,
              a_rendering_intent,
              a_gradientUnits,
              a_gradientTransform,
              a_spreadMethod,
              a_fx,
              a_fy,
              a_offset,
              a_patternUnits,
              a_patternContentUnits,
              a_patternTransform,
              a_clipPathUnits,
              a_maskUnits,
              a_maskContentUnits,
              a_primitiveUnits,
              a_filterRes,
              a_result,
              a_in,
              a_in2,
              a_azimuth,
              a_elevation,
              a_pointsAtX,
              a_pointsAtY,
              a_pointsAtZ,
              a_specularExponent,
              a_specularConstant,
              a_limitingConeAngle,
              a_mode,
              a_feColorMatrix_type,
              a_values,
              a_transfer_type,
              a_tableValues,
              a_intercept,
              a_amplitude,
              a_exponent,
              a_transfer_offset,
              a_feComposite_operator,
              a_k1,
              a_k2,
              a_k3,
              a_k4,
              a_order,
              a_kernelMatrix,
              a_divisor,
              a_bias,
              a_kernelUnitLength,
              a_targetX,
              a_targetY,
              a_edgeMode,
              a_preserveAlpha,
              a_surfaceScale,
              a_diffuseConstant,
              a_scale,
              a_xChannelSelector,
              a_yChannelSelector,
              a_stdDeviation,
              a_feMorphology_operator,
              a_radius,
              a_baseFrenquency,
              a_numOctaves,
              a_seed,
              a_stitchTiles,
              a_feTurbulence_type,
              a_xlink_show,
              a_xlink_actuate,
              a_target,
              a_viewTarget,
              a_attributeName,
              a_attributeType,
              a_begin,
              a_dur,
              a_min,
              a_max,
              a_restart,
              a_repeatCount,
              a_repeatDur,
              a_fill,
              a_animation_fill,
              a_calcMode,
              a_animation_values,
              a_keyTimes,
              a_keySplines,
              a_from,
              a_to,
              a_by,
              a_additive,
              a_accumulate,
              a_keyPoints,
              a_path,
              a_animateTransform_type,
              a_horiz_origin_x,
              a_horiz_origin_y,
              a_horiz_adv_x,
              a_vert_origin_x,
              a_vert_origin_y,
              a_vert_adv_y,
              a_unicode,
              a_glyph_name,
              a_orientation,
              a_arabic_form,
              a_lang,
              a_u1,
              a_u2,
              a_g1,
              a_g2,
              a_k,
              a_font_family,
              a_font_style,
              a_font_variant,
              a_font_weight,
              a_font_stretch,
              a_font_size,
              a_unicode_range,
              a_units_per_em,
              a_stemv,
              a_stemh,
              a_slope,
              a_cap_height,
              a_x_height,
              a_accent_height,
              a_ascent,
              a_widths,
              a_bbox,
              a_ideographic,
              a_alphabetic,
              a_mathematical,
              a_hanging,
              a_videographic,
              a_v_alphabetic,
              a_v_mathematical,
              a_v_hanging,
              a_underline_position,
              a_underline_thickness,
              a_strikethrough_position,
              a_strikethrough_thickness,
              a_overline_position,
              a_overline_thickness,
              a_string,
              a_name,
              a_alignment_baseline,
              a_dominant_baseline,
              a_onabort,
              a_onactivate,
              a_onbegin,
              a_onend,
              a_onerror,
              a_onfocusin,
              a_onfocusout,
              a_onload,
              a_onrepeat,
              a_onresize,
              a_onscroll,
              a_onunload,
              a_onzoom,
              a_onclick,
              a_onmousedown,
              a_onmouseup,
              a_onmouseover,
              a_onmouseout,
              a_onmousemove,
              a_ontouchstart,
              a_ontouchend,
              a_ontouchmove,
              a_ontouchcancel,
              a_stop_color,
              a_stop_opacity,
              a_stroke,
              a_stroke_width,
              a_stroke_linecap,
              a_stroke_linejoin,
              a_stroke_miterlimit,
              a_stroke_dasharray,
              a_stroke_dashoffset,
              a_stroke_opacity,
              svg,
              g,
              defs,
              desc,
              title,
              symbol,
              use,
              image,
              switch$0,
              style,
              path,
              rect,
              circle,
              ellipse,
              line,
              polyline,
              polygon,
              text,
              tspan,
              tref,
              textPath,
              altGlyph,
              altGlyphDef,
              altGlyphItem,
              glyphRef,
              marker,
              color_profile,
              linearGradient,
              radialGradient,
              stop,
              pattern,
              clipPath,
              filter,
              feDistantLight,
              fePointLight,
              feSpotLight,
              feBlend,
              feColorMatrix,
              feComponentTransfer,
              feFuncA,
              feFuncG,
              feFuncB,
              feFuncR,
              feComposite,
              feConvolveMatrix,
              feDiffuseLighting,
              feDisplacementMap,
              feFlood,
              feGaussianBlur,
              feImage,
              feMerge,
              feMorphology,
              feOffset,
              feSpecularLighting,
              feTile,
              feTurbulence,
              cursor,
              a,
              view,
              script,
              animation,
              set,
              animateMotion,
              mpath,
              animateColor,
              animateTransform,
              font,
              glyph,
              missing_glyph,
              hkern,
              vkern,
              font_face,
              font_face_src,
              font_face_uri,
              font_face_format,
              font_face_name,
              doc_toelt,
              I,
              of_seq,
              Unsafe]}
    function Wrapped_functions(Xml)
     {function string_of_alignment_baseline(param)
       {return -72987685 <= param
                ?354434192 <= param
                  ?881373037 <= param
                    ?1018879136 <= param?cst_after_edge:cst_alphabetic$0
                    :726666127 <= param?cst_auto:cst_hanging$0
                  :15943541 === param
                    ?cst_middle
                    :218255880 <= param?cst_mathematical$0:cst_inherit
                :-840627829 <= param
                  ?-415175851 <= param
                    ?-354838363 <= param?cst_baseline:cst_central
                    :-693588957 <= param?cst_ideographic$0:cst_text_before_edge
                  :-863864035 <= param?cst_before_edge:cst_text_after_edge}
      function string_of_big_variant(param)
       {return 3350435 <= param
                ?476616093 <= param
                  ?744337004 <= param
                    ?914009117 <= param
                      ?970483178 <= param
                        ?1040349136 <= param
                          ?1071251601 <= param?cst_stitch:cst_onRequest
                          :990972795 <= param?cst_repeat:cst_wrap
                        :958206052 <= param?cst_remove:cst_reflect
                      :870530776 <= param
                        ?884917925 <= param
                          ?889668530 <= param?cst_noStitch:cst$35
                          :881966452 <= param?cst_over:cst_none$0
                        :861714216 <= param?cst_medial:cst_never
                    :568588039 <= param
                      ?716799946 <= param
                        ?726666127 <= param
                          ?737755699 <= param?cst_butt:cst_auto$0
                          :726615284 <= param?cst_atop:cst_arithmetic
                        :698610924 <= param?cst_underline:cst_gamma
                      :512807795 <= param
                        ?518168424 <= param
                          ?557106693 <= param?cst_linear:cst_overline
                          :517347077 <= param?cst_onLoad:cst_turbulence
                        :504440814 <= param?cst_table:cst_geometricPrecision
                  :163178525 <= param
                    ?316735838 <= param
                      ?389604418 <= param
                        ?463106021 <= param
                          ?466749770 <= param?cst_optimizeSpeed:cst_miter
                          :418396260 <= param?cst_initial:cst_start
                        :384893183 <= param?cst_whenNotActive:cst_identity
                      :201080426 <= param
                        ?289998318 <= param
                          ?289998319 <= param?cst_skewY:cst_skewX
                          :226915517 <= param?cst_square:cst_scale$0
                        :172069535 <= param?cst_exact:cst_perceptual
                    :4393399 <= param
                      ?9660462 <= param
                        ?106228547 <= param
                          ?118574553 <= param?cst_discrete:cst_erode
                          :15943541 <= param?cst_middle$0:cst_round
                        :4401019 <= param?cst_xor:cst_XML
                      :3901504 <= param
                        ?4000051 <= param
                          ?4153707 <= param?cst_sum:cst_pad
                          :3954798 <= param?cst_out:cst_new
                        :3455931 <= param?cst_end:cst_CSS
                :-453122489 <= param
                  ?-72987685 <= param
                    ?66 <= param
                      ?72 <= param
                        ?86 <= param
                          ?16389 <= param?cst_in$1:cst_v
                          :82 <= param?cst_r$0:cst_h
                        :71 <= param?cst_g$0:cst_b
                      :-68046964 <= param
                        ?-4932997 <= param
                          ?65 <= param?cst_a$0:cst_rotate$0
                          :-22441528 <= param?cst_disable:cst_screen
                        :-72678338 <= param?cst_absolute_colorimetric:cst_inherit$0
                    :-262362527 <= param
                      ?-197222844 <= param
                        ?-115006565 <= param
                          ?-76840209 <= param?cst_always:cst_spacingAndGlyphs
                          :-126259180 <= param?cst_replace:cst_multiply
                        :-197983439 <= param?cst_spline:cst_matrix
                      :-384499551 <= param
                        ?-318472885 <= param
                          ?-313337870 <= param?cst_saturation:cst_dilate
                          :-346900690 <= param?cst_translate:cst_default
                        :-415993185 <= param?cst_lighten:cst_normal
                  :-839430911 <= param
                    ?-672592881 <= param
                      ?-552838301 <= param
                        ?-505547199 <= param
                          ?-474415497 <= param?cst_freeze:cst_magnify
                          :-543144685 <= param?cst_hueRotate:cst_spacing$0
                        :-621842423 <= param?cst_fractalNoise:cst_saturate
                      :-797470191 <= param
                        ?-699926424 <= param
                          ?-689066995 <= param
                            ?cst_userSpaceOnUse
                            :cst_objectBoundingBox
                          :-707876225 <= param?cst_darken:cst_paced
                        :-824137927 <= param?cst_isolated:cst_optimizeLegibility
                    :-951087346 <= param
                      ?-912466532 <= param
                        ?-851306022 <= param
                          ?-851300629 <= param?cst_luminanceToAlpha:cst_line_through
                          :-912009552 <= param?cst_other:cst_terminal
                        :-937074372 <= param?cst_blink:cst_stroke_width$0
                      :-1044642615 === param
                        ?cst_relative_colorimetric
                        :-1014056864 <= param
                          ?-1012636187 <= param?cst_stretch:cst_bevel
                          :-1024851605 <= param?cst_duplicate:cst_preserve}
      var _eT_=Stdlib[19];
      function _eU_(param)
       {var b=param[2],a=param[1];return caml_call3(Stdlib_printf[4],_S_,a,b)}
      var _eV_=0;
      function string_of_coords(_ff_){return list(_eV_,_eU_,_ff_)}
      function string_of_dominant_baseline(param)
       {return -72987685 <= param
                ?354434192 <= param
                  ?881373037 <= param
                    ?945233102 <= param?cst_nochange:cst_alphabetic$1
                    :726666127 <= param?cst_auto$1:cst_hanging$1
                  :15943541 === param
                    ?cst_middle$1
                    :218255880 <= param?cst_mathematical$1:cst_inherit$1
                :-840627829 <= param
                  ?-504734109 <= param
                    ?-415175851 <= param?cst_central$0:cst_usescript
                    :-693588957 <= param?cst_ideographic$1:cst_textbeforeedge
                  :-880506735 <= param?cst_resetsize:cst_textafteredge}
      function string_of_in_value(param)
       {if(typeof param === "number")
         return 198492909 <= param
                 ?885982307 <= param
                   ?976982182 <= param?cst_strokePaint:cst_sourceAlpha
                   :768130555 <= param?cst_fillPaint:cst_sourceGraphic
                 :-522189715 <= param?cst_backgroundImage:cst_backgroundAlpha;
        var svg=param[2];
        return svg}
      var _eW_=Stdlib[22],_eX_=0;
      function string_of_lengths(_fe_)
       {return list(_eX_,string_of_length,_fe_)}
      function string_of_percentage(x)
       {var _fd_=string_of_number(x);
        return caml_call2(Stdlib[17],_fd_,cst$36)}
      function string_of_fourfloats(param)
       {var
         d=param[4],
         c=param[3],
         b=param[2],
         a=param[1],
         _e$_=string_of_number(d),
         _fa_=string_of_number(c),
         _fb_=string_of_number(b),
         _fc_=string_of_number(a);
        return caml_call5(Stdlib_printf[4],_T_,_fc_,_fb_,_fa_,_e$_)}
      function string_of_number_optional_number(param)
       {var _e9_=param[2],_e__=param[1];
        if(_e9_){var y=_e9_[1];return caml_call3(Stdlib_printf[4],_U_,_e__,y)}
        return caml_call2(Stdlib_printf[4],_V_,_e__)}
      var _eY_=0;
      function string_of_numbers(_e8_)
       {return list(_eY_,string_of_number,_e8_)}
      function string_of_numbers_semicolon(_e7_)
       {return list(_W_,string_of_number,_e7_)}
      function string_of_offset(param)
       {if(-488794310 <= param[1])
         {var x=param[2];return string_of_percentage(x)}
        var x$0=param[2];
        return string_of_number(x$0)}
      function string_of_orient(param)
       {if(param){var svg=param[1];return string_of_angle(svg)}
        return cst_auto$2}
      function string_of_strokedasharray(l)
       {return l?list(0,string_of_length,l):cst_none$1}
      function string_of_transform(param)
       {var _e0_=param[1];
        if(-4932997 <= _e0_)
         {if(289998318 <= _e0_)
           {if(289998319 <= _e0_)
             {var angle=param[2],_e1_=string_of_angle(angle);
              return caml_call2(Stdlib_printf[4],_X_,_e1_)}
            var angle$0=param[2],_e2_=string_of_angle(angle$0);
            return caml_call2(Stdlib_printf[4],_Y_,_e2_)}
          if(201080426 <= _e0_)
           {var x=param[2],_e3_=string_of_number_optional_number(x);
            return caml_call2(Stdlib_printf[4],_Z_,_e3_)}
          var match=param[2],x$0=match[2],angle$1=match[1];
          if(x$0)
           var
            match$0=x$0[1],
            y=match$0[2],
            x$1=match$0[1],
            _e4_=caml_call3(Stdlib_printf[4],___,x$1,y);
          else
           var _e4_=cst$37;
          var _e5_=string_of_angle(angle$1);
          return caml_call3(Stdlib_printf[4],_$_,_e5_,_e4_)}
        if(-262362527 <= _e0_)
         {var
           match$1=param[2],
           f=match$1[6],
           e=match$1[5],
           d=match$1[4],
           c=match$1[3],
           b=match$1[2],
           a=match$1[1];
          return caml_call7(Stdlib_printf[4],_aa_,a,b,c,d,e,f)}
        var x$2=param[2],_e6_=string_of_number_optional_number(x$2);
        return caml_call2(Stdlib_printf[4],_ab_,_e6_)}
      function string_of_transforms(l)
       {var _eZ_=caml_call2(Stdlib_list[17],string_of_transform,l);
        return caml_call2(Stdlib_string[7],cst$38,_eZ_)}
      return [0,
              Xml,
              string_of_alignment_baseline,
              string_of_big_variant,
              _eT_,
              string_of_coords,
              string_of_dominant_baseline,
              string_of_in_value,
              _eW_,
              string_of_length,
              string_of_lengths,
              string_of_number,
              string_of_percentage,
              string_of_fourfloats,
              string_of_number_optional_number,
              string_of_numbers,
              string_of_numbers_semicolon,
              string_of_offset,
              string_of_orient,
              string_of_paint,
              string_of_strokedasharray,
              string_of_transform,
              string_of_transforms]}
    function _ac_(_eP_,_eO_)
     {var
       _eQ_=Make_with_wrapped_functions(_eP_,_eO_),
       _eR_=_eQ_[342],
       _eS_=_eQ_[3];
      return [0,
              _eQ_[1],
              [0,_eS_[1],_eS_[2],_eS_[4],_eS_[5],_eS_[6],_eS_[7],_eS_[3]],
              _eQ_[4],
              _eQ_[5],
              _eQ_[27],
              _eQ_[28],
              _eQ_[29],
              _eQ_[30],
              _eQ_[31],
              _eQ_[32],
              _eQ_[33],
              _eQ_[34],
              _eQ_[35],
              _eQ_[36],
              _eQ_[37],
              _eQ_[38],
              _eQ_[39],
              _eQ_[40],
              _eQ_[41],
              _eQ_[42],
              _eQ_[43],
              _eQ_[44],
              _eQ_[45],
              _eQ_[46],
              _eQ_[47],
              _eQ_[48],
              _eQ_[49],
              _eQ_[50],
              _eQ_[51],
              _eQ_[52],
              _eQ_[53],
              _eQ_[54],
              _eQ_[55],
              _eQ_[56],
              _eQ_[57],
              _eQ_[58],
              _eQ_[59],
              _eQ_[60],
              _eQ_[61],
              _eQ_[62],
              _eQ_[63],
              _eQ_[64],
              _eQ_[65],
              _eQ_[66],
              _eQ_[67],
              _eQ_[68],
              _eQ_[69],
              _eQ_[70],
              _eQ_[71],
              _eQ_[72],
              _eQ_[73],
              _eQ_[74],
              _eQ_[75],
              _eQ_[76],
              _eQ_[77],
              _eQ_[78],
              _eQ_[79],
              _eQ_[80],
              _eQ_[81],
              _eQ_[82],
              _eQ_[83],
              _eQ_[84],
              _eQ_[85],
              _eQ_[86],
              _eQ_[87],
              _eQ_[88],
              _eQ_[89],
              _eQ_[90],
              _eQ_[91],
              _eQ_[92],
              _eQ_[93],
              _eQ_[94],
              _eQ_[95],
              _eQ_[96],
              _eQ_[97],
              _eQ_[98],
              _eQ_[99],
              _eQ_[100],
              _eQ_[101],
              _eQ_[102],
              _eQ_[103],
              _eQ_[104],
              _eQ_[105],
              _eQ_[106],
              _eQ_[107],
              _eQ_[108],
              _eQ_[109],
              _eQ_[110],
              _eQ_[111],
              _eQ_[112],
              _eQ_[113],
              _eQ_[114],
              _eQ_[115],
              _eQ_[116],
              _eQ_[117],
              _eQ_[118],
              _eQ_[119],
              _eQ_[120],
              _eQ_[121],
              _eQ_[122],
              _eQ_[123],
              _eQ_[124],
              _eQ_[125],
              _eQ_[126],
              _eQ_[127],
              _eQ_[128],
              _eQ_[129],
              _eQ_[130],
              _eQ_[131],
              _eQ_[132],
              _eQ_[133],
              _eQ_[134],
              _eQ_[135],
              _eQ_[136],
              _eQ_[137],
              _eQ_[138],
              _eQ_[139],
              _eQ_[140],
              _eQ_[141],
              _eQ_[142],
              _eQ_[143],
              _eQ_[144],
              _eQ_[145],
              _eQ_[146],
              _eQ_[147],
              _eQ_[148],
              _eQ_[149],
              _eQ_[150],
              _eQ_[151],
              _eQ_[152],
              _eQ_[153],
              _eQ_[154],
              _eQ_[155],
              _eQ_[156],
              _eQ_[157],
              _eQ_[158],
              _eQ_[159],
              _eQ_[160],
              _eQ_[161],
              _eQ_[162],
              _eQ_[163],
              _eQ_[164],
              _eQ_[165],
              _eQ_[166],
              _eQ_[167],
              _eQ_[168],
              _eQ_[169],
              _eQ_[170],
              _eQ_[171],
              _eQ_[172],
              _eQ_[173],
              _eQ_[174],
              _eQ_[175],
              _eQ_[176],
              _eQ_[177],
              _eQ_[178],
              _eQ_[179],
              _eQ_[180],
              _eQ_[181],
              _eQ_[182],
              _eQ_[183],
              _eQ_[184],
              _eQ_[185],
              _eQ_[186],
              _eQ_[187],
              _eQ_[188],
              _eQ_[189],
              _eQ_[190],
              _eQ_[191],
              _eQ_[192],
              _eQ_[193],
              _eQ_[194],
              _eQ_[195],
              _eQ_[196],
              _eQ_[197],
              _eQ_[198],
              _eQ_[199],
              _eQ_[200],
              _eQ_[201],
              _eQ_[202],
              _eQ_[203],
              _eQ_[204],
              _eQ_[205],
              _eQ_[206],
              _eQ_[207],
              _eQ_[208],
              _eQ_[209],
              _eQ_[210],
              _eQ_[211],
              _eQ_[212],
              _eQ_[213],
              _eQ_[214],
              _eQ_[215],
              _eQ_[216],
              _eQ_[217],
              _eQ_[218],
              _eQ_[219],
              _eQ_[220],
              _eQ_[221],
              _eQ_[222],
              _eQ_[223],
              _eQ_[224],
              _eQ_[225],
              _eQ_[226],
              _eQ_[227],
              _eQ_[228],
              _eQ_[229],
              _eQ_[253],
              _eQ_[254],
              _eQ_[255],
              _eQ_[256],
              _eQ_[257],
              _eQ_[258],
              _eQ_[259],
              _eQ_[260],
              _eQ_[261],
              _eQ_[262],
              _eQ_[230],
              _eQ_[231],
              _eQ_[232],
              _eQ_[233],
              _eQ_[234],
              _eQ_[235],
              _eQ_[236],
              _eQ_[237],
              _eQ_[238],
              _eQ_[239],
              _eQ_[240],
              _eQ_[241],
              _eQ_[242],
              _eQ_[243],
              _eQ_[244],
              _eQ_[245],
              _eQ_[246],
              _eQ_[247],
              _eQ_[248],
              _eQ_[249],
              _eQ_[250],
              _eQ_[251],
              _eQ_[252],
              _eQ_[25],
              _eQ_[263],
              _eQ_[264],
              _eQ_[265],
              _eQ_[266],
              _eQ_[267],
              _eQ_[268],
              _eQ_[269],
              _eQ_[270],
              _eQ_[271],
              _eQ_[272],
              _eQ_[273],
              _eQ_[274],
              _eQ_[275],
              _eQ_[276],
              _eQ_[277],
              _eQ_[278],
              _eQ_[279],
              _eQ_[280],
              _eQ_[281],
              _eQ_[282],
              _eQ_[283],
              _eQ_[284],
              _eQ_[285],
              _eQ_[286],
              _eQ_[287],
              _eQ_[288],
              _eQ_[289],
              _eQ_[290],
              _eQ_[291],
              _eQ_[292],
              _eQ_[293],
              _eQ_[294],
              _eQ_[295],
              _eQ_[296],
              _eQ_[297],
              _eQ_[298],
              _eQ_[299],
              _eQ_[300],
              _eQ_[301],
              _eQ_[302],
              _eQ_[303],
              _eQ_[304],
              _eQ_[305],
              _eQ_[306],
              _eQ_[307],
              _eQ_[308],
              _eQ_[309],
              _eQ_[310],
              _eQ_[311],
              _eQ_[312],
              _eQ_[313],
              _eQ_[314],
              _eQ_[315],
              _eQ_[316],
              _eQ_[317],
              _eQ_[318],
              _eQ_[319],
              _eQ_[320],
              _eQ_[321],
              _eQ_[322],
              _eQ_[323],
              _eQ_[324],
              _eQ_[325],
              _eQ_[326],
              _eQ_[327],
              _eQ_[328],
              _eQ_[329],
              _eQ_[330],
              _eQ_[331],
              _eQ_[332],
              _eQ_[333],
              _eQ_[334],
              _eQ_[335],
              _eQ_[336],
              _eQ_[337],
              _eQ_[338],
              _eQ_[23],
              _eQ_[24],
              _eQ_[26],
              _eQ_[341],
              _eQ_[6],
              _eQ_[7],
              _eQ_[8],
              _eQ_[9],
              _eQ_[339],
              _eQ_[14],
              _eQ_[10],
              [0,
               _eR_[1],
               _eR_[3],
               _eR_[2],
               _eR_[4],
               _eR_[7],
               _eR_[5],
               _eR_[6],
               _eR_[8],
               _eR_[9],
               _eR_[10]]]}
    function _ad_(_eM_)
     {var _eN_=Wrapped_functions(_eM_);
      return [0,
              _eN_[1],
              _eN_[2],
              _eN_[4],
              _eN_[3],
              _eN_[5],
              _eN_[6],
              _eN_[13],
              _eN_[7],
              _eN_[8],
              _eN_[9],
              _eN_[10],
              _eN_[11],
              _eN_[14],
              _eN_[15],
              _eN_[16],
              _eN_[17],
              _eN_[18],
              _eN_[19],
              _eN_[20],
              _eN_[21],
              _eN_[22]]}
    var
     Svg_f=
      [0,
       function(_eI_)
        {var
          _eH_=Wrapped_functions(_eI_),
          _eL_=
           Make_with_wrapped_functions
            (_eI_,
             [0,
              _eH_[1],
              _eH_[2],
              _eH_[4],
              _eH_[3],
              _eH_[5],
              _eH_[6],
              _eH_[13],
              _eH_[7],
              _eH_[8],
              _eH_[9],
              _eH_[10],
              _eH_[11],
              _eH_[14],
              _eH_[15],
              _eH_[16],
              _eH_[17],
              _eH_[18],
              _eH_[19],
              _eH_[20],
              _eH_[21],
              _eH_[22]]),
          _eJ_=_eL_[342],
          _eK_=_eL_[3];
         return [0,
                 _eL_[1],
                 [0,_eK_[1],_eK_[2],_eK_[4],_eK_[5],_eK_[6],_eK_[7],_eK_[3]],
                 _eL_[4],
                 _eL_[5],
                 _eL_[27],
                 _eL_[28],
                 _eL_[29],
                 _eL_[30],
                 _eL_[31],
                 _eL_[32],
                 _eL_[33],
                 _eL_[34],
                 _eL_[35],
                 _eL_[36],
                 _eL_[37],
                 _eL_[38],
                 _eL_[39],
                 _eL_[40],
                 _eL_[41],
                 _eL_[42],
                 _eL_[43],
                 _eL_[44],
                 _eL_[45],
                 _eL_[46],
                 _eL_[47],
                 _eL_[48],
                 _eL_[49],
                 _eL_[50],
                 _eL_[51],
                 _eL_[52],
                 _eL_[53],
                 _eL_[54],
                 _eL_[55],
                 _eL_[56],
                 _eL_[57],
                 _eL_[58],
                 _eL_[59],
                 _eL_[60],
                 _eL_[61],
                 _eL_[62],
                 _eL_[63],
                 _eL_[64],
                 _eL_[65],
                 _eL_[66],
                 _eL_[67],
                 _eL_[68],
                 _eL_[69],
                 _eL_[70],
                 _eL_[71],
                 _eL_[72],
                 _eL_[73],
                 _eL_[74],
                 _eL_[75],
                 _eL_[76],
                 _eL_[77],
                 _eL_[78],
                 _eL_[79],
                 _eL_[80],
                 _eL_[81],
                 _eL_[82],
                 _eL_[83],
                 _eL_[84],
                 _eL_[85],
                 _eL_[86],
                 _eL_[87],
                 _eL_[88],
                 _eL_[89],
                 _eL_[90],
                 _eL_[91],
                 _eL_[92],
                 _eL_[93],
                 _eL_[94],
                 _eL_[95],
                 _eL_[96],
                 _eL_[97],
                 _eL_[98],
                 _eL_[99],
                 _eL_[100],
                 _eL_[101],
                 _eL_[102],
                 _eL_[103],
                 _eL_[104],
                 _eL_[105],
                 _eL_[106],
                 _eL_[107],
                 _eL_[108],
                 _eL_[109],
                 _eL_[110],
                 _eL_[111],
                 _eL_[112],
                 _eL_[113],
                 _eL_[114],
                 _eL_[115],
                 _eL_[116],
                 _eL_[117],
                 _eL_[118],
                 _eL_[119],
                 _eL_[120],
                 _eL_[121],
                 _eL_[122],
                 _eL_[123],
                 _eL_[124],
                 _eL_[125],
                 _eL_[126],
                 _eL_[127],
                 _eL_[128],
                 _eL_[129],
                 _eL_[130],
                 _eL_[131],
                 _eL_[132],
                 _eL_[133],
                 _eL_[134],
                 _eL_[135],
                 _eL_[136],
                 _eL_[137],
                 _eL_[138],
                 _eL_[139],
                 _eL_[140],
                 _eL_[141],
                 _eL_[142],
                 _eL_[143],
                 _eL_[144],
                 _eL_[145],
                 _eL_[146],
                 _eL_[147],
                 _eL_[148],
                 _eL_[149],
                 _eL_[150],
                 _eL_[151],
                 _eL_[152],
                 _eL_[153],
                 _eL_[154],
                 _eL_[155],
                 _eL_[156],
                 _eL_[157],
                 _eL_[158],
                 _eL_[159],
                 _eL_[160],
                 _eL_[161],
                 _eL_[162],
                 _eL_[163],
                 _eL_[164],
                 _eL_[165],
                 _eL_[166],
                 _eL_[167],
                 _eL_[168],
                 _eL_[169],
                 _eL_[170],
                 _eL_[171],
                 _eL_[172],
                 _eL_[173],
                 _eL_[174],
                 _eL_[175],
                 _eL_[176],
                 _eL_[177],
                 _eL_[178],
                 _eL_[179],
                 _eL_[180],
                 _eL_[181],
                 _eL_[182],
                 _eL_[183],
                 _eL_[184],
                 _eL_[185],
                 _eL_[186],
                 _eL_[187],
                 _eL_[188],
                 _eL_[189],
                 _eL_[190],
                 _eL_[191],
                 _eL_[192],
                 _eL_[193],
                 _eL_[194],
                 _eL_[195],
                 _eL_[196],
                 _eL_[197],
                 _eL_[198],
                 _eL_[199],
                 _eL_[200],
                 _eL_[201],
                 _eL_[202],
                 _eL_[203],
                 _eL_[204],
                 _eL_[205],
                 _eL_[206],
                 _eL_[207],
                 _eL_[208],
                 _eL_[209],
                 _eL_[210],
                 _eL_[211],
                 _eL_[212],
                 _eL_[213],
                 _eL_[214],
                 _eL_[215],
                 _eL_[216],
                 _eL_[217],
                 _eL_[218],
                 _eL_[219],
                 _eL_[220],
                 _eL_[221],
                 _eL_[222],
                 _eL_[223],
                 _eL_[224],
                 _eL_[225],
                 _eL_[226],
                 _eL_[227],
                 _eL_[228],
                 _eL_[229],
                 _eL_[253],
                 _eL_[254],
                 _eL_[255],
                 _eL_[256],
                 _eL_[257],
                 _eL_[258],
                 _eL_[259],
                 _eL_[260],
                 _eL_[261],
                 _eL_[262],
                 _eL_[230],
                 _eL_[231],
                 _eL_[232],
                 _eL_[233],
                 _eL_[234],
                 _eL_[235],
                 _eL_[236],
                 _eL_[237],
                 _eL_[238],
                 _eL_[239],
                 _eL_[240],
                 _eL_[241],
                 _eL_[242],
                 _eL_[243],
                 _eL_[244],
                 _eL_[245],
                 _eL_[246],
                 _eL_[247],
                 _eL_[248],
                 _eL_[249],
                 _eL_[250],
                 _eL_[251],
                 _eL_[252],
                 _eL_[25],
                 _eL_[263],
                 _eL_[264],
                 _eL_[265],
                 _eL_[266],
                 _eL_[267],
                 _eL_[268],
                 _eL_[269],
                 _eL_[270],
                 _eL_[271],
                 _eL_[272],
                 _eL_[273],
                 _eL_[274],
                 _eL_[275],
                 _eL_[276],
                 _eL_[277],
                 _eL_[278],
                 _eL_[279],
                 _eL_[280],
                 _eL_[281],
                 _eL_[282],
                 _eL_[283],
                 _eL_[284],
                 _eL_[285],
                 _eL_[286],
                 _eL_[287],
                 _eL_[288],
                 _eL_[289],
                 _eL_[290],
                 _eL_[291],
                 _eL_[292],
                 _eL_[293],
                 _eL_[294],
                 _eL_[295],
                 _eL_[296],
                 _eL_[297],
                 _eL_[298],
                 _eL_[299],
                 _eL_[300],
                 _eL_[301],
                 _eL_[302],
                 _eL_[303],
                 _eL_[304],
                 _eL_[305],
                 _eL_[306],
                 _eL_[307],
                 _eL_[308],
                 _eL_[309],
                 _eL_[310],
                 _eL_[311],
                 _eL_[312],
                 _eL_[313],
                 _eL_[314],
                 _eL_[315],
                 _eL_[316],
                 _eL_[317],
                 _eL_[318],
                 _eL_[319],
                 _eL_[320],
                 _eL_[321],
                 _eL_[322],
                 _eL_[323],
                 _eL_[324],
                 _eL_[325],
                 _eL_[326],
                 _eL_[327],
                 _eL_[328],
                 _eL_[329],
                 _eL_[330],
                 _eL_[331],
                 _eL_[332],
                 _eL_[333],
                 _eL_[334],
                 _eL_[335],
                 _eL_[336],
                 _eL_[337],
                 _eL_[338],
                 _eL_[23],
                 _eL_[24],
                 _eL_[26],
                 _eL_[341],
                 _eL_[6],
                 _eL_[7],
                 _eL_[8],
                 _eL_[9],
                 _eL_[339],
                 _eL_[14],
                 _eL_[10],
                 [0,
                  _eJ_[1],
                  _eJ_[3],
                  _eJ_[2],
                  _eJ_[4],
                  _eJ_[7],
                  _eJ_[5],
                  _eJ_[6],
                  _eJ_[8],
                  _eJ_[9],
                  _eJ_[10]]]},
       _ad_,
       _ac_];
    caml_register_global(1083,Svg_f,"Svg_f");
    function Make_with_wrapped_functions$0(Xml,C,Svg)
     {var
       doctype=compose_doctype(cst_html,0),
       Info=
        [0,
         content_type$0,
         alternative_content_types,
         version$0,
         standard$0,
         namespace$0,
         doctype,
         emptytags],
       W=0,
       _aH_=Xml[2],
       _aI_=Xml[3];
      function to_xmlattribs(x){return x}
      function to_attrib(x){return x}
      var _aJ_=Xml[4],_aK_=Xml[5],_aL_=Xml[6];
      function uri_attrib(a,s){return caml_call2(Xml[13],a,s)}
      var _aM_=Xml[7],_aN_=Xml[8];
      function user_attrib(f,name,v)
       {var _eG_=caml_call2(Xml[1][2],f,v);
        return caml_call2(Xml[6],name,_eG_)}
      var _aO_=C[3];
      function bool_attrib(_eE_,_eF_){return user_attrib(_aO_,_eE_,_eF_)}
      function constant_attrib(a,param)
       {return caml_call2(_aL_,a,caml_call1(Xml[1][1],a))}
      function linktypes_attrib(name,x){return user_attrib(C[8],name,x)}
      function mediadesc_attrib(name,x){return user_attrib(C[9],name,x)}
      function srcset_attrib(name,x){return user_attrib(C[13],name,x)}
      var a_class=caml_call1(_aM_,cst_class$0),a_id=caml_call1(_aL_,cst_id$0);
      function a_user_data(name)
       {return caml_call1(_aL_,caml_call2(Stdlib[17],cst_data,name))}
      var
       a_title=caml_call1(_aL_,cst_title$0),
       a_xml_lang=caml_call1(_aL_,cst_xml_lang$0),
       a_lang=caml_call1(_aL_,cst_lang$0),
       a_style=caml_call1(_aL_,cst_style$1),
       a_property=caml_call1(_aL_,cst_property),
       a_onabort=caml_call1(Xml[9],cst_onabort$0),
       a_onafterprint=caml_call1(Xml[9],cst_onafterprint),
       a_onbeforeprint=caml_call1(Xml[9],cst_onbeforeprint),
       a_onbeforeunload=caml_call1(Xml[9],cst_onbeforeunload),
       a_onblur=caml_call1(Xml[9],cst_onblur),
       a_oncanplay=caml_call1(Xml[9],cst_oncanplay),
       a_oncanplaythrough=caml_call1(Xml[9],cst_oncanplaythrough),
       a_onchange=caml_call1(Xml[9],cst_onchange),
       a_ondurationchange=caml_call1(Xml[9],cst_ondurationchange),
       a_onemptied=caml_call1(Xml[9],cst_onemptied),
       a_onended=caml_call1(Xml[9],cst_onended),
       a_onerror=caml_call1(Xml[9],cst_onerror$0),
       a_onfocus=caml_call1(Xml[9],cst_onfocus),
       a_onformchange=caml_call1(Xml[9],cst_onformchange),
       a_onforminput=caml_call1(Xml[9],cst_onforminput),
       a_onhashchange=caml_call1(Xml[9],cst_onhashchange),
       a_oninput=caml_call1(Xml[9],cst_oninput),
       a_oninvalid=caml_call1(Xml[9],cst_oninvalid),
       a_onoffline=caml_call1(Xml[9],cst_onoffline),
       a_ononline=caml_call1(Xml[9],cst_ononline),
       a_onpause=caml_call1(Xml[9],cst_onpause),
       a_onplay=caml_call1(Xml[9],cst_onplay),
       a_onplaying=caml_call1(Xml[9],cst_onplaying),
       a_onpagehide=caml_call1(Xml[9],cst_onpagehide),
       a_onpageshow=caml_call1(Xml[9],cst_onpageshow),
       a_onpopstate=caml_call1(Xml[9],cst_onpopstate),
       a_onprogress=caml_call1(Xml[9],cst_onprogress),
       a_onratechange=caml_call1(Xml[9],cst_onratechange),
       a_onreadystatechange=caml_call1(Xml[9],cst_onreadystatechange),
       a_onredo=caml_call1(Xml[9],cst_onredo),
       a_onresize=caml_call1(Xml[9],cst_onresize$0),
       a_onscroll=caml_call1(Xml[9],cst_onscroll$0),
       a_onseeked=caml_call1(Xml[9],cst_onseeked),
       a_onseeking=caml_call1(Xml[9],cst_onseeking),
       a_onselect=caml_call1(Xml[9],cst_onselect),
       a_onshow=caml_call1(Xml[9],cst_onshow),
       a_onstalled=caml_call1(Xml[9],cst_onstalled),
       a_onstorage=caml_call1(Xml[9],cst_onstorage),
       a_onsubmit=caml_call1(Xml[9],cst_onsubmit),
       a_onsuspend=caml_call1(Xml[9],cst_onsuspend),
       a_ontimeupdate=caml_call1(Xml[9],cst_ontimeupdate),
       a_onundo=caml_call1(Xml[9],cst_onundo),
       a_onunload=caml_call1(Xml[9],cst_onunload$0),
       a_onvolumechange=caml_call1(Xml[9],cst_onvolumechange),
       a_onwaiting=caml_call1(Xml[9],cst_onwaiting),
       a_onload=caml_call1(Xml[9],cst_onload$0),
       a_onloadeddata=caml_call1(Xml[9],cst_onloadeddata),
       a_onloadedmetadata=caml_call1(Xml[9],cst_onloadedmetadata),
       a_onloadstart=caml_call1(Xml[9],cst_onloadstart),
       a_onmessage=caml_call1(Xml[9],cst_onmessage),
       a_onmousewheel=caml_call1(Xml[9],cst_onmousewheel),
       a_onclick=caml_call1(Xml[10],cst_onclick$0),
       a_oncontextmenu=caml_call1(Xml[10],cst_oncontextmenu),
       a_ondblclick=caml_call1(Xml[10],cst_ondblclick),
       a_ondrag=caml_call1(Xml[10],cst_ondrag),
       a_ondragend=caml_call1(Xml[10],cst_ondragend),
       a_ondragenter=caml_call1(Xml[10],cst_ondragenter),
       a_ondragleave=caml_call1(Xml[10],cst_ondragleave),
       a_ondragover=caml_call1(Xml[10],cst_ondragover),
       a_ondragstart=caml_call1(Xml[10],cst_ondragstart),
       a_ondrop=caml_call1(Xml[10],cst_ondrop),
       a_onmousedown=caml_call1(Xml[10],cst_onmousedown),
       a_onmouseup=caml_call1(Xml[10],cst_onmouseup$0),
       a_onmouseover=caml_call1(Xml[10],cst_onmouseover$0),
       a_onmousemove=caml_call1(Xml[10],cst_onmousemove$0),
       a_onmouseout=caml_call1(Xml[10],cst_onmouseout$0),
       a_ontouchstart=caml_call1(Xml[12],cst_ontouchstart$0),
       a_ontouchend=caml_call1(Xml[12],cst_ontouchend$0),
       a_ontouchmove=caml_call1(Xml[12],cst_ontouchmove$0),
       a_ontouchcancel=caml_call1(Xml[12],cst_ontouchcancel$0),
       a_onkeypress=caml_call1(Xml[11],cst_onkeypress),
       a_onkeydown=caml_call1(Xml[11],cst_onkeydown),
       a_onkeyup=caml_call1(Xml[11],cst_onkeyup),
       a_version=caml_call1(_aL_,cst_version$0);
      function a_xmlns(x){return user_attrib(C[2],cst_xmlns$4,x)}
      function a_manifest(_eD_){return uri_attrib(cst_manifest,_eD_)}
      function a_cite(_eC_){return uri_attrib(cst_cite,_eC_)}
      function a_xml_space(x){return user_attrib(C[2],cst_xml_space$0,x)}
      function a_accesskey(c){return user_attrib(C[5],cst_accesskey,c)}
      var
       a_charset=caml_call1(_aL_,cst_charset),
       a_accept_charset=caml_call1(_aM_,cst_accept_charset),
       a_accept=caml_call1(_aN_,cst_accept);
      function a_href(_eB_){return uri_attrib(cst_href$0,_eB_)}
      var a_hreflang=caml_call1(_aL_,cst_hreflang);
      function a_download(file){return user_attrib(C[15],cst_download,file)}
      function a_rel(_eA_){return linktypes_attrib(cst_rel,_eA_)}
      var
       a_tabindex=caml_call1(_aK_,cst_tabindex),
       a_mime_type=caml_call1(_aL_,cst_type$4),
       a_alt=caml_call1(_aL_,cst_alt);
      function a_height(p){return caml_call2(_aK_,cst_height$0,p)}
      function a_src(_ez_){return uri_attrib(cst_src,_ez_)}
      function a_width(p){return caml_call2(_aK_,cst_width$0,p)}
      var
       a_for=caml_call1(_aL_,cst_for),
       a_for_list=caml_call1(_aM_,cst_for$0);
      function a_selected(_ey_){return constant_attrib(cst_selected,_ey_)}
      var
       a_text_value=caml_call1(_aL_,cst_value),
       a_int_value=caml_call1(_aK_,cst_value$0),
       a_value=caml_call1(_aL_,cst_value$1),
       a_float_value=caml_call1(_aJ_,cst_value$2);
      function a_action(_ex_){return uri_attrib(cst_action,_ex_)}
      function a_formmethod(x){return user_attrib(C[2],cst_method$0,x)}
      var a_enctype=caml_call1(_aL_,cst_enctype);
      function a_checked(_ew_){return constant_attrib(cst_checked,_ew_)}
      function a_disabled(_ev_){return constant_attrib(cst_disabled,_ev_)}
      function a_readonly(_eu_){return constant_attrib(cst_readonly,_eu_)}
      var
       a_maxlength=caml_call1(_aK_,cst_maxlength),
       a_minlength=caml_call1(_aK_,cst_minlength),
       a_name=caml_call1(_aL_,cst_name$0);
      function a_autocomplete(x){return user_attrib(C[4],cst_autocomplete,x)}
      function a_async(_et_){return constant_attrib(cst_async,_et_)}
      function a_autofocus(_es_){return constant_attrib(cst_autofocus,_es_)}
      function a_autoplay(_er_){return constant_attrib(cst_autoplay,_er_)}
      function a_muted(_eq_){return constant_attrib(cst_muted,_eq_)}
      function a_crossorigin(x){return user_attrib(C[2],cst_crossorigin,x)}
      var
       a_mediagroup=caml_call1(_aL_,cst_mediagroup),
       a_challenge=caml_call1(_aL_,cst_challenge);
      function a_contenteditable(ce)
       {return bool_attrib(cst_contenteditable,ce)}
      var a_contextmenu=caml_call1(_aL_,cst_contextmenu);
      function a_controls(_ep_){return constant_attrib(cst_controls,_ep_)}
      function a_dir(x){return user_attrib(C[2],cst_dir,x)}
      function a_draggable(d){return bool_attrib(cst_draggable,d)}
      var a_form=caml_call1(_aL_,cst_form);
      function a_formaction(_eo_){return uri_attrib(cst_formaction,_eo_)}
      var a_formenctype=caml_call1(_aL_,cst_formenctype);
      function a_formnovalidate(_en_)
       {return constant_attrib(cst_formnovalidate,_en_)}
      var a_formtarget=caml_call1(_aL_,cst_formtarget);
      function a_hidden(_em_){return constant_attrib(cst_hidden,_em_)}
      var a_high=caml_call1(_aJ_,cst_high);
      function a_icon(_el_){return uri_attrib(cst_icon,_el_)}
      function a_ismap(_ek_){return constant_attrib(cst_ismap,_ek_)}
      var
       a_keytype=caml_call1(_aL_,cst_keytype),
       a_list=caml_call1(_aL_,cst_list);
      function a_loop(_ej_){return constant_attrib(cst_loop,_ej_)}
      var
       a_low=caml_call1(_aJ_,cst_low),
       a_max=caml_call1(_aJ_,cst_max$0),
       _aP_=C[7];
      function a_input_max(_ei_){return user_attrib(_aP_,cst_max$1,_ei_)}
      var a_min=caml_call1(_aJ_,cst_min$0),_aQ_=C[7];
      function a_input_min(_eh_){return user_attrib(_aQ_,cst_min$1,_eh_)}
      function a_inputmode(x){return user_attrib(C[2],cst_inputmode,x)}
      function a_novalidate(_eg_){return constant_attrib(cst_novalidate,_eg_)}
      function a_open(_ef_){return constant_attrib(cst_open,_ef_)}
      var
       a_optimum=caml_call1(_aJ_,cst_optimum),
       a_pattern=caml_call1(_aL_,cst_pattern$0),
       a_placeholder=caml_call1(_aL_,cst_placeholder);
      function a_poster(_ee_){return uri_attrib(cst_poster,_ee_)}
      function a_preload(x){return user_attrib(C[2],cst_preload,x)}
      function a_pubdate(_ed_){return constant_attrib(cst_pubdate,_ed_)}
      var a_radiogroup=caml_call1(_aL_,cst_radiogroup);
      function a_required(_ec_){return constant_attrib(cst_required,_ec_)}
      function a_reversed(_eb_){return constant_attrib(cst_reserved,_eb_)}
      function a_sandbox(x){return user_attrib(C[11],cst_sandbox,x)}
      function a_spellcheck(sc){return bool_attrib(cst_spellcheck,sc)}
      function a_scoped(_ea_){return constant_attrib(cst_scoped,_ea_)}
      function a_seamless(_d$_){return constant_attrib(cst_seamless,_d$_)}
      function a_sizes(sizes){return user_attrib(C[12],cst_sizes,sizes)}
      var
       a_span=caml_call1(_aK_,cst_span),
       a_srclang=caml_call1(_aL_,cst_xml_lang$1);
      function a_srcset(_d__){return srcset_attrib(cst_srcset,_d__)}
      var
       a_img_sizes=caml_call1(_aN_,cst_sizes$0),
       a_start=caml_call1(_aK_,cst_start$0);
      function a_step(step){return user_attrib(C[14],cst_step,step)}
      function a_wrap(x){return user_attrib(C[2],cst_wrap$0,x)}
      var a_size=caml_call1(_aK_,cst_size);
      function a_input_type(it){return user_attrib(C[6],cst_type$5,it)}
      function a_menu_type(x){return user_attrib(C[2],cst_type$6,x)}
      function a_command_type(x){return user_attrib(C[2],cst_type$7,x)}
      function a_button_type(bt){return user_attrib(C[6],cst_type$8,bt)}
      function a_multiple(_d9_){return constant_attrib(cst_multiple,_d9_)}
      var
       a_cols=caml_call1(_aK_,cst_cols),
       a_rows=caml_call1(_aK_,cst_rows),
       a_summary=caml_call1(_aL_,cst_summary);
      function a_align(x){return user_attrib(C[2],cst_align,x)}
      var
       a_axis=caml_call1(_aL_,cst_axis),
       a_colspan=caml_call1(_aK_,cst_colspan),
       a_headers=caml_call1(_aM_,cst_headers),
       a_rowspan=caml_call1(_aK_,cst_rowspan);
      function a_scope(x){return user_attrib(C[2],cst_scope,x)}
      var a_border=caml_call1(_aK_,cst_border);
      function a_rules(x){return user_attrib(C[2],cst_rules,x)}
      function a_char(c){return user_attrib(C[5],cst_char,c)}
      function a_data(_d8_){return uri_attrib(cst_data$0,_d8_)}
      var a_codetype=caml_call1(_aL_,cst_codetype);
      function a_frameborder(x){return user_attrib(C[2],cst_frameborder,x)}
      var
       a_marginheight=caml_call1(_aK_,cst_marginheight),
       a_marginwidth=caml_call1(_aK_,cst_marginwidth);
      function a_scrolling(x){return user_attrib(C[2],cst_scrolling,x)}
      var
       a_target=caml_call1(_aL_,cst_target),
       a_content=caml_call1(_aL_,cst_content),
       a_http_equiv=caml_call1(_aL_,cst_http_equiv);
      function a_media(_d7_){return mediadesc_attrib(cst_media$0,_d7_)}
      var a_role=caml_call1(_aM_,cst_role);
      function a_aria(name)
       {return caml_call1(_aM_,caml_call2(Stdlib[17],cst_aria,name))}
      function terminal(tag,a,param){return caml_call2(Xml[20],a,tag)}
      function unary(tag,a,elt)
       {var _d6_=caml_call1(Xml[1][4],elt);
        return caml_call3(Xml[21],a,tag,_d6_)}
      function star(tag,a,elts){return caml_call3(Xml[21],a,tag,elts)}
      function plus(tag,a,elt,elts)
       {var _d5_=caml_call2(Xml[1][5],elt,elts);
        return caml_call3(Xml[21],a,tag,_d5_)}
      function option_cons(opt,elts)
       {if(opt){var x=opt[1];return caml_call2(Xml[1][5],x,elts)}return elts}
      function body(_d3_,_d4_){return star(cst_body,_d3_,_d4_)}
      function head(_d0_,_d1_,_d2_){return plus(cst_head,_d0_,_d1_,_d2_)}
      function title(_dY_,_dZ_){return unary(cst_title$1,_dY_,_dZ_)}
      function html(a,head,body)
       {var
         _dX_=caml_call1(Xml[1][4],body),
         content=caml_call2(Xml[1][5],head,_dX_);
        return caml_call3(Xml[21],a,cst_html$0,content)}
      function footer(_dV_,_dW_){return star(cst_footer,_dV_,_dW_)}
      function header(_dT_,_dU_){return star(cst_header,_dT_,_dU_)}
      function section(_dR_,_dS_){return star(cst_section,_dR_,_dS_)}
      function nav(_dP_,_dQ_){return star(cst_nav,_dP_,_dQ_)}
      function pcdata(s){return caml_call1(Xml[17],s)}
      var _aR_=Xml[19];
      function space(param){return caml_call1(_aR_,cst_nbsp)}
      var _aS_=Xml[22],_aT_=Xml[23],_aU_=Xml[24];
      function h1(_dN_,_dO_){return star(cst_h1,_dN_,_dO_)}
      function h2(_dL_,_dM_){return star(cst_h2,_dL_,_dM_)}
      function h3(_dJ_,_dK_){return star(cst_h3,_dJ_,_dK_)}
      function h4(_dH_,_dI_){return star(cst_h4,_dH_,_dI_)}
      function h5(_dF_,_dG_){return star(cst_h5,_dF_,_dG_)}
      function h6(_dD_,_dE_){return star(cst_h6,_dD_,_dE_)}
      function hgroup(_dB_,_dC_){return star(cst_hgroup,_dB_,_dC_)}
      function address(_dz_,_dA_){return star(cst_address,_dz_,_dA_)}
      function blockquote(_dx_,_dy_){return star(cst_blockquote,_dx_,_dy_)}
      function div(_dv_,_dw_){return star(cst_div,_dv_,_dw_)}
      function p(_dt_,_du_){return star(cst_p,_dt_,_du_)}
      function pre(_dr_,_ds_){return star(cst_pre,_dr_,_ds_)}
      function abbr(_dp_,_dq_){return star(cst_abbr,_dp_,_dq_)}
      function br(_dn_,_do_){return terminal(cst_br,_dn_,_do_)}
      function cite(_dl_,_dm_){return star(cst_cite$0,_dl_,_dm_)}
      function code(_dj_,_dk_){return star(cst_code,_dj_,_dk_)}
      function dfn(_dh_,_di_){return star(cst_dfn,_dh_,_di_)}
      function em(_df_,_dg_){return star(cst_em$0,_df_,_dg_)}
      function kbd(_dd_,_de_){return star(cst_kbd,_dd_,_de_)}
      function q(_db_,_dc_){return star(cst_q,_db_,_dc_)}
      function samp(_c$_,_da_){return star(cst_samp,_c$_,_da_)}
      function span(_c9_,_c__){return star(cst_span$0,_c9_,_c__)}
      function strong(_c7_,_c8_){return star(cst_strong,_c7_,_c8_)}
      function time(_c5_,_c6_){return star(cst_time,_c5_,_c6_)}
      function var$0(_c3_,_c4_){return star(cst_var,_c3_,_c4_)}
      function a(_c1_,_c2_){return star(cst_a$1,_c1_,_c2_)}
      function dl(_cZ_,_c0_){return star(cst_dl,_cZ_,_c0_)}
      function ol(_cX_,_cY_){return star(cst_ol,_cX_,_cY_)}
      function ul(_cV_,_cW_){return star(cst_ul,_cV_,_cW_)}
      function dd(_cT_,_cU_){return star(cst_dd,_cT_,_cU_)}
      function dt(_cR_,_cS_){return star(cst_dt,_cR_,_cS_)}
      function li(_cP_,_cQ_){return star(cst_li,_cP_,_cQ_)}
      function hr(_cN_,_cO_){return terminal(cst_hr,_cN_,_cO_)}
      function b(_cL_,_cM_){return star(cst_b$0,_cL_,_cM_)}
      function i(_cJ_,_cK_){return star(cst_i,_cJ_,_cK_)}
      function u(_cH_,_cI_){return star(cst_u,_cH_,_cI_)}
      function small(_cF_,_cG_){return star(cst_small,_cF_,_cG_)}
      function sub(_cD_,_cE_){return star(cst_sub,_cD_,_cE_)}
      function sup(_cB_,_cC_){return star(cst_sup,_cB_,_cC_)}
      function mark(_cz_,_cA_){return star(cst_mark,_cz_,_cA_)}
      function rp(_cx_,_cy_){return star(cst_rp,_cx_,_cy_)}
      function rt(_cv_,_cw_){return star(cst_rt,_cv_,_cw_)}
      function ruby(_ct_,_cu_){return star(cst_ruby,_ct_,_cu_)}
      function wbr(_cr_,_cs_){return terminal(cst_wbr,_cr_,_cs_)}
      function bdo(dir,opt,elts)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _cq_=[0,[0,a_dir(dir),a]];
        return caml_call3(Xml[21],_cq_,cst_bdo,elts)}
      var a_datetime=caml_call1(_aL_,cst_datetime);
      function a_shape(x){return user_attrib(C[2],cst_shape,x)}
      function a_coords(coords){return user_attrib(C[10],cst_coords,coords)}
      var a_usemap=caml_call1(_aL_,cst_usemap);
      function a_defer(_cp_){return constant_attrib(cst_defer,_cp_)}
      var a_label=caml_call1(_aL_,cst_label);
      function area(alt,opt,param)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _co_=[0,[0,caml_call1(a_alt,alt),a]];
        return caml_call2(Xml[20],_co_,cst_area)}
      function map(_cm_,_cn_){return star(cst_map,_cm_,_cn_)}
      function del(_ck_,_cl_){return star(cst_del,_ck_,_cl_)}
      function ins(_ci_,_cj_){return star(cst_ins,_ci_,_cj_)}
      function script(_cg_,_ch_){return unary(cst_script$0,_cg_,_ch_)}
      function noscript(_ce_,_cf_){return star(cst_noscript,_ce_,_cf_)}
      function article(_cc_,_cd_){return star(cst_article,_cc_,_cd_)}
      function aside(_ca_,_cb_){return star(cst_aside,_ca_,_cb_)}
      function main(_b__,_b$_){return star(cst_main,_b__,_b$_)}
      function video_audio(name,src,srcs,opt,elts)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        if(src)var uri=src[1],a$0=[0,a_src(uri),a];else var a$0=a;
        if(srcs)
         {var srcs$0=srcs[1],_b9_=caml_call2(Xml[1][6],srcs$0,elts);
          return caml_call3(Xml[21],[0,a$0],name,_b9_)}
        return caml_call3(Xml[21],[0,a$0],name,elts)}
      function audio(_b5_,_b6_,_b7_,_b8_)
       {return video_audio(cst_audio,_b5_,_b6_,_b7_,_b8_)}
      function video(_b1_,_b2_,_b3_,_b4_)
       {return video_audio(cst_video,_b1_,_b2_,_b3_,_b4_)}
      function canvas(_bZ_,_b0_){return star(cst_canvas,_bZ_,_b0_)}
      function command(label,opt,param)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _bY_=[0,[0,caml_call1(a_label,label),a]];
        return caml_call2(Xml[20],_bY_,cst_command)}
      function menu(children,a,param)
       {if(children)
         var match=children[1],l=match[2],children$0=l;
        else
         var children$0=caml_call1(Xml[1][3],0);
        return caml_call3(Xml[21],a,cst_menu,children$0)}
      function embed(_bW_,_bX_){return terminal(cst_embed,_bW_,_bX_)}
      function source(_bU_,_bV_){return terminal(cst_source,_bU_,_bV_)}
      function meter(_bS_,_bT_){return star(cst_meter,_bS_,_bT_)}
      function output_elt(_bQ_,_bR_){return star(cst_output,_bQ_,_bR_)}
      function form(_bO_,_bP_){return star(cst_form$0,_bO_,_bP_)}
      function svg(opt,children)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _bN_=caml_call2(Svg[241],[0,a],children);
        return caml_call1(Svg[323],_bN_)}
      function input(_bL_,_bM_){return terminal(cst_input,_bL_,_bM_)}
      function keygen(_bJ_,_bK_){return terminal(cst_keygen,_bJ_,_bK_)}
      function label(_bH_,_bI_){return star(cst_label$0,_bH_,_bI_)}
      function option(_bF_,_bG_){return unary(cst_option,_bF_,_bG_)}
      function select(_bD_,_bE_){return star(cst_select,_bD_,_bE_)}
      function textarea(_bB_,_bC_){return unary(cst_textarea,_bB_,_bC_)}
      function button(_bz_,_bA_){return star(cst_button,_bz_,_bA_)}
      function datalist(children,a,param)
       {if(children)
         var match=children[1],x=match[2],children$0=x;
        else
         var children$0=caml_call1(Xml[1][3],0);
        return caml_call3(Xml[21],a,cst_datalist,children$0)}
      function progress(_bx_,_by_){return star(cst_progress,_bx_,_by_)}
      function legend(_bv_,_bw_){return star(cst_legend,_bv_,_bw_)}
      function details(summary,a,children)
       {return plus(cst_details,a,summary,children)}
      function summary(_bt_,_bu_){return star(cst_summary$0,_bt_,_bu_)}
      function fieldset(legend,a,elts)
       {var _bs_=option_cons(legend,elts);
        return caml_call3(Xml[21],a,cst_fieldset,_bs_)}
      function optgroup(label,opt,elts)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _br_=[0,[0,caml_call1(a_label,label),a]];
        return caml_call3(Xml[21],_br_,cst_optgroup,elts)}
      function figcaption(_bp_,_bq_){return star(cst_figcaption,_bp_,_bq_)}
      function figure(figcaption,a,elts)
       {if(figcaption)
         {var _bm_=figcaption[1];
          if(437082891 <= _bm_[1])
           var
            c=_bm_[2],
            _bn_=caml_call1(Xml[1][4],c),
            _bo_=caml_call2(Xml[1][6],elts,_bn_);
          else
           var c$0=_bm_[2],_bo_=caml_call2(Xml[1][5],c$0,elts);
          var content=_bo_}
        else
         var content=elts;
        return caml_call3(Xml[21],a,cst_figure,content)}
      function caption(_bk_,_bl_){return star(cst_caption,_bk_,_bl_)}
      function table(caption,columns,thead,tfoot,a,elts)
       {var content=option_cons(thead,option_cons(tfoot,elts));
        if(columns)
         var
          columns$0=columns[1],
          content$0=caml_call2(Xml[1][6],columns$0,content);
        else
         var content$0=content;
        var content$1=option_cons(caption,content$0);
        return caml_call3(Xml[21],a,cst_table$0,content$1)}
      function td(_bi_,_bj_){return star(cst_td,_bi_,_bj_)}
      function th(_bg_,_bh_){return star(cst_th,_bg_,_bh_)}
      function tr(_be_,_bf_){return star(cst_tr,_be_,_bf_)}
      function colgroup(_bc_,_bd_){return star(cst_colgroup,_bc_,_bd_)}
      function col(_ba_,_bb_){return terminal(cst_col,_ba_,_bb_)}
      function thead(_a__,_a$_){return star(cst_thead,_a__,_a$_)}
      function tbody(_a8_,_a9_){return star(cst_tbody,_a8_,_a9_)}
      function tfoot(_a6_,_a7_){return star(cst_tfoot,_a6_,_a7_)}
      function iframe(_a4_,_a5_){return star(cst_iframe,_a4_,_a5_)}
      function object(params,opt,elts)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        if(params)
         var e=params[1],elts$0=caml_call2(Xml[1][6],e,elts);
        else
         var elts$0=elts;
        return caml_call3(Xml[21],[0,a],cst_object,elts$0)}
      function param(_a2_,_a3_){return terminal(cst_param,_a2_,_a3_)}
      function img(src,alt,opt,param)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _a1_=[0,caml_call1(a_alt,alt),a],a$0=[0,a_src(src),_a1_];
        return caml_call2(Xml[20],[0,a$0],cst_img)}
      function meta(_aZ_,_a0_){return terminal(cst_meta,_aZ_,_a0_)}
      function style(opt,elts)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        return caml_call3(Xml[21],[0,a],cst_style$2,elts)}
      function link(rel,href,opt,param)
       {if(opt)var sth=opt[1],a=sth;else var a=0;
        var _aX_=[0,a_href(href),a],_aY_=[0,[0,a_rel(rel),_aX_]];
        return caml_call2(Xml[20],_aY_,cst_link)}
      function base(_aV_,_aW_){return terminal(cst_base,_aV_,_aW_)}
      function tot(x){return x}
      function totl(x){return x}
      function toelt(x){return x}
      function toeltl(x){return x}
      function doc_toelt(x){return x}
      var I=_a_(Xml);
      function of_seq(s){return caml_call1(I[1],s)}
      function data(s){return caml_call1(Xml[18],s)}
      function leaf(tag,a,param){return caml_call2(Xml[20],a,tag)}
      function node(tag,a,elts){return caml_call3(Xml[21],a,tag,elts)}
      function coerce_elt(x){return x}
      var float_attrib=Xml[4],int_attrib=Xml[5],string_attrib=Xml[6];
      function uri_attrib$0(a,s){return caml_call2(Xml[13],a,s)}
      var
       space_sep_attrib=Xml[7],
       comma_sep_attrib=Xml[8],
       Unsafe=
        [0,
         data,
         leaf,
         node,
         coerce_elt,
         float_attrib,
         int_attrib,
         string_attrib,
         uri_attrib$0,
         space_sep_attrib,
         comma_sep_attrib];
      return [0,
              Xml,
              W,
              Info,
              _aH_,
              _aI_,
              to_xmlattribs,
              to_attrib,
              _aJ_,
              _aK_,
              _aL_,
              uri_attrib,
              _aM_,
              _aN_,
              user_attrib,
              bool_attrib,
              constant_attrib,
              linktypes_attrib,
              mediadesc_attrib,
              srcset_attrib,
              a_class,
              a_id,
              a_user_data,
              a_title,
              a_xml_lang,
              a_lang,
              a_style,
              a_property,
              a_onabort,
              a_onafterprint,
              a_onbeforeprint,
              a_onbeforeunload,
              a_onblur,
              a_oncanplay,
              a_oncanplaythrough,
              a_onchange,
              a_ondurationchange,
              a_onemptied,
              a_onended,
              a_onerror,
              a_onfocus,
              a_onformchange,
              a_onforminput,
              a_onhashchange,
              a_oninput,
              a_oninvalid,
              a_onoffline,
              a_ononline,
              a_onpause,
              a_onplay,
              a_onplaying,
              a_onpagehide,
              a_onpageshow,
              a_onpopstate,
              a_onprogress,
              a_onratechange,
              a_onreadystatechange,
              a_onredo,
              a_onresize,
              a_onscroll,
              a_onseeked,
              a_onseeking,
              a_onselect,
              a_onshow,
              a_onstalled,
              a_onstorage,
              a_onsubmit,
              a_onsuspend,
              a_ontimeupdate,
              a_onundo,
              a_onunload,
              a_onvolumechange,
              a_onwaiting,
              a_onload,
              a_onloadeddata,
              a_onloadedmetadata,
              a_onloadstart,
              a_onmessage,
              a_onmousewheel,
              a_onclick,
              a_oncontextmenu,
              a_ondblclick,
              a_ondrag,
              a_ondragend,
              a_ondragenter,
              a_ondragleave,
              a_ondragover,
              a_ondragstart,
              a_ondrop,
              a_onmousedown,
              a_onmouseup,
              a_onmouseover,
              a_onmousemove,
              a_onmouseout,
              a_ontouchstart,
              a_ontouchend,
              a_ontouchmove,
              a_ontouchcancel,
              a_onkeypress,
              a_onkeydown,
              a_onkeyup,
              a_version,
              a_xmlns,
              a_manifest,
              a_cite,
              a_xml_space,
              a_accesskey,
              a_charset,
              a_accept_charset,
              a_accept,
              a_href,
              a_hreflang,
              a_download,
              a_rel,
              a_tabindex,
              a_mime_type,
              a_alt,
              a_height,
              a_src,
              a_width,
              a_for,
              a_for,
              a_for_list,
              a_for_list,
              a_selected,
              a_text_value,
              a_int_value,
              a_value,
              a_float_value,
              a_action,
              a_formmethod,
              a_formmethod,
              a_enctype,
              a_checked,
              a_disabled,
              a_readonly,
              a_maxlength,
              a_minlength,
              a_name,
              a_autocomplete,
              a_async,
              a_autofocus,
              a_autoplay,
              a_muted,
              a_crossorigin,
              a_mediagroup,
              a_challenge,
              a_contenteditable,
              a_contextmenu,
              a_controls,
              a_dir,
              a_draggable,
              a_form,
              a_formaction,
              a_formenctype,
              a_formnovalidate,
              a_formtarget,
              a_hidden,
              a_high,
              a_icon,
              a_ismap,
              a_keytype,
              a_list,
              a_loop,
              a_low,
              a_max,
              a_input_max,
              a_min,
              a_input_min,
              a_inputmode,
              a_novalidate,
              a_open,
              a_optimum,
              a_pattern,
              a_placeholder,
              a_poster,
              a_preload,
              a_pubdate,
              a_radiogroup,
              a_required,
              a_reversed,
              a_sandbox,
              a_spellcheck,
              a_scoped,
              a_seamless,
              a_sizes,
              a_span,
              a_srclang,
              a_srcset,
              a_img_sizes,
              a_start,
              a_step,
              a_wrap,
              a_size,
              a_input_type,
              a_menu_type,
              a_command_type,
              a_button_type,
              a_multiple,
              a_cols,
              a_rows,
              a_summary,
              a_align,
              a_axis,
              a_colspan,
              a_headers,
              a_rowspan,
              a_scope,
              a_border,
              a_rules,
              a_char,
              a_data,
              a_codetype,
              a_frameborder,
              a_marginheight,
              a_marginwidth,
              a_scrolling,
              a_target,
              a_content,
              a_http_equiv,
              a_media,
              a_role,
              a_aria,
              terminal,
              unary,
              star,
              plus,
              option_cons,
              body,
              head,
              title,
              html,
              footer,
              header,
              section,
              nav,
              pcdata,
              pcdata,
              _aR_,
              space,
              _aS_,
              _aT_,
              _aU_,
              h1,
              h2,
              h3,
              h4,
              h5,
              h6,
              hgroup,
              address,
              blockquote,
              div,
              p,
              pre,
              abbr,
              br,
              cite,
              code,
              dfn,
              em,
              kbd,
              q,
              samp,
              span,
              strong,
              time,
              var$0,
              a,
              dl,
              ol,
              ul,
              dd,
              dt,
              li,
              hr,
              b,
              i,
              u,
              small,
              sub,
              sup,
              mark,
              rp,
              rt,
              ruby,
              wbr,
              bdo,
              a_datetime,
              a_shape,
              a_coords,
              a_usemap,
              a_defer,
              a_label,
              area,
              map,
              del,
              ins,
              script,
              noscript,
              article,
              aside,
              main,
              video_audio,
              audio,
              video,
              canvas,
              command,
              menu,
              embed,
              source,
              meter,
              output_elt,
              form,
              svg,
              input,
              keygen,
              label,
              option,
              select,
              textarea,
              button,
              datalist,
              progress,
              legend,
              details,
              summary,
              fieldset,
              optgroup,
              figcaption,
              figure,
              caption,
              table,
              table,
              td,
              th,
              tr,
              colgroup,
              col,
              thead,
              tbody,
              tfoot,
              iframe,
              object,
              param,
              img,
              meta,
              style,
              link,
              base,
              tot,
              totl,
              toelt,
              toeltl,
              doc_toelt,
              I,
              of_seq,
              Unsafe]}
    function Wrapped_functions$0(Xml)
     {function string_of_sandbox_token(param)
       {return -177579325 <= param
                ?642066717 <= param
                  ?961985737 <= param?cst_allow_same_origin:cst_allow_popups
                  :-141440231 <= param?cst_allow_forms:cst_allow_pointer_lock
                :-237921695 <= param?cst_allow_script:cst_allow_top_navigation}
      function string_of_linktype(param)
       {if(typeof param === "number")
         return 381789656 <= param
                 ?814486425 <= param
                   ?870035731 <= param
                     ?1021867988 <= param
                       ?1026883179 <= param?cst_external:cst_canonical
                       :892857107 <= param?cst_prev:cst_next
                     :847656566 <= param?cst_last:cst_icon$0
                   :395967329 <= param
                     ?693914176 <= param
                       ?803495649 <= param?cst_help:cst_noreferrer
                       :672161451 <= param?cst_author:cst_license
                     :395056008 <= param?cst_search:cst_noopener
                 :-289155950 <= param
                   ?19067 <= param
                     ?212027606 <= param
                       ?332064784 <= param?cst_first:cst_bookmark
                       :4198970 <= param?cst_tag:cst_up
                     :-123098695 <= param?cst_pingback:cst_nofollow
                   :-837966724 <= param
                     ?-687429350 <= param
                       ?-543567890 <= param?cst_stylesheet:cst_alternate
                       :-784200974 <= param?cst_index:cst_sidebar
                     :-954191215 <= param?cst_archives:cst_prefetch;
        var s=param[2];
        return s}
      function string_of_mediadesc_token(param)
       {if(typeof param === "number")
         return 3256577 <= param
                 ?67844052 <= param
                   ?985170249 <= param
                     ?993823919 <= param?cst_projection:cst_aural
                     :741408196 <= param?cst_handheld:cst_embossed
                   :4203225 <= param?cst_tty:cst_all
                 :-321929715 === param
                   ?cst_braille
                   :-68046964 <= param
                     ?18850 <= param?cst_tv:cst_screen$0
                     :-275811774 <= param?cst_speech:cst_print;
        var s=param[2];
        return s}
      function string_of_big_variant(param)
       {if(typeof param === "number")
         return 4252495 <= param
                 ?748194550 <= param
                   ?892709484 <= param
                     ?936387931 <= param
                       ?984475830 <= param
                         ?1003109192 <= param
                           ?1026883179 <= param?cst_external$0:cst_0
                           :995986491 <= param?cst_formnovalidate$0:cst_audio$0
                         :963342108 <= param?cst_async$0:cst_toolbar
                       :892857107 <= param
                         ?914891065 <= param
                           ?925976842 <= param?cst_soft:cst_rows$0
                           :914389316 <= param?cst_rect$0:cst_prev$0
                         :892711040 <= param?cst_POST:cst_poly
                     :847656566 <= param
                       ?848351876 <= param
                         ?870530776 <= param
                           ?881668074 <= param?cst_open$0:cst_none$2
                           :870035731 <= param?cst_next$0:cst_loop$0
                         :847852583 <= param?cst_left:cst_last$0
                       :803298059 <= param
                         ?814486425 <= param
                           ?836565865 <= param?cst_kana:cst_icon$1
                           :803495649 <= param?cst_help$0:cst_hard
                         :748545107 <= param?cst_cols$0:cst_char$0
                   :292438678 <= param
                     ?434500685 <= param
                       ?596180811 <= param
                         ?693914176 <= param
                           ?726666127 <= param?cst_auto$3:cst_noreferrer$0
                           :672161451 <= param?cst_author$0:cst_muted$0
                         :475573507 <= param?cst_autoplay$0:cst_anonymous
                       :332064784 <= param
                         ?395967329 <= param
                           ?432776079 <= param?cst_metadata$0:cst_license$0
                           :395056008 <= param?cst_search$0:cst_first$0
                         :306241015 <= param?cst_novalidate$0:cst_controls$0
                     :111644259 <= param
                       ?178382384 <= param
                         ?202657151 <= param
                           ?212027606 <= param?cst_bookmark$0:cst_required$0
                           :186574459 <= param?cst_selected$0:cst_circle$0
                         :140750597 <= param?cst_rowgroup:cst_checkbox
                       :19559306 <= param
                         ?50085628 <= param
                           ?95509868 <= param?cst_katakana:cst_email
                           :48900580 <= param?cst_latin:cst_hidden$0
                         :4448519 <= param?cst_yes:cst_url
                 :-369291781 <= param
                   ?17505 <= param
                     ?3805386 <= param
                       ?4102650 <= param
                         ?4198970 <= param
                           ?4199867 <= param?cst_tel:cst_tag$0
                           :4103754 <= param?cst_rtl:cst_row
                         :3953222 <= param?cst_1:cst_ltr
                       :3256577 <= param
                         ?3356704 <= param
                           ?3553398 <= param?cst_GET:cst_col$0
                           :3257036 <= param?cst_any:cst_all$0
                         :19067 <= param?cst_up$0:cst_no
                     :-165772469 <= param
                       ?-123098695 <= param
                         ?-100768656 <= param
                           ?-57574468 <= param?cst_right:cst_scoped$0
                           :-116258131 <= param?cst_numeric:cst_pingback$0
                         :-146439973 <= param?cst_radio:cst_pubdate$0
                       :-289155950 <= param
                         ?-200275514 <= param
                           ?-197222864 <= param?cst_multiple$0:cst_latin_name
                           :-247853591 <= param?cst_autofocus$0:cst_nofollow$0
                         :-363872942 <= param?cst_defer$0:cst_full_width_latin
                   :-784200974 <= param
                     ?-613973726 <= param
                       ?-529147129 <= param
                         ?-423051825 <= param
                           ?-384499551 <= param?cst_default$0:cst_context
                           :-514572330 <= param?cst_verbatim:cst_checked$0
                         :-543567890 <= param?cst_stylesheet$0:cst_reserved$0
                       :-728306478 <= param
                         ?-707104822 <= param
                           ?-687429350 <= param
                             ?cst_alternate$0
                             :cst_http_www_w3_org_1999_xhtml
                           :-709493348 <= param?cst_disabled$0:cst_ismap$0
                         :-773209244 <= param?cst_use_credentials:cst_index$0
                     :-883155966 <= param
                       ?-837966724 <= param
                         ?-792946572 <= param
                           ?-788068560 <= param?cst_justify:cst_groups
                           :-826369749 <= param?cst_command$0:cst_sidebar$0
                         :-872161756 <= param?cst_latin_prose:cst_readonly$0
                       :-1000861353 === param
                         ?cst_prefetch$0
                         :-954191215 <= param
                           ?-931002593 <= param?cst_colgroup$0:cst_archives$0
                           :-967956361 <= param?cst_seamless$0:cst_preserve$0;
        var s=param[2];
        return s}
      function string_of_input_type(param)
       {return 50085628 <= param
                ?612668487 <= param
                  ?781515420 <= param
                    ?936769581 <= param
                      ?969837588 <= param?cst_week:cst_time$0
                      :936573133 <= param?cst_text$0:cst_file
                    :758940238 <= param?cst_date:cst_datetime_local
                  :242538002 <= param
                    ?529348384 <= param
                      ?578936635 <= param?cst_password:cst_month
                      :395056008 <= param?cst_search$1:cst_button$0
                    :111644259 <= param?cst_checkbox$0:cst_email$0
                :-146439973 <= param
                  ?-101336657 <= param
                    ?4252495 <= param
                      ?19559306 <= param?cst_hidden$1:cst_url$0
                      :4199867 <= param?cst_tel$0:cst_reset
                    :-145943139 <= param?cst_range:cst_radio$0
                  :-795439301 <= param
                    ?-578166461 <= param
                      ?-528289822 <= param?cst_readonly$1:cst_color
                      :-703661335 <= param?cst_number:cst_image$0
                    :-828715976 <= param?cst_submit:cst_datetime$0}
      function string_of_number_or_datetime(param)
       {if(-703661335 <= param[1])
         {var n=param[2];return caml_call1(Stdlib[22],n)}
        var t=param[2];
        return t}
      var
       string_of_character=caml_call1(Stdlib_string[1],1),
       string_of_number$0=Stdlib[22],
       string_of_bool=Stdlib[19];
      function onoff_of_bool(param){return 0 === param?cst_off:cst_on}
      function unoption_string(param)
       {if(param){var x=param[1];return x}return cst$39}
      function string_of_step(param)
       {if(param){var x=param[1];return string_of_number(x)}return cst_any$0}
      function string_of_sizes(param)
       {if(param)
         {var
           l=param[1],
           _aF_=
            function(param)
             {var y=param[2],x=param[1];
              return caml_call3(Stdlib_printf[4],_ae_,x,y)},
           _aG_=caml_call2(Stdlib_list[17],_aF_,l);
          return caml_call2(Stdlib_string[7],cst$40,_aG_)}
        return cst_any$1}
      function string_of_sandbox(l)
       {var _aE_=caml_call2(Stdlib_list[17],string_of_sandbox_token,l);
        return caml_call2(Stdlib_string[7],cst$41,_aE_)}
      function string_of_numbers(l)
       {var _aD_=caml_call2(Stdlib_list[17],string_of_number$0,l);
        return caml_call2(Stdlib_string[7],cst$42,_aD_)}
      function string_of_mediadesc(l)
       {var _aC_=caml_call2(Stdlib_list[17],string_of_mediadesc_token,l);
        return caml_call2(Stdlib_string[7],cst$43,_aC_)}
      function string_of_linktypes(l)
       {var _aB_=caml_call2(Stdlib_list[17],string_of_linktype,l);
        return caml_call2(Stdlib_string[7],cst$44,_aB_)}
      function string_of_srcset(l)
       {function f(param)
         {var _aw_=param[1];
          if(-738802218 === _aw_)
           {var
             match=param[2],
             v=match[2],
             url=match[1],
             _ax_=caml_call1(string_of_number$0,v),
             _ay_=caml_call1(Xml[2],url);
            return caml_call3(Stdlib_printf[4],_af_,_ay_,_ax_)}
          if(4252495 <= _aw_)
           {var url$0=param[2];return caml_call1(Xml[2],url$0)}
          var
           match$0=param[2],
           v$0=match$0[2],
           url$1=match$0[1],
           _az_=string_of_number(v$0),
           _aA_=caml_call1(Xml[2],url$1);
          return caml_call3(Stdlib_printf[4],_ag_,_aA_,_az_)}
        var _av_=caml_call2(Stdlib_list[17],f,l);
        return caml_call2(Stdlib_string[7],cst$45,_av_)}
      return [0,
              Xml,
              string_of_sandbox_token,
              string_of_linktype,
              string_of_mediadesc_token,
              string_of_big_variant,
              string_of_input_type,
              string_of_number_or_datetime,
              string_of_character,
              string_of_number$0,
              string_of_bool,
              onoff_of_bool,
              unoption_string,
              string_of_step,
              string_of_sizes,
              string_of_sandbox,
              string_of_numbers,
              string_of_mediadesc,
              string_of_linktypes,
              string_of_srcset]}
    function _ah_(_as_,_ar_,_aq_)
     {var _at_=Make_with_wrapped_functions$0(_as_,_ar_,_aq_),_au_=_at_[357];
      return [0,
              _at_[1],
              _at_[3],
              _at_[4],
              _at_[5],
              _at_[20],
              _at_[22],
              _at_[21],
              _at_[23],
              _at_[24],
              _at_[25],
              _at_[28],
              _at_[29],
              _at_[30],
              _at_[31],
              _at_[32],
              _at_[33],
              _at_[34],
              _at_[35],
              _at_[36],
              _at_[37],
              _at_[38],
              _at_[39],
              _at_[40],
              _at_[41],
              _at_[42],
              _at_[43],
              _at_[44],
              _at_[45],
              _at_[78],
              _at_[46],
              _at_[47],
              _at_[48],
              _at_[49],
              _at_[50],
              _at_[51],
              _at_[52],
              _at_[53],
              _at_[54],
              _at_[55],
              _at_[56],
              _at_[57],
              _at_[58],
              _at_[59],
              _at_[60],
              _at_[61],
              _at_[62],
              _at_[63],
              _at_[64],
              _at_[65],
              _at_[66],
              _at_[67],
              _at_[68],
              _at_[69],
              _at_[70],
              _at_[71],
              _at_[72],
              _at_[73],
              _at_[74],
              _at_[75],
              _at_[76],
              _at_[77],
              _at_[79],
              _at_[80],
              _at_[81],
              _at_[82],
              _at_[83],
              _at_[84],
              _at_[85],
              _at_[86],
              _at_[87],
              _at_[88],
              _at_[89],
              _at_[90],
              _at_[91],
              _at_[92],
              _at_[93],
              _at_[94],
              _at_[95],
              _at_[96],
              _at_[97],
              _at_[98],
              _at_[99],
              _at_[100],
              _at_[139],
              _at_[140],
              _at_[141],
              _at_[142],
              _at_[143],
              _at_[144],
              _at_[145],
              _at_[146],
              _at_[147],
              _at_[148],
              _at_[149],
              _at_[150],
              _at_[151],
              _at_[152],
              _at_[153],
              _at_[154],
              _at_[155],
              _at_[156],
              _at_[157],
              _at_[158],
              _at_[159],
              _at_[160],
              _at_[161],
              _at_[162],
              _at_[163],
              _at_[164],
              _at_[165],
              _at_[166],
              _at_[167],
              _at_[168],
              _at_[169],
              _at_[170],
              _at_[171],
              _at_[172],
              _at_[173],
              _at_[174],
              _at_[175],
              _at_[176],
              _at_[177],
              _at_[178],
              _at_[179],
              _at_[180],
              _at_[181],
              _at_[182],
              _at_[183],
              _at_[184],
              _at_[185],
              _at_[186],
              _at_[187],
              _at_[188],
              _at_[189],
              _at_[190],
              _at_[191],
              _at_[192],
              _at_[101],
              _at_[102],
              _at_[103],
              _at_[104],
              _at_[105],
              _at_[106],
              _at_[107],
              _at_[108],
              _at_[109],
              _at_[110],
              _at_[111],
              _at_[112],
              _at_[113],
              _at_[114],
              _at_[115],
              _at_[288],
              _at_[129],
              _at_[133],
              _at_[199],
              _at_[132],
              _at_[120],
              _at_[121],
              _at_[122],
              _at_[123],
              _at_[136],
              _at_[137],
              _at_[130],
              _at_[131],
              _at_[198],
              _at_[138],
              _at_[200],
              _at_[124],
              _at_[193],
              _at_[118],
              _at_[194],
              _at_[125],
              _at_[126],
              _at_[127],
              _at_[128],
              _at_[134],
              _at_[135],
              _at_[197],
              _at_[196],
              _at_[195],
              _at_[293],
              _at_[202],
              _at_[203],
              _at_[204],
              _at_[205],
              _at_[206],
              _at_[207],
              _at_[201],
              _at_[208],
              _at_[209],
              _at_[210],
              _at_[116],
              _at_[117],
              _at_[119],
              _at_[289],
              _at_[290],
              _at_[291],
              _at_[211],
              _at_[212],
              _at_[213],
              _at_[214],
              _at_[215],
              _at_[216],
              _at_[217],
              _at_[218],
              _at_[219],
              _at_[292],
              _at_[220],
              _at_[26],
              _at_[27],
              _at_[221],
              _at_[222],
              _at_[236],
              _at_[231],
              _at_[229],
              _at_[349],
              _at_[230],
              _at_[228],
              _at_[314],
              _at_[232],
              _at_[233],
              _at_[234],
              _at_[235],
              _at_[243],
              _at_[244],
              _at_[245],
              _at_[246],
              _at_[247],
              _at_[248],
              _at_[249],
              _at_[250],
              _at_[300],
              _at_[301],
              _at_[302],
              _at_[253],
              _at_[254],
              _at_[251],
              _at_[252],
              _at_[269],
              _at_[270],
              _at_[271],
              _at_[272],
              _at_[273],
              _at_[274],
              _at_[329],
              _at_[330],
              _at_[275],
              _at_[276],
              _at_[277],
              _at_[278],
              _at_[279],
              _at_[280],
              _at_[281],
              _at_[282],
              _at_[286],
              _at_[287],
              _at_[255],
              _at_[256],
              _at_[257],
              _at_[258],
              _at_[259],
              _at_[260],
              _at_[261],
              _at_[262],
              _at_[263],
              _at_[264],
              _at_[265],
              _at_[266],
              _at_[267],
              _at_[268],
              _at_[296],
              _at_[297],
              _at_[345],
              _at_[342],
              _at_[343],
              _at_[344],
              _at_[309],
              _at_[304],
              _at_[305],
              _at_[306],
              _at_[310],
              _at_[294],
              _at_[295],
              _at_[331],
              _at_[333],
              _at_[332],
              _at_[337],
              _at_[338],
              _at_[339],
              _at_[340],
              _at_[341],
              _at_[334],
              _at_[335],
              _at_[336],
              _at_[313],
              _at_[327],
              _at_[324],
              _at_[317],
              _at_[315],
              _at_[321],
              _at_[319],
              _at_[322],
              _at_[328],
              _at_[318],
              _at_[320],
              _at_[316],
              _at_[323],
              _at_[311],
              _at_[312],
              _at_[238],
              _at_[239],
              _at_[240],
              _at_[241],
              _at_[242],
              _at_[325],
              _at_[326],
              _at_[307],
              _at_[308],
              _at_[298],
              _at_[299],
              _at_[346],
              _at_[347],
              _at_[348],
              _at_[284],
              _at_[283],
              _at_[285],
              _at_[237],
              _at_[356],
              _at_[350],
              _at_[351],
              _at_[352],
              _at_[353],
              _at_[354],
              _at_[6],
              _at_[7],
              [0,
               _au_[1],
               _au_[3],
               _au_[2],
               _au_[4],
               _au_[7],
               _au_[5],
               _au_[6],
               _au_[8],
               _au_[9],
               _au_[10]]]}
    function _ai_(_ao_)
     {var _ap_=Wrapped_functions$0(_ao_);
      return [0,
              _ap_[1],
              _ap_[5],
              _ap_[10],
              _ap_[11],
              _ap_[8],
              _ap_[6],
              _ap_[7],
              _ap_[18],
              _ap_[17],
              _ap_[16],
              _ap_[15],
              _ap_[14],
              _ap_[19],
              _ap_[13],
              _ap_[12]]}
    var
     Html_f=
      [0,
       function(_al_,_ak_)
        {var
          _aj_=Wrapped_functions$0(_al_),
          _an_=
           Make_with_wrapped_functions$0
            (_al_,
             [0,
              _aj_[1],
              _aj_[5],
              _aj_[10],
              _aj_[11],
              _aj_[8],
              _aj_[6],
              _aj_[7],
              _aj_[18],
              _aj_[17],
              _aj_[16],
              _aj_[15],
              _aj_[14],
              _aj_[19],
              _aj_[13],
              _aj_[12]],
             _ak_),
          _am_=_an_[357];
         return [0,
                 _an_[1],
                 _an_[3],
                 _an_[4],
                 _an_[5],
                 _an_[20],
                 _an_[22],
                 _an_[21],
                 _an_[23],
                 _an_[24],
                 _an_[25],
                 _an_[28],
                 _an_[29],
                 _an_[30],
                 _an_[31],
                 _an_[32],
                 _an_[33],
                 _an_[34],
                 _an_[35],
                 _an_[36],
                 _an_[37],
                 _an_[38],
                 _an_[39],
                 _an_[40],
                 _an_[41],
                 _an_[42],
                 _an_[43],
                 _an_[44],
                 _an_[45],
                 _an_[78],
                 _an_[46],
                 _an_[47],
                 _an_[48],
                 _an_[49],
                 _an_[50],
                 _an_[51],
                 _an_[52],
                 _an_[53],
                 _an_[54],
                 _an_[55],
                 _an_[56],
                 _an_[57],
                 _an_[58],
                 _an_[59],
                 _an_[60],
                 _an_[61],
                 _an_[62],
                 _an_[63],
                 _an_[64],
                 _an_[65],
                 _an_[66],
                 _an_[67],
                 _an_[68],
                 _an_[69],
                 _an_[70],
                 _an_[71],
                 _an_[72],
                 _an_[73],
                 _an_[74],
                 _an_[75],
                 _an_[76],
                 _an_[77],
                 _an_[79],
                 _an_[80],
                 _an_[81],
                 _an_[82],
                 _an_[83],
                 _an_[84],
                 _an_[85],
                 _an_[86],
                 _an_[87],
                 _an_[88],
                 _an_[89],
                 _an_[90],
                 _an_[91],
                 _an_[92],
                 _an_[93],
                 _an_[94],
                 _an_[95],
                 _an_[96],
                 _an_[97],
                 _an_[98],
                 _an_[99],
                 _an_[100],
                 _an_[139],
                 _an_[140],
                 _an_[141],
                 _an_[142],
                 _an_[143],
                 _an_[144],
                 _an_[145],
                 _an_[146],
                 _an_[147],
                 _an_[148],
                 _an_[149],
                 _an_[150],
                 _an_[151],
                 _an_[152],
                 _an_[153],
                 _an_[154],
                 _an_[155],
                 _an_[156],
                 _an_[157],
                 _an_[158],
                 _an_[159],
                 _an_[160],
                 _an_[161],
                 _an_[162],
                 _an_[163],
                 _an_[164],
                 _an_[165],
                 _an_[166],
                 _an_[167],
                 _an_[168],
                 _an_[169],
                 _an_[170],
                 _an_[171],
                 _an_[172],
                 _an_[173],
                 _an_[174],
                 _an_[175],
                 _an_[176],
                 _an_[177],
                 _an_[178],
                 _an_[179],
                 _an_[180],
                 _an_[181],
                 _an_[182],
                 _an_[183],
                 _an_[184],
                 _an_[185],
                 _an_[186],
                 _an_[187],
                 _an_[188],
                 _an_[189],
                 _an_[190],
                 _an_[191],
                 _an_[192],
                 _an_[101],
                 _an_[102],
                 _an_[103],
                 _an_[104],
                 _an_[105],
                 _an_[106],
                 _an_[107],
                 _an_[108],
                 _an_[109],
                 _an_[110],
                 _an_[111],
                 _an_[112],
                 _an_[113],
                 _an_[114],
                 _an_[115],
                 _an_[288],
                 _an_[129],
                 _an_[133],
                 _an_[199],
                 _an_[132],
                 _an_[120],
                 _an_[121],
                 _an_[122],
                 _an_[123],
                 _an_[136],
                 _an_[137],
                 _an_[130],
                 _an_[131],
                 _an_[198],
                 _an_[138],
                 _an_[200],
                 _an_[124],
                 _an_[193],
                 _an_[118],
                 _an_[194],
                 _an_[125],
                 _an_[126],
                 _an_[127],
                 _an_[128],
                 _an_[134],
                 _an_[135],
                 _an_[197],
                 _an_[196],
                 _an_[195],
                 _an_[293],
                 _an_[202],
                 _an_[203],
                 _an_[204],
                 _an_[205],
                 _an_[206],
                 _an_[207],
                 _an_[201],
                 _an_[208],
                 _an_[209],
                 _an_[210],
                 _an_[116],
                 _an_[117],
                 _an_[119],
                 _an_[289],
                 _an_[290],
                 _an_[291],
                 _an_[211],
                 _an_[212],
                 _an_[213],
                 _an_[214],
                 _an_[215],
                 _an_[216],
                 _an_[217],
                 _an_[218],
                 _an_[219],
                 _an_[292],
                 _an_[220],
                 _an_[26],
                 _an_[27],
                 _an_[221],
                 _an_[222],
                 _an_[236],
                 _an_[231],
                 _an_[229],
                 _an_[349],
                 _an_[230],
                 _an_[228],
                 _an_[314],
                 _an_[232],
                 _an_[233],
                 _an_[234],
                 _an_[235],
                 _an_[243],
                 _an_[244],
                 _an_[245],
                 _an_[246],
                 _an_[247],
                 _an_[248],
                 _an_[249],
                 _an_[250],
                 _an_[300],
                 _an_[301],
                 _an_[302],
                 _an_[253],
                 _an_[254],
                 _an_[251],
                 _an_[252],
                 _an_[269],
                 _an_[270],
                 _an_[271],
                 _an_[272],
                 _an_[273],
                 _an_[274],
                 _an_[329],
                 _an_[330],
                 _an_[275],
                 _an_[276],
                 _an_[277],
                 _an_[278],
                 _an_[279],
                 _an_[280],
                 _an_[281],
                 _an_[282],
                 _an_[286],
                 _an_[287],
                 _an_[255],
                 _an_[256],
                 _an_[257],
                 _an_[258],
                 _an_[259],
                 _an_[260],
                 _an_[261],
                 _an_[262],
                 _an_[263],
                 _an_[264],
                 _an_[265],
                 _an_[266],
                 _an_[267],
                 _an_[268],
                 _an_[296],
                 _an_[297],
                 _an_[345],
                 _an_[342],
                 _an_[343],
                 _an_[344],
                 _an_[309],
                 _an_[304],
                 _an_[305],
                 _an_[306],
                 _an_[310],
                 _an_[294],
                 _an_[295],
                 _an_[331],
                 _an_[333],
                 _an_[332],
                 _an_[337],
                 _an_[338],
                 _an_[339],
                 _an_[340],
                 _an_[341],
                 _an_[334],
                 _an_[335],
                 _an_[336],
                 _an_[313],
                 _an_[327],
                 _an_[324],
                 _an_[317],
                 _an_[315],
                 _an_[321],
                 _an_[319],
                 _an_[322],
                 _an_[328],
                 _an_[318],
                 _an_[320],
                 _an_[316],
                 _an_[323],
                 _an_[311],
                 _an_[312],
                 _an_[238],
                 _an_[239],
                 _an_[240],
                 _an_[241],
                 _an_[242],
                 _an_[325],
                 _an_[326],
                 _an_[307],
                 _an_[308],
                 _an_[298],
                 _an_[299],
                 _an_[346],
                 _an_[347],
                 _an_[348],
                 _an_[284],
                 _an_[283],
                 _an_[285],
                 _an_[237],
                 _an_[356],
                 _an_[350],
                 _an_[351],
                 _an_[352],
                 _an_[353],
                 _an_[354],
                 _an_[6],
                 _an_[7],
                 [0,
                  _am_[1],
                  _am_[3],
                  _am_[2],
                  _am_[4],
                  _am_[7],
                  _am_[5],
                  _am_[6],
                  _am_[8],
                  _am_[9],
                  _am_[10]]]},
       _ai_,
       _ah_];
    caml_register_global(1084,Html_f,"Html_f");
    return}
  (function(){return this}()));


//# 1 ".js/tyxml/tyxml.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_new_string=runtime.caml_new_string,
     caml_register_global=runtime.caml_register_global;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$0=caml_new_string(""),
     cst=caml_new_string("]]>"),
     cst$1=caml_new_string("]]>"),
     cst_CDATA=caml_new_string("<![CDATA["),
     cst$2=caml_new_string("//]]>"),
     cst_CDATA$0=caml_new_string("//<![CDATA["),
     cst$3=caml_new_string("/* ]]> */"),
     cst_CDATA$1=caml_new_string("/* <![CDATA[ */"),
     Stdlib_format=global_data.Stdlib__format,
     Re=global_data.Re,
     Stdlib_printf=global_data.Stdlib__printf,
     Xml_wrap=global_data.Xml_wrap,
     Xml_print=global_data.Xml_print,
     Xml_iter=global_data.Xml_iter,
     Xml_stream=global_data.Xml_stream,
     Svg_f=global_data.Svg_f,
     Html_f=global_data.Html_f,
     _b_=[0,1],
     _c_=
      [0,
       [12,10,[2,0,[12,10,[2,0,[12,10,[2,0,[12,10,0]]]]]]],
       caml_new_string("\n%s\n%s\n%s\n")];
    function uri_of_string(s){return s}
    function string_of_uri(s){return s}
    function acontent(param){var a=param[2];return a}
    function aname(param){var name=param[1];return name}
    function float_attrib(name,value){return [0,name,[0,value]]}
    function int_attrib(name,value){return [0,name,[1,value]]}
    function string_attrib(name,value){return [0,name,[2,value]]}
    function space_sep_attrib(name,values){return [0,name,[3,0,values]]}
    function comma_sep_attrib(name,values){return [0,name,[3,1,values]]}
    function event_handler_attrib(name,value){return [0,name,[2,value]]}
    function mouse_event_handler_attrib(name,value){return [0,name,[2,value]]}
    function keyboard_event_handler_attrib(name,value)
     {return [0,name,[2,value]]}
    function touch_event_handler_attrib(name,value){return [0,name,[2,value]]}
    function uri_attrib(name,value){return [0,name,[2,value]]}
    function uris_attrib(name,values){return [0,name,[3,0,values]]}
    function content(elt){return elt}
    function empty(param){return 0}
    function comment(c){return [0,c]}
    function pcdata(d){return [2,d]}
    function encodedpcdata(d){return [1,d]}
    function entity(e){return [3,e]}
    var _a_=caml_call1(Re[23],cst),re_end_cdata=caml_call1(Re[2],_a_);
    function encoded_cdata(s1,s2,s)
     {var _l_=caml_call6(Re[22],0,0,_b_,re_end_cdata,cst$0,s);
      return [1,caml_call4(Stdlib_printf[4],_c_,s1,_l_,s2)]}
    function cdata(_k_){return encoded_cdata(cst_CDATA,cst$1,_k_)}
    function cdata_script(_j_){return encoded_cdata(cst_CDATA$0,cst$2,_j_)}
    function cdata_style(_i_){return encoded_cdata(cst_CDATA$1,cst$3,_i_)}
    function leaf(opt,name)
     {if(opt)var sth=opt[1],a=sth;else var a=0;return [4,name,a]}
    function node(opt,name,children)
     {if(opt)var sth=opt[1],a=sth;else var a=0;return [5,name,a,children]}
    var
     print_list=
      caml_call1
        (caml_call1
          (Xml_print[12],
           [0,
            Xml_wrap[1],
            string_of_uri,
            uri_of_string,
            float_attrib,
            int_attrib,
            string_attrib,
            space_sep_attrib,
            comma_sep_attrib,
            event_handler_attrib,
            mouse_event_handler_attrib,
            keyboard_event_handler_attrib,
            touch_event_handler_attrib,
            uri_attrib,
            uris_attrib,
            empty,
            comment,
            pcdata,
            encodedpcdata,
            entity,
            leaf,
            node,
            cdata,
            cdata_script,
            cdata_style,
            aname,
            acontent,
            content]),
         [0,0])
       [1],
     include=
      caml_call1
       (Xml_iter[1],
        [0,
         Xml_wrap[1],
         string_of_uri,
         uri_of_string,
         float_attrib,
         int_attrib,
         string_attrib,
         space_sep_attrib,
         comma_sep_attrib,
         event_handler_attrib,
         mouse_event_handler_attrib,
         keyboard_event_handler_attrib,
         touch_event_handler_attrib,
         uri_attrib,
         uris_attrib,
         empty,
         comment,
         pcdata,
         encodedpcdata,
         entity,
         leaf,
         node,
         cdata,
         cdata_script,
         cdata_style,
         aname,
         acontent,
         content]),
     amap=include[1],
     amap1=include[2],
     rm_attrib=include[3],
     rm_attrib_from_list=include[4],
     map_int_attrib=include[5],
     map_string_attrib=include[7],
     map_string_attrib_in_list=include[8],
     add_int_attrib=include[9],
     add_string_attrib=include[11],
     add_comma_sep_attrib=include[12],
     add_space_sep_attrib=include[13],
     fold=include[14],
     all_entities=include[15],
     translate=include[16],
     pp=
      caml_call1
        (caml_call1
          (Xml_print[9],
           [0,
            Xml_wrap[1],
            string_of_uri,
            uri_of_string,
            float_attrib,
            int_attrib,
            string_attrib,
            space_sep_attrib,
            comma_sep_attrib,
            event_handler_attrib,
            mouse_event_handler_attrib,
            keyboard_event_handler_attrib,
            touch_event_handler_attrib,
            uri_attrib,
            uris_attrib,
            empty,
            comment,
            pcdata,
            encodedpcdata,
            entity,
            leaf,
            node,
            cdata,
            cdata_script,
            cdata_style,
            aname,
            acontent,
            content]),
         [0,0])
       [1],
     include$0=
      caml_call1
       (Xml_stream[2],
        [0,
         Xml_wrap[1],
         string_of_uri,
         uri_of_string,
         float_attrib,
         int_attrib,
         string_attrib,
         space_sep_attrib,
         comma_sep_attrib,
         event_handler_attrib,
         mouse_event_handler_attrib,
         keyboard_event_handler_attrib,
         touch_event_handler_attrib,
         uri_attrib,
         uris_attrib,
         empty,
         comment,
         pcdata,
         encodedpcdata,
         entity,
         leaf,
         node,
         cdata,
         cdata_script,
         cdata_style]),
     of_seq=include$0[1];
    function print(fmt,x)
     {return caml_call3
              (print_list,caml_call1(Stdlib_format[13],fmt),0,[0,x,0])}
    var
     _d_=Xml_wrap[1],
     Tyxml_xml=
      [0,
       _d_,
       string_of_uri,
       uri_of_string,
       float_attrib,
       int_attrib,
       string_attrib,
       space_sep_attrib,
       comma_sep_attrib,
       event_handler_attrib,
       mouse_event_handler_attrib,
       keyboard_event_handler_attrib,
       touch_event_handler_attrib,
       uri_attrib,
       uris_attrib,
       empty,
       comment,
       pcdata,
       encodedpcdata,
       entity,
       leaf,
       node,
       cdata,
       cdata_script,
       cdata_style,
       aname,
       acontent,
       content,
       pp,
       of_seq,
       amap,
       amap1,
       rm_attrib,
       rm_attrib_from_list,
       map_int_attrib,
       map_string_attrib,
       map_string_attrib_in_list,
       add_int_attrib,
       add_string_attrib,
       add_comma_sep_attrib,
       add_space_sep_attrib,
       fold,
       all_entities,
       translate,
       print_list,
       print];
    caml_register_global(17,Tyxml_xml,"Tyxml_xml");
    var
     M=
      caml_call1
       (Svg_f[1],
        [0,
         _d_,
         string_of_uri,
         uri_of_string,
         float_attrib,
         int_attrib,
         string_attrib,
         space_sep_attrib,
         comma_sep_attrib,
         event_handler_attrib,
         mouse_event_handler_attrib,
         keyboard_event_handler_attrib,
         touch_event_handler_attrib,
         uri_attrib,
         uris_attrib,
         empty,
         comment,
         pcdata,
         encodedpcdata,
         entity,
         leaf,
         node,
         cdata,
         cdata_script,
         cdata_style]),
     _e_=[0,M[2],M[324],M[326]],
     P=
      caml_call1
       (caml_call1
         (Xml_print[8],
          [0,
           _d_,
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style,
           aname,
           acontent,
           content]),
        _e_),
     _f_=[0,M[2],M[324],M[326]],
     Make_printer=
      caml_call1
       (caml_call1
         (Xml_print[11],
          [0,
           _d_,
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style,
           aname,
           acontent,
           content]),
        _f_),
     Xml=M[1],
     Info=M[2],
     string_of_uri$0=M[3],
     uri_of_string$0=M[4],
     a_version=M[5],
     a_baseProfile=M[6],
     a_x=M[7],
     a_y=M[8],
     a_width=M[9],
     a_height=M[10],
     a_preserveAspectRatio=M[11],
     a_contentScriptType=M[12],
     a_contentStyleType=M[13],
     a_zoomAndPan=M[14],
     a_href=M[15],
     a_xlink_href=M[16],
     a_requiredFeatures=M[17],
     a_requiredExtensions=M[18],
     a_systemLanguage=M[19],
     a_externalRessourcesRequired=M[20],
     a_id=M[21],
     a_xml_base=M[22],
     a_xml_lang=M[23],
     a_xml_space=M[24],
     a_type=M[25],
     a_media=M[26],
     a_xlink_title=M[27],
     a_class=M[28],
     a_style=M[29],
     a_transform=M[30],
     a_viewBox=M[31],
     a_d=M[32],
     a_pathLength=M[33],
     a_rx=M[34],
     a_ry=M[35],
     a_cx=M[36],
     a_cy=M[37],
     a_r=M[38],
     a_x1=M[39],
     a_y1=M[40],
     a_x2=M[41],
     a_y2=M[42],
     a_points=M[43],
     a_x_list=M[44],
     a_y_list=M[45],
     a_dx=M[46],
     a_dy=M[47],
     a_dx_list=M[48],
     a_dy_list=M[49],
     a_lengthAdjust=M[50],
     a_textLength=M[51],
     a_text_anchor=M[52],
     a_text_decoration=M[53],
     a_text_rendering=M[54],
     a_rotate=M[55],
     a_startOffset=M[56],
     a_method=M[57],
     a_spacing=M[58],
     a_glyphRef=M[59],
     a_format=M[60],
     a_markerUnits=M[61],
     a_refX=M[62],
     a_refY=M[63],
     a_markerWidth=M[64],
     a_markerHeight=M[65],
     a_orient=M[66],
     a_local=M[67],
     a_rendering_intent=M[68],
     a_gradientUnits=M[69],
     a_gradientTransform=M[70],
     a_spreadMethod=M[71],
     a_fx=M[72],
     a_fy=M[73],
     a_offset=M[74],
     a_patternUnits=M[75],
     a_patternContentUnits=M[76],
     a_patternTransform=M[77],
     a_clipPathUnits=M[78],
     a_maskUnits=M[79],
     a_maskContentUnits=M[80],
     a_primitiveUnits=M[81],
     a_filterRes=M[82],
     a_result=M[83],
     a_in=M[84],
     a_in2=M[85],
     a_azimuth=M[86],
     a_elevation=M[87],
     a_pointsAtX=M[88],
     a_pointsAtY=M[89],
     a_pointsAtZ=M[90],
     a_specularExponent=M[91],
     a_specularConstant=M[92],
     a_limitingConeAngle=M[93],
     a_mode=M[94],
     a_feColorMatrix_type=M[95],
     a_values=M[96],
     a_transfer_type=M[97],
     a_tableValues=M[98],
     a_intercept=M[99],
     a_amplitude=M[100],
     a_exponent=M[101],
     a_transfer_offset=M[102],
     a_feComposite_operator=M[103],
     a_k1=M[104],
     a_k2=M[105],
     a_k3=M[106],
     a_k4=M[107],
     a_order=M[108],
     a_kernelMatrix=M[109],
     a_divisor=M[110],
     a_bias=M[111],
     a_kernelUnitLength=M[112],
     a_targetX=M[113],
     a_targetY=M[114],
     a_edgeMode=M[115],
     a_preserveAlpha=M[116],
     a_surfaceScale=M[117],
     a_diffuseConstant=M[118],
     a_scale=M[119],
     a_xChannelSelector=M[120],
     a_yChannelSelector=M[121],
     a_stdDeviation=M[122],
     a_feMorphology_operator=M[123],
     a_radius=M[124],
     a_baseFrenquency=M[125],
     a_numOctaves=M[126],
     a_seed=M[127],
     a_stitchTiles=M[128],
     a_feTurbulence_type=M[129],
     a_xlink_show=M[130],
     a_xlink_actuate=M[131],
     a_target=M[132],
     a_viewTarget=M[133],
     a_attributeName=M[134],
     a_attributeType=M[135],
     a_begin=M[136],
     a_dur=M[137],
     a_min=M[138],
     a_max=M[139],
     a_restart=M[140],
     a_repeatCount=M[141],
     a_repeatDur=M[142],
     a_fill=M[143],
     a_animation_fill=M[144],
     a_calcMode=M[145],
     a_animation_values=M[146],
     a_keyTimes=M[147],
     a_keySplines=M[148],
     a_from=M[149],
     a_to=M[150],
     a_by=M[151],
     a_additive=M[152],
     a_accumulate=M[153],
     a_keyPoints=M[154],
     a_path=M[155],
     a_animateTransform_type=M[156],
     a_horiz_origin_x=M[157],
     a_horiz_origin_y=M[158],
     a_horiz_adv_x=M[159],
     a_vert_origin_x=M[160],
     a_vert_origin_y=M[161],
     a_vert_adv_y=M[162],
     a_unicode=M[163],
     a_glyph_name=M[164],
     a_orientation=M[165],
     a_arabic_form=M[166],
     a_lang=M[167],
     a_u1=M[168],
     a_u2=M[169],
     a_g1=M[170],
     a_g2=M[171],
     a_k=M[172],
     a_font_family=M[173],
     a_font_style=M[174],
     a_font_variant=M[175],
     a_font_weight=M[176],
     a_font_stretch=M[177],
     a_font_size=M[178],
     a_unicode_range=M[179],
     a_units_per_em=M[180],
     a_stemv=M[181],
     a_stemh=M[182],
     a_slope=M[183],
     a_cap_height=M[184],
     a_x_height=M[185],
     a_accent_height=M[186],
     a_ascent=M[187],
     a_widths=M[188],
     a_bbox=M[189],
     a_ideographic=M[190],
     a_alphabetic=M[191],
     a_mathematical=M[192],
     a_hanging=M[193],
     a_videographic=M[194],
     a_v_alphabetic=M[195],
     a_v_mathematical=M[196],
     a_v_hanging=M[197],
     a_underline_position=M[198],
     a_underline_thickness=M[199],
     a_strikethrough_position=M[200],
     a_strikethrough_thickness=M[201],
     a_overline_position=M[202],
     a_overline_thickness=M[203],
     a_string=M[204],
     a_name=M[205],
     a_alignment_baseline=M[206],
     a_dominant_baseline=M[207],
     a_stop_color=M[208],
     a_stop_opacity=M[209],
     a_stroke=M[210],
     a_stroke_width=M[211],
     a_stroke_linecap=M[212],
     a_stroke_linejoin=M[213],
     a_stroke_miterlimit=M[214],
     a_stroke_dasharray=M[215],
     a_stroke_dashoffset=M[216],
     a_stroke_opacity=M[217],
     a_onabort=M[218],
     a_onactivate=M[219],
     a_onbegin=M[220],
     a_onend=M[221],
     a_onerror=M[222],
     a_onfocusin=M[223],
     a_onfocusout=M[224],
     a_onload=M[225],
     a_onrepeat=M[226],
     a_onresize=M[227],
     a_onscroll=M[228],
     a_onunload=M[229],
     a_onzoom=M[230],
     a_onclick=M[231],
     a_onmousedown=M[232],
     a_onmouseup=M[233],
     a_onmouseover=M[234],
     a_onmouseout=M[235],
     a_onmousemove=M[236],
     a_ontouchstart=M[237],
     a_ontouchend=M[238],
     a_ontouchmove=M[239],
     a_ontouchcancel=M[240],
     txt=M[241],
     svg=M[242],
     g=M[243],
     defs=M[244],
     desc=M[245],
     title=M[246],
     symbol=M[247],
     use=M[248],
     image=M[249],
     switch$0=M[250],
     style=M[251],
     path=M[252],
     rect=M[253],
     circle=M[254],
     ellipse=M[255],
     line=M[256],
     polyline=M[257],
     polygon=M[258],
     text=M[259],
     tspan=M[260],
     tref=M[261],
     textPath=M[262],
     altGlyph=M[263],
     altGlyphDef=M[264],
     altGlyphItem=M[265],
     glyphRef=M[266],
     marker=M[267],
     color_profile=M[268],
     linearGradient=M[269],
     radialGradient=M[270],
     stop=M[271],
     pattern=M[272],
     clipPath=M[273],
     filter=M[274],
     feDistantLight=M[275],
     fePointLight=M[276],
     feSpotLight=M[277],
     feBlend=M[278],
     feColorMatrix=M[279],
     feComponentTransfer=M[280],
     feFuncA=M[281],
     feFuncG=M[282],
     feFuncB=M[283],
     feFuncR=M[284],
     feComposite=M[285],
     feConvolveMatrix=M[286],
     feDiffuseLighting=M[287],
     feDisplacementMap=M[288],
     feFlood=M[289],
     feGaussianBlur=M[290],
     feImage=M[291],
     feMerge=M[292],
     feMorphology=M[293],
     feOffset=M[294],
     feSpecularLighting=M[295],
     feTile=M[296],
     feTurbulence=M[297],
     cursor=M[298],
     a=M[299],
     view=M[300],
     script=M[301],
     animation=M[302],
     set=M[303],
     animateMotion=M[304],
     mpath=M[305],
     animateColor=M[306],
     animateTransform=M[307],
     font=M[308],
     glyph=M[309],
     missing_glyph=M[310],
     hkern=M[311],
     vkern=M[312],
     font_face=M[313],
     font_face_src=M[314],
     font_face_uri=M[315],
     font_face_format=M[316],
     font_face_name=M[317],
     metadata=M[318],
     foreignObject=M[319],
     pcdata$0=M[320],
     of_seq$0=M[321],
     tot=M[322],
     totl=M[323],
     toelt=M[324],
     toeltl=M[325],
     doc_toelt=M[326],
     to_xmlattribs=M[327],
     to_attrib=M[328],
     Unsafe=M[329],
     pp_elt=P[1],
     pp$0=P[2],
     Tyxml_svg=
      [0,
       Xml,
       Info,
       string_of_uri$0,
       uri_of_string$0,
       a_version,
       a_baseProfile,
       a_x,
       a_y,
       a_width,
       a_height,
       a_preserveAspectRatio,
       a_contentScriptType,
       a_contentStyleType,
       a_zoomAndPan,
       a_href,
       a_xlink_href,
       a_requiredFeatures,
       a_requiredExtensions,
       a_systemLanguage,
       a_externalRessourcesRequired,
       a_id,
       a_xml_base,
       a_xml_lang,
       a_xml_space,
       a_type,
       a_media,
       a_xlink_title,
       a_class,
       a_style,
       a_transform,
       a_viewBox,
       a_d,
       a_pathLength,
       a_rx,
       a_ry,
       a_cx,
       a_cy,
       a_r,
       a_x1,
       a_y1,
       a_x2,
       a_y2,
       a_points,
       a_x_list,
       a_y_list,
       a_dx,
       a_dy,
       a_dx_list,
       a_dy_list,
       a_lengthAdjust,
       a_textLength,
       a_text_anchor,
       a_text_decoration,
       a_text_rendering,
       a_rotate,
       a_startOffset,
       a_method,
       a_spacing,
       a_glyphRef,
       a_format,
       a_markerUnits,
       a_refX,
       a_refY,
       a_markerWidth,
       a_markerHeight,
       a_orient,
       a_local,
       a_rendering_intent,
       a_gradientUnits,
       a_gradientTransform,
       a_spreadMethod,
       a_fx,
       a_fy,
       a_offset,
       a_patternUnits,
       a_patternContentUnits,
       a_patternTransform,
       a_clipPathUnits,
       a_maskUnits,
       a_maskContentUnits,
       a_primitiveUnits,
       a_filterRes,
       a_result,
       a_in,
       a_in2,
       a_azimuth,
       a_elevation,
       a_pointsAtX,
       a_pointsAtY,
       a_pointsAtZ,
       a_specularExponent,
       a_specularConstant,
       a_limitingConeAngle,
       a_mode,
       a_feColorMatrix_type,
       a_values,
       a_transfer_type,
       a_tableValues,
       a_intercept,
       a_amplitude,
       a_exponent,
       a_transfer_offset,
       a_feComposite_operator,
       a_k1,
       a_k2,
       a_k3,
       a_k4,
       a_order,
       a_kernelMatrix,
       a_divisor,
       a_bias,
       a_kernelUnitLength,
       a_targetX,
       a_targetY,
       a_edgeMode,
       a_preserveAlpha,
       a_surfaceScale,
       a_diffuseConstant,
       a_scale,
       a_xChannelSelector,
       a_yChannelSelector,
       a_stdDeviation,
       a_feMorphology_operator,
       a_radius,
       a_baseFrenquency,
       a_numOctaves,
       a_seed,
       a_stitchTiles,
       a_feTurbulence_type,
       a_xlink_show,
       a_xlink_actuate,
       a_target,
       a_viewTarget,
       a_attributeName,
       a_attributeType,
       a_begin,
       a_dur,
       a_min,
       a_max,
       a_restart,
       a_repeatCount,
       a_repeatDur,
       a_fill,
       a_animation_fill,
       a_calcMode,
       a_animation_values,
       a_keyTimes,
       a_keySplines,
       a_from,
       a_to,
       a_by,
       a_additive,
       a_accumulate,
       a_keyPoints,
       a_path,
       a_animateTransform_type,
       a_horiz_origin_x,
       a_horiz_origin_y,
       a_horiz_adv_x,
       a_vert_origin_x,
       a_vert_origin_y,
       a_vert_adv_y,
       a_unicode,
       a_glyph_name,
       a_orientation,
       a_arabic_form,
       a_lang,
       a_u1,
       a_u2,
       a_g1,
       a_g2,
       a_k,
       a_font_family,
       a_font_style,
       a_font_variant,
       a_font_weight,
       a_font_stretch,
       a_font_size,
       a_unicode_range,
       a_units_per_em,
       a_stemv,
       a_stemh,
       a_slope,
       a_cap_height,
       a_x_height,
       a_accent_height,
       a_ascent,
       a_widths,
       a_bbox,
       a_ideographic,
       a_alphabetic,
       a_mathematical,
       a_hanging,
       a_videographic,
       a_v_alphabetic,
       a_v_mathematical,
       a_v_hanging,
       a_underline_position,
       a_underline_thickness,
       a_strikethrough_position,
       a_strikethrough_thickness,
       a_overline_position,
       a_overline_thickness,
       a_string,
       a_name,
       a_alignment_baseline,
       a_dominant_baseline,
       a_stop_color,
       a_stop_opacity,
       a_stroke,
       a_stroke_width,
       a_stroke_linecap,
       a_stroke_linejoin,
       a_stroke_miterlimit,
       a_stroke_dasharray,
       a_stroke_dashoffset,
       a_stroke_opacity,
       a_onabort,
       a_onactivate,
       a_onbegin,
       a_onend,
       a_onerror,
       a_onfocusin,
       a_onfocusout,
       a_onload,
       a_onrepeat,
       a_onresize,
       a_onscroll,
       a_onunload,
       a_onzoom,
       a_onclick,
       a_onmousedown,
       a_onmouseup,
       a_onmouseover,
       a_onmouseout,
       a_onmousemove,
       a_ontouchstart,
       a_ontouchend,
       a_ontouchmove,
       a_ontouchcancel,
       txt,
       svg,
       g,
       defs,
       desc,
       title,
       symbol,
       use,
       image,
       switch$0,
       style,
       path,
       rect,
       circle,
       ellipse,
       line,
       polyline,
       polygon,
       text,
       tspan,
       tref,
       textPath,
       altGlyph,
       altGlyphDef,
       altGlyphItem,
       glyphRef,
       marker,
       color_profile,
       linearGradient,
       radialGradient,
       stop,
       pattern,
       clipPath,
       filter,
       feDistantLight,
       fePointLight,
       feSpotLight,
       feBlend,
       feColorMatrix,
       feComponentTransfer,
       feFuncA,
       feFuncG,
       feFuncB,
       feFuncR,
       feComposite,
       feConvolveMatrix,
       feDiffuseLighting,
       feDisplacementMap,
       feFlood,
       feGaussianBlur,
       feImage,
       feMerge,
       feMorphology,
       feOffset,
       feSpecularLighting,
       feTile,
       feTurbulence,
       cursor,
       a,
       view,
       script,
       animation,
       set,
       animateMotion,
       mpath,
       animateColor,
       animateTransform,
       font,
       glyph,
       missing_glyph,
       hkern,
       vkern,
       font_face,
       font_face_src,
       font_face_uri,
       font_face_format,
       font_face_name,
       metadata,
       foreignObject,
       pcdata$0,
       of_seq$0,
       tot,
       totl,
       toelt,
       toeltl,
       doc_toelt,
       to_xmlattribs,
       to_attrib,
       Unsafe,
       pp$0,
       pp_elt,
       Make_printer];
    caml_register_global(19,Tyxml_svg,"Tyxml_svg");
    var
     M$0=
      caml_call1
       (caml_call1
         (Html_f[1],
          [0,
           _d_,
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style]),
        [0,
         Info,
         string_of_uri$0,
         uri_of_string$0,
         a_version,
         a_baseProfile,
         a_x,
         a_y,
         a_width,
         a_height,
         a_preserveAspectRatio,
         a_contentScriptType,
         a_contentStyleType,
         a_zoomAndPan,
         a_href,
         a_xlink_href,
         a_requiredFeatures,
         a_requiredExtensions,
         a_systemLanguage,
         a_externalRessourcesRequired,
         a_id,
         a_xml_base,
         a_xml_lang,
         a_xml_space,
         a_type,
         a_media,
         a_xlink_title,
         a_class,
         a_style,
         a_transform,
         a_viewBox,
         a_d,
         a_pathLength,
         a_rx,
         a_ry,
         a_cx,
         a_cy,
         a_r,
         a_x1,
         a_y1,
         a_x2,
         a_y2,
         a_points,
         a_x_list,
         a_y_list,
         a_dx,
         a_dy,
         a_dx_list,
         a_dy_list,
         a_lengthAdjust,
         a_textLength,
         a_text_anchor,
         a_text_decoration,
         a_text_rendering,
         a_rotate,
         a_startOffset,
         a_method,
         a_spacing,
         a_glyphRef,
         a_format,
         a_markerUnits,
         a_refX,
         a_refY,
         a_markerWidth,
         a_markerHeight,
         a_orient,
         a_local,
         a_rendering_intent,
         a_gradientUnits,
         a_gradientTransform,
         a_spreadMethod,
         a_fx,
         a_fy,
         a_offset,
         a_patternUnits,
         a_patternContentUnits,
         a_patternTransform,
         a_clipPathUnits,
         a_maskUnits,
         a_maskContentUnits,
         a_primitiveUnits,
         a_filterRes,
         a_result,
         a_in,
         a_in2,
         a_azimuth,
         a_elevation,
         a_pointsAtX,
         a_pointsAtY,
         a_pointsAtZ,
         a_specularExponent,
         a_specularConstant,
         a_limitingConeAngle,
         a_mode,
         a_feColorMatrix_type,
         a_values,
         a_transfer_type,
         a_tableValues,
         a_intercept,
         a_amplitude,
         a_exponent,
         a_transfer_offset,
         a_feComposite_operator,
         a_k1,
         a_k2,
         a_k3,
         a_k4,
         a_order,
         a_kernelMatrix,
         a_divisor,
         a_bias,
         a_kernelUnitLength,
         a_targetX,
         a_targetY,
         a_edgeMode,
         a_preserveAlpha,
         a_surfaceScale,
         a_diffuseConstant,
         a_scale,
         a_xChannelSelector,
         a_yChannelSelector,
         a_stdDeviation,
         a_feMorphology_operator,
         a_radius,
         a_baseFrenquency,
         a_numOctaves,
         a_seed,
         a_stitchTiles,
         a_feTurbulence_type,
         a_xlink_show,
         a_xlink_actuate,
         a_target,
         a_viewTarget,
         a_attributeName,
         a_attributeType,
         a_begin,
         a_dur,
         a_min,
         a_max,
         a_restart,
         a_repeatCount,
         a_repeatDur,
         a_fill,
         a_animation_fill,
         a_calcMode,
         a_animation_values,
         a_keyTimes,
         a_keySplines,
         a_from,
         a_to,
         a_by,
         a_additive,
         a_accumulate,
         a_keyPoints,
         a_path,
         a_animateTransform_type,
         a_horiz_origin_x,
         a_horiz_origin_y,
         a_horiz_adv_x,
         a_vert_origin_x,
         a_vert_origin_y,
         a_vert_adv_y,
         a_unicode,
         a_glyph_name,
         a_orientation,
         a_arabic_form,
         a_lang,
         a_u1,
         a_u2,
         a_g1,
         a_g2,
         a_k,
         a_font_family,
         a_font_style,
         a_font_variant,
         a_font_weight,
         a_font_stretch,
         a_font_size,
         a_unicode_range,
         a_units_per_em,
         a_stemv,
         a_stemh,
         a_slope,
         a_cap_height,
         a_x_height,
         a_accent_height,
         a_ascent,
         a_widths,
         a_bbox,
         a_ideographic,
         a_alphabetic,
         a_mathematical,
         a_hanging,
         a_videographic,
         a_v_alphabetic,
         a_v_mathematical,
         a_v_hanging,
         a_underline_position,
         a_underline_thickness,
         a_strikethrough_position,
         a_strikethrough_thickness,
         a_overline_position,
         a_overline_thickness,
         a_string,
         a_name,
         a_alignment_baseline,
         a_dominant_baseline,
         a_stop_color,
         a_stop_opacity,
         a_stroke,
         a_stroke_width,
         a_stroke_linecap,
         a_stroke_linejoin,
         a_stroke_miterlimit,
         a_stroke_dasharray,
         a_stroke_dashoffset,
         a_stroke_opacity,
         a_onabort,
         a_onactivate,
         a_onbegin,
         a_onend,
         a_onerror,
         a_onfocusin,
         a_onfocusout,
         a_onload,
         a_onrepeat,
         a_onresize,
         a_onscroll,
         a_onunload,
         a_onzoom,
         a_onclick,
         a_onmousedown,
         a_onmouseup,
         a_onmouseover,
         a_onmouseout,
         a_onmousemove,
         a_ontouchstart,
         a_ontouchend,
         a_ontouchmove,
         a_ontouchcancel,
         txt,
         svg,
         g,
         defs,
         desc,
         title,
         symbol,
         use,
         image,
         switch$0,
         style,
         path,
         rect,
         circle,
         ellipse,
         line,
         polyline,
         polygon,
         text,
         tspan,
         tref,
         textPath,
         altGlyph,
         altGlyphDef,
         altGlyphItem,
         glyphRef,
         marker,
         color_profile,
         linearGradient,
         radialGradient,
         stop,
         pattern,
         clipPath,
         filter,
         feDistantLight,
         fePointLight,
         feSpotLight,
         feBlend,
         feColorMatrix,
         feComponentTransfer,
         feFuncA,
         feFuncG,
         feFuncB,
         feFuncR,
         feComposite,
         feConvolveMatrix,
         feDiffuseLighting,
         feDisplacementMap,
         feFlood,
         feGaussianBlur,
         feImage,
         feMerge,
         feMorphology,
         feOffset,
         feSpecularLighting,
         feTile,
         feTurbulence,
         cursor,
         a,
         view,
         script,
         animation,
         set,
         animateMotion,
         mpath,
         animateColor,
         animateTransform,
         font,
         glyph,
         missing_glyph,
         hkern,
         vkern,
         font_face,
         font_face_src,
         font_face_uri,
         font_face_format,
         font_face_name,
         metadata,
         foreignObject,
         pcdata$0,
         of_seq$0,
         tot,
         totl,
         toelt,
         toeltl,
         doc_toelt,
         to_xmlattribs,
         to_attrib,
         Unsafe]),
     _g_=[0,M$0[2],M$0[332],M$0[334]],
     P$0=
      caml_call1
       (caml_call1
         (Xml_print[8],
          [0,
           _d_,
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style,
           aname,
           acontent,
           content]),
        _g_),
     _h_=[0,M$0[2],M$0[332],M$0[334]],
     Make_printer$0=
      caml_call1
       (caml_call1
         (Xml_print[11],
          [0,
           _d_,
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style,
           aname,
           acontent,
           content]),
        _h_),
     Xml$0=M$0[1],
     Info$0=M$0[2],
     string_of_uri$1=M$0[3],
     uri_of_string$1=M$0[4],
     a_class$0=M$0[5],
     a_user_data=M$0[6],
     a_id$0=M$0[7],
     a_title=M$0[8],
     a_xml_lang$0=M$0[9],
     a_lang$0=M$0[10],
     a_onabort$0=M$0[11],
     a_onafterprint=M$0[12],
     a_onbeforeprint=M$0[13],
     a_onbeforeunload=M$0[14],
     a_onblur=M$0[15],
     a_oncanplay=M$0[16],
     a_oncanplaythrough=M$0[17],
     a_onchange=M$0[18],
     a_ondurationchange=M$0[19],
     a_onemptied=M$0[20],
     a_onended=M$0[21],
     a_onerror$0=M$0[22],
     a_onfocus=M$0[23],
     a_onformchange=M$0[24],
     a_onforminput=M$0[25],
     a_onhashchange=M$0[26],
     a_oninput=M$0[27],
     a_oninvalid=M$0[28],
     a_onmousewheel=M$0[29],
     a_onoffline=M$0[30],
     a_ononline=M$0[31],
     a_onpause=M$0[32],
     a_onplay=M$0[33],
     a_onplaying=M$0[34],
     a_onpagehide=M$0[35],
     a_onpageshow=M$0[36],
     a_onpopstate=M$0[37],
     a_onprogress=M$0[38],
     a_onratechange=M$0[39],
     a_onreadystatechange=M$0[40],
     a_onredo=M$0[41],
     a_onresize$0=M$0[42],
     a_onscroll$0=M$0[43],
     a_onseeked=M$0[44],
     a_onseeking=M$0[45],
     a_onselect=M$0[46],
     a_onshow=M$0[47],
     a_onstalled=M$0[48],
     a_onstorage=M$0[49],
     a_onsubmit=M$0[50],
     a_onsuspend=M$0[51],
     a_ontimeupdate=M$0[52],
     a_onundo=M$0[53],
     a_onunload$0=M$0[54],
     a_onvolumechange=M$0[55],
     a_onwaiting=M$0[56],
     a_onload$0=M$0[57],
     a_onloadeddata=M$0[58],
     a_onloadedmetadata=M$0[59],
     a_onloadstart=M$0[60],
     a_onmessage=M$0[61],
     a_onclick$0=M$0[62],
     a_oncontextmenu=M$0[63],
     a_ondblclick=M$0[64],
     a_ondrag=M$0[65],
     a_ondragend=M$0[66],
     a_ondragenter=M$0[67],
     a_ondragleave=M$0[68],
     a_ondragover=M$0[69],
     a_ondragstart=M$0[70],
     a_ondrop=M$0[71],
     a_onmousedown$0=M$0[72],
     a_onmouseup$0=M$0[73],
     a_onmouseover$0=M$0[74],
     a_onmousemove$0=M$0[75],
     a_onmouseout$0=M$0[76],
     a_ontouchstart$0=M$0[77],
     a_ontouchend$0=M$0[78],
     a_ontouchmove$0=M$0[79],
     a_ontouchcancel$0=M$0[80],
     a_onkeypress=M$0[81],
     a_onkeydown=M$0[82],
     a_onkeyup=M$0[83],
     a_autocomplete=M$0[84],
     a_async=M$0[85],
     a_autofocus=M$0[86],
     a_autoplay=M$0[87],
     a_muted=M$0[88],
     a_crossorigin=M$0[89],
     a_mediagroup=M$0[90],
     a_challenge=M$0[91],
     a_contenteditable=M$0[92],
     a_contextmenu=M$0[93],
     a_controls=M$0[94],
     a_dir=M$0[95],
     a_draggable=M$0[96],
     a_form=M$0[97],
     a_formaction=M$0[98],
     a_formenctype=M$0[99],
     a_formnovalidate=M$0[100],
     a_formtarget=M$0[101],
     a_hidden=M$0[102],
     a_high=M$0[103],
     a_icon=M$0[104],
     a_ismap=M$0[105],
     a_keytype=M$0[106],
     a_list=M$0[107],
     a_loop=M$0[108],
     a_low=M$0[109],
     a_max$0=M$0[110],
     a_input_max=M$0[111],
     a_min$0=M$0[112],
     a_input_min=M$0[113],
     a_inputmode=M$0[114],
     a_novalidate=M$0[115],
     a_open=M$0[116],
     a_optimum=M$0[117],
     a_pattern=M$0[118],
     a_placeholder=M$0[119],
     a_poster=M$0[120],
     a_preload=M$0[121],
     a_pubdate=M$0[122],
     a_radiogroup=M$0[123],
     a_required=M$0[124],
     a_reversed=M$0[125],
     a_sandbox=M$0[126],
     a_spellcheck=M$0[127],
     a_scoped=M$0[128],
     a_seamless=M$0[129],
     a_sizes=M$0[130],
     a_span=M$0[131],
     a_srclang=M$0[132],
     a_srcset=M$0[133],
     a_img_sizes=M$0[134],
     a_start=M$0[135],
     a_step=M$0[136],
     a_wrap=M$0[137],
     a_version$0=M$0[138],
     a_xmlns=M$0[139],
     a_manifest=M$0[140],
     a_cite=M$0[141],
     a_xml_space$0=M$0[142],
     a_accesskey=M$0[143],
     a_charset=M$0[144],
     a_accept_charset=M$0[145],
     a_accept=M$0[146],
     a_href$0=M$0[147],
     a_hreflang=M$0[148],
     a_download=M$0[149],
     a_rel=M$0[150],
     a_tabindex=M$0[151],
     a_mime_type=M$0[152],
     a_datetime=M$0[153],
     a_action=M$0[154],
     a_checked=M$0[155],
     a_cols=M$0[156],
     a_enctype=M$0[157],
     a_label_for=M$0[158],
     a_for=M$0[159],
     a_output_for=M$0[160],
     a_for_list=M$0[161],
     a_maxlength=M$0[162],
     a_minlength=M$0[163],
     a_method$0=M$0[164],
     a_formmethod=M$0[165],
     a_multiple=M$0[166],
     a_name$0=M$0[167],
     a_rows=M$0[168],
     a_selected=M$0[169],
     a_size=M$0[170],
     a_src=M$0[171],
     a_input_type=M$0[172],
     a_text_value=M$0[173],
     a_int_value=M$0[174],
     a_value=M$0[175],
     a_float_value=M$0[176],
     a_disabled=M$0[177],
     a_readonly=M$0[178],
     a_button_type=M$0[179],
     a_command_type=M$0[180],
     a_menu_type=M$0[181],
     a_label=M$0[182],
     a_align=M$0[183],
     a_axis=M$0[184],
     a_colspan=M$0[185],
     a_headers=M$0[186],
     a_rowspan=M$0[187],
     a_scope=M$0[188],
     a_summary=M$0[189],
     a_border=M$0[190],
     a_rules=M$0[191],
     a_char=M$0[192],
     a_alt=M$0[193],
     a_height$0=M$0[194],
     a_width$0=M$0[195],
     a_shape=M$0[196],
     a_coords=M$0[197],
     a_usemap=M$0[198],
     a_data=M$0[199],
     a_codetype=M$0[200],
     a_frameborder=M$0[201],
     a_marginheight=M$0[202],
     a_marginwidth=M$0[203],
     a_scrolling=M$0[204],
     a_target$0=M$0[205],
     a_content=M$0[206],
     a_http_equiv=M$0[207],
     a_defer=M$0[208],
     a_media$0=M$0[209],
     a_style$0=M$0[210],
     a_property=M$0[211],
     a_role=M$0[212],
     a_aria=M$0[213],
     txt$0=M$0[214],
     html=M$0[215],
     head=M$0[216],
     base=M$0[217],
     title$0=M$0[218],
     body=M$0[219],
     svg$0=M$0[220],
     footer=M$0[221],
     header=M$0[222],
     section=M$0[223],
     nav=M$0[224],
     h1=M$0[225],
     h2=M$0[226],
     h3=M$0[227],
     h4=M$0[228],
     h5=M$0[229],
     h6=M$0[230],
     hgroup=M$0[231],
     address=M$0[232],
     article=M$0[233],
     aside=M$0[234],
     main=M$0[235],
     p=M$0[236],
     pre=M$0[237],
     blockquote=M$0[238],
     div=M$0[239],
     dl=M$0[240],
     ol=M$0[241],
     ul=M$0[242],
     dd=M$0[243],
     dt=M$0[244],
     li=M$0[245],
     figcaption=M$0[246],
     figure=M$0[247],
     hr=M$0[248],
     b=M$0[249],
     i=M$0[250],
     u=M$0[251],
     small=M$0[252],
     sub=M$0[253],
     sup=M$0[254],
     mark=M$0[255],
     wbr=M$0[256],
     bdo=M$0[257],
     abbr=M$0[258],
     br=M$0[259],
     cite=M$0[260],
     code=M$0[261],
     dfn=M$0[262],
     em=M$0[263],
     kbd=M$0[264],
     q=M$0[265],
     samp=M$0[266],
     span=M$0[267],
     strong=M$0[268],
     time=M$0[269],
     var$0=M$0[270],
     a$0=M$0[271],
     del=M$0[272],
     ins=M$0[273],
     img=M$0[274],
     iframe=M$0[275],
     object=M$0[276],
     param=M$0[277],
     embed=M$0[278],
     audio=M$0[279],
     video=M$0[280],
     canvas=M$0[281],
     source=M$0[282],
     area=M$0[283],
     map=M$0[284],
     caption=M$0[285],
     table=M$0[286],
     tablex=M$0[287],
     colgroup=M$0[288],
     col=M$0[289],
     thead=M$0[290],
     tbody=M$0[291],
     tfoot=M$0[292],
     td=M$0[293],
     th=M$0[294],
     tr=M$0[295],
     form=M$0[296],
     fieldset=M$0[297],
     legend=M$0[298],
     label=M$0[299],
     input=M$0[300],
     button=M$0[301],
     select=M$0[302],
     datalist=M$0[303],
     optgroup=M$0[304],
     option=M$0[305],
     textarea=M$0[306],
     keygen=M$0[307],
     progress=M$0[308],
     meter=M$0[309],
     output_elt=M$0[310],
     entity$0=M$0[311],
     space=M$0[312],
     cdata$0=M$0[313],
     cdata_script$0=M$0[314],
     cdata_style$0=M$0[315],
     details=M$0[316],
     summary=M$0[317],
     command=M$0[318],
     menu=M$0[319],
     script$0=M$0[320],
     noscript=M$0[321],
     meta=M$0[322],
     style$0=M$0[323],
     link=M$0[324],
     rt=M$0[325],
     rp=M$0[326],
     ruby=M$0[327],
     pcdata$1=M$0[328],
     of_seq$1=M$0[329],
     tot$0=M$0[330],
     totl$0=M$0[331],
     toelt$0=M$0[332],
     toeltl$0=M$0[333],
     doc_toelt$0=M$0[334],
     to_xmlattribs$0=M$0[335],
     to_attrib$0=M$0[336],
     Unsafe$0=M$0[337],
     pp_elt$0=P$0[1],
     pp$1=P$0[2],
     Tyxml_html=
      [0,
       Xml$0,
       Info$0,
       string_of_uri$1,
       uri_of_string$1,
       a_class$0,
       a_user_data,
       a_id$0,
       a_title,
       a_xml_lang$0,
       a_lang$0,
       a_onabort$0,
       a_onafterprint,
       a_onbeforeprint,
       a_onbeforeunload,
       a_onblur,
       a_oncanplay,
       a_oncanplaythrough,
       a_onchange,
       a_ondurationchange,
       a_onemptied,
       a_onended,
       a_onerror$0,
       a_onfocus,
       a_onformchange,
       a_onforminput,
       a_onhashchange,
       a_oninput,
       a_oninvalid,
       a_onmousewheel,
       a_onoffline,
       a_ononline,
       a_onpause,
       a_onplay,
       a_onplaying,
       a_onpagehide,
       a_onpageshow,
       a_onpopstate,
       a_onprogress,
       a_onratechange,
       a_onreadystatechange,
       a_onredo,
       a_onresize$0,
       a_onscroll$0,
       a_onseeked,
       a_onseeking,
       a_onselect,
       a_onshow,
       a_onstalled,
       a_onstorage,
       a_onsubmit,
       a_onsuspend,
       a_ontimeupdate,
       a_onundo,
       a_onunload$0,
       a_onvolumechange,
       a_onwaiting,
       a_onload$0,
       a_onloadeddata,
       a_onloadedmetadata,
       a_onloadstart,
       a_onmessage,
       a_onclick$0,
       a_oncontextmenu,
       a_ondblclick,
       a_ondrag,
       a_ondragend,
       a_ondragenter,
       a_ondragleave,
       a_ondragover,
       a_ondragstart,
       a_ondrop,
       a_onmousedown$0,
       a_onmouseup$0,
       a_onmouseover$0,
       a_onmousemove$0,
       a_onmouseout$0,
       a_ontouchstart$0,
       a_ontouchend$0,
       a_ontouchmove$0,
       a_ontouchcancel$0,
       a_onkeypress,
       a_onkeydown,
       a_onkeyup,
       a_autocomplete,
       a_async,
       a_autofocus,
       a_autoplay,
       a_muted,
       a_crossorigin,
       a_mediagroup,
       a_challenge,
       a_contenteditable,
       a_contextmenu,
       a_controls,
       a_dir,
       a_draggable,
       a_form,
       a_formaction,
       a_formenctype,
       a_formnovalidate,
       a_formtarget,
       a_hidden,
       a_high,
       a_icon,
       a_ismap,
       a_keytype,
       a_list,
       a_loop,
       a_low,
       a_max$0,
       a_input_max,
       a_min$0,
       a_input_min,
       a_inputmode,
       a_novalidate,
       a_open,
       a_optimum,
       a_pattern,
       a_placeholder,
       a_poster,
       a_preload,
       a_pubdate,
       a_radiogroup,
       a_required,
       a_reversed,
       a_sandbox,
       a_spellcheck,
       a_scoped,
       a_seamless,
       a_sizes,
       a_span,
       a_srclang,
       a_srcset,
       a_img_sizes,
       a_start,
       a_step,
       a_wrap,
       a_version$0,
       a_xmlns,
       a_manifest,
       a_cite,
       a_xml_space$0,
       a_accesskey,
       a_charset,
       a_accept_charset,
       a_accept,
       a_href$0,
       a_hreflang,
       a_download,
       a_rel,
       a_tabindex,
       a_mime_type,
       a_datetime,
       a_action,
       a_checked,
       a_cols,
       a_enctype,
       a_label_for,
       a_for,
       a_output_for,
       a_for_list,
       a_maxlength,
       a_minlength,
       a_method$0,
       a_formmethod,
       a_multiple,
       a_name$0,
       a_rows,
       a_selected,
       a_size,
       a_src,
       a_input_type,
       a_text_value,
       a_int_value,
       a_value,
       a_float_value,
       a_disabled,
       a_readonly,
       a_button_type,
       a_command_type,
       a_menu_type,
       a_label,
       a_align,
       a_axis,
       a_colspan,
       a_headers,
       a_rowspan,
       a_scope,
       a_summary,
       a_border,
       a_rules,
       a_char,
       a_alt,
       a_height$0,
       a_width$0,
       a_shape,
       a_coords,
       a_usemap,
       a_data,
       a_codetype,
       a_frameborder,
       a_marginheight,
       a_marginwidth,
       a_scrolling,
       a_target$0,
       a_content,
       a_http_equiv,
       a_defer,
       a_media$0,
       a_style$0,
       a_property,
       a_role,
       a_aria,
       txt$0,
       html,
       head,
       base,
       title$0,
       body,
       svg$0,
       footer,
       header,
       section,
       nav,
       h1,
       h2,
       h3,
       h4,
       h5,
       h6,
       hgroup,
       address,
       article,
       aside,
       main,
       p,
       pre,
       blockquote,
       div,
       dl,
       ol,
       ul,
       dd,
       dt,
       li,
       figcaption,
       figure,
       hr,
       b,
       i,
       u,
       small,
       sub,
       sup,
       mark,
       wbr,
       bdo,
       abbr,
       br,
       cite,
       code,
       dfn,
       em,
       kbd,
       q,
       samp,
       span,
       strong,
       time,
       var$0,
       a$0,
       del,
       ins,
       img,
       iframe,
       object,
       param,
       embed,
       audio,
       video,
       canvas,
       source,
       area,
       map,
       caption,
       table,
       tablex,
       colgroup,
       col,
       thead,
       tbody,
       tfoot,
       td,
       th,
       tr,
       form,
       fieldset,
       legend,
       label,
       input,
       button,
       select,
       datalist,
       optgroup,
       option,
       textarea,
       keygen,
       progress,
       meter,
       output_elt,
       entity$0,
       space,
       cdata$0,
       cdata_script$0,
       cdata_style$0,
       details,
       summary,
       command,
       menu,
       script$0,
       noscript,
       meta,
       style$0,
       link,
       rt,
       rp,
       ruby,
       pcdata$1,
       of_seq$1,
       tot$0,
       totl$0,
       toelt$0,
       toeltl$0,
       doc_toelt$0,
       to_xmlattribs$0,
       to_attrib$0,
       Unsafe$0,
       pp$1,
       pp_elt$0,
       Make_printer$0];
    caml_register_global(21,Tyxml_html,"Tyxml_html");
    var Tyxml=[0,0,0,0,0];
    caml_register_global(22,Tyxml,"Tyxml");
    return}
  (function(){return this}()));


//# 1 ".js/result/result.cma.js"
(function(joo_global_object)
   {"use strict";
    var runtime=joo_global_object.jsoo_runtime,Result=[0];
    runtime.caml_register_global(0,Result,"Result");
    return}
  (function(){return this}()));


//# 1 ".js/lwt/lwt.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_new_string=runtime.caml_new_string,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_update_dummy=runtime.caml_update_dummy,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Lwt_sequence_Empty=caml_new_string("Lwt_sequence.Empty"),
     cst_Lwt_wakeup_later_result=caml_new_string("Lwt.wakeup_later_result"),
     cst_Lwt_wakeup_result=caml_new_string("Lwt.wakeup_result"),
     cst_Fatal_error_exception=caml_new_string("Fatal error: exception "),
     cst_Lwt_Canceled=caml_new_string("Lwt.Canceled"),
     state_return_unit=[0,0],
     cst$3=caml_new_string("    "),
     cst$4=caml_new_string("   "),
     cst$5=caml_new_string(" |"),
     cst_Lwt_stream_parse=caml_new_string("Lwt_stream.parse"),
     cst_Lwt_stream_create_bounded=
      caml_new_string("Lwt_stream.create_bounded"),
     cst_Lwt_stream_bounded_push_resize=
      caml_new_string("Lwt_stream.bounded_push#resize"),
     cst=caml_new_string(""),
     cst$0=caml_new_string(""),
     cst$1=caml_new_string(""),
     cst$2=caml_new_string(""),
     cst_Lwt_stream_clone=caml_new_string("Lwt_stream.clone"),
     shared=
      [0,
       caml_new_string("blocked"),
       caml_new_string("close"),
       caml_new_string("push"),
       caml_new_string("count"),
       caml_new_string("size"),
       caml_new_string("set_reference"),
       caml_new_string("resize"),
       caml_new_string("closed")],
     cst_Lwt_stream_Closed=caml_new_string("Lwt_stream.Closed"),
     cst_Lwt_stream_Full=caml_new_string("Lwt_stream.Full"),
     cst_Lwt_stream_Empty=caml_new_string("Lwt_stream.Empty"),
     cst_Lwt_switch_Off=caml_new_string("Lwt_switch.Off"),
     Not_found=global_data.Not_found,
     Assert_failure=global_data.Assert_failure,
     Stdlib_list=global_data.Stdlib__list,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Stdlib_random=global_data.Stdlib__random,
     Invalid_argument=global_data.Invalid_argument,
     Failure=global_data.Failure,
     Stdlib_queue=global_data.Stdlib__queue,
     Stdlib=global_data.Stdlib,
     Stdlib_printexc=global_data.Stdlib__printexc,
     Stdlib_map=global_data.Stdlib__map,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Stdlib_printf=global_data.Stdlib__printf,
     CamlinternalOO=global_data.CamlinternalOO,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_array=global_data.Stdlib__array,
     Empty=[248,cst_Lwt_sequence_Empty,caml_fresh_oo_id(0)],
     _C_=[0,caml_new_string("src/core/lwt.ml"),855,8],
     _E_=[0,caml_new_string("src/core/lwt.ml"),1031,8],
     _P_=[0,caml_new_string("src/core/lwt.ml"),1316,14],
     _N_=[0,caml_new_string("src/core/lwt.ml"),1280,35],
     _O_=[0,caml_new_string("src/core/lwt.ml"),1283,8],
     _L_=[0,caml_new_string("src/core/lwt.ml"),1261,35],
     _M_=[0,caml_new_string("src/core/lwt.ml"),1264,8],
     _J_=[0,caml_new_string("src/core/lwt.ml"),1242,35],
     _K_=[0,caml_new_string("src/core/lwt.ml"),1245,8],
     _F_=[0,caml_new_string("src/core/lwt.ml"),1125,8],
     _D_=[0,caml_new_string("src/core/lwt.ml"),898,13],
     _B_=[0,caml_new_string("src/core/lwt.ml"),850,8],
     _z_=[0,caml_new_string("src/core/lwt.ml"),837,35],
     _A_=[0,caml_new_string("src/core/lwt.ml"),839,8],
     _x_=[0,caml_new_string("src/core/lwt.ml"),822,35],
     _y_=[0,caml_new_string("src/core/lwt.ml"),824,8],
     _w_=[0,caml_new_string("src/core/lwt.ml"),808,16],
     _u_=[0,caml_new_string("src/core/lwt.ml"),798,35],
     _v_=[0,caml_new_string("src/core/lwt.ml"),801,8],
     _s_=[0,caml_new_string("src/core/lwt.ml"),780,35],
     _t_=[0,caml_new_string("src/core/lwt.ml"),782,8],
     _q_=[0,caml_new_string("src/core/lwt.ml"),764,35],
     _r_=[0,caml_new_string("src/core/lwt.ml"),766,8],
     _o_=[0,caml_new_string("src/core/lwt.ml"),749,35],
     _p_=[0,caml_new_string("src/core/lwt.ml"),751,8],
     _m_=[0,caml_new_string("src/core/lwt.ml"),733,35],
     _n_=[0,caml_new_string("src/core/lwt.ml"),735,8],
     _k_=[0,caml_new_string("src/core/lwt.ml"),716,35],
     _l_=[0,caml_new_string("src/core/lwt.ml"),719,8],
     _g_=[0,caml_new_string("src/core/lwt.ml"),694,35],
     _h_=[0,caml_new_string("src/core/lwt.ml"),697,8],
     _c_=[0,caml_new_string("src/core/lwt.ml"),672,35],
     _d_=[0,caml_new_string("src/core/lwt.ml"),675,8],
     _b_=[0,caml_new_string("src/core/lwt.ml"),511,8],
     _a_=[0,caml_new_string("src/core/lwt.ml"),500,9],
     _V_=[0,0,0],
     _$_=[0,[4,6,[0,2,2],0,[12,32,0]],caml_new_string("%02x ")],
     ___=
      [0,
       [4,6,[0,2,8],0,[11,caml_new_string("|  "),0]],
       caml_new_string("%08x|  ")],
     _X_=
      [0,
       caml_new_string("size"),
       caml_new_string("set_reference"),
       caml_new_string("resize"),
       caml_new_string("push"),
       caml_new_string("count"),
       caml_new_string("closed"),
       caml_new_string("close"),
       caml_new_string("blocked")],
     _Y_=[0,caml_new_string("closed")],
     _aa_=[0,caml_new_string("src/core/lwt_pqueue.ml"),91,17];
    function get(node){return node[3]}
    function set(node,data){node[3] = data;return 0}
    function remove(node)
     {var
       _gm_=node[4],
       _gn_=
        _gm_?(node[4] = 0,node[1][2] = node[2],node[2][1] = node[1],0):_gm_;
      return _gn_}
    function create(param)
     {var seq=[];caml_update_dummy(seq,[0,seq,seq]);return seq}
    function is_empty(seq){return seq[2] === seq?1:0}
    function length(seq)
     {var curr=seq[2],len=0;
      for(;;)
       {if(curr === seq)return len;
        if(curr[4])
         {var len$0=len + 1 | 0,curr$0=curr[2],curr=curr$0,len=len$0;continue}
        var curr$1=curr[2],curr=curr$1;
        continue}}
    function add_l(data,seq)
     {var node=[0,seq,seq[2],data,1];
      seq[2][1] = node;
      seq[2] = node;
      return node}
    function add_r(data,seq)
     {var node=[0,seq[1],seq,data,1];
      seq[1][2] = node;
      seq[1] = node;
      return node}
    function take_l(seq)
     {if(is_empty(seq))throw Empty;
      var node=seq[2];
      remove(node);
      return node[3]}
    function take_r(seq)
     {if(is_empty(seq))throw Empty;
      var node=seq[1];
      remove(node);
      return node[3]}
    function take_opt_l(seq)
     {if(is_empty(seq))return 0;
      var node=seq[2];
      remove(node);
      return [0,node[3]]}
    function take_opt_r(seq)
     {if(is_empty(seq))return 0;
      var node=seq[1];
      remove(node);
      return [0,node[3]]}
    function transfer_l(s1,s2)
     {s2[2][1] = s1[1];
      s1[1][2] = s2[2];
      s2[2] = s1[2];
      s1[2][1] = s2;
      s1[1] = s1;
      s1[2] = s1;
      return 0}
    function transfer_r(s1,s2)
     {s2[1][2] = s1[2];
      s1[2][1] = s2[1];
      s2[1] = s1[1];
      s1[1][2] = s2;
      s1[1] = s1;
      s1[2] = s1;
      return 0}
    function iter_l(f,seq)
     {var curr=seq[2];
      for(;;)
       {var _gl_=curr !== seq?1:0;
        if(_gl_)
         {if(curr[4])caml_call1(f,curr[3]);
          var curr$0=curr[2],curr=curr$0;
          continue}
        return _gl_}}
    function iter_r(f,seq)
     {var curr=seq[1];
      for(;;)
       {var _gk_=curr !== seq?1:0;
        if(_gk_)
         {if(curr[4])caml_call1(f,curr[3]);
          var curr$0=curr[1],curr=curr$0;
          continue}
        return _gk_}}
    function iter_node_l(f,seq)
     {var curr=seq[2];
      for(;;)
       {var _gj_=curr !== seq?1:0;
        if(_gj_)
         {if(curr[4])caml_call1(f,curr);
          var curr$0=curr[2],curr=curr$0;
          continue}
        return _gj_}}
    function iter_node_r(f,seq)
     {var curr=seq[1];
      for(;;)
       {var _gi_=curr !== seq?1:0;
        if(_gi_)
         {if(curr[4])caml_call1(f,curr);
          var curr$0=curr[1],curr=curr$0;
          continue}
        return _gi_}}
    function fold_l(f,seq,acc)
     {var curr=seq[2],acc$0=acc;
      for(;;)
       {if(curr === seq)return acc$0;
        if(curr[4])
         {var
           acc$1=caml_call2(f,curr[3],acc$0),
           curr$0=curr[2],
           curr=curr$0,
           acc$0=acc$1;
          continue}
        var curr$1=curr[2],curr=curr$1;
        continue}}
    function fold_r(f,seq,acc)
     {var curr=seq[1],acc$0=acc;
      for(;;)
       {if(curr === seq)return acc$0;
        if(curr[4])
         {var
           acc$1=caml_call2(f,curr[3],acc$0),
           curr$0=curr[1],
           curr=curr$0,
           acc$0=acc$1;
          continue}
        var curr$1=curr[2],curr=curr$1;
        continue}}
    function find_node_l(f,seq)
     {var curr=seq[2];
      for(;;)
       {if(curr !== seq)
         {if(curr[4])
           {if(caml_call1(f,curr[3]))return curr;
            var curr$0=curr[2],curr=curr$0;
            continue}
          var curr$1=curr[2],curr=curr$1;
          continue}
        throw Not_found}}
    function find_node_r(f,seq)
     {var curr=seq[1];
      for(;;)
       {if(curr !== seq)
         {if(curr[4])
           {if(caml_call1(f,curr[3]))return curr;
            var curr$0=curr[1],curr=curr$0;
            continue}
          var curr$1=curr[1],curr=curr$1;
          continue}
        throw Not_found}}
    function find_node_opt_l(f,seq)
     {try
       {var _gg_=[0,find_node_l(f,seq)];return _gg_}
      catch(_gh_)
       {_gh_ = caml_wrap_exception(_gh_);
        if(_gh_ === Not_found)return 0;
        throw _gh_}}
    function find_node_opt_r(f,seq)
     {try
       {var _ge_=[0,find_node_r(f,seq)];return _ge_}
      catch(_gf_)
       {_gf_ = caml_wrap_exception(_gf_);
        if(_gf_ === Not_found)return 0;
        throw _gf_}}
    var
     Lwt_sequence=
      [0,
       get,
       set,
       remove,
       create,
       is_empty,
       length,
       add_l,
       add_r,
       Empty,
       take_l,
       take_r,
       take_opt_l,
       take_opt_r,
       transfer_l,
       transfer_r,
       iter_l,
       iter_r,
       iter_node_l,
       iter_node_r,
       fold_l,
       fold_r,
       find_node_opt_l,
       find_node_opt_r,
       find_node_l,
       find_node_r];
    caml_register_global(64,Lwt_sequence,"Lwt_sequence");
    var
     Canceled=[248,cst_Lwt_Canceled,caml_fresh_oo_id(0)],
     compare=runtime.caml_compare,
     Int_map=caml_call1(Stdlib_map[1],[0,compare]),
     next_key_id=[0,0];
    function new_key(param)
     {var id=next_key_id[1];next_key_id[1] = id + 1 | 0;return [0,id,0]}
    var current_data=[0,Int_map[1]];
    function get$0(key)
     {try
       {caml_call3(Int_map[27],key[1],current_data[1],0);
        var value=key[2];
        key[2] = 0;
        return value}
      catch(_gd_)
       {_gd_ = caml_wrap_exception(_gd_);
        if(_gd_ === Not_found)return 0;
        throw _gd_}}
    function repr_rec(t)
     {var _gc_=t[1];
      if(3 === _gc_[0])
       {var t$0=_gc_[1],t$1=repr_rec(t$0);
        if(t$1 !== t$0)t[1] = [3,t$1];
        return t$1}
      return t}
    function repr(t){return repr_rec(t)}
    var
     async_exception_hook=
      [0,
       function(exn)
        {caml_call1(Stdlib[38],cst_Fatal_error_exception);
         var _gb_=caml_call1(Stdlib_printexc[1],exn);
         caml_call1(Stdlib[38],_gb_);
         caml_call1(Stdlib[37],10);
         caml_call1(Stdlib_printexc[4],Stdlib[29]);
         caml_call1(Stdlib[52],Stdlib[29]);
         return caml_call1(Stdlib[88],2)}];
    function call_unsafe(f,x)
     {try
       {var _ga_=caml_call1(f,x);return _ga_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call1(async_exception_hook[1],exn)}}
    function run_waiters_rec$0(counter,state,ws,rem)
     {var ws$0=ws,rem$0=rem;
      for(;;)
       if(typeof ws$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return run_waiters_rec_next(counter$0,state,rem$0)}
         return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0])}
       else
        switch(ws$0[0])
         {case 0:
           var _f$_=ws$0[1][1];
           if(_f$_)
            {var f=_f$_[1];
             caml_call1(f,state);
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return run_waiters_rec_next(counter$1,state,rem$0)}
             return caml_trampoline_return
                     (run_waiters_rec_next,[0,state,rem$0])}
           if(counter < 50)
            {var counter$2=counter + 1 | 0;
             return run_waiters_rec_next(counter$2,state,rem$0)}
           return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0]);
          case 1:
           var f$0=ws$0[1];
           caml_call1(f$0,state);
           if(counter < 50)
            {var counter$3=counter + 1 | 0;
             return run_waiters_rec_next(counter$3,state,rem$0)}
           return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0]);
          default:
           var
            ws2=ws$0[2],
            ws$1=ws$0[1],
            rem$1=[0,ws2,rem$0],
            ws$0=ws$1,
            rem$0=rem$1;
           continue}}
    function run_waiters_rec_next(counter,state,rem)
     {if(rem)
       {var rem$0=rem[2],ws=rem[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_waiters_rec$0(counter$0,state,ws,rem$0)}
        return caml_trampoline_return(run_waiters_rec$0,[0,state,ws,rem$0])}
      return 0}
    function run_waiters_rec(state,ws,rem)
     {return caml_trampoline(run_waiters_rec$0(0,state,ws,rem))}
    function run_cancel_handlers_rec$0(counter,chs,rem)
     {var chs$0=chs,rem$0=rem;
      for(;;)
       if(typeof chs$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return run_cancel_handlers_rec_next(counter$0,rem$0)}
         return caml_trampoline_return(run_cancel_handlers_rec_next,[0,rem$0])}
       else
        switch(chs$0[0])
         {case 0:
           var f=chs$0[2],data=chs$0[1];
           current_data[1] = data;
           call_unsafe(f,0);
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return run_cancel_handlers_rec_next(counter$1,rem$0)}
           return caml_trampoline_return
                   (run_cancel_handlers_rec_next,[0,rem$0]);
          case 1:
           var n=chs$0[1];
           remove(n);
           if(counter < 50)
            {var counter$2=counter + 1 | 0;
             return run_cancel_handlers_rec_next(counter$2,rem$0)}
           return caml_trampoline_return
                   (run_cancel_handlers_rec_next,[0,rem$0]);
          default:
           var
            chs2=chs$0[2],
            chs$1=chs$0[1],
            rem$1=[0,chs2,rem$0],
            chs$0=chs$1,
            rem$0=rem$1;
           continue}}
    function run_cancel_handlers_rec_next(counter,rem)
     {if(rem)
       {var rem$0=rem[2],chs=rem[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_cancel_handlers_rec$0(counter$0,chs,rem$0)}
        return caml_trampoline_return(run_cancel_handlers_rec$0,[0,chs,rem$0])}
      return 0}
    function run_cancel_handlers_rec(chs,rem)
     {return caml_trampoline(run_cancel_handlers_rec$0(0,chs,rem))}
    function unsafe_run_waiters(sleeper,state)
     {var
       switch$0=
        1 === state[0]
         ?state[1] === Canceled?(run_cancel_handlers_rec(sleeper[4],0),1):0
         :0;
      return run_waiters_rec(state,sleeper[2],0)}
    var wakening=[0,0],to_wakeup=caml_call1(Stdlib_queue[2],0);
    function enter_wakeup(param)
     {var
       snapshot=current_data[1],
       already_wakening=wakening[1]?1:(wakening[1] = 1,0);
      return [0,already_wakening,snapshot]}
    function leave_wakeup(param)
     {var snapshot=param[2],already_wakening=param[1];
      if(already_wakening){current_data[1] = snapshot;return 0}
      for(;;)
       {if(caml_call1(Stdlib_queue[11],to_wakeup))
         {wakening[1] = 0;current_data[1] = snapshot;return 0}
        var M=caml_call1(Stdlib_queue[6],to_wakeup);
        unsafe_run_waiters(M[1],M[2]);
        continue}}
    function abandon_wakeups(param)
     {var _f__=wakening[1];return _f__?leave_wakeup([0,0,Int_map[1]]):_f__}
    function safe_run_waiters(sleeper,state)
     {var ctx=enter_wakeup(0);
      unsafe_run_waiters(sleeper,state);
      return leave_wakeup(ctx)}
    function state_of_result(param)
     {if(0 === param[0]){var x=param[1];return [0,x]}
      var e=param[1];
      return [1,e]}
    function make_value(v){return [0,v]}
    function make_error(e){return [1,e]}
    function wakeup_result(t,result)
     {var t$0=repr_rec(t),_f9_=t$0[1];
      switch(_f9_[0])
       {case 1:if(_f9_[1] === Canceled)return 0;break;
        case 2:
         var sleeper=_f9_[1],state=state_of_result(result);
         t$0[1] = state;
         return safe_run_waiters(sleeper,state)
        }
      return caml_call1(Stdlib[2],cst_Lwt_wakeup_result)}
    function wakeup(t,v){return wakeup_result(t,[0,v])}
    function wakeup_exn(t,e){return wakeup_result(t,[1,e])}
    function wakeup_later_result(t,result)
     {var t$0=repr_rec(t),_f8_=t$0[1];
      switch(_f8_[0])
       {case 1:if(_f8_[1] === Canceled)return 0;break;
        case 2:
         var sleeper=_f8_[1],state=state_of_result(result);
         t$0[1] = state;
         return wakening[1]
                 ?caml_call2(Stdlib_queue[4],[0,sleeper,state],to_wakeup)
                 :safe_run_waiters(sleeper,state)
        }
      return caml_call1(Stdlib[2],cst_Lwt_wakeup_later_result)}
    function wakeup_later(t,v){return wakeup_later_result(t,[0,v])}
    function wakeup_later_exn(t,e){return wakeup_later_result(t,[1,e])}
    function cancel(t)
     {var state=[1,Canceled];
      function collect(acc,t)
       {var t$0=t;
        for(;;)
         {var t$1=repr(t$0),_f7_=t$1[1];
          if(2 === _f7_[0])
           {var sleeper=_f7_[1],cancel=sleeper[1];
            if(typeof cancel === "number")
             return 0 === cancel?acc:(t$1[1] = state,[0,[0,sleeper],acc]);
            else
             {if(0 === cancel[0]){var m=cancel[1],t$2=m[1],t$0=t$2;continue}
              var m$0=cancel[1];
              return caml_call3(Stdlib_list[20],collect,acc,m$0[1])}}
          return acc}}
      var sleepers=collect(0,t),ctx=enter_wakeup(0);
      function _f6_(M)
       {run_cancel_handlers_rec(M[1][4],0);
        return run_waiters_rec(state,M[1][2],0)}
      caml_call2(Stdlib_list[15],_f6_,sleepers);
      return leave_wakeup(ctx)}
    function append(l1,l2)
     {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[2,l1,l2]}
    function cleanup(ws)
     {if(typeof ws !== "number")
       switch(ws[0])
        {case 0:if(! ws[1][1])return 0;break;
         case 2:
          var l2=ws[2],l1=ws[1],_f5_=cleanup(l2);
          return append(cleanup(l1),_f5_)
         }
      return ws}
    function connect(t1,t2)
     {var t1$0=repr(t1),t2$0=repr(t2),_f0_=t1$0[1];
      if(2 === _f0_[0])
       {var sleeper1=_f0_[1];
        if(t1$0 === t2$0)return 0;
        var _f1_=t2$0[1];
        if(2 === _f1_[0])
         {var sleeper2=_f1_[1];
          t2$0[1] = [3,t1$0];
          sleeper1[1] = sleeper2[1];
          var
           waiters=append(sleeper1[2],sleeper2[2]),
           removed=sleeper1[3] + sleeper2[3] | 0;
          if(42 < removed)
           {sleeper1[3] = 0;sleeper1[2] = cleanup(waiters)}
          else
           {sleeper1[3] = removed;sleeper1[2] = waiters}
          var
           _f2_=sleeper2[4],
           _f3_=sleeper1[4],
           _f4_=
            typeof _f3_ === "number"
             ?_f2_
             :typeof _f2_ === "number"?_f3_:[2,_f3_,_f2_];
          sleeper1[4] = _f4_;
          return 0}
        t1$0[1] = _f1_;
        return unsafe_run_waiters(sleeper1,_f1_)}
      throw [0,Assert_failure,_a_]}
    function fast_connect(t,state)
     {var t$0=repr(t),_fZ_=t$0[1];
      if(2 === _fZ_[0])
       {var sleeper=_fZ_[1];
        t$0[1] = state;
        return unsafe_run_waiters(sleeper,state)}
      throw [0,Assert_failure,_b_]}
    function lift(v){return [0,[0,v]]}
    var return_unit=[0,state_return_unit],return_none=lift(0);
    function return_some(x){return lift([0,x])}
    var acc=lift(0),return_true=lift(1),return_false=lift(0);
    function return_ok(x){return lift([0,x])}
    function return_error(x){return lift([1,x])}
    function of_result(result){return [0,state_of_result(result)]}
    function fail(e){return [0,[1,e]]}
    function fail_with(msg){return [0,[1,[0,Failure,msg]]]}
    function fail_invalid_arg(msg){return [0,[1,[0,Invalid_argument,msg]]]}
    function temp(t){return [0,[2,[0,[0,[0,t]],0,0,0]]]}
    function temp_many(l){return [0,[2,[0,[1,[0,l]],0,0,0]]]}
    function wait_aux(param){return [0,[2,[0,0,0,0,0]]]}
    function wait(param){var t=wait_aux(0);return [0,t,t]}
    function task_aux(param){return [0,[2,[0,1,0,0,0]]]}
    function task(param){var t=task_aux(0);return [0,t,t]}
    function add_task_r(seq)
     {var sleeper=[0,1,0,0,0],t=[0,[2,sleeper]],node=add_r(t,seq);
      sleeper[4] = [1,node];
      return t}
    function add_task_l(seq)
     {var sleeper=[0,1,0,0,0],t=[0,[2,sleeper]],node=add_l(t,seq);
      sleeper[4] = [1,node];
      return t}
    function waiter_of_wakener(wakener){return wakener}
    function apply(f,x)
     {try
       {var _fY_=caml_call1(f,x);return _fY_}
      catch(e){e = caml_wrap_exception(e);return fail(e)}}
    function wrap(f)
     {try
       {var _fX_=lift(caml_call1(f,0));return _fX_}
      catch(exn){exn = caml_wrap_exception(exn);return fail(exn)}}
    function wrap1(f,x1)
     {try
       {var _fW_=lift(caml_call1(f,x1));return _fW_}
      catch(exn){exn = caml_wrap_exception(exn);return fail(exn)}}
    function wrap2(f,x1,x2)
     {try
       {var _fV_=lift(caml_call2(f,x1,x2));return _fV_}
      catch(exn){exn = caml_wrap_exception(exn);return fail(exn)}}
    function wrap3(f,x1,x2,x3)
     {try
       {var _fU_=lift(caml_call3(f,x1,x2,x3));return _fU_}
      catch(exn){exn = caml_wrap_exception(exn);return fail(exn)}}
    function wrap4(f,x1,x2,x3,x4)
     {try
       {var _fT_=lift(caml_call4(f,x1,x2,x3,x4));return _fT_}
      catch(exn){exn = caml_wrap_exception(exn);return fail(exn)}}
    function wrap5(f,x1,x2,x3,x4,x5)
     {try
       {var _fS_=lift(caml_call5(f,x1,x2,x3,x4,x5));return _fS_}
      catch(exn){exn = caml_wrap_exception(exn);return fail(exn)}}
    function wrap6(f,x1,x2,x3,x4,x5,x6)
     {try
       {var _fR_=lift(caml_call6(f,x1,x2,x3,x4,x5,x6));return _fR_}
      catch(exn){exn = caml_wrap_exception(exn);return fail(exn)}}
    function wrap7(f,x1,x2,x3,x4,x5,x6,x7)
     {try
       {var _fQ_=lift(caml_call7(f,x1,x2,x3,x4,x5,x6,x7));return _fQ_}
      catch(exn){exn = caml_wrap_exception(exn);return fail(exn)}}
    function add_waiter(sleeper,waiter)
     {var
       _fP_=sleeper[2],
       waiter$0=typeof _fP_ === "number"?waiter:[2,waiter,_fP_];
      sleeper[2] = waiter$0;
      return 0}
    function add_immutable_waiter(sleeper,waiter)
     {return add_waiter(sleeper,[1,waiter])}
    function on_cancel(t,f)
     {var _fN_=repr(t)[1];
      switch(_fN_[0])
       {case 1:if(_fN_[1] === Canceled)return call_unsafe(f,0);break;
        case 2:
         var
          sleeper=_fN_[1],
          handler=[0,current_data[1],f],
          _fO_=sleeper[4],
          handler$0=typeof _fO_ === "number"?handler:[2,handler,_fO_];
         sleeper[4] = handler$0;
         return 0
        }
      return 0}
    function bind(t,f)
     {var t$0=repr(t),_fK_=t$0[1];
      switch(_fK_[0])
       {case 0:var v=_fK_[1];return caml_call1(f,v);
        case 1:return [0,_fK_];
        case 2:
         var sleeper=_fK_[1],res=temp(t$0),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(state)
            {switch(state[0])
              {case 0:
                var v=state[1];
                current_data[1] = data;
                try
                 {var _fM_=caml_call1(f,v),_fL_=_fM_}
                catch(exn){exn = caml_wrap_exception(exn);var _fL_=fail(exn)}
                return connect(res,_fL_);
               case 1:return fast_connect(res,state);
               default:throw [0,Assert_failure,_c_]}});
         return res;
        default:throw [0,Assert_failure,_d_]}}
    function _e_(t,f){return bind(t,f)}
    function _f_(f,t){return bind(t,f)}
    function map(f,t)
     {var t$0=repr(t),_fF_=t$0[1];
      switch(_fF_[0])
       {case 0:
         var v=_fF_[1];
         try
          {var _fH_=[0,caml_call1(f,v)],_fG_=_fH_}
         catch(exn){exn = caml_wrap_exception(exn);var _fG_=[1,exn]}
         return [0,_fG_];
        case 1:return [0,_fF_];
        case 2:
         var sleeper=_fF_[1],res=temp(t$0),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(state)
            {switch(state[0])
              {case 0:
                var v=state[1];
                current_data[1] = data;
                try
                 {var _fJ_=[0,caml_call1(f,v)],_fI_=_fJ_}
                catch(exn){exn = caml_wrap_exception(exn);var _fI_=[1,exn]}
                return fast_connect(res,_fI_);
               case 1:return fast_connect(res,state);
               default:throw [0,Assert_failure,_g_]}});
         return res;
        default:throw [0,Assert_failure,_h_]}}
    function _i_(t,f){return map(f,t)}
    function _j_(f,t){return map(f,t)}
    function catch$0(x,f)
     {try
       {var _fC_=caml_call1(x,0),_fA_=_fC_}
      catch(exn){exn = caml_wrap_exception(exn);var _fA_=fail(exn)}
      var t=repr(_fA_),_fB_=t[1];
      switch(_fB_[0])
       {case 0:return t;
        case 1:var exn=_fB_[1];return caml_call1(f,exn);
        case 2:
         var sleeper=_fB_[1],res=temp(t),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(state)
            {switch(state[0])
              {case 0:return fast_connect(res,state);
               case 1:
                var exn=state[1];
                current_data[1] = data;
                try
                 {var _fE_=caml_call1(f,exn),_fD_=_fE_}
                catch(exn){exn = caml_wrap_exception(exn);var _fD_=fail(exn)}
                return connect(res,_fD_);
               default:throw [0,Assert_failure,_k_]}});
         return res;
        default:throw [0,Assert_failure,_l_]}}
    function on_success(t,f)
     {var _fz_=repr(t)[1];
      switch(_fz_[0])
       {case 0:var v=_fz_[1];return call_unsafe(f,v);
        case 1:return 0;
        case 2:
         var sleeper=_fz_[1],data=current_data[1];
         return add_immutable_waiter
                 (sleeper,
                  function(param)
                   {switch(param[0])
                     {case 0:
                       var v=param[1];
                       current_data[1] = data;
                       return call_unsafe(f,v);
                      case 1:return 0;
                      default:throw [0,Assert_failure,_m_]}});
        default:throw [0,Assert_failure,_n_]}}
    function on_failure(t,f)
     {var _fy_=repr(t)[1];
      switch(_fy_[0])
       {case 0:return 0;
        case 1:var exn=_fy_[1];return call_unsafe(f,exn);
        case 2:
         var sleeper=_fy_[1],data=current_data[1];
         return add_immutable_waiter
                 (sleeper,
                  function(param)
                   {switch(param[0])
                     {case 0:return 0;
                      case 1:
                       var exn=param[1];
                       current_data[1] = data;
                       return call_unsafe(f,exn);
                      default:throw [0,Assert_failure,_o_]}});
        default:throw [0,Assert_failure,_p_]}}
    function on_termination(t,f)
     {var _fx_=repr(t)[1];
      switch(_fx_[0])
       {case 2:
         var sleeper=_fx_[1],data=current_data[1];
         return add_immutable_waiter
                 (sleeper,
                  function(param)
                   {if(1 < param[0])throw [0,Assert_failure,_q_];
                    current_data[1] = data;
                    return call_unsafe(f,0)});
        case 3:throw [0,Assert_failure,_r_];
        default:return call_unsafe(f,0)}}
    function on_any(t,f,g)
     {var _fw_=repr(t)[1];
      switch(_fw_[0])
       {case 0:var v=_fw_[1];return call_unsafe(f,v);
        case 1:var exn=_fw_[1];return call_unsafe(g,exn);
        case 2:
         var sleeper=_fw_[1],data=current_data[1];
         return add_immutable_waiter
                 (sleeper,
                  function(param)
                   {switch(param[0])
                     {case 0:
                       var v=param[1];
                       current_data[1] = data;
                       return call_unsafe(f,v);
                      case 1:
                       var exn=param[1];
                       current_data[1] = data;
                       return call_unsafe(g,exn);
                      default:throw [0,Assert_failure,_s_]}});
        default:throw [0,Assert_failure,_t_]}}
    function try_bind(x,f,g)
     {try
       {var _fr_=caml_call1(x,0),_fp_=_fr_}
      catch(exn){exn = caml_wrap_exception(exn);var _fp_=fail(exn)}
      var t=repr(_fp_),_fq_=t[1];
      switch(_fq_[0])
       {case 0:var v=_fq_[1];return caml_call1(f,v);
        case 1:var exn=_fq_[1];return caml_call1(g,exn);
        case 2:
         var sleeper=_fq_[1],res=temp(t),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(param)
            {switch(param[0])
              {case 0:
                var v=param[1];
                current_data[1] = data;
                try
                 {var _ft_=caml_call1(f,v),_fs_=_ft_}
                catch(exn){exn = caml_wrap_exception(exn);var _fs_=fail(exn)}
                return connect(res,_fs_);
               case 1:
                var exn=param[1];
                current_data[1] = data;
                try
                 {var _fv_=caml_call1(g,exn),_fu_=_fv_}
                catch(exn){exn = caml_wrap_exception(exn);var _fu_=fail(exn)}
                return connect(res,_fu_);
               default:throw [0,Assert_failure,_u_]}});
         return res;
        default:throw [0,Assert_failure,_v_]}}
    function poll(t)
     {var _fo_=repr(t)[1];
      switch(_fo_[0])
       {case 0:var v=_fo_[1];return [0,v];
        case 1:var e=_fo_[1];throw e;
        case 2:return 0;
        default:throw [0,Assert_failure,_w_]}}
    function async(f)
     {try
       {var _fn_=caml_call1(f,0),_fl_=_fn_}
      catch(exn){exn = caml_wrap_exception(exn);var _fl_=fail(exn)}
      var t=repr(_fl_),_fm_=t[1];
      switch(_fm_[0])
       {case 0:return 0;
        case 1:var exn=_fm_[1];return caml_call1(async_exception_hook[1],exn);
        case 2:
         var sleeper=_fm_[1];
         return add_immutable_waiter
                 (sleeper,
                  function(param)
                   {switch(param[0])
                     {case 0:return 0;
                      case 1:
                       var exn=param[1];
                       return caml_call1(async_exception_hook[1],exn);
                      default:throw [0,Assert_failure,_x_]}});
        default:throw [0,Assert_failure,_y_]}}
    function ignore_result(t)
     {var _fk_=repr(t)[1];
      switch(_fk_[0])
       {case 0:return 0;
        case 1:var e=_fk_[1];throw e;
        case 2:
         var sleeper=_fk_[1];
         return add_immutable_waiter
                 (sleeper,
                  function(param)
                   {switch(param[0])
                     {case 0:return 0;
                      case 1:
                       var exn=param[1];
                       return caml_call1(async_exception_hook[1],exn);
                      default:throw [0,Assert_failure,_z_]}});
        default:throw [0,Assert_failure,_A_]}}
    function no_cancel(t)
     {var _fi_=repr(t)[1];
      switch(_fi_[0])
       {case 2:
         var sleeper=_fi_[1],res=wait_aux(0);
         add_immutable_waiter
          (sleeper,function(_fj_){return fast_connect(res,_fj_)});
         return res;
        case 3:throw [0,Assert_failure,_B_];
        default:return t}}
    function nth_ready(l,n)
     {var l$0=l,n$0=n;
      for(;;)
       {if(l$0)
         {var l$1=l$0[2],t=l$0[1];
          if(2 === repr(t)[1][0]){var l$0=l$1;continue}
          if(0 < n$0){var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;continue}
          return t}
        throw [0,Assert_failure,_C_]}}
    function ready_count(l)
     {var _fg_=0;
      function _fh_(acc,x){return 2 === repr(x)[1][0]?acc:acc + 1 | 0}
      return caml_call3(Stdlib_list[20],_fh_,_fg_,l)}
    function remove_waiters(l)
     {function _fc_(t)
       {var _fd_=repr(t)[1];
        if(2 === _fd_[0])
         {var _fe_=_fd_[1],_ff_=_fe_[2];
          if(typeof _ff_ !== "number" && 0 === _ff_[0]){_fe_[2] = 0;return 0}
          var removed=_fe_[3] + 1 | 0;
          return 42 < removed
                  ?(_fe_[3] = 0,_fe_[2] = cleanup(_fe_[2]),0)
                  :(_fe_[3] = removed,0)}
        return 0}
      return caml_call2(Stdlib_list[15],_fc_,l)}
    function add_removable_waiter(threads,waiter)
     {var node=[0,waiter];
      function _fa_(t)
       {var _fb_=repr(t)[1];
        if(2 === _fb_[0]){var sleeper=_fb_[1];return add_waiter(sleeper,node)}
        throw [0,Assert_failure,_D_]}
      return caml_call2(Stdlib_list[15],_fa_,threads)}
    var
     random_state=
      [246,function(_e$_){return caml_call1(Stdlib_random[11][1],[0])}];
    function choose(l)
     {var ready=ready_count(l);
      if(0 < ready)
       {if(1 === ready)return nth_ready(l,0);
        var
         _e7_=caml_obj_tag(random_state),
         _e8_=
          250 === _e7_
           ?random_state[1]
           :246 === _e7_
             ?caml_call1(CamlinternalLazy[2],random_state)
             :random_state;
        return nth_ready(l,caml_call2(Stdlib_random[11][5],_e8_,ready))}
      var
       res=temp_many(l),
       waiter=[],
       handle_result=function _e__(_e9_){return _e__.fun(_e9_)};
      caml_update_dummy(waiter,[0,[0,handle_result]]);
      caml_update_dummy
       (handle_result,
        function(state)
         {waiter[1] = 0;remove_waiters(l);return fast_connect(res,state)});
      add_removable_waiter(l,waiter);
      return res}
    function nchoose_terminate(res,acc,param)
     {var acc$0=acc,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],t=param$0[1],_e6_=repr(t)[1];
          switch(_e6_[0])
           {case 0:
             var x=_e6_[1],acc$1=[0,x,acc$0],acc$0=acc$1,param$0=l;continue;
            case 1:return fast_connect(res,_e6_);
            default:var param$0=l;continue}}
        return fast_connect(res,[0,caml_call1(Stdlib_list[9],acc$0)])}}
    function nchoose(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],t=param$0[1],_e2_=repr(t)[1];
          switch(_e2_[0])
           {case 0:
             var x=_e2_[1],acc=[0,x,0],acc$0=acc,param$1=l;
             for(;;)
              {if(param$1)
                {var l$0=param$1[2],t$0=param$1[1],_e3_=repr(t$0)[1];
                 switch(_e3_[0])
                  {case 0:
                    var x$0=_e3_[1],acc$1=[0,x$0,acc$0],acc$0=acc$1,param$1=l$0;
                    continue;
                   case 1:return [0,_e3_];
                   default:var param$1=l$0;continue}}
               return lift(caml_call1(Stdlib_list[9],acc$0))}
            case 1:return [0,_e2_];
            default:var param$0=l;continue}}
        var
         res=temp_many(param),
         waiter=[],
         handle_result=function _e5_(_e4_){return _e5_.fun(_e4_)};
        caml_update_dummy(waiter,[0,[0,handle_result]]);
        caml_update_dummy
         (handle_result,
          function(state)
           {waiter[1] = 0;
            remove_waiters(param);
            return nchoose_terminate(res,0,param)});
        add_removable_waiter(param,waiter);
        return res}}
    function nchoose_split(param)
     {var acc_sleeping=0,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],t=param$0[1],_eW_=repr(t)[1];
          switch(_eW_[0])
           {case 0:
             var
              x=_eW_[1],
              acc_terminated=[0,x,0],
              acc_terminated$0=acc_terminated,
              acc_sleeping$1=acc_sleeping,
              param$1=l;
             for(;;)
              {if(param$1)
                {var l$0=param$1[2],t$0=param$1[1],_eX_=repr(t$0)[1];
                 switch(_eX_[0])
                  {case 0:
                    var
                     x$0=_eX_[1],
                     acc_terminated$1=[0,x$0,acc_terminated$0],
                     acc_terminated$0=acc_terminated$1,
                     param$1=l$0;
                    continue;
                   case 1:return [0,_eX_];
                   default:
                    var
                     acc_sleeping$2=[0,t$0,acc_sleeping$1],
                     acc_sleeping$1=acc_sleeping$2,
                     param$1=l$0;
                    continue}}
               return lift
                       ([0,
                         caml_call1(Stdlib_list[9],acc_terminated$0),
                         acc_sleeping$1])}
            case 1:return [0,_eW_];
            default:
             var
              acc_sleeping$0=[0,t,acc_sleeping],
              acc_sleeping=acc_sleeping$0,
              param$0=l;
             continue}}
        var
         res=temp_many(param),
         waiter=[],
         handle_result=function _e1_(_e0_){return _e1_.fun(_e0_)};
        caml_update_dummy(waiter,[0,[0,handle_result]]);
        caml_update_dummy
         (handle_result,
          function(state)
           {waiter[1] = 0;
            remove_waiters(param);
            var acc_terminated=0,acc_sleeping=0,param$0=param;
            for(;;)
             {if(param$0)
               {var l=param$0[2],t=param$0[1],_eY_=repr(t)[1];
                switch(_eY_[0])
                 {case 0:
                   var
                    x=_eY_[1],
                    acc_terminated$0=[0,x,acc_terminated],
                    acc_terminated=acc_terminated$0,
                    param$0=l;
                   continue;
                  case 1:return fast_connect(res,_eY_);
                  default:
                   var
                    acc_sleeping$0=[0,t,acc_sleeping],
                    acc_sleeping=acc_sleeping$0,
                    param$0=l;
                   continue}}
              var _eZ_=caml_call1(Stdlib_list[9],acc_sleeping);
              return fast_connect
                      (res,[0,[0,caml_call1(Stdlib_list[9],acc_terminated),_eZ_]])}});
        add_removable_waiter(param,waiter);
        return res}}
    function cancel_and_nth_ready(l,n)
     {var l$0=l,n$0=n;
      for(;;)
       {if(l$0)
         {var l$1=l$0[2],t=l$0[1];
          if(2 === repr(t)[1][0]){cancel(t);var l$0=l$1;continue}
          if(0 < n$0){var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;continue}
          caml_call2(Stdlib_list[15],cancel,l$1);
          return t}
        throw [0,Assert_failure,_E_]}}
    function pick(l)
     {var ready=ready_count(l);
      if(0 < ready)
       {if(1 === ready)return cancel_and_nth_ready(l,0);
        var
         _eS_=caml_obj_tag(random_state),
         _eT_=
          250 === _eS_
           ?random_state[1]
           :246 === _eS_
             ?caml_call1(CamlinternalLazy[2],random_state)
             :random_state;
        return cancel_and_nth_ready
                (l,caml_call2(Stdlib_random[11][5],_eT_,ready))}
      var
       res=temp_many(l),
       waiter=[],
       handle_result=function _eV_(_eU_){return _eV_.fun(_eU_)};
      caml_update_dummy(waiter,[0,[0,handle_result]]);
      caml_update_dummy
       (handle_result,
        function(state)
         {waiter[1] = 0;
          remove_waiters(l);
          caml_call2(Stdlib_list[15],cancel,l);
          return fast_connect(res,state)});
      add_removable_waiter(l,waiter);
      return res}
    function npick(threads)
     {var param=threads;
      for(;;)
       {if(param)
         {var l=param[2],t=param[1],_eO_=repr(t)[1];
          switch(_eO_[0])
           {case 0:
             var x=_eO_[1],acc=[0,x,0],acc$0=acc,param$0=l;
             for(;;)
              {if(param$0)
                {var l$0=param$0[2],t$0=param$0[1],_eP_=repr(t$0)[1];
                 switch(_eP_[0])
                  {case 0:
                    var x$0=_eP_[1],acc$1=[0,x$0,acc$0],acc$0=acc$1,param$0=l$0;
                    continue;
                   case 1:
                    caml_call2(Stdlib_list[15],cancel,threads);return [0,_eP_];
                   default:var param$0=l$0;continue}}
               caml_call2(Stdlib_list[15],cancel,threads);
               return lift(caml_call1(Stdlib_list[9],acc$0))}
            case 1:caml_call2(Stdlib_list[15],cancel,threads);return [0,_eO_];
            default:var param=l;continue}}
        var
         res=temp_many(threads),
         waiter=[],
         handle_result=function _eR_(_eQ_){return _eR_.fun(_eQ_)};
        caml_update_dummy(waiter,[0,[0,handle_result]]);
        caml_update_dummy
         (handle_result,
          function(state)
           {waiter[1] = 0;
            remove_waiters(threads);
            caml_call2(Stdlib_list[15],cancel,threads);
            return nchoose_terminate(res,0,threads)});
        add_removable_waiter(threads,waiter);
        return res}}
    function protected$0(t)
     {switch(repr(t)[1][0])
       {case 2:
         var
          t$0=task_aux(0),
          waiter_cell=[],
          waiter=function _eN_(_eM_){return _eN_.fun(_eM_)};
         caml_update_dummy(waiter_cell,[0,[0,waiter]]);
         caml_update_dummy
          (waiter,
           function(state)
            {var t=repr(t$0),_eL_=t[1];
             if(2 === _eL_[0])
              {var sleeper=_eL_[1];
               t[1] = state;
               return unsafe_run_waiters(sleeper,state)}
             return 0});
         add_removable_waiter([0,t,0],waiter_cell);
         on_cancel
          (t$0,
           function(param){waiter_cell[1] = 0;return remove_waiters([0,t,0])});
         return t$0;
        case 3:throw [0,Assert_failure,_F_];
        default:return t}}
    function join(param)
     {var
       res=temp_many(param),
       sleeping=[0,0],
       return_state=[0,state_return_unit];
      function handle_result(state)
       {var
         switch$0=
          0 === return_state[1][0]
           ?1 === state[0]?(return_state[1] = state,1):0
           :0;
        sleeping[1] += -1;
        var _eK_=0 === sleeping[1]?1:0;
        return _eK_?fast_connect(res,return_state[1]):_eK_}
      var param$0=param;
      for(;;)
       {if(param$0)
         {var rest=param$0[2],t=param$0[1],_eJ_=repr(t)[1];
          switch(_eJ_[0])
           {case 1:
             if(0 === return_state[1][0])
              {return_state[1] = _eJ_;var param$0=rest;continue}
             var param$0=rest;
             continue;
            case 2:
             var sleeper=_eJ_[1];
             sleeping[1]++;
             add_immutable_waiter(sleeper,handle_result);
             var param$0=rest;
             continue;
            default:var param$0=rest;continue}}
        return 0 === sleeping[1]?[0,return_state[1]]:res}}
    function _G_(t1,t2){return choose([0,t1,[0,t2,0]])}
    function _H_(t1,t2){return join([0,t1,[0,t2,0]])}
    function finalize(f,g)
     {function _eG_(e)
       {function _eI_(param){return fail(e)}return _e_(caml_call1(g,0),_eI_)}
      return try_bind
              (f,
               function(x)
                {function _eH_(param){return lift(x)}
                 return _e_(caml_call1(g,0),_eH_)},
               _eG_)}
    function with_value(key,value,f)
     {var save=current_data[1];
      if(value)
       var
        _eF_=function(param){key[2] = value;return 0},
        data=caml_call3(Int_map[4],key[1],_eF_,save);
      else
       var data=caml_call2(Int_map[7],key[1],save);
      current_data[1] = data;
      try
       {var result=caml_call1(f,0);current_data[1] = save;return result}
      catch(exn)
       {exn = caml_wrap_exception(exn);current_data[1] = save;throw exn}}
    var pause_hook=[0,function(_eE_){return 0}],paused=create(0),_I_=[0,0];
    function pause(param)
     {var waiter=add_task_r(paused);
      _I_[1]++;
      caml_call1(pause_hook[1],_I_[1]);
      return waiter}
    function wakeup_paused(param)
     {if(is_empty(paused)){_I_[1] = 0;return 0}
      var tmp=create(0);
      transfer_r(paused,tmp);
      _I_[1] = 0;
      return iter_l(function(wakener){return wakeup(wakener,0)},tmp)}
    function register_pause_notifier(f){pause_hook[1] = f;return 0}
    function paused_count(param){return _I_[1]}
    function backtrace_bind(add_loc,t,f)
     {var t$0=repr(t),_eB_=t$0[1];
      switch(_eB_[0])
       {case 0:var v=_eB_[1];return caml_call1(f,v);
        case 1:var exn=_eB_[1];return [0,[1,caml_call1(add_loc,exn)]];
        case 2:
         var sleeper=_eB_[1],res=temp(t$0),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(param)
            {switch(param[0])
              {case 0:
                var v=param[1];
                current_data[1] = data;
                try
                 {var _eD_=caml_call1(f,v),_eC_=_eD_}
                catch(exn)
                 {exn = caml_wrap_exception(exn);
                  var _eC_=fail(caml_call1(add_loc,exn))}
                return connect(res,_eC_);
               case 1:
                var exn=param[1];
                return fast_connect(res,[1,caml_call1(add_loc,exn)]);
               default:throw [0,Assert_failure,_J_]}});
         return res;
        default:throw [0,Assert_failure,_K_]}}
    function backtrace_catch(add_loc,x,f)
     {try
       {var _ey_=caml_call1(x,0),_ew_=_ey_}
      catch(exn){exn = caml_wrap_exception(exn);var _ew_=fail(exn)}
      var t=repr(_ew_),_ex_=t[1];
      switch(_ex_[0])
       {case 0:return t;
        case 1:var exn=_ex_[1];return caml_call1(f,caml_call1(add_loc,exn));
        case 2:
         var sleeper=_ex_[1],res=temp(t),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(state)
            {switch(state[0])
              {case 0:return fast_connect(res,state);
               case 1:
                var exn=state[1];
                current_data[1] = data;
                try
                 {var _eA_=caml_call1(f,exn),_ez_=_eA_}
                catch(exn)
                 {exn = caml_wrap_exception(exn);
                  var _ez_=fail(caml_call1(add_loc,exn))}
                return connect(res,_ez_);
               default:throw [0,Assert_failure,_L_]}});
         return res;
        default:throw [0,Assert_failure,_M_]}}
    function backtrace_try_bind(add_loc,x,f,g)
     {try
       {var _er_=caml_call1(x,0),_ep_=_er_}
      catch(exn){exn = caml_wrap_exception(exn);var _ep_=fail(exn)}
      var t=repr(_ep_),_eq_=t[1];
      switch(_eq_[0])
       {case 0:var v=_eq_[1];return caml_call1(f,v);
        case 1:var exn=_eq_[1];return caml_call1(g,caml_call1(add_loc,exn));
        case 2:
         var sleeper=_eq_[1],res=temp(t),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(param)
            {switch(param[0])
              {case 0:
                var v=param[1];
                current_data[1] = data;
                try
                 {var _et_=caml_call1(f,v),_es_=_et_}
                catch(exn)
                 {exn = caml_wrap_exception(exn);
                  var _es_=fail(caml_call1(add_loc,exn))}
                return connect(res,_es_);
               case 1:
                var exn=param[1];
                current_data[1] = data;
                try
                 {var _ev_=caml_call1(g,exn),_eu_=_ev_}
                catch(exn)
                 {exn = caml_wrap_exception(exn);
                  var _eu_=fail(caml_call1(add_loc,exn))}
                return connect(res,_eu_);
               default:throw [0,Assert_failure,_N_]}});
         return res;
        default:throw [0,Assert_failure,_O_]}}
    function backtrace_finalize(add_loc,f,g)
     {function _em_(e)
       {function _eo_(param){return fail(caml_call1(add_loc,e))}
        return _e_(caml_call1(g,0),_eo_)}
      return backtrace_try_bind
              (add_loc,
               f,
               function(x)
                {function _en_(param){return lift(x)}
                 return _e_(caml_call1(g,0),_en_)},
               _em_)}
    function is_sleeping(t$1)
     {var t=t$1;
      for(;;)
       {var _el_=t[1];
        switch(_el_[0])
         {case 2:return 1;
          case 3:var t$0=_el_[1],t=t$0;continue;
          default:return 0}}}
    function state(t)
     {var _ek_=repr(t)[1];
      switch(_ek_[0])
       {case 0:var v=_ek_[1];return [0,v];
        case 1:var exn=_ek_[1];return [1,exn];
        case 2:return 0;
        default:throw [0,Assert_failure,_P_]}}
    var
     _Q_=[0,_e_,_f_,_i_,_j_,_G_,_H_],
     Lwt=
      [0,
       lift,
       fail,
       fail_with,
       fail_invalid_arg,
       bind,
       _e_,
       _f_,
       map,
       _i_,
       _j_,
       return_unit,
       return_none,
       return_some,
       acc,
       return_true,
       return_false,
       return_ok,
       return_error,
       new_key,
       get$0,
       with_value,
       catch$0,
       try_bind,
       finalize,
       wrap,
       wrap1,
       wrap2,
       wrap3,
       wrap4,
       wrap5,
       wrap6,
       wrap7,
       choose,
       nchoose,
       nchoose_split,
       join,
       _G_,
       _H_,
       async,
       ignore_result,
       async_exception_hook,
       wait,
       wakeup,
       wakeup_exn,
       wakeup_later,
       wakeup_later_exn,
       waiter_of_wakener,
       make_value,
       make_error,
       of_result,
       wakeup_result,
       wakeup_later_result,
       state,
       is_sleeping,
       Canceled,
       task,
       on_cancel,
       add_task_r,
       add_task_l,
       cancel,
       pick,
       npick,
       protected$0,
       no_cancel,
       pause,
       wakeup_paused,
       paused_count,
       register_pause_notifier,
       on_success,
       on_failure,
       on_termination,
       on_any,
       _Q_,
       poll,
       apply,
       backtrace_bind,
       backtrace_catch,
       backtrace_try_bind,
       backtrace_finalize,
       abandon_wakeups];
    caml_register_global(75,Lwt,"Lwt");
    function create$0(param){return [0,0,create(0)]}
    function lock(m){return m[1]?add_task_r(m[2]):(m[1] = 1,return_unit)}
    function unlock(m)
     {var _ej_=m[1];
      return _ej_
              ?is_empty(m[2])?(m[1] = 0,0):wakeup_later(take_l(m[2]),0)
              :_ej_}
    function with_lock(m,f)
     {function _eh_(param)
       {return finalize(f,function(param){unlock(m);return return_unit})}
      var _ei_=lock(m);
      return caml_call2(_Q_[1],_ei_,_eh_)}
    function is_locked(m){return m[1]}
    function is_empty$0(m){return is_empty(m[2])}
    var Lwt_mutex=[0,create$0,lock,unlock,is_locked,is_empty$0,with_lock];
    caml_register_global(76,Lwt_mutex,"Lwt_mutex");
    function wait$0(mutex,cvar)
     {var waiter=add_task_r(cvar);
      if(mutex){var m=mutex[1];unlock(m)}
      function _eg_(param)
       {if(mutex){var m=mutex[1];return lock(m)}return return_unit}
      return finalize(function(param){return waiter},_eg_)}
    function signal(cvar,arg)
     {try
       {var _ee_=wakeup_later(take_l(cvar),arg);return _ee_}
      catch(_ef_)
       {_ef_ = caml_wrap_exception(_ef_);
        if(_ef_ === Empty)return 0;
        throw _ef_}}
    function broadcast(cvar,arg)
     {var _ec_=0,wakeners=fold_r(function(x,l){return [0,x,l]},cvar,_ec_);
      iter_node_l(remove,cvar);
      function _ed_(wakener){return wakeup_later(wakener,arg)}
      return caml_call2(Stdlib_list[15],_ed_,wakeners)}
    function broadcast_exn(cvar,exn)
     {var _ea_=0,wakeners=fold_r(function(x,l){return [0,x,l]},cvar,_ea_);
      iter_node_l(remove,cvar);
      function _eb_(wakener){return wakeup_later_exn(wakener,exn)}
      return caml_call2(Stdlib_list[15],_eb_,wakeners)}
    var Lwt_condition=[0,create,wait$0,signal,broadcast,broadcast_exn];
    caml_register_global(77,Lwt_condition,"Lwt_condition");
    function iter_s(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _d__=function(param){return iter_s(f,l$0)},
         _d$_=caml_call1(f,x);
        return caml_call2(_Q_[1],_d$_,_d__)}
      return return_unit}
    function iter_p(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         tx=caml_call1(f,x),
         tl=iter_p(f,l$0),
         _d9_=function(param){return tl};
        return caml_call2(_Q_[1],tx,_d9_)}
      return return_unit}
    function _R_(i,f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _d7_=function(param){return _R_(i + 1 | 0,f,l$0)},
         _d8_=caml_call2(f,i,x);
        return caml_call2(_Q_[1],_d8_,_d7_)}
      return return_unit}
    function iteri_s(f,l){return _R_(0,f,l)}
    function _S_(i,f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         tx=caml_call2(f,i,x),
         tl=_S_(i + 1 | 0,f,l$0),
         _d6_=function(param){return tl};
        return caml_call2(_Q_[1],tx,_d6_)}
      return return_unit}
    function iteri_p(f,l){return _S_(0,f,l)}
    function map_s(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _d2_=
          function(x)
           {function _d4_(l){return [0,x,l]}
            var _d5_=map_s(f,l$0);
            return caml_call2(_Q_[3],_d5_,_d4_)},
         _d3_=caml_call1(f,x);
        return caml_call2(_Q_[1],_d3_,_d2_)}
      return acc}
    function map_p(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         tx=caml_call1(f,x),
         tl=map_p(f,l$0),
         _d0_=
          function(x)
           {function _d1_(l){return [0,x,l]}return caml_call2(_Q_[3],tl,_d1_)};
        return caml_call2(_Q_[1],tx,_d0_)}
      return acc}
    function filter_map_s(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _dW_=
          function(param)
           {if(param)
             {var
               x=param[1],
               _dY_=function(l){return [0,x,l]},
               _dZ_=filter_map_s(f,l$0);
              return caml_call2(_Q_[3],_dZ_,_dY_)}
            return filter_map_s(f,l$0)},
         _dX_=caml_call1(f,x);
        return caml_call2(_Q_[1],_dX_,_dW_)}
      return acc}
    function filter_map_p(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         tx=caml_call1(f,x),
         tl=filter_map_p(f,l$0),
         _dU_=
          function(param)
           {if(param)
             {var x=param[1],_dV_=function(l){return [0,x,l]};
              return caml_call2(_Q_[3],tl,_dV_)}
            return tl};
        return caml_call2(_Q_[1],tx,_dU_)}
      return acc}
    function _T_(i,f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _dQ_=
          function(x)
           {function _dS_(l){return [0,x,l]}
            var _dT_=_T_(i + 1 | 0,f,l$0);
            return caml_call2(_Q_[3],_dT_,_dS_)},
         _dR_=caml_call2(f,i,x);
        return caml_call2(_Q_[1],_dR_,_dQ_)}
      return acc}
    function mapi_s(f,l){return _T_(0,f,l)}
    function _U_(i,f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         tx=caml_call2(f,i,x),
         tl=_U_(i + 1 | 0,f,l$0),
         _dO_=
          function(x)
           {function _dP_(l){return [0,x,l]}return caml_call2(_Q_[3],tl,_dP_)};
        return caml_call2(_Q_[1],tx,_dO_)}
      return acc}
    function mapi_p(f,l){return _U_(0,f,l)}
    function rev_map_append_s(acc,f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _dM_=function(x){return rev_map_append_s([0,x,acc],f,l$0)},
         _dN_=caml_call1(f,x);
        return caml_call2(_Q_[1],_dN_,_dM_)}
      return lift(acc)}
    function rev_map_s(f,l){return rev_map_append_s(0,f,l)}
    function rev_map_p(f,l$1)
     {var acc$0=acc,l=l$1;
      for(;;)
       {if(l)
         {var
           l$0=l[2],
           x=l[1],
           _dJ_=
            function(acc)
              {return function(x)
                {function _dL_(l){return [0,x,l]}
                 return caml_call2(_Q_[3],acc,_dL_)}}
             (acc$0),
           _dK_=caml_call1(f,x),
           acc$1=caml_call2(_Q_[1],_dK_,_dJ_),
           acc$0=acc$1,
           l=l$0;
          continue}
        return acc$0}}
    function fold_left_s(f,acc,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _dH_=function(acc){return fold_left_s(f,acc,l$0)},
         _dI_=caml_call2(f,acc,x);
        return caml_call2(_Q_[1],_dI_,_dH_)}
      return lift(acc)}
    function fold_right_s(f,l,acc)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _dF_=function(acc){return caml_call2(f,x,acc)},
         _dG_=fold_right_s(f,l$0,acc);
        return caml_call2(_Q_[1],_dG_,_dF_)}
      return lift(acc)}
    function for_all_s(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _dD_=
          function(param){return 0 === param?return_false:for_all_s(f,l$0)},
         _dE_=caml_call1(f,x);
        return caml_call2(_Q_[1],_dE_,_dD_)}
      return return_true}
    function for_all_p(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         tx=caml_call1(f,x),
         tl=for_all_p(f,l$0),
         _dB_=
          function(bx)
           {function _dC_(bl){var bl$0=bx?bl:bx;return bl$0}
            return caml_call2(_Q_[3],tl,_dC_)};
        return caml_call2(_Q_[1],tx,_dB_)}
      return return_true}
    function exists_s(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _dz_=function(param){return 0 === param?exists_s(f,l$0):return_true},
         _dA_=caml_call1(f,x);
        return caml_call2(_Q_[1],_dA_,_dz_)}
      return return_false}
    function exists_p(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         tx=caml_call1(f,x),
         tl=exists_p(f,l$0),
         _dx_=
          function(bx)
           {function _dy_(bl){var bx$0=bx || bl;return bx$0}
            return caml_call2(_Q_[3],tl,_dy_)};
        return caml_call2(_Q_[1],tx,_dx_)}
      return return_false}
    function find_s(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _dv_=function(param){return 0 === param?find_s(f,l$0):lift(x)},
         _dw_=caml_call1(f,x);
        return caml_call2(_Q_[1],_dw_,_dv_)}
      return fail(Not_found)}
    function filter_s(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _dr_=
          function(param)
           {if(0 === param)return filter_s(f,l$0);
            function _dt_(l){return [0,x,l]}
            var _du_=filter_s(f,l$0);
            return caml_call2(_Q_[3],_du_,_dt_)},
         _ds_=caml_call1(f,x);
        return caml_call2(_Q_[1],_ds_,_dr_)}
      return acc}
    function filter_p(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         tx=caml_call1(f,x),
         tl=filter_p(f,l$0),
         _dp_=
          function(bx)
           {function _dq_(l){return bx?[0,x,l]:l}
            return caml_call2(_Q_[3],tl,_dq_)};
        return caml_call2(_Q_[1],tx,_dp_)}
      return acc}
    var return_nil_nil=lift(_V_);
    function partition_s(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         _dl_=
          function(bx)
           {function _dn_(param)
             {var l_r=param[2],l_l=param[1];
              return bx?[0,[0,x,l_l],l_r]:[0,l_l,[0,x,l_r]]}
            var _do_=partition_s(f,l$0);
            return caml_call2(_Q_[3],_do_,_dn_)},
         _dm_=caml_call1(f,x);
        return caml_call2(_Q_[1],_dm_,_dl_)}
      return return_nil_nil}
    function partition_p(f,l)
     {if(l)
       {var
         l$0=l[2],
         x=l[1],
         tx=caml_call1(f,x),
         tl=partition_p(f,l$0),
         _dj_=
          function(bx)
           {function _dk_(param)
             {var l_r=param[2],l_l=param[1];
              return bx?[0,[0,x,l_l],l_r]:[0,l_l,[0,x,l_r]]}
            return caml_call2(_Q_[3],tl,_dk_)};
        return caml_call2(_Q_[1],tx,_dj_)}
      return return_nil_nil}
    var
     Lwt_list=
      [0,
       iter_s,
       iter_p,
       iteri_s,
       iteri_p,
       map_s,
       map_p,
       mapi_s,
       mapi_p,
       rev_map_s,
       rev_map_p,
       fold_left_s,
       fold_right_s,
       for_all_s,
       for_all_p,
       exists_s,
       exists_p,
       find_s,
       filter_s,
       filter_p,
       filter_map_s,
       filter_map_p,
       partition_s,
       partition_p];
    caml_register_global(78,Lwt_list,"Lwt_list");
    function create_empty(param)
     {var _di_=create(0);return [0,0,create(0),_di_]}
    function create$1(v){var _dh_=create(0);return [0,[0,v],create(0),_dh_]}
    function put(mvar,v)
     {if(mvar[1])
       {var match=task(0),w=match[2],res=match[1],node=add_r([0,v,w],mvar[2]);
        on_cancel(res,function(param){return remove(node)});
        return res}
      var match$0=take_opt_l(mvar[3]);
      if(match$0){var w$0=match$0[1];wakeup_later(w$0,v)}else mvar[1] = [0,v];
      return return_unit}
    function take(mvar)
     {var _dg_=mvar[1];
      if(_dg_)
       {var v=_dg_[1],match=take_opt_l(mvar[2]);
        if(match)
         {var match$0=match[1],w=match$0[2],v$0=match$0[1];
          mvar[1] = [0,v$0];
          wakeup_later(w,0)}
        else
         mvar[1] = 0;
        return lift(v)}
      return add_task_r(mvar[3])}
    var Lwt_mvar=[0,create$1,create_empty,put,take];
    caml_register_global(79,Lwt_mvar,"Lwt_mvar");
    function create$2(m,opt,_de_,create$0)
     {if(opt)
       var sth=opt[1],check=sth;
      else
       var check=function(param,f){return caml_call1(f,1)};
      if(_de_)
       var sth$0=_de_[1],validate=sth$0;
      else
       var validate=function(param){return return_true};
      var _df_=create(0);
      return [0,
              create$0,
              check,
              validate,
              m,
              0,
              caml_call1(Stdlib_queue[2],0),
              _df_]}
    function create_member(p)
     {function _dd_(exn){p[5] = p[5] - 1 | 0;return fail(exn)}
      return catch$0
              (function(param){p[5] = p[5] + 1 | 0;return caml_call1(p[1],0)},
               _dd_)}
    function release(p,c)
     {var match=take_opt_l(p[7]);
      if(match){var wakener=match[1];return wakeup_later(wakener,c)}
      return caml_call2(Stdlib_queue[4],c,p[6])}
    function replace_acquired(p)
     {var match=take_opt_l(p[7]);
      if(match)
       {var
         wakener=match[1],
         _db_=
          function(exn)
           {p[5] = p[5] - 1 | 0;return wakeup_later_exn(wakener,exn)},
         _dc_=function(c){return wakeup_later(wakener,c)};
        return on_any(apply(p[1],0),_dc_,_db_)}
      p[5] = p[5] - 1 | 0;
      return 0}
    function use(p,f)
     {function _c8_(c)
       {function _c__(e)
         {function _da_(ok){return ok?release(p,c):replace_acquired(p)}
          caml_call2(p[2],c,_da_);
          return fail(e)}
        return catch$0
                (function(param)
                  {var t=caml_call1(f,c);
                   function _c$_(param){release(p,c);return t}
                   return caml_call2(_Q_[1],t,_c$_)},
                 _c__)}
      if(caml_call1(Stdlib_queue[11],p[6]))
       var _c9_=p[5] < p[4]?create_member(p):add_task_r(p[7]);
      else
       var
        c=caml_call1(Stdlib_queue[5],p[6]),
        _c6_=function(e){replace_acquired(p);return fail(e)},
        _c7_=
         function(param)
          {return 0 === param?(p[5] = p[5] - 1 | 0,create_member(p)):lift(c)},
        _c9_=try_bind(function(param){return caml_call1(p[3],c)},_c7_,_c6_);
      return caml_call2(_Q_[1],_c9_,_c8_)}
    var Lwt_pool=[0,create$2,use];
    caml_register_global(80,Lwt_pool,"Lwt_pool");
    function return$0(x){return lift([0,x])}
    function fail$0(e){return lift([1,e])}
    function ok(x){return map(function(y){return [0,y]},x)}
    function map$0(f,e)
     {return map
              (function(param)
                {if(0 === param[0]){var x=param[1];return [0,caml_call1(f,x)]}
                 var e=param[1];
                 return [1,e]},
               e)}
    function map_err(f,e)
     {return map
              (function(param)
                {if(0 === param[0]){var x=param[1];return [0,x]}
                 var e=param[1];
                 return [1,caml_call1(f,e)]},
               e)}
    function catch$1(e){return catch$0(function(param){return ok(e)},fail$0)}
    function get_exn(e)
     {return bind
              (e,
               function(param)
                {if(0 === param[0]){var x=param[1];return lift(x)}
                 var e=param[1];
                 return fail(e)})}
    function bind$0(e,f)
     {return bind
              (e,
               function(param)
                {if(0 === param[0]){var x=param[1];return caml_call1(f,x)}
                 var e=param[1];
                 return lift([1,e])})}
    function bind_lwt(e,f)
     {return bind
              (e,
               function(param)
                {if(0 === param[0]){var x=param[1];return ok(caml_call1(f,x))}
                 var e=param[1];
                 return fail$0(e)})}
    function bind_result(e,f)
     {return map
              (function(param)
                {if(0 === param[0]){var x=param[1];return caml_call1(f,x)}
                 var e=param[1];
                 return [1,e]},
               e)}
    function bind_lwt_err(e,f)
     {return bind
              (e,
               function(param)
                {if(0 === param[0]){var x=param[1];return return$0(x)}
                 var e=param[1];
                 return bind(caml_call1(f,e),fail$0)})}
    function _W_(e,f){return map$0(f,e)}
    var
     Lwt_result=
      [0,
       return$0,
       fail$0,
       lift,
       ok,
       catch$1,
       get_exn,
       map$0,
       map_err,
       bind$0,
       bind_lwt,
       bind_lwt_err,
       bind_result,
       [0,_W_,bind$0],
       _W_,
       bind$0];
    caml_register_global(81,Lwt_result,"Lwt_result");
    var
     Closed=[248,cst_Lwt_stream_Closed,caml_fresh_oo_id(0)],
     Full=[248,cst_Lwt_stream_Full,caml_fresh_oo_id(0)],
     Empty$0=[248,cst_Lwt_stream_Empty,caml_fresh_oo_id(0)];
    function new_node(param)
     {var node=[];caml_update_dummy(node,[0,node,0]);return node}
    function clone(s)
     {if(3 === s[1][0])caml_call1(Stdlib[2],cst_Lwt_stream_clone);
      return [0,s[1],s[2],s[3],s[4]]}
    function from_source(source)
     {var last=new_node(0),match=wait(0),close=match[2];
      return [0,source,close,last,[0,last]]}
    function from(f){return from_source([0,[0,f,return_unit]])}
    function from_direct(f){return from_source([1,f])}
    function closed(s){return s[2]}
    function is_closed(s){return 1 - is_sleeping(s[2])}
    function on_terminate(s,f)
     {return async(function(param){return caml_call2(_Q_[3],s[2],f)})}
    function enqueue(e,last)
     {var _c5_=last[1],new_last=new_node(0);
      _c5_[2] = e;
      _c5_[1] = new_last;
      last[1] = new_last;
      return 0}
    function enqueue$0(e,s){return enqueue(e,s[4])}
    function create_with_reference(param)
     {var
       match=wait(0),
       wakener=match[2],
       waiter=match[1],
       wakener_cell=[0,wakener],
       source=[0,waiter,0,0],
       t=from_source([2,source]),
       close=t[2],
       last=t[4];
      function push(x)
       {if(1 - is_sleeping(close))throw Closed;
        enqueue(x,last);
        if(source[2])
         {source[2] = 0;
          var
           old_wakener=wakener_cell[1],
           match=wait(0),
           new_wakener=match[2],
           new_waiter=match[1];
          source[1] = new_waiter;
          wakener_cell[1] = new_wakener;
          wakeup_later(old_wakener,0)}
        var _c4_=0 === x?1:0;
        return _c4_?wakeup(close,0):_c4_}
      return [0,t,push,function(x){source[3] = x;return 0}]}
    function create$3(param)
     {var match=create_with_reference(0),push=match[2],source=match[1];
      return [0,source,push]}
    function of_iter(iter,i)
     {var match=create$3(0),push=match[2],stream=match[1];
      caml_call2(iter,function(x){return caml_call1(push,[0,x])},i);
      caml_call1(push,0);
      return stream}
    function of_list(l){return of_iter(Stdlib_list[15],l)}
    function of_array(a){return of_iter(Stdlib_array[13],a)}
    function of_string(s){return of_iter(Stdlib_string[8],s)}
    function notify_pusher(info,last)
     {enqueue(info[5],last);
      info[5] = 0;
      var old_wakener=info[7],match=task(0),wakener=match[2],waiter=match[1];
      info[6] = waiter;
      info[7] = wakener;
      return wakeup_later(old_wakener,0)}
    function _Z_(_cv_)
     {var
       _cw_=caml_call2(CamlinternalOO[3],_cv_,cst),
       _cx_=caml_call2(CamlinternalOO[3],_cv_,cst$0),
       _cy_=caml_call2(CamlinternalOO[3],_cv_,cst$1),
       _cz_=caml_call2(CamlinternalOO[3],_cv_,cst$2),
       _cA_=caml_call3(CamlinternalOO[4],_cv_,_X_,_Y_),
       _cJ_=_cA_[9],
       _cB_=_cA_[1],
       _cC_=_cA_[2],
       _cD_=_cA_[3],
       _cE_=_cA_[4],
       _cF_=_cA_[5],
       _cG_=_cA_[6],
       _cH_=_cA_[7],
       _cI_=_cA_[8];
      function _cK_(self_1,x){self_1[_cw_ + 1][8] = x;return 0}
      function _cL_(self_1){return self_1[_cJ_ + 1]}
      function _cM_(self_1){return 0 !== self_1[_cw_ + 1][5]?1:0}
      function _cN_(self_1){return self_1[_cw_ + 1][4]}
      function _cO_(self_1)
       {var _c2_=1 - self_1[_cJ_ + 1];
        if(_c2_)
         {self_1[_cJ_ + 1] = 1;
          var _c3_=self_1[_cy_ + 1][1],new_last=new_node(0);
          _c3_[2] = 0;
          _c3_[1] = new_last;
          self_1[_cy_ + 1][1] = new_last;
          if(0 !== self_1[_cw_ + 1][5])
           {self_1[_cw_ + 1][5] = 0;
            wakeup_later_exn(self_1[_cw_ + 1][7],Closed)}
          if(self_1[_cw_ + 1][2])
           {self_1[_cw_ + 1][2] = 0;
            var old_wakener=self_1[_cx_ + 1][1];
            wakeup_later(old_wakener,0)}
          return wakeup(self_1[_cz_ + 1],0)}
        return _c2_}
      function _cP_(self_1,x)
       {if(self_1[_cJ_ + 1])return fail(Closed);
        if(0 === self_1[_cw_ + 1][5])
         {if(self_1[_cw_ + 1][3] <= self_1[_cw_ + 1][4])
           {self_1[_cw_ + 1][5] = [0,x];
            var
             _c1_=
              function(exn)
               {if(exn === Canceled)
                 {self_1[_cw_ + 1][5] = 0;
                  var match=task(0),wakener=match[2],waiter=match[1];
                  self_1[_cw_ + 1][6] = waiter;
                  self_1[_cw_ + 1][7] = wakener;
                  return fail(exn)}
                return fail(exn)};
            return catch$0(function(param){return self_1[_cw_ + 1][6]},_c1_)}
          enqueue([0,x],self_1[_cy_ + 1]);
          self_1[_cw_ + 1][4] = self_1[_cw_ + 1][4] + 1 | 0;
          if(self_1[_cw_ + 1][2])
           {self_1[_cw_ + 1][2] = 0;
            var
             old_wakener=self_1[_cx_ + 1][1],
             match=wait(0),
             new_wakener=match[2],
             new_waiter=match[1];
            self_1[_cw_ + 1][1] = new_waiter;
            self_1[_cx_ + 1][1] = new_wakener;
            wakeup_later(old_wakener,0)}
          return return_unit}
        return fail(Full)}
      function _cQ_(self_1,size)
       {if(size < 0)caml_call1(Stdlib[2],cst_Lwt_stream_bounded_push_resize);
        self_1[_cw_ + 1][3] = size;
        var
         _cZ_=self_1[_cw_ + 1][4] < self_1[_cw_ + 1][3]?1:0,
         _c0_=_cZ_?0 !== self_1[_cw_ + 1][5]?1:0:_cZ_;
        return _c0_
                ?(self_1[_cw_ + 1][4]
                  =
                  self_1[_cw_ + 1][4]
                  +
                  1
                  |
                  0,
                  notify_pusher(self_1[_cw_ + 1],self_1[_cy_ + 1]))
                :_c0_}
      var
       _cR_=
        [0,
         _cB_,
         function(self_1){return self_1[_cw_ + 1][3]},
         _cD_,
         _cQ_,
         _cE_,
         _cP_,
         _cH_,
         _cO_,
         _cF_,
         _cN_,
         _cI_,
         _cM_,
         _cG_,
         _cL_,
         _cC_,
         _cK_];
      caml_call2(CamlinternalOO[11],_cv_,_cR_);
      return function(_cX_,_cW_,_cV_,_cU_,_cT_,_cS_)
       {var _cY_=caml_call2(CamlinternalOO[24],_cW_,_cv_);
        _cY_[_cz_ + 1] = _cS_;
        _cY_[_cy_ + 1] = _cT_;
        _cY_[_cx_ + 1] = _cU_;
        _cY_[_cw_ + 1] = _cV_;
        _cY_[_cJ_ + 1] = 0;
        return _cY_}}
    var bounded_push_impl=caml_call2(CamlinternalOO[19],shared,_Z_);
    function create_bounded(size)
     {if(size < 0)caml_call1(Stdlib[2],cst_Lwt_stream_create_bounded);
      var
       match=wait(0),
       wakener=match[2],
       waiter=match[1],
       match$0=task(0),
       push_wakener=match$0[2],
       push_waiter=match$0[1],
       wakener_cell=[0,wakener],
       info=[0,waiter,0,size,0,0,push_waiter,push_wakener,0],
       t=from_source([3,info]);
      return [0,
              t,
              caml_call5(bounded_push_impl[1],0,info,wakener_cell,t[4],t[2])]}
    function feed(s)
     {var _cs_=s[1];
      switch(_cs_[0])
       {case 0:
         var from=_cs_[1];
         if(is_sleeping(from[2]))return protected$0(from[2]);
         var
          _ct_=
           function(x)
            {enqueue$0(x,s);if(0 === x)wakeup(s[2],0);return return_unit},
          _cu_=caml_call1(from[1],0),
          thread=caml_call2(_Q_[1],_cu_,_ct_);
         from[2] = thread;
         return protected$0(thread);
        case 1:
         var f=_cs_[1],x=caml_call1(f,0);
         enqueue$0(x,s);
         if(0 === x)wakeup(s[2],0);
         return return_unit;
        case 2:var push=_cs_[1];push[2] = 1;return protected$0(push[1]);
        default:var push$0=_cs_[1];push$0[2] = 1;return protected$0(push$0[1])}}
    function consume(s,node)
     {var _cq_=node === s[3]?1:0;
      if(_cq_)
       {s[3] = node[1];
        var _cr_=s[1];
        if(3 === _cr_[0])
         {var info=_cr_[1];
          return 0 === info[5]
                  ?(info[4] = info[4] - 1 | 0,0)
                  :notify_pusher(info,s[4])}
        return 0}
      return _cq_}
    function peek_rec(s,node)
     {if(node === s[4][1])
       {var _co_=function(param){return peek_rec(s,node)},_cp_=feed(s);
        return caml_call2(_Q_[1],_cp_,_co_)}
      return lift(node[2])}
    function peek(s){return peek_rec(s,s[3])}
    function npeek_rec(node,acc,n,s)
     {var node$0=node,acc$0=acc,n$0=n;
      for(;;)
       {if(0 < n$0)
         {if(node$0 === s[4][1])
           {var
             _cl_=function(param){return npeek_rec(node$0,acc$0,n$0,s)},
             _cm_=feed(s);
            return caml_call2(_Q_[1],_cm_,_cl_)}
          var _cn_=node$0[2];
          if(_cn_)
           {var
             x=_cn_[1],
             n$1=n$0 - 1 | 0,
             acc$1=[0,x,acc$0],
             node$1=node$0[1],
             node$0=node$1,
             acc$0=acc$1,
             n$0=n$1;
            continue}
          return lift(caml_call1(Stdlib_list[9],acc$0))}
        return lift(caml_call1(Stdlib_list[9],acc$0))}}
    function npeek(n,s){return npeek_rec(s[3],0,n,s)}
    function get_rec(s,node)
     {if(node === s[4][1])
       {var _cj_=function(param){return get_rec(s,node)},_ck_=feed(s);
        return caml_call2(_Q_[1],_ck_,_cj_)}
      if(0 !== node[2])consume(s,node);
      return lift(node[2])}
    function get$1(s){return get_rec(s,s[3])}
    function get_exn_rec(s,node)
     {if(node === s[4][1])
       {var
         _cg_=function(exn){return lift([0,[1,exn]])},
         _ch_=function(param){return get_exn_rec(s,node)};
        return try_bind(function(param){return feed(s)},_ch_,_cg_)}
      var _ci_=node[2];
      if(_ci_){var value=_ci_[1];consume(s,node);return lift([0,[0,value]])}
      return return_none}
    function map_exn(s)
     {return from(function(param){return get_exn_rec(s,s[3])})}
    function get_exn_rec$0(s,node)
     {if(node === s[4][1])
       {var
         _cd_=function(exn){return lift([0,[1,exn]])},
         _ce_=function(param){return get_exn_rec$0(s,node)};
        return try_bind(function(param){return feed(s)},_ce_,_cd_)}
      var _cf_=node[2];
      if(_cf_){var value=_cf_[1];consume(s,node);return lift([0,[0,value]])}
      return return_none}
    function wrap_exn(s)
     {return from(function(param){return get_exn_rec$0(s,s[3])})}
    function nget_rec(node,acc,n,s)
     {var node$0=node,acc$0=acc,n$0=n;
      for(;;)
       {if(0 < n$0)
         {if(node$0 === s[4][1])
           {var
             _ca_=function(param){return nget_rec(node$0,acc$0,n$0,s)},
             _cb_=feed(s);
            return caml_call2(_Q_[1],_cb_,_ca_)}
          var _cc_=s[3][2];
          if(_cc_)
           {var x=_cc_[1];
            consume(s,node$0);
            var
             n$1=n$0 - 1 | 0,
             acc$1=[0,x,acc$0],
             node$1=node$0[1],
             node$0=node$1,
             acc$0=acc$1,
             n$0=n$1;
            continue}
          return lift(caml_call1(Stdlib_list[9],acc$0))}
        return lift(caml_call1(Stdlib_list[9],acc$0))}}
    function nget(n,s){return nget_rec(s[3],0,n,s)}
    function get_while_rec(node,acc,f,s)
     {var node$0=node,acc$0=acc;
      for(;;)
       {if(node$0 === s[4][1])
         {var
           _b9_=function(param){return get_while_rec(node$0,acc$0,f,s)},
           _b__=feed(s);
          return caml_call2(_Q_[1],_b__,_b9_)}
        var _b$_=node$0[2];
        if(_b$_)
         {var x=_b$_[1],test=caml_call1(f,x);
          if(test)
           {consume(s,node$0);
            var acc$1=[0,x,acc$0],node$1=node$0[1],node$0=node$1,acc$0=acc$1;
            continue}
          return lift(caml_call1(Stdlib_list[9],acc$0))}
        return lift(caml_call1(Stdlib_list[9],acc$0))}}
    function get_while(f,s){return get_while_rec(s[3],0,f,s)}
    function get_while_s_rec(node,acc,f,s)
     {if(node === s[4][1])
       {var
         _b4_=function(param){return get_while_s_rec(node,acc,f,s)},
         _b5_=feed(s);
        return caml_call2(_Q_[1],_b5_,_b4_)}
      var _b6_=node[2];
      if(_b6_)
       {var
         x=_b6_[1],
         _b7_=
          function(param)
           {return 0 === param
                    ?lift(caml_call1(Stdlib_list[9],acc))
                    :(consume(s,node),get_while_s_rec(node[1],[0,x,acc],f,s))},
         _b8_=caml_call1(f,x);
        return caml_call2(_Q_[1],_b8_,_b7_)}
      return lift(caml_call1(Stdlib_list[9],acc))}
    function get_while_s(f,s){return get_while_s_rec(s[3],0,f,s)}
    function next_rec(s,node)
     {if(node === s[4][1])
       {var _b1_=function(param){return next_rec(s,node)},_b2_=feed(s);
        return caml_call2(_Q_[1],_b2_,_b1_)}
      var _b3_=node[2];
      if(_b3_){var x=_b3_[1];consume(s,node);return lift(x)}
      return fail(Empty$0)}
    function next(s){return next_rec(s,s[3])}
    function last_new_rec(node,x,s)
     {var node$0=node,x$0=x;
      for(;;)
       {if(node$0 === s[4][1])
         {var thread=feed(s),match=state(thread);
          if(typeof match === "number")
           return lift(x$0);
          else
           {if(0 === match[0])continue;var exn=match[1];return fail(exn)}}
        var _b0_=node$0[2];
        if(_b0_)
         {var x$1=_b0_[1];
          consume(s,node$0);
          var node$1=node$0[1],node$0=node$1,x$0=x$1;
          continue}
        return lift(x$0)}}
    function last_new(s)
     {var node=s[3];
      if(node === s[4][1])
       {var thread=next(s),match=state(thread);
        if(typeof match !== "number" && 0 === match[0])
         {var x=match[1];return last_new_rec(node,x,s)}
        return thread}
      var _bZ_=node[2];
      if(_bZ_)
       {var x$0=_bZ_[1];consume(s,node);return last_new_rec(node[1],x$0,s)}
      return fail(Empty$0)}
    function to_list_rec(node,acc,s)
     {var node$0=node,acc$0=acc;
      for(;;)
       {if(node$0 === s[4][1])
         {var
           _bW_=function(param){return to_list_rec(node$0,acc$0,s)},
           _bX_=feed(s);
          return caml_call2(_Q_[1],_bX_,_bW_)}
        var _bY_=node$0[2];
        if(_bY_)
         {var x=_bY_[1];
          consume(s,node$0);
          var acc$1=[0,x,acc$0],node$1=node$0[1],node$0=node$1,acc$0=acc$1;
          continue}
        return lift(caml_call1(Stdlib_list[9],acc$0))}}
    function to_list(s){return to_list_rec(s[3],0,s)}
    function to_string_rec(node,buf,s)
     {var node$0=node;
      for(;;)
       {if(node$0 === s[4][1])
         {var
           _bT_=function(param){return to_string_rec(node$0,buf,s)},
           _bU_=feed(s);
          return caml_call2(_Q_[1],_bU_,_bT_)}
        var _bV_=node$0[2];
        if(_bV_)
         {var x=_bV_[1];
          consume(s,node$0);
          caml_call2(Stdlib_buffer[10],buf,x);
          var node$1=node$0[1],node$0=node$1;
          continue}
        return lift(caml_call1(Stdlib_buffer[2],buf))}}
    function to_string(s)
     {var _bS_=caml_call1(Stdlib_buffer[1],128);
      return to_string_rec(s[3],_bS_,s)}
    function junk(s)
     {var node=s[3];
      if(node === s[4][1])
       {var
         _bQ_=
          function(param){if(0 !== node[2])consume(s,node);return return_unit},
         _bR_=feed(s);
        return caml_call2(_Q_[1],_bR_,_bQ_)}
      if(0 !== node[2])consume(s,node);
      return return_unit}
    function njunk_rec(node,n,s)
     {var node$0=node,n$0=n;
      for(;;)
       {if(0 < n$0)
         {if(node$0 === s[4][1])
           {var
             _bO_=function(param){return njunk_rec(node$0,n$0,s)},
             _bP_=feed(s);
            return caml_call2(_Q_[1],_bP_,_bO_)}
          if(node$0[2])
           {consume(s,node$0);
            var n$1=n$0 - 1 | 0,node$1=node$0[1],node$0=node$1,n$0=n$1;
            continue}
          return return_unit}
        return return_unit}}
    function njunk(n,s){return njunk_rec(s[3],n,s)}
    function junk_while_rec(node,f,s)
     {var node$0=node;
      for(;;)
       {if(node$0 === s[4][1])
         {var
           _bL_=function(param){return junk_while_rec(node$0,f,s)},
           _bM_=feed(s);
          return caml_call2(_Q_[1],_bM_,_bL_)}
        var _bN_=node$0[2];
        if(_bN_)
         {var x=_bN_[1],test=caml_call1(f,x);
          if(test)
           {consume(s,node$0);var node$1=node$0[1],node$0=node$1;continue}
          return return_unit}
        return return_unit}}
    function junk_while(f,s){return junk_while_rec(s[3],f,s)}
    function junk_while_s_rec(node,f,s)
     {if(node === s[4][1])
       {var
         _bG_=function(param){return junk_while_s_rec(node,f,s)},
         _bH_=feed(s);
        return caml_call2(_Q_[1],_bH_,_bG_)}
      var _bI_=node[2];
      if(_bI_)
       {var
         x=_bI_[1],
         _bJ_=
          function(param)
           {return 0 === param
                    ?return_unit
                    :(consume(s,node),junk_while_s_rec(node[1],f,s))},
         _bK_=caml_call1(f,x);
        return caml_call2(_Q_[1],_bK_,_bJ_)}
      return return_unit}
    function junk_while_s(f,s){return junk_while_s_rec(s[3],f,s)}
    function junk_old(s)
     {var node=s[3];
      for(;;)
       {if(node === s[4][1])
         {var thread=feed(s),match=state(thread);
          if(typeof match === "number")
           return return_unit;
          else
           {if(0 === match[0])continue;var exn=match[1];return fail(exn)}}
        if(node[2]){consume(s,node);var node$0=node[1],node=node$0;continue}
        return return_unit}}
    function get_available(s)
     {var node=s[3],acc=0;
      for(;;)
       {if(node === s[4][1])
         {var thread=feed(s),match=state(thread);
          if(typeof match === "number")
           return caml_call1(Stdlib_list[9],acc);
          else
           {if(0 === match[0])continue;var exn=match[1];throw exn}}
        var _bF_=node[2];
        if(_bF_)
         {var x=_bF_[1];
          consume(s,node);
          var acc$0=[0,x,acc],node$0=node[1],node=node$0,acc=acc$0;
          continue}
        return caml_call1(Stdlib_list[9],acc)}}
    function get_available_up_to(n$1,s)
     {var node=s[3],acc=0,n=n$1;
      for(;;)
       {if(0 < n)
         {if(node === s[4][1])
           {var thread=feed(s),match=state(thread);
            if(typeof match === "number")
             return caml_call1(Stdlib_list[9],acc);
            else
             {if(0 === match[0])continue;var exn=match[1];throw exn}}
          var _bE_=s[3][2];
          if(_bE_)
           {var x=_bE_[1];
            consume(s,node);
            var
             n$0=n - 1 | 0,
             acc$0=[0,x,acc],
             node$0=node[1],
             node=node$0,
             acc=acc$0,
             n=n$0;
            continue}
          return caml_call1(Stdlib_list[9],acc)}
        return caml_call1(Stdlib_list[9],acc)}}
    function is_empty$1(s)
     {if(s[3] === s[4][1])
       {var _bC_=function(param){return is_empty$1(s)},_bD_=feed(s);
        return caml_call2(_Q_[1],_bD_,_bC_)}
      return lift(0 === s[3][2]?1:0)}
    function map$1(f,s)
     {return from
              (function(param)
                {function _bA_(param)
                  {if(param)
                    {var x=param[1],x$0=caml_call1(f,x);return [0,x$0]}
                   return 0}
                 var _bB_=get$1(s);
                 return caml_call2(_Q_[3],_bB_,_bA_)})}
    function map_s$0(f,s)
     {return from
              (function(param)
                {function _bw_(param)
                  {if(param)
                    {var
                      x=param[1],
                      _by_=function(x){return [0,x]},
                      _bz_=caml_call1(f,x);
                     return caml_call2(_Q_[3],_bz_,_by_)}
                   return return_none}
                 var _bx_=get$1(s);
                 return caml_call2(_Q_[1],_bx_,_bw_)})}
    function filter(f,s)
     {function next(param)
       {var t=get$1(s);
        function _bv_(param)
         {if(param){var x=param[1],test=caml_call1(f,x);return test?t:next(0)}
          return return_none}
        return caml_call2(_Q_[1],t,_bv_)}
      return from(next)}
    function filter_s$0(f,s)
     {function next(param)
       {var t=get$1(s);
        function _bs_(param)
         {if(param)
           {var
             x=param[1],
             _bt_=function(param){return 0 === param?next(0):t},
             _bu_=caml_call1(f,x);
            return caml_call2(_Q_[1],_bu_,_bt_)}
          return t}
        return caml_call2(_Q_[1],t,_bs_)}
      return from(next)}
    function filter_map(f,s)
     {function next(param)
       {function _bq_(param)
         {if(param)
           {var x=param[1],x$0=caml_call1(f,x);return x$0?lift(x$0):next(0)}
          return return_none}
        var _br_=get$1(s);
        return caml_call2(_Q_[1],_br_,_bq_)}
      return from(next)}
    function filter_map_s$0(f,s)
     {function next(param)
       {function _bn_(param)
         {if(param)
           {var
             x=param[1],
             t=caml_call1(f,x),
             _bp_=function(param){return param?t:next(0)};
            return caml_call2(_Q_[1],t,_bp_)}
          return return_none}
        var _bo_=get$1(s);
        return caml_call2(_Q_[1],_bo_,_bn_)}
      return from(next)}
    function map_list(f,s)
     {var pendings=[0,0];
      function next(param)
       {var _bk_=pendings[1];
        if(_bk_){var l=_bk_[2],x=_bk_[1];pendings[1] = l;return lift([0,x])}
        function _bl_(param)
         {if(param)
           {var x=param[1],l=caml_call1(f,x);pendings[1] = l;return next(0)}
          return return_none}
        var _bm_=get$1(s);
        return caml_call2(_Q_[1],_bm_,_bl_)}
      return from(next)}
    function map_list_s(f,s)
     {var pendings=[0,0];
      function next(param)
       {var _bf_=pendings[1];
        if(_bf_){var l=_bf_[2],x=_bf_[1];pendings[1] = l;return lift([0,x])}
        function _bg_(param)
         {if(param)
           {var
             x=param[1],
             _bi_=function(l){pendings[1] = l;return next(0)},
             _bj_=caml_call1(f,x);
            return caml_call2(_Q_[1],_bj_,_bi_)}
          return return_none}
        var _bh_=get$1(s);
        return caml_call2(_Q_[1],_bh_,_bg_)}
      return from(next)}
    function flatten(s){return map_list(function(l){return l},s)}
    function fold_rec(node,f,s,acc)
     {var node$0=node,acc$0=acc;
      for(;;)
       {if(node$0 === s[4][1])
         {var
           _bc_=function(param){return fold_rec(node$0,f,s,acc$0)},
           _bd_=feed(s);
          return caml_call2(_Q_[1],_bd_,_bc_)}
        var _be_=node$0[2];
        if(_be_)
         {var x=_be_[1];
          consume(s,node$0);
          var
           acc$1=caml_call2(f,x,acc$0),
           node$1=node$0[1],
           node$0=node$1,
           acc$0=acc$1;
          continue}
        return lift(acc$0)}}
    function fold(f,s,acc){return fold_rec(s[3],f,s,acc)}
    function fold_s_rec(node,f,s,acc)
     {if(node === s[4][1])
       {var
         _a9_=function(param){return fold_s_rec(node,f,s,acc)},
         _a__=feed(s);
        return caml_call2(_Q_[1],_a__,_a9_)}
      var _a$_=node[2];
      if(_a$_)
       {var x=_a$_[1];
        consume(s,node);
        var
         _ba_=function(acc){return fold_s_rec(node[1],f,s,acc)},
         _bb_=caml_call2(f,x,acc);
        return caml_call2(_Q_[1],_bb_,_ba_)}
      return lift(acc)}
    function fold_s(f,s,acc){return fold_s_rec(s[3],f,s,acc)}
    function iter_rec(node,f,s)
     {var node$0=node;
      for(;;)
       {if(node$0 === s[4][1])
         {var _a6_=function(param){return iter_rec(node$0,f,s)},_a7_=feed(s);
          return caml_call2(_Q_[1],_a7_,_a6_)}
        var _a8_=node$0[2];
        if(_a8_)
         {var x=_a8_[1];
          consume(s,node$0);
          caml_call1(f,x);
          var node$1=node$0[1],node$0=node$1;
          continue}
        return return_unit}}
    function iter(f,s){return iter_rec(s[3],f,s)}
    function iter_s_rec(node,f,s)
     {if(node === s[4][1])
       {var _a1_=function(param){return iter_s_rec(node,f,s)},_a2_=feed(s);
        return caml_call2(_Q_[1],_a2_,_a1_)}
      var _a3_=node[2];
      if(_a3_)
       {var x=_a3_[1];
        consume(s,node);
        var
         _a4_=function(param){return iter_s_rec(node[1],f,s)},
         _a5_=caml_call1(f,x);
        return caml_call2(_Q_[1],_a5_,_a4_)}
      return return_unit}
    function iter_s$0(f,s){return iter_s_rec(s[3],f,s)}
    function iter_p_rec(node,f,s)
     {if(node === s[4][1])
       {var _aX_=function(param){return iter_p_rec(node,f,s)},_aY_=feed(s);
        return caml_call2(_Q_[1],_aY_,_aX_)}
      var _aZ_=node[2];
      if(_aZ_)
       {var x=_aZ_[1];
        consume(s,node);
        var _a0_=[0,iter_p_rec(node[1],f,s),0];
        return join([0,caml_call1(f,x),_a0_])}
      return return_unit}
    function iter_p$0(f,s){return iter_p_rec(s[3],f,s)}
    function find_rec(node,f,s)
     {var node$0=node;
      for(;;)
       {if(node$0 === s[4][1])
         {var _aU_=function(param){return find_rec(node$0,f,s)},_aV_=feed(s);
          return caml_call2(_Q_[1],_aV_,_aU_)}
        var _aW_=node$0[2];
        if(_aW_)
         {var x=_aW_[1];
          consume(s,node$0);
          var test=caml_call1(f,x);
          if(test)return lift(_aW_);
          var node$1=node$0[1],node$0=node$1;
          continue}
        return return_none}}
    function find(f,s){return find_rec(s[3],f,s)}
    function find_s_rec(node,f,s)
     {if(node === s[4][1])
       {var _aP_=function(param){return find_s_rec(node,f,s)},_aQ_=feed(s);
        return caml_call2(_Q_[1],_aQ_,_aP_)}
      var _aR_=node[2];
      if(_aR_)
       {var x=_aR_[1];
        consume(s,node);
        var
         _aS_=
          function(param)
           {return 0 === param?find_s_rec(node[1],f,s):lift(_aR_)},
         _aT_=caml_call1(f,x);
        return caml_call2(_Q_[1],_aT_,_aS_)}
      return return_none}
    function find_s$0(f,s){return find_s_rec(s[3],f,s)}
    function find_map_rec(node,f,s)
     {var node$0=node;
      for(;;)
       {if(node$0 === s[4][1])
         {var
           _aM_=function(param){return find_map_rec(node$0,f,s)},
           _aN_=feed(s);
          return caml_call2(_Q_[1],_aN_,_aM_)}
        var _aO_=node$0[2];
        if(_aO_)
         {var x=_aO_[1];
          consume(s,node$0);
          var x$0=caml_call1(f,x);
          if(0 === x$0){var node$1=node$0[1],node$0=node$1;continue}
          return lift(x$0)}
        return return_none}}
    function find_map(f,s){return find_map_rec(s[3],f,s)}
    function find_map_s_rec(node,f,s)
     {if(node === s[4][1])
       {var
         _aI_=function(param){return find_map_s_rec(node,f,s)},
         _aJ_=feed(s);
        return caml_call2(_Q_[1],_aJ_,_aI_)}
      var _aK_=node[2];
      if(_aK_)
       {var x=_aK_[1];
        consume(s,node);
        var
         t=caml_call1(f,x),
         _aL_=function(param){return param?t:find_map_s_rec(node[1],f,s)};
        return caml_call2(_Q_[1],t,_aL_)}
      return return_none}
    function find_map_s(f,s){return find_map_s_rec(s[3],f,s)}
    function combine(s1,s2)
     {function next(param)
       {var t1=get$1(s1),t2=get$1(s2);
        function _aG_(n1)
         {function _aH_(match)
           {if(n1)
             if(match){var x2=match[1],x1=n1[1];return lift([0,[0,x1,x2]])}
            return return_none}
          return caml_call2(_Q_[1],t2,_aH_)}
        return caml_call2(_Q_[1],t1,_aG_)}
      return from(next)}
    function append$0(s1,s2)
     {var current_s=[0,s1];
      function next(param)
       {var t=get$1(current_s[1]);
        function _aF_(param)
         {return param
                  ?t
                  :current_s[1] === s2?return_none:(current_s[1] = s2,next(0))}
        return caml_call2(_Q_[1],t,_aF_)}
      return from(next)}
    function concat(s_top)
     {var current_s=[0,from(function(param){return return_none})];
      function next(param)
       {var t=get$1(current_s[1]);
        function _aC_(param)
         {if(param)return t;
          function _aD_(param)
           {if(param){var s=param[1];current_s[1] = s;return next(0)}
            return return_none}
          var _aE_=get$1(s_top);
          return caml_call2(_Q_[1],_aE_,_aD_)}
        return caml_call2(_Q_[1],t,_aC_)}
      return from(next)}
    function choose$0(streams)
     {function source(s)
       {function _aA_(x){return [0,s,x]}
        var _aB_=get$1(s);
        return [0,s,caml_call2(_Q_[3],_aB_,_aA_)]}
      var streams$0=[0,caml_call2(Stdlib_list[17],source,streams)];
      function next(param)
       {var _av_=streams$0[1];
        if(_av_)
         {var
           _aw_=
            function(param)
             {var x=param[2],s=param[1],l=caml_call2(Stdlib_list[45],s,_av_);
              return x
                      ?(streams$0[1] = [0,source(s),l],lift(x))
                      :(streams$0[1] = l,next(0))},
           _ax_=function(_az_){return _az_[2]},
           _ay_=choose(caml_call2(Stdlib_list[17],_ax_,_av_));
          return caml_call2(_Q_[1],_ay_,_aw_)}
        return return_none}
      return from(next)}
    function parse(s,f)
     {if(3 === s[1][0])caml_call1(Stdlib[2],cst_Lwt_stream_parse);
      var node=s[3];
      function _au_(exn){s[3] = node;return fail(exn)}
      return catch$0(function(param){return caml_call1(f,s)},_au_)}
    function hexdump(stream)
     {var buf=caml_call1(Stdlib_buffer[1],80),num=[0,0];
      return from
              (function(param)
                {function _aq_(l)
                  {if(l)
                    {caml_call1(Stdlib_buffer[8],buf);
                     caml_call3(Stdlib_printf[5],buf,___,num[1]);
                     num[1] = num[1] + 16 | 0;
                     var pos=0,param=l;
                     for(;;)
                      {if(param)
                        {var l$0=param[2],x=param[1];
                         if(8 === pos)caml_call2(Stdlib_buffer[10],buf,32);
                         caml_call3(Stdlib_printf[5],buf,_$_,x);
                         var pos$0=pos + 1 | 0,pos=pos$0,param=l$0;
                         continue}
                       var pos$1=pos;
                       for(;;)
                        {if(pos$1 < 16)
                          {if(8 === pos$1)
                            caml_call2(Stdlib_buffer[14],buf,cst$3);
                           else
                            caml_call2(Stdlib_buffer[14],buf,cst$4);
                           var pos$2=pos$1 + 1 | 0,pos$1=pos$2;
                           continue}
                         caml_call2(Stdlib_buffer[14],buf,cst$5);
                         var
                          _as_=
                           function(ch)
                            {if(32 <= ch)
                              if(126 < ch)var switch$0=0;else var _at_=ch,switch$0=1;
                             else
                              var switch$0=0;
                             if(! switch$0)var _at_=46;
                             return caml_call2(Stdlib_buffer[10],buf,_at_)};
                         caml_call2(Stdlib_list[15],_as_,l);
                         caml_call2(Stdlib_buffer[10],buf,124);
                         return lift([0,caml_call1(Stdlib_buffer[2],buf)])}}}
                   return return_none}
                 var _ar_=nget(16,stream);
                 return caml_call2(_Q_[1],_ar_,_aq_)})}
    var
     Lwt_stream=
      [0,
       from,
       from_direct,
       Closed,
       create$3,
       create_with_reference,
       Full,
       create_bounded,
       of_list,
       of_array,
       of_string,
       clone,
       to_list,
       to_string,
       Empty$0,
       peek,
       npeek,
       get$1,
       nget,
       get_while,
       get_while_s,
       next,
       last_new,
       junk,
       njunk,
       junk_while,
       junk_while_s,
       junk_old,
       get_available,
       get_available_up_to,
       is_empty$1,
       is_closed,
       closed,
       on_terminate,
       on_terminate,
       choose$0,
       map$1,
       map_s$0,
       filter,
       filter_s$0,
       filter_map,
       filter_map_s$0,
       map_list,
       map_list_s,
       fold,
       fold_s,
       iter,
       iter_p$0,
       iter_s$0,
       find,
       find_s$0,
       find_map,
       find_map_s,
       combine,
       append$0,
       concat,
       flatten,
       wrap_exn,
       parse,
       hexdump,
       map_exn];
    caml_register_global(87,Lwt_stream,"Lwt_stream");
    var Off=[248,cst_Lwt_switch_Off,caml_fresh_oo_id(0)];
    function create$4(param){return [0,[0,[0,0]]]}
    function is_on(switch$0){return switch$0[1]?1:0}
    function check(param){if(param)if(! param[1][1])throw Off;return 0}
    function add_hook(switch$0,hook)
     {if(switch$0)
       {var _ap_=switch$0[1][1];
        if(_ap_){var os=_ap_[1];os[1] = [0,hook,os[1]];return 0}
        throw Off}
      return 0}
    function add_hook_or_exec(switch$0,hook)
     {if(switch$0)
       {var _ao_=switch$0[1][1];
        if(_ao_){var os=_ao_[1];os[1] = [0,hook,os[1]];return return_unit}
        return caml_call1(hook,0)}
      return return_unit}
    function turn_off(switch$0)
     {var _am_=switch$0[1];
      if(_am_)
       {var match=_am_[1],hooks=match[1];
        switch$0[1] = 0;
        var _an_=function(hook){return apply(hook,0)};
        return join(caml_call2(Stdlib_list[17],_an_,hooks))}
      return return_unit}
    function with_switch(fn)
     {var switch$0=create$4(0);
      function _al_(param){return turn_off(switch$0)}
      return finalize(function(param){return caml_call1(fn,switch$0)},_al_)}
    var
     Lwt_switch=
      [0,
       create$4,
       with_switch,
       is_on,
       turn_off,
       Off,
       check,
       add_hook,
       add_hook_or_exec];
    caml_register_global(88,Lwt_switch,"Lwt_switch");
    function Make(Ord)
     {function link(t1,t2)
       {var
         c2=t2[3],
         r2=t2[2],
         x2=t2[1],
         c1=t1[3],
         r1=t1[2],
         x1=t1[1],
         c=caml_call2(Ord[1],x1,x2);
        return 0 < c?[0,x2,r2 + 1 | 0,[0,t1,c2]]:[0,x1,r1 + 1 | 0,[0,t2,c1]]}
      function ins(t,ts)
       {var t$0=t,ts$0=ts;
        for(;;)
         {if(ts$0)
           {var ts$1=ts$0[2],t$1=ts$0[1];
            if(t$0[2] < t$1[2])return [0,t$0,ts$0];
            var t$2=link(t$0,t$1),t$0=t$2,ts$0=ts$1;
            continue}
          return [0,t$0,0]}}
      var empty=0;
      function is_empty(ts){return 0 === ts?1:0}
      function add(x,ts){return ins([0,x,0,0],ts)}
      function union(ts$0,ts)
       {if(ts$0)
         {if(ts)
           {var ts2=ts[2],t2=ts[1],ts1=ts$0[2],t1=ts$0[1];
            if(t1[2] < t2[2])return [0,t1,union(ts1,[0,t2,ts2])];
            if(t2[2] < t1[2])return [0,t2,union([0,t1,ts1],ts2)];
            var _ak_=union(ts1,ts2);
            return ins(link(t1,t2),_ak_)}
          return ts$0}
        return ts}
      function find_min(param)
       {if(param)
         {var _ai_=param[2],_aj_=param[1];
          if(_ai_)
           {var x=find_min(_ai_),c=caml_call2(Ord[1],_aj_[1],x);
            return 0 <= c?x:_aj_[1]}
          return _aj_[1]}
        throw Not_found}
      function lookup_min(t)
       {try
         {var _ag_=[0,find_min(t)];return _ag_}
        catch(_ah_)
         {_ah_ = caml_wrap_exception(_ah_);
          if(_ah_ === Not_found)return 0;
          throw _ah_}}
      function get_min(param)
       {if(param)
         {var _ae_=param[2],_af_=param[1];
          if(_ae_)
           {var
             match=get_min(_ae_),
             ts=match[2],
             t=match[1],
             c=caml_call2(Ord[1],_af_[1],t[1]);
            return 0 <= c?[0,t,[0,_af_,ts]]:[0,_af_,_ae_]}
          return [0,_af_,0]}
        throw [0,Assert_failure,_aa_]}
      function remove_min(ts)
       {if(ts)
         {var _ad_=get_min(ts),ts$0=_ad_[2],match=_ad_[1],c=match[3];
          return union(caml_call1(Stdlib_list[9],c),ts$0)}
        throw Not_found}
      function size(l)
       {var _ab_=0;
        function _ac_(s,t){var tl=t[3];return s + (1 + size(tl) | 0) | 0}
        return caml_call3(Stdlib_list[20],_ac_,_ab_,l)}
      return [0,empty,is_empty,add,union,find_min,lookup_min,remove_min,size]}
    var Lwt_pqueue=[0,Make];
    caml_register_global(89,Lwt_pqueue,"Lwt_pqueue");
    return}
  (function(){return this}()));


//# 1 ".js/react/react.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_equal=runtime.caml_equal,
     caml_int_compare=runtime.caml_int_compare,
     caml_new_string=runtime.caml_new_string,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    var
     global_data=runtime.caml_get_global_data(),
     err_max_rank=caml_new_string("maximal rank exceeded"),
     err_sig_undef=caml_new_string("signal value undefined yet"),
     err_fix=caml_new_string("trying to fix a delayed value"),
     err_retain_never=caml_new_string("E.never cannot retain a closure"),
     err_retain_cst_sig=
      caml_new_string("constant signals cannot retain a closure"),
     err_step_executed=caml_new_string("step already executed"),
     err_event_scheduled=caml_new_string("event already scheduled on a step"),
     err_signal_scheduled=
      caml_new_string("signal already scheduled on a step"),
     one=[0,1],
     zero=[0,0],
     zero$0=[0,0],
     one$0=[0,1],
     minus_one=[0,-1],
     zero$1=[0,0.],
     one$1=[0,1.],
     minus_one$0=[0,-1.],
     none=[0,0],
     Assert_failure=global_data.Assert_failure,
     Stdlib=global_data.Stdlib,
     Stdlib_list=global_data.Stdlib__list,
     Not_found=global_data.Not_found,
     Stdlib_weak=global_data.Stdlib__weak,
     _w_=[0,caml_new_string("src/react.ml"),1526,17],
     _j_=[0,caml_new_string("src/react.ml"),1113,18],
     _i_=[0,caml_new_string("src/react.ml"),995,36],
     _h_=[0,caml_new_string("src/react.ml"),761,45],
     _g_=[0,caml_new_string("src/react.ml"),732,53],
     _f_=[0,caml_new_string("src/react.ml"),702,19],
     _e_=[0,1],
     _d_=[0,caml_new_string("src/react.ml"),422,51],
     _c_=[0,caml_new_string("src/react.ml"),411,54];
    function create(size){return [0,caml_call1(Stdlib_weak[1],size),0]}
    function is_empty(a)
     {try
       {var _ek_=a[2] - 1 | 0,_ej_=0;
        if(! (_ek_ < 0))
         {var i=_ej_;
          for(;;)
           {if(caml_call2(Stdlib_weak[6],a[1],i))throw Stdlib[4];
            var _em_=i + 1 | 0;
            if(_ek_ !== i){var i=_em_;continue}
            break}}
        var _el_=1;
        return _el_}
      catch(_en_)
       {_en_ = caml_wrap_exception(_en_);
        if(_en_ === Stdlib[4])return 0;
        throw _en_}}
    function clear(a){a[1] = caml_call1(Stdlib_weak[1],0);a[2] = 0;return 0}
    function get(a,i){return caml_call2(Stdlib_weak[4],a[1],i)}
    function swap(a,i$0,i)
     {var v=caml_call2(Stdlib_weak[4],a[1],i);
      caml_call5(Stdlib_weak[8],a[1],i$0,a[1],i,1);
      return caml_call3(Stdlib_weak[3],a[1],i$0,v)}
    function add(a,v)
     {var _ei_=caml_call1(Stdlib_weak[2],a[1]);
      if(a[2] === _ei_)
       {var arr=caml_call1(Stdlib_weak[1],2 * (a[2] + 1 | 0) | 0);
        caml_call5(Stdlib_weak[8],a[1],0,arr,0,a[2]);
        a[1] = arr}
      caml_call3(Stdlib_weak[3],a[1],a[2],[0,v]);
      a[2] = a[2] + 1 | 0;
      return 0}
    function scan_add(a,v)
     {try
       {var _ee_=a[2] - 1 | 0,_ed_=0;
        if(! (_ee_ < 0))
         {var i=_ed_;
          for(;;)
           {var match=caml_call2(Stdlib_weak[4],a[1],i);
            if(! match)
             {caml_call3(Stdlib_weak[3],a[1],i,[0,v]);throw Stdlib[4]}
            var _eg_=i + 1 | 0;
            if(_ee_ !== i){var i=_eg_;continue}
            break}}
        var _ef_=add(a,v);
        return _ef_}
      catch(_eh_)
       {_eh_ = caml_wrap_exception(_eh_);
        if(_eh_ === Stdlib[4])return 0;
        throw _eh_}}
    function rem_last(a)
     {var l=a[2] - 1 | 0;a[2] = l;return caml_call3(Stdlib_weak[3],a[1],l,0)}
    function rem(a,v)
     {try
       {var _d$_=a[2] - 1 | 0,_d__=0;
        if(! (_d$_ < 0))
         {var i=_d__;
          for(;;)
           {var match=caml_call2(Stdlib_weak[4],a[1],i);
            if(match)
             {var v$0=match[1];
              if(v === v$0)
               {caml_call3(Stdlib_weak[3],a[1],i,0);throw Stdlib[4]}}
            var _eb_=i + 1 | 0;
            if(_d$_ !== i){var i=_eb_;continue}
            break}}
        var _ea_=0;
        return _ea_}
      catch(_ec_)
       {_ec_ = caml_wrap_exception(_ec_);
        if(_ec_ === Stdlib[4])return 0;
        throw _ec_}}
    function fold(f,acc,a)
     {var acc$0=[0,acc],_d8_=a[2] - 1 | 0,_d7_=0;
      if(! (_d8_ < 0))
       {var i=_d7_;
        for(;;)
         {var match=caml_call2(Stdlib_weak[4],a[1],i);
          if(match){var v=match[1];acc$0[1] = caml_call2(f,acc$0[1],v)}
          var _d9_=i + 1 | 0;
          if(_d8_ !== i){var i=_d9_;continue}
          break}}
      return acc$0[1]}
    function compare_down(h,i$0,i)
     {var match=get(h,i$0),match$0=get(h,i);
      if(match)
       {var _d6_=match[1];
        if(match$0){var n=match$0[1];return caml_int_compare(_d6_[1],n[1])}
        return 1}
      return match$0?-1:0}
    function down(h,i)
     {var i$0=i;
      for(;;)
       {var
         last=h[2] - 1 | 0,
         start=2 * i$0 | 0,
         l=start + 1 | 0,
         r=start + 2 | 0;
        if(last < l)return 0;
        var
         child=last < r?l:0 <= compare_down(h,l,r)?r:l,
         _d5_=0 < compare_down(h,i$0,child)?1:0;
        if(_d5_){swap(h,i$0,child);var i$0=child;continue}
        return _d5_}}
    var _a_=Stdlib[8],nil=[0,1,create(0),0,0];
    function create$0(param){var h=create(11);return [0,0,h,0,0]}
    function add$0(c,n$0)
     {if(n$0[2] === c)return 0;
      n$0[2] = c;
      var _d4_=c[2];
      add(_d4_,n$0);
      var i$0=_d4_[2] - 1 | 0,i=i$0,last_none=0;
      for(;;)
       {if(0 === i)return last_none?down(_d4_,0):last_none;
        var p=(i - 1 | 0) / 2 | 0,match=get(_d4_,i),match$0=get(_d4_,p);
        if(match)
         {var _d3_=match[1];
          if(match$0)
           {var n=match$0[1];
            if(0 <= caml_int_compare(_d3_[1],n[1]))
             return last_none?down(_d4_,i):last_none;
            swap(_d4_,i,p);
            var i=p,last_none=0;
            continue}
          swap(_d4_,i,p);
          var i=p,last_none=1;
          continue}
        return 0}}
    function add_deps(c,n)
     {var _d2_=n[6],_d0_=_d2_[2] - 1 | 0,_dZ_=0;
      if(! (_d0_ < 0))
       {var i=_dZ_;
        for(;;)
         {var match=caml_call2(Stdlib_weak[4],_d2_[1],i);
          if(match){var v=match[1];add$0(c,v)}
          var _d1_=i + 1 | 0;
          if(_d0_ !== i){var i=_d1_;continue}
          break}}
      return 0}
    function add_eop(c,op){c[3] = [0,op,c[3]];return 0}
    function allow_reschedule(n){n[2] = nil;return 0}
    function rebuild(c)
     {var _dY_=c[2],_dW_=(_dY_[2] - 2 | 0) / 2 | 0;
      if(! (_dW_ < 0))
       {var i=_dW_;
        for(;;)
         {down(_dY_,i);
          var _dX_=i - 1 | 0;
          if(0 !== i){var i=_dX_;continue}
          break}}
      return 0}
    function execute(c$1)
     {if(c$1[1])return caml_call1(Stdlib[2],err_step_executed);
      var c=c$1;
      a:
      for(;;)
       {var
         eops=
          function(c)
           {var _dU_=c[3];
            function _dV_(op){return caml_call1(op,0)}
            caml_call2(Stdlib_list[15],_dV_,_dU_);
            c[3] = 0;
            return 0},
         cops=
          function(c)
           {var _dS_=c[4];
            function _dT_(op){return caml_call1(op,0)}
            caml_call2(Stdlib_list[15],_dT_,_dS_);
            c[4] = 0;
            return 0},
         finish=function(c){c[1] = 1;c[2] = create(0);return 0};
        b:
        for(;;)
         {var _dO_=c[2];
          for(;;)
           {var s=_dO_[2];
            if(0 === s)
             var match=0;
            else
             {var v=get(_dO_,0);
              if(1 < s)
               {var _dN_=get(_dO_,s - 1 | 0);
                caml_call1(caml_call2(Stdlib_weak[3],_dO_[1],0),_dN_);
                rem_last(_dO_);
                down(_dO_,0)}
              else
               rem_last(_dO_);
              if(! v)continue;
              var match=v}
            if(match)
             {var n=match[1];
              if(n[1] !== _a_){caml_call1(n[5],c);continue b}
              var c$0=create$0(0);
              eops(c);
              var
               _dP_=c[2],
               _dM_=0,
               _dQ_=[0,n,fold(function(acc,e){return [0,e,acc]},_dM_,_dP_)],
               _dR_=
                function(c){return function(n){return caml_call1(n[5],c)}}
                 (c$0);
              caml_call2(Stdlib_list[15],_dR_,_dQ_);
              cops(c);
              finish(c);
              var c=c$0;
              continue a}
            eops(c);
            cops(c);
            return finish(c)}}}}
    function find_unfinished(nl)
     {var param$2=[0,nl,0],next=0,param=param$2;
      a:
      for(;;)
       {if(param)
         {var _dL_=param[1];
          if(_dL_)
           {var todo=param[2],next$0=next,param$1=_dL_;
            for(;;)
             {if(param$1)
               {var nl$0=param$1[2],n=param$1[1];
                if(n[2][1])
                 {var
                   next$1=[0,caml_call1(n[4],0),next$0],
                   next$0=next$1,
                   param$1=nl$0;
                  continue}
                return n[2]}
              var next=next$0,param=todo;
              continue a}}
          var param$0=param[2],param=param$0;
          continue}
        if(0 === next)return nil;
        var param=next,next=0;
        continue}}
    var _b_=Stdlib[9],max_rank=_a_ - 1 | 0;
    function nop(param){return 0}
    function no_producers(param){return 0}
    function create$1(r){return [0,r,nil,nop,no_producers,nop,create(0)]}
    function rem_dep(n$0,n){return rem(n$0[6],n)}
    function add_dep(n$0,n){return scan_add(n$0[6],n)}
    function deps(n)
     {var _dJ_=n[6],_dK_=0;
      return fold(function(acc,d){return [0,d,acc]},_dK_,_dJ_)}
    function bind(n,p,u){n[4] = p;n[5] = u;return 0}
    function stop(opt,n)
     {if(opt)var sth=opt[1],strong=sth;else var strong=0;
      if(strong)
       {var param$1=caml_call1(n[4],0);
        n[4] = no_producers;
        n[5] = nop;
        clear(n[6]);
        var next=0,to_rem=n,param=param$1;
        for(;;)
         {if(param)
           {var todo=param[2],n$0=param[1];
            rem_dep(n$0,to_rem);
            if(n$0[1] !== _b_)
             if(! (1 - is_empty(n$0[6])))
              {var prods=caml_call1(n$0[4],0);
               n$0[4] = no_producers;
               n$0[5] = nop;
               clear(n$0[6]);
               var next$0=[0,[0,n$0,prods],next],next=next$0,param=todo;
               continue}
            var param=todo;
            continue}
          if(next)
           {var
             next$1=next[2],
             match=next[1],
             param$0=match[2],
             to_rem$0=match[1],
             next=next$1,
             to_rem=to_rem$0,
             param=param$0;
            continue}
          return 0}}
      n[4] = no_producers;
      n[5] = nop;
      return clear(n[6])}
    var max=create$1(_b_);
    function rmax(n$0,n){return n[1] < n$0[1]?n$0:n}
    function rsucc(n)
     {return n[1] === _a_
              ?_b_
              :n[1] < max_rank?n[1] + 1 | 0:caml_call1(Stdlib[2],err_max_rank)}
    function rsucc2(n$0,n){var r=rsucc(n$0),r$0=rsucc(n);return r$0 < r?r:r$0}
    function update_rank(n,r)
     {if(n[1] < r)
       {n[1] = r;
        var param$1=[0,n,0],param=param$1;
        for(;;)
         {if(param)
           {var
             todo=param[2],
             n$0=param[1],
             update$0=
              function(n)
               {function update(todo,d)
                 {if(! (n[1] < d[1]))
                   if(n[1] !== _a_){d[1] = rsucc(n);return [0,d,todo]}
                  return todo}
                return update},
             update=update$0(n$0),
             param$0=fold(update,todo,n$0[6]),
             param=param$0;
            continue}
          return 1}}
      return 0}
    function eval$0(m)
     {var _dI_=m[1][1];
      if(_dI_){var v=_dI_[1];return v}
      throw [0,Assert_failure,_c_]}
    function emut(rank){return [0,[0,0],create$1(rank)]}
    function event(m,p,u){bind(m[2],p,u);return [0,m]}
    function eupdate(v,m,c)
     {m[1][1] = [0,v];
      var _dG_=m[1];
      function op(_dH_){_dG_[1] = 0;return 0}
      c[4] = [0,op,c[4]];
      return add_deps(c,m[2])}
    function sval(m)
     {var _dF_=m[1];
      if(_dF_){var v=_dF_[1];return v}
      throw [0,Assert_failure,_d_]}
    function smut(rank,eq){return [0,0,eq,create$1(rank)]}
    function signal(i,m,p,u)
     {bind(m[3],p,u);
      if(i)m[1] = i;
      var c=find_unfinished(caml_call1(m[3][4],0));
      if(c === nil)caml_call1(m[3][5],nil);else add$0(c,m[3]);
      return [1,m]}
    function supdate(v,m,c)
     {var _dD_=m[1];
      if(_dD_)
       {var v$0=_dD_[1];
        if(caml_call2(m[2],v,v$0))return 0;
        m[1] = [0,v];
        var _dE_=c !== nil?1:0;
        return _dE_?add_deps(c,m[3]):_dE_}
      m[1] = [0,v];
      return 0}
    function add_dep$0(m,n)
     {add_dep(m[2],n);
      var _dC_=0 !== m[1][1]?1:0;
      return _dC_?add$0(m[2][2],n):_dC_}
    var never=0;
    function create$2(param)
     {var m=emut(_b_);
      return [0,
              [0,m],
              function(step,v)
               {if(step)
                 {var c=step[1];
                  if(c[1])
                   caml_call1(Stdlib[2],err_step_executed);
                  else
                   if(m[2][2][1])
                    m[2][2] = c;
                   else
                    caml_call1(Stdlib[2],err_event_scheduled);
                  return eupdate(v,m,c)}
                var c$0=create$0(0);
                m[2][2] = c$0;
                eupdate(v,m,c$0);
                return execute(c$0)}]}
    function retain(e,c)
     {if(e){var m=e[1],c$0=m[2][3];m[2][3] = c;return [0,82,c$0]}
      return caml_call1(Stdlib[2],err_retain_never)}
    function stop$0(strong,param)
     {if(param){var m=param[1];return stop(strong,m[2])}return 0}
    function equal(e$0,e)
     {if(e$0)
       {if(e){var m=e[1],m$0=e$0[1];return m$0 === m?1:0}}
      else
       if(! e)return 1;
      return 0}
    function trace(opt,t,e)
     {if(opt)var sth=opt[1],iff=sth;else var iff=_e_;
      if(0 === iff[0])
       {if(0 === iff[1])return e;
        if(e)
         {var
           m=e[1],
           m$0=emut(rsucc(m[2])),
           p=function(param){return [0,m[2],0]},
           u=
            function(c)
             {var v=eval$0(m);caml_call1(t,v);return eupdate(v,m$0,c)};
          add_dep$0(m,m$0[2]);
          return event(m$0,p,u)}
        return e}
      var mc=iff[1];
      if(e)
       {var
         m$1=e[1],
         m$2=emut(rsucc2(mc[3],m$1[2])),
         p$0=function(param){return [0,mc[3],[0,m$1[2],0]]},
         u$0=
          function(c)
           {var _dB_=m$1[1][1];
            if(_dB_)
             {var v=_dB_[1];
              if(sval(mc))caml_call1(t,v);
              return eupdate(v,m$2,c)}
            return 0};
        add_dep(mc[3],m$2[2]);
        add_dep$0(m$1,m$2[2]);
        return event(m$2,p$0,u$0)}
      return 0}
    function once(param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {rem_dep(m[2],m$0[2]);
            eupdate(eval$0(m),m$0,c);
            return stop(0,m$0[2])};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function drop_once(param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {function u(c){return eupdate(eval$0(m),m$0,c)}
            return bind(m$0[2],p,u)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function app(ef,param)
     {if(param)
       {var m=param[1];
        if(ef)
         {var
           mf=ef[1],
           m$0=emut(rsucc2(m[2],mf[2])),
           p=function(param){return [0,m[2],[0,mf[2],0]]},
           u=
            function(c)
             {var _dz_=mf[1][1],_dA_=m[1][1];
              if(_dz_)
               if(_dA_)
                {var v=_dA_[1],f=_dz_[1];
                 return eupdate(caml_call1(f,v),m$0,c)}
              return 0};
          add_dep$0(m,m$0[2]);
          add_dep$0(mf,m$0[2]);
          return event(m$0,p,u)}
        return 0}
      return 0}
    function map(f,param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=function(c){return eupdate(caml_call1(f,eval$0(m)),m$0,c)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function stamp(e,v)
     {if(e)
       {var
         m=e[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=function(c){return eupdate(v,m$0,c)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function filter(pred,param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var v=eval$0(m);return caml_call1(pred,v)?eupdate(v,m$0,c):0};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function fmap(fm,param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var match=caml_call1(fm,eval$0(m));
            if(match){var v=match[1];return eupdate(v,m$0,c)}
            return 0};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function diff(d,param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         last=[0,0],
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var v=eval$0(m),_dy_=last[1];
            if(_dy_)
             {var v$0=_dy_[1];
              last[1] = [0,v];
              return eupdate(caml_call2(d,v,v$0),m$0,c)}
            last[1] = [0,v];
            return 0};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function changes(opt,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         last=[0,0],
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var v=eval$0(m),_dx_=last[1];
            if(_dx_)
             {var v$0=_dx_[1];
              last[1] = [0,v];
              return caml_call2(eq,v,v$0)?0:eupdate(v,m$0,c)}
            last[1] = [0,v];
            return eupdate(v,m$0,c)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function on(c,e)
     {if(e)
       {var m=e[1];
        if(0 === c[0])return 0 === c[1]?0:e;
        var
         mc=c[1],
         m$0=emut(rsucc2(m[2],mc[3])),
         p=function(param){return [0,m[2],[0,mc[3],0]]},
         u=function(c){return m[1][1]?sval(mc)?eupdate(eval$0(m),m$0,c):0:0};
        add_dep$0(m,m$0[2]);
        add_dep(mc[3],m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function dismiss(c,e)
     {if(e)
       {var m=e[1];
        if(c)
         {var
           mc=c[1],
           m$0=emut(rsucc2(mc[2],m[2])),
           p=function(param){return [0,mc[2],[0,m[2],0]]},
           u=function(c){return mc[1][1]?0:eupdate(eval$0(m),m$0,c)};
          add_dep$0(mc,m$0[2]);
          add_dep$0(m,m$0[2]);
          return event(m$0,p,u)}
        return e}
      return 0}
    function until(c,e)
     {if(e)
       {var m=e[1];
        if(c)
         {var
           mc=c[1],
           m$0=emut(rsucc2(m[2],mc[2])),
           p=function(param){return [0,m[2],[0,mc[2],0]]},
           u=
            function(c)
             {return mc[1][1]
                      ?(rem_dep(m[2],m$0[2]),rem_dep(mc[2],m$0[2]),stop(0,m$0[2]))
                      :eupdate(eval$0(m),m$0,c)};
          add_dep$0(m,m$0[2]);
          add_dep$0(mc,m$0[2]);
          return event(m$0,p,u)}
        return e}
      return 0}
    function accum(ef,i)
     {if(ef)
       {var
         m=ef[1],
         m$0=emut(rsucc(m[2])),
         acc=[0,i],
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var _dw_=acc[1];
            acc[1] = caml_call1(eval$0(m),_dw_);
            return eupdate(acc[1],m$0,c)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function fold$0(f,i,param)
     {if(param)
       {var
         m=param[1],
         m$0=emut(rsucc(m[2])),
         acc=[0,i],
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var _dv_=eval$0(m);
            acc[1] = caml_call2(f,acc[1],_dv_);
            return eupdate(acc[1],m$0,c)};
        add_dep$0(m,m$0[2]);
        return event(m$0,p,u)}
      return 0}
    function occurs(m){return 0 !== m[1][1]?1:0}
    function find_muts_and_next_rank(param)
     {var acc=0,max$0=max,param$0=param;
      for(;;)
       {if(param$0)
         {var _dt_=param$0[1];
          if(_dt_)
           {var
             l=param$0[2],
             m=_dt_[1],
             max$1=rmax(max$0,m[2]),
             acc$0=[0,m,acc],
             acc=acc$0,
             max$0=max$1,
             param$0=l;
            continue}
          var param$1=param$0[2],param$0=param$1;
          continue}
        var _du_=rsucc(max$0);
        return [0,caml_call1(Stdlib_list[9],acc),_du_]}}
    function select(el)
     {var
       match=find_muts_and_next_rank(el),
       r=match[2],
       emuts=match[1],
       m=emut(r);
      function p(param)
       {function _ds_(m){return m[2]}
        return caml_call2(Stdlib_list[19],_ds_,emuts)}
      function u(c)
       {try
         {var
           _dq_=
            eupdate(eval$0(caml_call2(Stdlib_list[33],occurs,emuts)),m,c);
          return _dq_}
        catch(_dr_)
         {_dr_ = caml_wrap_exception(_dr_);
          if(_dr_ === Not_found)throw [0,Assert_failure,_f_];
          throw _dr_}}
      function _dp_(m$0){return add_dep$0(m$0,m[2])}
      caml_call2(Stdlib_list[15],_dp_,emuts);
      return event(m,p,u)}
    function merge(f,a,el)
     {var
       match=find_muts_and_next_rank(el),
       r=match[2],
       emuts=match[1],
       m=emut(r);
      function p(param)
       {function _do_(m){return m[2]}
        return caml_call2(Stdlib_list[19],_do_,emuts)}
      function u(c)
       {var acc=a,param=emuts;
        for(;;)
         {if(param)
           {var l=param[2],m$0=param[1];
            if(occurs(m$0))
             {var acc$0=caml_call2(f,acc,eval$0(m$0)),acc=acc$0,param=l;
              continue}
            var param=l;
            continue}
          return eupdate(acc,m,c)}}
      function _dn_(m$0){return add_dep$0(m$0,m[2])}
      caml_call2(Stdlib_list[15],_dn_,emuts);
      return event(m,p,u)}
    function switch$0(e,param)
     {if(param)
       {var ms=param[1];
        if(e)var m=e[1],r=rsucc2(m[2],ms[2]);else var r=rsucc(ms[2]);
        var
         m$0=emut(r),
         src=[0,e],
         p=
          function(param)
           {var _dm_=src[1];
            if(_dm_){var m=_dm_[1];return [0,m[2],[0,ms[2],0]]}
            return [0,ms[2],0]},
         u=
          function(c)
           {var _dg_=ms[1][1];
            if(_dg_)
             {var e=_dg_[1],_dh_=src[1];
              if(_dh_){var m=_dh_[1];rem_dep(m[2],m$0[2])}
              src[1] = e;
              if(e)
               {var m$1=e[1];
                add_dep(m$1[2],m$0[2]);
                var _di_=rsucc2(m$1[2],ms[2]);
                if(update_rank(m$0[2],_di_))
                 {allow_reschedule(m$0[2]);return rebuild(c)}
                var _dj_=m$1[1][1];
                if(_dj_){var v=_dj_[1];return eupdate(v,m$0,c)}
                return 0}
              var _dk_=rsucc(ms[2]);
              update_rank(m$0[2],_dk_);
              return 0}
            var _dl_=src[1];
            if(_dl_){var m$2=_dl_[1];return eupdate(eval$0(m$2),m$0,c)}
            throw [0,Assert_failure,_g_]};
        if(e){var m$1=e[1];add_dep$0(m$1,m$0[2])}
        add_dep$0(ms,m$0[2]);
        return event(m$0,p,u)}
      return e}
    function fix(f)
     {var m=emut(_a_);
      function _da_(param){throw [0,Assert_failure,_h_]}
      var
       e=event(m,function(param){return 0},_da_),
       _db_=caml_call1(f,e),
       _dc_=_db_[1];
      if(_dc_)
       {var r=_db_[2],m$0=_dc_[1];
        if(m$0[2][1] === _a_)caml_call1(Stdlib[2],err_fix);
        var
         p=function(param){return 0},
         u=
          function(c)
           {var _dd_=[0,eval$0(m$0)];
            m[1][1] = _dd_;
            var _de_=m[1];
            add_eop(c,function(_df_){_de_[1] = 0;return 0});
            return add_deps(c,m[2])};
        bind(m[2],p,u);
        add_dep$0(m$0,m[2]);
        return r}
      var r$0=_db_[2];
      return r$0}
    function l2(f,e0,match)
     {if(e0)
       {if(match)
         {var
           m1=match[1],
           m0=e0[1],
           r=rsucc2(m0[2],m1[2]),
           m=emut(r),
           p=function(param){return [0,m0[2],[0,m1[2],0]]},
           u=
            function(c)
             {var _c__=m0[1][1],_c$_=m1[1][1];
              if(_c__)
               if(_c$_)
                {var v1=_c$_[1],v0=_c__[1];
                 return eupdate(caml_call2(f,v0,v1),m,c)}
              return 0};
          add_dep$0(m0,m[2]);
          add_dep$0(m1,m[2]);
          return event(m,p,u)}
        return 0}
      return 0}
    function l3(f,e0,e1,match)
     {if(e0)
       {if(e1)
         {if(match)
           {var
             m2=match[1],
             m1=e1[1],
             m0=e0[1],
             _c6_=m2[2],
             r=rsucc(rmax(rmax(m0[2],m1[2]),_c6_)),
             m=emut(r),
             p=function(param){return [0,m0[2],[0,m1[2],[0,m2[2],0]]]},
             u=
              function(c)
               {var _c7_=m0[1][1],_c8_=m1[1][1],_c9_=m2[1][1];
                if(_c7_)
                 if(_c8_)
                  if(_c9_)
                   {var v2=_c9_[1],v1=_c8_[1],v0=_c7_[1];
                    return eupdate(caml_call3(f,v0,v1,v2),m,c)}
                return 0};
            add_dep$0(m0,m[2]);
            add_dep$0(m1,m[2]);
            add_dep$0(m2,m[2]);
            return event(m,p,u)}
          return 0}
        return 0}
      return 0}
    function l4(f,e0,e1,e2,match)
     {if(e0)
       {if(e1)
         {if(e2)
           {if(match)
             {var
               m3=match[1],
               m2=e2[1],
               m1=e1[1],
               m0=e0[1],
               _c1_=rmax(m2[2],m3[2]),
               r=rsucc(rmax(rmax(m0[2],m1[2]),_c1_)),
               m=emut(r),
               p=
                function(param)
                 {return [0,m0[2],[0,m1[2],[0,m2[2],[0,m3[2],0]]]]},
               u=
                function(c)
                 {var _c2_=m0[1][1],_c3_=m1[1][1],_c4_=m2[1][1],_c5_=m3[1][1];
                  if(_c2_)
                   if(_c3_)
                    if(_c4_)
                     if(_c5_)
                      {var v3=_c5_[1],v2=_c4_[1],v1=_c3_[1],v0=_c2_[1];
                       return eupdate(caml_call4(f,v0,v1,v2,v3),m,c)}
                  return 0};
              add_dep$0(m0,m[2]);
              add_dep$0(m1,m[2]);
              add_dep$0(m2,m[2]);
              add_dep$0(m3,m[2]);
              return event(m,p,u)}
            return 0}
          return 0}
        return 0}
      return 0}
    function l5(f,e0,e1,e2,e3,match)
     {if(e0)
       {if(e1)
         {if(e2)
           {if(e3)
             {if(match)
               {var
                 m4=match[1],
                 m3=e3[1],
                 m2=e2[1],
                 m1=e1[1],
                 m0=e0[1],
                 _cU_=m4[2],
                 _cV_=rmax(m2[2],m3[2]),
                 r=rsucc(rmax(rmax(rmax(m0[2],m1[2]),_cV_),_cU_)),
                 m=emut(r),
                 p=
                  function(param)
                   {return [0,m0[2],[0,m1[2],[0,m2[2],[0,m3[2],[0,m4[2],0]]]]]},
                 u=
                  function(c)
                   {var
                     _cW_=m0[1][1],
                     _cX_=m1[1][1],
                     _cY_=m2[1][1],
                     _cZ_=m3[1][1],
                     _c0_=m4[1][1];
                    if(_cW_)
                     if(_cX_)
                      if(_cY_)
                       if(_cZ_)
                        if(_c0_)
                         {var v4=_c0_[1],v3=_cZ_[1],v2=_cY_[1],v1=_cX_[1],v0=_cW_[1];
                          return eupdate(caml_call5(f,v0,v1,v2,v3,v4),m,c)}
                    return 0};
                add_dep$0(m0,m[2]);
                add_dep$0(m1,m[2]);
                add_dep$0(m2,m[2]);
                add_dep$0(m3,m[2]);
                add_dep$0(m4,m[2]);
                return event(m,p,u)}
              return 0}
            return 0}
          return 0}
        return 0}
      return 0}
    function l6(f,e0,e1,e2,e3,e4,match)
     {if(e0)
       {if(e1)
         {if(e2)
           {if(e3)
             {if(e4)
               {if(match)
                 {var
                   m5=match[1],
                   m4=e4[1],
                   m3=e3[1],
                   m2=e2[1],
                   m1=e1[1],
                   m0=e0[1],
                   _cM_=rmax(m4[2],m5[2]),
                   _cN_=rmax(m2[2],m3[2]),
                   r=rsucc(rmax(rmax(rmax(m0[2],m1[2]),_cN_),_cM_)),
                   m=emut(r),
                   p=
                    function(param)
                     {return [0,
                              m0[2],
                              [0,m1[2],[0,m2[2],[0,m3[2],[0,m4[2],[0,m5[2],0]]]]]]},
                   u=
                    function(c)
                     {var
                       _cO_=m0[1][1],
                       _cP_=m1[1][1],
                       _cQ_=m2[1][1],
                       _cR_=m3[1][1],
                       _cS_=m4[1][1],
                       _cT_=m5[1][1];
                      if(_cO_)
                       if(_cP_)
                        if(_cQ_)
                         if(_cR_)
                          if(_cS_)
                           if(_cT_)
                            {var
                              v5=_cT_[1],
                              v4=_cS_[1],
                              v3=_cR_[1],
                              v2=_cQ_[1],
                              v1=_cP_[1],
                              v0=_cO_[1];
                             return eupdate(caml_call6(f,v0,v1,v2,v3,v4,v5),m,c)}
                      return 0};
                  add_dep$0(m0,m[2]);
                  add_dep$0(m1,m[2]);
                  add_dep$0(m2,m[2]);
                  add_dep$0(m3,m[2]);
                  add_dep$0(m4,m[2]);
                  add_dep$0(m5,m[2]);
                  return event(m,p,u)}
                return 0}
              return 0}
            return 0}
          return 0}
        return 0}
      return 0}
    function some(e){return map(function(v){return [0,v]},e)}
    function value(default$0,e)
     {if(default$0)
       {var _cJ_=default$0[1];
        if(0 === _cJ_[0])
         {var dv=_cJ_[1];
          return map
                  (function(param)
                    {if(param){var v=param[1];return v}return dv},
                   e)}
        var ms=_cJ_[1];
        if(e)
         {var
           m=e[1],
           m$0=emut(rsucc2(m[2],ms[3])),
           p=function(param){return [0,m[2],[0,ms[3],0]]},
           u=
            function(c)
             {var _cK_=m[1][1];
              if(_cK_)
               {var _cL_=_cK_[1];
                if(_cL_){var v=_cL_[1];return eupdate(v,m$0,c)}
                return eupdate(sval(ms),m$0,c)}
              return 0};
          add_dep$0(m,m$0[2]);
          add_dep(ms[3],m$0[2]);
          return event(m$0,p,u)}
        return 0}
      return fmap(function(v){return v},e)}
    var Option=[0,some,value];
    function end_of_step_add_dep(opt,stop_if_stopped,m$0,m)
     {if(opt)
       var sth=opt[1],post_add_op=sth;
      else
       var post_add_op=function(param){return 0};
      var c=find_unfinished(caml_call1(m$0[3][4],0));
      if(c === nil){add_dep(m$0[3],m[2]);return caml_call1(post_add_op,0)}
      function add_dep$0(param)
       {if(m$0[3][5] === nop)
         return stop_if_stopped?stop(0,m[2]):stop_if_stopped;
        var _cI_=rsucc(m$0[3]);
        update_rank(m[2],_cI_);
        add_dep(m$0[3],m[2]);
        return caml_call1(post_add_op,0)}
      return add_eop(c,add_dep$0)}
    function const$0(v){return [0,v]}
    function create$3(opt,v)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      var m=smut(_b_,eq);
      m[1] = [0,v];
      return [0,
              [1,m],
              function(step,v)
               {var _cH_=sval(m);
                if(caml_call2(m[2],_cH_,v))return 0;
                if(step)
                 {var c=step[1];
                  if(c[1])
                   caml_call1(Stdlib[2],err_step_executed);
                  else
                   if(m[3][2][1])
                    m[3][2] = c;
                   else
                    caml_call1(Stdlib[2],err_signal_scheduled);
                  m[1] = [0,v];
                  return add_deps(c,m[3])}
                var c$0=create$0(0);
                m[3][2] = c$0;
                m[1] = [0,v];
                add_deps(c$0,m[3]);
                return execute(c$0)}]}
    function retain$0(s,c)
     {if(0 === s[0])return caml_call1(Stdlib[2],err_retain_cst_sig);
      var m=s[1],c$0=m[3][3];
      m[3][3] = c;
      return [0,82,c$0]}
    function eq_fun(param)
     {if(0 === param[0])return 0;var m=param[1];return [0,m[2]]}
    function value$0(param)
     {if(0 === param[0])
       var v=param[1];
      else
       {var _cG_=param[1][1];
        if(! _cG_)return caml_call1(Stdlib[3],err_sig_undef);
        var v=_cG_[1]}
      return v}
    function stop$1(strong,param)
     {if(0 === param[0])return 0;
      var m=param[1];
      if(m[1])return stop(strong,m[3]);
      var c=find_unfinished(caml_call1(m[3][4],0));
      if(c === nil)throw [0,Assert_failure,_i_];
      function stop$0(param){return stop(strong,m[3])}
      return add_eop(c,stop$0)}
    function equal$0(opt,s$0,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s$0[0])
       {var _cE_=s$0[1];
        if(0 === s[0]){var v=s[1];return caml_call2(eq,_cE_,v)}}
      else
       {var _cF_=s$0[1];if(0 !== s[0]){var m=s[1];return _cF_ === m?1:0}}
      return 0}
    function trace$0(opt,t,s)
     {if(opt)var sth=opt[1],iff=sth;else var iff=[0,1];
      if(0 === iff[0])
       {if(0 === iff[1])return s;
        if(0 === s[0]){var v=s[1];caml_call1(t,v);return s}
        var
         m=s[1],
         _cB_=m[2],
         m$0=smut(rsucc(m[3]),_cB_),
         p=function(param){return [0,m[3],0]},
         u=function(c){var v=sval(m);caml_call1(t,v);return supdate(v,m$0,c)};
        add_dep(m[3],m$0[3]);
        return signal(0,m$0,p,u)}
      var mc=iff[1];
      if(0 === s[0])
       {var
         v$0=s[1],
         m$1=smut(rsucc(mc[3]),caml_equal),
         p$0=function(param){return [0,mc[3],0]},
         u$0=
          function(c)
           {if(sval(mc))caml_call1(t,v$0);
            rem_dep(mc[3],m$1[3]);
            return stop(0,m$1[3])};
        add_dep(mc[3],m$1[3]);
        return signal([0,v$0],m$1,p$0,u$0)}
      var m$2=s[1],_cC_=m$2[2],m$3=smut(rsucc2(mc[3],m$2[3]),_cC_);
      function p$1(param){return [0,mc[3],[0,m$2[3],0]]}
      function u$1(c)
       {var v=sval(m$2),_cD_=m$3[1];
        if(_cD_){var v$0=_cD_[1];if(caml_call2(m$3[2],v,v$0))return 0}
        if(sval(mc))caml_call1(t,v);
        return supdate(v,m$3,c)}
      add_dep(mc[3],m$3[3]);
      add_dep(m$2[3],m$3[3]);
      return signal(0,m$3,p$1,u$1)}
    function hold(opt,i,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(param)
       {var
         m=param[1],
         m$0=smut(rsucc(m[2]),eq),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var _cA_=m[1][1];
            if(_cA_){var v=_cA_[1];return supdate(v,m$0,c)}
            return 0};
        add_dep$0(m,m$0[3]);
        return signal([0,i],m$0,p,u)}
      return [0,i]}
    function l1(opt,f,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === param[0]){var v=param[1];return [0,caml_call1(f,v)]}
      var m=param[1],m$0=smut(rsucc(m[3]),eq);
      function p(param){return [0,m[3],0]}
      function u(c){return supdate(caml_call1(f,sval(m)),m$0,c)}
      add_dep(m[3],m$0[3]);
      return signal(0,m$0,p,u)}
    function app$0(opt,sf,sv)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === sf[0])
       {var _cx_=sf[1];
        if(0 === sv[0]){var v=sv[1];return [0,caml_call1(_cx_,v)]}
        return l1([0,eq],_cx_,sv)}
      var _cy_=sf[1];
      if(0 === sv[0])
       {var
         v$0=sv[1],
         m=smut(rsucc(_cy_[3]),eq),
         p=function(param){return [0,_cy_[3],0]},
         u=function(c){return supdate(caml_call1(sval(_cy_),v$0),m,c)};
        add_dep(_cy_[3],m[3]);
        return signal(0,m,p,u)}
      var mv=sv[1],m$0=smut(rsucc2(_cy_[3],mv[3]),eq);
      function p$0(param){return [0,_cy_[3],[0,mv[3],0]]}
      function u$0(c)
       {var _cz_=sval(mv);return supdate(caml_call1(sval(_cy_),_cz_),m$0,c)}
      add_dep(_cy_[3],m$0[3]);
      add_dep(mv[3],m$0[3]);
      return signal(0,m$0,p$0,u$0)}
    function filter$0(opt,pred,i,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s[0]){var v=s[1];return caml_call1(pred,v)?s:[0,i]}
      var m=s[1],m$0=smut(rsucc(m[3]),eq);
      function p(param){return [0,m[3],0]}
      function u(c)
       {var v=sval(m);return caml_call1(pred,v)?supdate(v,m$0,c):0}
      add_dep(m[3],m$0[3]);
      return signal([0,i],m$0,p,u)}
    function fmap$0(opt,fm,i,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === param[0])
       {var v=param[1],match=caml_call1(fm,v);
        if(match){var v$0=match[1];return [0,v$0]}
        return [0,i]}
      var m=param[1],m$0=smut(rsucc(m[3]),eq);
      function p(param){return [0,m[3],0]}
      function u(c)
       {var match=caml_call1(fm,sval(m));
        if(match){var v=match[1];return supdate(v,m$0,c)}
        return 0}
      add_dep(m[3],m$0[3]);
      return signal([0,i],m$0,p,u)}
    function diff$0(d,param)
     {if(0 === param[0])return 0;
      var m=param[1],m$0=emut(rsucc(m[3])),last=[0,0];
      function p(param){return [0,m[3],0]}
      function u(c)
       {var v=sval(m),_cw_=last[1];
        if(_cw_)
         {var v$0=_cw_[1];
          last[1] = [0,v];
          return eupdate(caml_call2(d,v,v$0),m$0,c)}
        throw [0,Assert_failure,_j_]}
      function post_add_op(param){last[1] = [0,sval(m)];return 0}
      end_of_step_add_dep([0,post_add_op],1,m,m$0);
      return event(m$0,p,u)}
    function changes$0(param)
     {if(0 === param[0])return 0;
      var m=param[1],m$0=emut(rsucc(m[3]));
      function p(param){return [0,m[3],0]}
      function u(c){return eupdate(sval(m),m$0,c)}
      end_of_step_add_dep(0,1,m,m$0);
      return event(m$0,p,u)}
    function sample(f,e,param)
     {if(0 === param[0])
       {var v=param[1];return map(function(ev){return caml_call2(f,ev,v)},e)}
      var ms=param[1];
      if(e)
       {var
         me=e[1],
         m=emut(rsucc2(me[2],ms[3])),
         p=function(param){return [0,me[2],[0,ms[3],0]]},
         u=
          function(c)
           {var _cv_=me[1][1];
            if(_cv_)
             {var v=_cv_[1];return eupdate(caml_call2(f,v,sval(ms)),m,c)}
            return 0};
        add_dep$0(me,m[2]);
        add_dep(ms[3],m[2]);
        return event(m,p,u)}
      return 0}
    function when(opt,c,i,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === c[0])return 0 === c[1]?[0,i]:s;
      var mc=c[1];
      if(0 === s[0])
       {var
         v=s[1],
         m=smut(rsucc(mc[3]),eq),
         p=function(param){return [0,mc[3],0]},
         u=function(c){return sval(mc)?supdate(v,m,c):0};
        add_dep(mc[3],m[3]);
        return signal([0,i],m,p,u)}
      var ms=s[1],m$0=smut(rsucc2(mc[3],ms[3]),eq);
      function p$0(param){return [0,mc[3],[0,ms[3],0]]}
      function u$0(c){return sval(mc)?supdate(sval(ms),m$0,c):0}
      add_dep(mc[3],m$0[3]);
      add_dep(ms[3],m$0[3]);
      return signal([0,i],m$0,p$0,u$0)}
    function dismiss$0(opt,c,i,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(c)
       {var mc=c[1];
        if(0 === s[0])
         {var
           v=s[1],
           m=smut(rsucc(mc[2]),eq),
           p=function(param){return [0,mc[2],0]},
           u=function(c){return mc[1][1]?0:supdate(v,m,c)};
          add_dep(mc[2],m[3]);
          return signal([0,i],m,p,u)}
        var
         ms=s[1],
         m$0=smut(rsucc2(mc[2],ms[3]),eq),
         p$0=function(param){return [0,mc[2],[0,ms[3],0]]},
         u$0=function(c){return mc[1][1]?0:supdate(sval(ms),m$0,c)};
        add_dep(mc[2],m$0[3]);
        add_dep(ms[3],m$0[3]);
        return signal([0,i],m$0,p$0,u$0)}
      return s}
    function accum$0(opt,ef,i)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(ef)
       {var
         m=ef[1],
         m$0=smut(rsucc(m[2]),eq),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var _cu_=m[1][1];
            if(_cu_)
             {var v=_cu_[1];return supdate(caml_call1(v,sval(m$0)),m$0,c)}
            return 0};
        add_dep$0(m,m$0[3]);
        return signal([0,i],m$0,p,u)}
      return [0,i]}
    function fold$1(opt,f,i,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(param)
       {var
         m=param[1],
         m$0=smut(rsucc(m[2]),eq),
         p=function(param){return [0,m[2],0]},
         u=
          function(c)
           {var _ct_=m[1][1];
            if(_ct_)
             {var v=_ct_[1];return supdate(caml_call2(f,sval(m$0),v),m$0,c)}
            return 0};
        add_dep$0(m,m$0[3]);
        return signal([0,i],m$0,p,u)}
      return [0,i]}
    function merge$0(opt,f,a,sl)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      function rmax$0(acc,param)
       {if(0 === param[0])return acc;var m=param[1];return rmax(acc,m[3])}
      function nodes(acc,param)
       {if(0 === param[0])return acc;var m=param[1];return [0,m[3],acc]}
      var m=smut(rsucc(caml_call3(Stdlib_list[20],rmax$0,max,sl)),eq);
      function p(param){return caml_call3(Stdlib_list[20],nodes,0,sl)}
      function u(c)
       {function _cs_(a,param)
         {if(0 === param[0]){var v=param[1];return caml_call2(f,a,v)}
          var m=param[1];
          return caml_call2(f,a,sval(m))}
        return supdate(caml_call3(Stdlib_list[20],_cs_,a,sl),m,c)}
      function dep(param)
       {if(0 === param[0])return 0;
        var m$0=param[1];
        return add_dep(m$0[3],m[3])}
      caml_call2(Stdlib_list[15],dep,sl);
      return signal(0,m,p,u)}
    function switch$1(opt,param)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === param[0]){var s=param[1];return s}
      var
       mss=param[1],
       dummy=smut(_b_,eq),
       src=[0,[1,dummy]],
       m=smut(rsucc(mss[3]),eq);
      function p(param)
       {var _cr_=src[1];
        if(0 === _cr_[0])return [0,mss[3],0];
        var m=_cr_[1];
        return [0,mss[3],[0,m[3],0]]}
      function u(c)
       {var _cl_=src[1];
        if(sval(mss) === _cl_)
         {var _cm_=src[1];
          if(0 === _cm_[0])return 0;
          var m$0=_cm_[1];
          return supdate(sval(m$0),m,c)}
        var _cn_=src[1];
        if(0 !== _cn_[0]){var m$2=_cn_[1];rem_dep(m$2[3],m[3])}
        var new_src=sval(mss);
        src[1] = new_src;
        if(0 === new_src[0])
         {var v=new_src[1],_co_=rsucc(mss[3]);
          update_rank(m[3],_co_);
          return supdate(v,m,c)}
        var m$1=new_src[1];
        add_dep(m$1[3],m[3]);
        if(c === nil)
         {var _cp_=rsucc2(m$1[3],mss[3]);
          update_rank(m[3],_cp_);
          var c$0=find_unfinished([0,m$1[3],0]);
          return c$0 === nil?supdate(sval(m$1),m,c$0):add$0(c$0,m[3])}
        var _cq_=rsucc2(m$1[3],mss[3]);
        return update_rank(m[3],_cq_)
                ?(allow_reschedule(m[3]),rebuild(c),add$0(c,m[3]))
                :supdate(sval(m$1),m,c)}
      add_dep(mss[3],m[3]);
      add_dep(dummy[3],m[3]);
      return signal(0,m,p,u)}
    function bind$0(eq,s,sf)
     {return switch$1
              (eq,l1([0,function(_ck_,_cj_){return _ck_ === _cj_?1:0}],sf,s))}
    function fix$0(opt,i,f)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      function update_delayed(n,p,u,nl)
       {bind(n,p,u);
        var c=find_unfinished(nl);
        if(c === nil)
         {var c$0=create$0(0);caml_call1(n[5],c$0);return execute(c$0)}
        return add$0(c,n)}
      var m=smut(_a_,eq);
      function _ce_(param){return 0}
      var
       s=signal([0,i],m,function(param){return 0},_ce_),
       _cf_=caml_call1(f,s),
       _cg_=_cf_[1];
      if(0 === _cg_[0])
       {var
         r=_cf_[2],
         v=_cg_[1],
         p=function(param){return 0},
         u=function(c){return supdate(v,m,c)},
         _ch_=deps(m[3]);
        update_delayed(m[3],p,u,_ch_);
        return r}
      var r$0=_cf_[2],m$0=_cg_[1];
      if(m$0[3][1] === _a_)caml_call1(Stdlib[2],err_fix);
      function p$0(param){return 0}
      function u$0(c){return supdate(sval(m$0),m,c)}
      add_dep(m$0[3],m[3]);
      var _ci_=deps(m[3]);
      update_delayed(m[3],p$0,u$0,[0,m$0[3],_ci_]);
      return r$0}
    function l2$0(opt,f,s$0,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s$0[0])
       {var _cb_=s$0[1];
        if(0 === s[0]){var v=s[1];return [0,caml_call2(f,_cb_,v)]}
        var
         m=s[1],
         m$0=smut(rsucc(m[3]),eq),
         p=function(param){return [0,m[3],0]},
         u=function(c){return supdate(caml_call2(f,_cb_,sval(m)),m$0,c)};
        add_dep(m[3],m$0[3]);
        return signal(0,m$0,p,u)}
      var _cc_=s$0[1];
      if(0 === s[0])
       {var
         v$0=s[1],
         m$1=smut(rsucc(_cc_[3]),eq),
         p$0=function(param){return [0,_cc_[3],0]},
         u$0=function(c){return supdate(caml_call2(f,sval(_cc_),v$0),m$1,c)};
        add_dep(_cc_[3],m$1[3]);
        return signal(0,m$1,p$0,u$0)}
      var m1=s[1],m$2=smut(rsucc2(_cc_[3],m1[3]),eq);
      function p$1(param){return [0,_cc_[3],[0,m1[3],0]]}
      function u$1(c)
       {var _cd_=sval(m1);return supdate(caml_call2(f,sval(_cc_),_cd_),m$2,c)}
      add_dep(_cc_[3],m$2[3]);
      add_dep(m1[3],m$2[3]);
      return signal(0,m$2,p$1,u$1)}
    function l3$0(opt,f,s0,s1,s2)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s0[0])
       {var _b4_=s0[1];
        if(0 === s1[0])
         {var _b5_=s1[1];
          if(0 === s2[0]){var v2=s2[1];return [0,caml_call3(f,_b4_,_b5_,v2)]}}}
      else
       {var _b6_=s0[1];
        if(0 !== s1[0])
         {var _b7_=s1[1];
          if(0 !== s2[0])
           {var
             m2=s2[1],
             _b8_=m2[3],
             r=rsucc(rmax(rmax(_b6_[3],_b7_[3]),_b8_)),
             m=smut(r,eq),
             p=function(param){return [0,_b6_[3],[0,_b7_[3],[0,m2[3],0]]]},
             u=
              function(c)
               {var _b$_=sval(m2),_ca_=sval(_b7_);
                return supdate(caml_call3(f,sval(_b6_),_ca_,_b$_),m,c)};
            add_dep(_b6_[3],m[3]);
            add_dep(_b7_[3],m[3]);
            add_dep(m2[3],m[3]);
            return signal(0,m,p,u)}}}
      return app$0
              ([0,eq],
               l2$0([0,function(_b__,_b9_){return _b__ === _b9_?1:0}],f,s0,s1),
               s2)}
    function l4$0(opt,f,s0,s1,s2,s3)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s0[0])
       {var _bS_=s0[1];
        if(0 === s1[0])
         {var _bT_=s1[1];
          if(0 === s2[0])
           {var _bU_=s2[1];
            if(0 === s3[0])
             {var v3=s3[1];return [0,caml_call4(f,_bS_,_bT_,_bU_,v3)]}}}}
      else
       {var _bV_=s0[1];
        if(0 !== s1[0])
         {var _bW_=s1[1];
          if(0 !== s2[0])
           {var _bX_=s2[1];
            if(0 !== s3[0])
             {var
               m3=s3[1],
               _bY_=rmax(_bX_[3],m3[3]),
               r=rsucc(rmax(rmax(_bV_[3],_bW_[3]),_bY_)),
               m=smut(r,eq),
               p=
                function(param)
                 {return [0,_bV_[3],[0,_bW_[3],[0,_bX_[3],[0,m3[3],0]]]]},
               u=
                function(c)
                 {var _b1_=sval(m3),_b2_=sval(_bX_),_b3_=sval(_bW_);
                  return supdate(caml_call4(f,sval(_bV_),_b3_,_b2_,_b1_),m,c)};
              add_dep(_bV_[3],m[3]);
              add_dep(_bW_[3],m[3]);
              add_dep(_bX_[3],m[3]);
              add_dep(m3[3],m[3]);
              return signal(0,m,p,u)}}}}
      return app$0
              ([0,eq],
               l3$0
                ([0,function(_b0_,_bZ_){return _b0_ === _bZ_?1:0}],f,s0,s1,s2),
               s3)}
    function l5$0(opt,f,s0,s1,s2,s3,s4)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s0[0])
       {var _bC_=s0[1];
        if(0 === s1[0])
         {var _bD_=s1[1];
          if(0 === s2[0])
           {var _bE_=s2[1];
            if(0 === s3[0])
             {var _bF_=s3[1];
              if(0 === s4[0])
               {var v4=s4[1];return [0,caml_call5(f,_bC_,_bD_,_bE_,_bF_,v4)]}}}}}
      else
       {var _bG_=s0[1];
        if(0 !== s1[0])
         {var _bH_=s1[1];
          if(0 !== s2[0])
           {var _bI_=s2[1];
            if(0 !== s3[0])
             {var _bJ_=s3[1];
              if(0 !== s4[0])
               {var
                 m4=s4[1],
                 _bK_=rmax(_bJ_[3],m4[3]),
                 _bL_=rmax(_bI_[3],_bK_),
                 r=rsucc(rmax(rmax(_bG_[3],_bH_[3]),_bL_)),
                 m=smut(r,eq),
                 p=
                  function(param)
                   {return [0,
                            _bG_[3],
                            [0,_bH_[3],[0,_bI_[3],[0,_bJ_[3],[0,m4[3],0]]]]]},
                 u=
                  function(c)
                   {var
                     _bO_=sval(m4),
                     _bP_=sval(_bJ_),
                     _bQ_=sval(_bI_),
                     _bR_=sval(_bH_),
                     v=caml_call5(f,sval(_bG_),_bR_,_bQ_,_bP_,_bO_);
                    return supdate(v,m,c)};
                add_dep(_bG_[3],m[3]);
                add_dep(_bH_[3],m[3]);
                add_dep(_bI_[3],m[3]);
                add_dep(_bJ_[3],m[3]);
                add_dep(m4[3],m[3]);
                return signal(0,m,p,u)}}}}}
      return app$0
              ([0,eq],
               l4$0
                ([0,function(_bN_,_bM_){return _bN_ === _bM_?1:0}],
                 f,
                 s0,
                 s1,
                 s2,
                 s3),
               s4)}
    function l6$0(opt,f,s0,s1,s2,s3,s4,s5)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s0[0])
       {var _bi_=s0[1];
        if(0 === s1[0])
         {var _bj_=s1[1];
          if(0 === s2[0])
           {var _bk_=s2[1];
            if(0 === s3[0])
             {var _bl_=s3[1];
              if(0 === s4[0])
               {var _bm_=s4[1];
                if(0 === s5[0])
                 {var v5=s5[1];
                  return [0,caml_call6(f,_bi_,_bj_,_bk_,_bl_,_bm_,v5)]}}}}}}
      else
       {var _bn_=s0[1];
        if(0 !== s1[0])
         {var _bo_=s1[1];
          if(0 !== s2[0])
           {var _bp_=s2[1];
            if(0 !== s3[0])
             {var _bq_=s3[1];
              if(0 !== s4[0])
               {var _br_=s4[1];
                if(0 !== s5[0])
                 {var
                   m5=s5[1],
                   _bs_=rmax(_br_[3],m5[3]),
                   _bt_=rmax(_bq_[3],_bs_),
                   _bu_=rmax(_bo_[3],_bp_[3]),
                   m=rmax(rmax(_bn_[3],_bu_),_bt_),
                   m$0=smut(rsucc(m),eq),
                   p=
                    function(param)
                     {return [0,
                              _bn_[3],
                              [0,_bo_[3],[0,_bp_[3],[0,_bq_[3],[0,_br_[3],[0,m5[3],0]]]]]]},
                   u=
                    function(c)
                     {var
                       _bx_=sval(m5),
                       _by_=sval(_br_),
                       _bz_=sval(_bq_),
                       _bA_=sval(_bp_),
                       _bB_=sval(_bo_),
                       v=caml_call6(f,sval(_bn_),_bB_,_bA_,_bz_,_by_,_bx_);
                      return supdate(v,m$0,c)};
                  add_dep(_bn_[3],m$0[3]);
                  add_dep(_bo_[3],m$0[3]);
                  add_dep(_bp_[3],m$0[3]);
                  add_dep(_bq_[3],m$0[3]);
                  add_dep(_br_[3],m$0[3]);
                  add_dep(m5[3],m$0[3]);
                  return signal(0,m$0,p,u)}}}}}}
      return app$0
              ([0,eq],
               l5$0
                ([0,function(_bw_,_bv_){return _bw_ === _bv_?1:0}],
                 f,
                 s0,
                 s1,
                 s2,
                 s3,
                 s4),
               s5)}
    function equal$1(_bh_,_bg_){return _bh_ === _bg_?1:0}
    function not(s){return l1([0,equal$1],function(_bf_){return 1 - _bf_},s)}
    function _k_(s$0,s)
     {return l2$0
              ([0,equal$1],
               function(_bd_,_bc_){var _be_=_bd_?_bc_:_bd_;return _be_},
               s$0,
               s)}
    function _l_(s$0,s)
     {return l2$0
              ([0,equal$1],
               function(_ba_,_a$_){var _bb_=_ba_ || _a$_;return _bb_},
               s$0,
               s)}
    function edge(s){return changes$0(s)}
    function edge_detect(edge,param)
     {if(0 === param[0])return 0;
      var m=param[1],m$0=emut(rsucc(m[3]));
      function p(param){return [0,m[3],0]}
      function u(c)
       {var _a__=caml_equal(sval(m),edge);return _a__?eupdate(0,m$0,c):_a__}
      end_of_step_add_dep(0,1,m,m$0);
      return event(m$0,p,u)}
    function rise(s){return edge_detect(1,s)}
    function fall(s){return edge_detect(0,s)}
    function flip(b,param)
     {if(param)
       {var
         m=param[1],
         _a7_=function(_a9_,_a8_){return _a9_ === _a8_?1:0},
         m$0=smut(rsucc(m[2]),_a7_),
         p=function(param){return [0,m[2],0]},
         u=function(c){return m[1][1]?supdate(1 - sval(m$0),m$0,c):0};
        add_dep$0(m,m$0[3]);
        return signal([0,b],m$0,p,u)}
      return [0,b]}
    function equal$2(_a6_,_a5_){return _a6_ === _a5_?1:0}
    function _m_(s)
     {return l1([0,equal$2],function(_a4_){return - _a4_ | 0},s)}
    function succ(s)
     {return l1([0,equal$2],function(_a3_){return _a3_ + 1 | 0},s)}
    function pred(s)
     {return l1([0,equal$2],function(_a2_){return _a2_ - 1 | 0},s)}
    function _n_(s$0,s)
     {return l2$0
              ([0,equal$2],function(_a1_,_a0_){return _a1_ + _a0_ | 0},s$0,s)}
    function _o_(s$0,s)
     {return l2$0
              ([0,equal$2],function(_aZ_,_aY_){return _aZ_ - _aY_ | 0},s$0,s)}
    function _p_(s$0,s)
     {return l2$0
              ([0,equal$2],
               function(_aX_,_aW_){return runtime.caml_mul(_aX_,_aW_)},
               s$0,
               s)}
    function mod(s$0,s){return l2$0([0,equal$2],runtime.caml_mod,s$0,s)}
    function abs(s){return l1([0,equal$2],Stdlib[7],s)}
    var max_int=[0,Stdlib[8]],min_int=[0,Stdlib[9]];
    function land(s$0,s)
     {return l2$0([0,equal$2],function(_aV_,_aU_){return _aV_ & _aU_},s$0,s)}
    function lor(s$0,s)
     {return l2$0([0,equal$2],function(_aT_,_aS_){return _aT_ | _aS_},s$0,s)}
    function lxor(s$0,s)
     {return l2$0([0,equal$2],function(_aR_,_aQ_){return _aR_ ^ _aQ_},s$0,s)}
    function lnot(s){return l1([0,equal$2],Stdlib[10],s)}
    function lsl(s$0,s)
     {return l2$0([0,equal$2],function(_aP_,_aO_){return _aP_ << _aO_},s$0,s)}
    function lsr(s$0,s)
     {return l2$0
              ([0,equal$2],
               function(_aN_,_aM_){return _aN_ >>> _aM_ | 0},
               s$0,
               s)}
    function asr(s$0,s)
     {return l2$0([0,equal$2],function(_aL_,_aK_){return _aL_ >> _aK_},s$0,s)}
    function equal$3(_aJ_,_aI_){return _aJ_ == _aI_?1:0}
    function _q_(s){return l1([0,equal$3],function(_aH_){return - _aH_},s)}
    function _r_(s$0,s)
     {return l2$0([0,equal$3],function(_aG_,_aF_){return _aG_ + _aF_},s$0,s)}
    function _s_(s$0,s)
     {return l2$0([0,equal$3],function(_aE_,_aD_){return _aE_ - _aD_},s$0,s)}
    function _t_(s$0,s)
     {return l2$0([0,equal$3],function(_aC_,_aB_){return _aC_ * _aB_},s$0,s)}
    function _u_(s$0,s)
     {return l2$0([0,equal$3],function(_aA_,_az_){return _aA_ / _az_},s$0,s)}
    function _v_(s$0,s)
     {return l2$0
              ([0,equal$3],
               function(_ay_,_ax_){return Math.pow(_ay_,_ax_)},
               s$0,
               s)}
    function sqrt(s)
     {return l1([0,equal$3],function(_aw_){return Math.sqrt(_aw_)},s)}
    function exp(s)
     {return l1([0,equal$3],function(_av_){return Math.exp(_av_)},s)}
    function log(s)
     {return l1([0,equal$3],function(_au_){return Math.log(_au_)},s)}
    function log10(s){return l1([0,equal$3],runtime.caml_log10_float,s)}
    function cos(s)
     {return l1([0,equal$3],function(_at_){return Math.cos(_at_)},s)}
    function sin(s)
     {return l1([0,equal$3],function(_as_){return Math.sin(_as_)},s)}
    function tan(s)
     {return l1([0,equal$3],function(_ar_){return Math.tan(_ar_)},s)}
    function acos(s)
     {return l1([0,equal$3],function(_aq_){return Math.acos(_aq_)},s)}
    function asin(s)
     {return l1([0,equal$3],function(_ap_){return Math.asin(_ap_)},s)}
    function atan(s)
     {return l1([0,equal$3],function(_ao_){return Math.atan(_ao_)},s)}
    function atan2(s$0,s)
     {return l2$0
              ([0,equal$3],
               function(_an_,_am_){return Math.atan2(_an_,_am_)},
               s$0,
               s)}
    function cosh(s){return l1([0,equal$3],runtime.caml_cosh_float,s)}
    function sinh(s){return l1([0,equal$3],runtime.caml_sinh_float,s)}
    function tanh(s){return l1([0,equal$3],runtime.caml_tanh_float,s)}
    function ceil(s)
     {return l1([0,equal$3],function(_al_){return Math.ceil(_al_)},s)}
    function floor(s)
     {return l1([0,equal$3],function(_ak_){return Math.floor(_ak_)},s)}
    function abs_float(s)
     {return l1([0,equal$3],function(_aj_){return Math.abs(_aj_)},s)}
    function mod_float(s$0,s)
     {return l2$0([0,equal$3],function(_ai_,_ah_){return _ai_ % _ah_},s$0,s)}
    function frexp(s){return l1([0,caml_equal],runtime.caml_frexp_float,s)}
    function ldexp(s$0,s)
     {return l2$0([0,equal$3],runtime.caml_ldexp_float,s$0,s)}
    function modf(s){return l1([0,caml_equal],runtime.caml_modf_float,s)}
    function float$0(s){return l1([0,equal$3],function(_ag_){return _ag_},s)}
    function float_of_int(s)
     {return l1([0,equal$3],function(_af_){return _af_},s)}
    function truncate(s)
     {return l1([0,equal$2],function(_ae_){return _ae_ | 0},s)}
    function int_of_float(s)
     {return l1([0,equal$2],function(_ad_){return _ad_ | 0},s)}
    var
     infinity=[0,Stdlib[11]],
     neg_infinity=[0,Stdlib[12]],
     nan=[0,Stdlib[13]],
     max_float=[0,Stdlib[14]],
     min_float=[0,Stdlib[15]],
     epsilon_float=[0,Stdlib[16]];
    function classify_float(s)
     {var _aa_=runtime.caml_classify_float;
      return l1([0,function(_ac_,_ab_){return _ac_ === _ab_?1:0}],_aa_,s)}
    function pair(eq,s$0,s)
     {return l2$0(eq,function(x,y){return [0,x,y]},s$0,s)}
    function fst(eq,s){return l1(eq,function(_$_){return _$_[1]},s)}
    function snd(eq,s){return l1(eq,function(___){return ___[2]},s)}
    var Pair=[0,pair,fst,snd];
    function some$0(s)
     {var match=eq_fun(s);
      if(match)
       var
        eq=match[1],
        eq$0=
         function(v,match)
          {if(v)
            if(match){var v$0=match[1],v$1=v[1];return caml_call2(eq,v$1,v$0)}
           throw [0,Assert_failure,_w_]},
        eq$1=[0,eq$0];
      else
       var eq$1=0;
      return l1(eq$1,function(v){return [0,v]},s)}
    function value$1(opt,default$0,s)
     {if(opt)var sth=opt[1],eq=sth;else var eq=caml_equal;
      if(0 === s[0])
       {var _X_=s[1];
        if(_X_){var v=_X_[1];return [0,v]}
        if(815032112 <= default$0[1])
         {var d=default$0[2];
          if(0 === d[0]){var d$0=d[1];return [0,d$0]}
          var md=d[1],c=find_unfinished([0,md[3],0]);
          if(c === nil)return [0,sval(md)];
          var
           m=smut(rsucc(md[3]),eq),
           p=function(param){return [0,md[3],0]},
           u=
            function(c)
             {rem_dep(md[3],m[3]);supdate(sval(md),m,c);return stop(0,m[3])};
          add_dep(md[3],m[3]);
          return signal(0,m,p,u)}
        var d$1=default$0[2];
        return d$1}
      var m$0=s[1];
      if(815032112 <= default$0[1])
       {var _Y_=default$0[2];
        if(0 === _Y_[0])
         {var d$2=_Y_[1];return fmap$0([0,eq],function(v){return v},d$2,s)}
        var md$0=_Y_[1],c$0=find_unfinished([0,md$0[3],0]);
        if(c$0 === nil)
         {var
           m$1=smut(rsucc(m$0[3]),eq),
           p$0=function(param){return [0,m$0[3],0]},
           u$0=
            function(c)
             {var match=sval(m$0);
              if(match){var v=match[1];return supdate(v,m$1,c)}
              return 0};
          add_dep(m$0[3],m$1[3]);
          return signal([0,sval(md$0)],m$1,p$0,u$0)}
        var
         m$2=smut(rsucc2(m$0[3],md$0[3]),eq),
         p$1=function(param){return [0,m$0[3],0]},
         u$1=
          function(c)
           {var match=sval(m$0);
            if(match){var v=match[1];return supdate(v,m$2,c)}
            return 0},
         p_first=function(param){return [0,m$0[3],[0,md$0[3],0]]},
         u_first=
          function(c)
           {rem_dep(md$0[3],m$2[3]);
            var match=sval(m$0);
            if(match)
             {var v=match[1];supdate(v,m$2,c)}
            else
             supdate(sval(md$0),m$2,c);
            return bind(m$2[3],p$1,u$1)};
        add_dep(m$0[3],m$2[3]);
        add_dep(md$0[3],m$2[3]);
        return signal(0,m$2,p_first,u_first)}
      var _Z_=default$0[2];
      if(0 === _Z_[0])
       {var d$3=_Z_[1];
        return l1
                ([0,eq],
                 function(param){if(param){var v=param[1];return v}return d$3},
                 s)}
      var md$1=_Z_[1],m$3=smut(rsucc2(m$0[3],md$1[3]),eq);
      function p$2(param){return [0,m$0[3],[0,md$1[3],0]]}
      function u$2(c)
       {var match=sval(m$0);
        if(match){var v=match[1];return supdate(v,m$3,c)}
        return supdate(sval(md$1),m$3,c)}
      add_dep(m$0[3],m$3[3]);
      add_dep(md$1[3],m$3[3]);
      return signal(0,m$3,p$2,u$2)}
    var Option$0=[0,none,some$0,value$1];
    function _x_(s$0,s){return l2$0([0,equal$1],caml_equal,s$0,s)}
    function _y_(s$0,s){return l2$0([0,equal$1],runtime.caml_notequal,s$0,s)}
    function _z_(s$0,s){return l2$0([0,equal$1],runtime.caml_lessthan,s$0,s)}
    function _A_(s$0,s)
     {return l2$0([0,equal$1],runtime.caml_greaterthan,s$0,s)}
    function _B_(s$0,s){return l2$0([0,equal$1],runtime.caml_lessequal,s$0,s)}
    function _C_(s$0,s)
     {return l2$0([0,equal$1],runtime.caml_greaterequal,s$0,s)}
    function compare(s$0,s)
     {return l2$0([0,equal$2],runtime.caml_compare,s$0,s)}
    function _D_(s$0,s)
     {return l2$0([0,equal$1],function(_W_,_V_){return _W_ === _V_?1:0},s$0,s)}
    function _E_(s$0,s)
     {return l2$0([0,equal$1],function(_U_,_T_){return _U_ !== _T_?1:0},s$0,s)}
    function Make(Eq)
     {var eq=Eq[1];
      function create(v){return create$3([0,eq],v)}
      function equal(s$0,s){return equal$0([0,eq],s$0,s)}
      function hold$0(v,e){return hold([0,eq],v,e)}
      function app(sf,sv){return app$0([0,eq],sf,sv)}
      function map(f,s){return l1([0,eq],f,s)}
      function filter(pred,i)
       {var _R_=[0,eq];return function(_S_){return filter$0(_R_,pred,i,_S_)}}
      function fmap(fm,i)
       {var _P_=[0,eq];return function(_Q_){return fmap$0(_P_,fm,i,_Q_)}}
      function when$0(c,i,s){return when([0,eq],c,i,s)}
      function dismiss(c,s)
       {var _N_=[0,eq];return function(_O_){return dismiss$0(_N_,c,s,_O_)}}
      function accum(ef,i){return accum$0([0,eq],ef,i)}
      function fold(f,i)
       {var _L_=[0,eq];return function(_M_){return fold$1(_L_,f,i,_M_)}}
      function merge(f,a,sl){return merge$0([0,eq],f,a,sl)}
      function switch$0(s){return switch$1([0,eq],s)}
      function bind(s,sf){return bind$0([0,eq],s,sf)}
      function fix(f)
       {var _J_=[0,eq];return function(_K_){return fix$0(_J_,f,_K_)}}
      function l2(f,s$0,s){return l2$0([0,eq],f,s$0,s)}
      function l3(f,s0,s1,s2){return l3$0([0,eq],f,s0,s1,s2)}
      function l4(f,s0,s1,s2,s3){return l4$0([0,eq],f,s0,s1,s2,s3)}
      function l5(f,s0,s1,s2,s3,s4){return l5$0([0,eq],f,s0,s1,s2,s3,s4)}
      function l6(f,s0,s1,s2,s3,s4,s5)
       {return l6$0([0,eq],f,s0,s1,s2,s3,s4,s5)}
      return [0,
              eq,
              create,
              equal,
              hold$0,
              app,
              map,
              filter,
              fmap,
              when$0,
              dismiss,
              accum,
              fold,
              merge,
              switch$0,
              bind,
              fix,
              map,
              l2,
              l3,
              l4,
              l5,
              l6]}
    var
     Sb=Make([0,equal$1]),
     Si=Make([0,equal$2]),
     Sf=Make([0,equal$3]),
     _F_=[0,create$0,execute],
     _G_=
      [0,
       [0,
        Sb[2],
        Sb[3],
        Sb[4],
        Sb[5],
        Sb[6],
        Sb[7],
        Sb[8],
        Sb[9],
        Sb[10],
        Sb[11],
        Sb[12],
        Sb[13],
        Sb[14],
        Sb[15],
        Sb[16],
        Sb[17],
        Sb[18],
        Sb[19],
        Sb[20],
        Sb[21],
        Sb[22]],
       [0,
        Si[2],
        Si[3],
        Si[4],
        Si[5],
        Si[6],
        Si[7],
        Si[8],
        Si[9],
        Si[10],
        Si[11],
        Si[12],
        Si[13],
        Si[14],
        Si[15],
        Si[16],
        Si[17],
        Si[18],
        Si[19],
        Si[20],
        Si[21],
        Si[22]],
       [0,
        Sf[2],
        Sf[3],
        Sf[4],
        Sf[5],
        Sf[6],
        Sf[7],
        Sf[8],
        Sf[9],
        Sf[10],
        Sf[11],
        Sf[12],
        Sf[13],
        Sf[14],
        Sf[15],
        Sf[16],
        Sf[17],
        Sf[18],
        Sf[19],
        Sf[20],
        Sf[21],
        Sf[22]]],
     React=
      [0,
       [0,
        never,
        create$2,
        retain,
        stop$0,
        equal,
        trace,
        once,
        drop_once,
        app,
        map,
        stamp,
        filter,
        fmap,
        diff,
        changes,
        on,
        on,
        dismiss,
        until,
        accum,
        fold$0,
        select,
        merge,
        switch$0,
        fix,
        map,
        l2,
        l3,
        l4,
        l5,
        l6,
        Option],
       [0,
        const$0,
        create$3,
        value$0,
        retain$0,
        eq_fun,
        stop$1,
        equal$0,
        trace$0,
        hold,
        app$0,
        l1,
        filter$0,
        fmap$0,
        diff$0,
        changes$0,
        sample,
        when,
        when,
        dismiss$0,
        accum$0,
        fold$1,
        merge$0,
        switch$1,
        bind$0,
        fix$0,
        l1,
        l2$0,
        l3$0,
        l4$0,
        l5$0,
        l6$0,
        [0,zero,one,not,_k_,_l_,edge,rise,fall,flip],
        [0,
         zero$0,
         one$0,
         minus_one,
         _m_,
         succ,
         pred,
         _n_,
         _o_,
         _p_,
         mod,
         abs,
         max_int,
         min_int,
         land,
         lor,
         lxor,
         lnot,
         lsl,
         lsr,
         asr],
        [0,
         zero$1,
         one$1,
         minus_one$0,
         _q_,
         _r_,
         _s_,
         _t_,
         _u_,
         _v_,
         sqrt,
         exp,
         log,
         log10,
         cos,
         sin,
         tan,
         acos,
         asin,
         atan,
         atan2,
         cosh,
         sinh,
         tanh,
         ceil,
         floor,
         abs_float,
         mod_float,
         frexp,
         ldexp,
         modf,
         float$0,
         float_of_int,
         truncate,
         int_of_float,
         infinity,
         neg_infinity,
         nan,
         max_float,
         min_float,
         epsilon_float,
         classify_float],
        Pair,
        Option$0,
        [0,_x_,_y_,_z_,_A_,_B_,_C_,compare,_D_,_E_],
        function(_H_)
         {var _I_=Make(_H_);
          return [0,
                  _I_[2],
                  _I_[3],
                  _I_[4],
                  _I_[5],
                  _I_[6],
                  _I_[7],
                  _I_[8],
                  _I_[9],
                  _I_[10],
                  _I_[11],
                  _I_[12],
                  _I_[13],
                  _I_[14],
                  _I_[15],
                  _I_[16],
                  _I_[17],
                  _I_[18],
                  _I_[19],
                  _I_[20],
                  _I_[21],
                  _I_[22]]},
        _G_],
       _F_];
    runtime.caml_register_global(31,React,"React");
    return}
  (function(){return this}()));


//# 1 ".js/reactiveData/reactiveData.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_equal=runtime.caml_equal,
     caml_new_string=runtime.caml_new_string,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_invalid_index=caml_new_string("invalid index"),
     cst_merge_invalid_index=caml_new_string("merge: invalid index"),
     cst_merge_invalid_index$0=caml_new_string("merge: invalid index"),
     cst_linear_merge_X_not_supported=
      caml_new_string("linear_merge: X not supported"),
     cst_ReactiveData_Rlist_merge$0=
      caml_new_string("ReactiveData.Rlist.merge"),
     cst_ReactiveData_Rlist_merge=caml_new_string("ReactiveData.Rlist.merge"),
     cst_ReactiveData_Rlist_merge$1=
      caml_new_string("ReactiveData.Rlist.merge"),
     cst_ReactiveData_Rlist_merge$2=
      caml_new_string("ReactiveData.Rlist.merge"),
     Stdlib_list=global_data.Stdlib__list,
     React=global_data.React,
     Not_found=global_data.Not_found,
     Assert_failure=global_data.Assert_failure,
     Stdlib_map=global_data.Stdlib__map,
     Stdlib=global_data.Stdlib,
     Stdlib_hashtbl=global_data.Stdlib__hashtbl,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_set=global_data.Stdlib__set,
     _T_=[0,68],
     _I_=[0,caml_new_string("src/reactiveData.ml"),558,6],
     _E_=[0,caml_new_string("src/reactiveData.ml"),459,23],
     _D_=[0,caml_new_string("src/reactiveData.ml"),427,17],
     _C_=[0,0,0],
     _e_=[0,caml_new_string("src/reactiveData.ml"),215,4],
     _f_=[0,caml_new_string("src/reactiveData.ml"),251,4];
    function _a_(_gK_)
     {var _gL_=_gK_[1],_gN_=_gK_[3],_gM_=_gK_[2],_gO_=[0,_gK_[4]];
      function _gP_(_hH_)
       {var _hI_=caml_call1(React[1][2],0),_hJ_=[0,_hH_],_hK_=_hI_[1];
        function _hL_(_hN_)
         {_hJ_[1] = 0 === _hN_[0]?caml_call2(_gL_,_hN_[1],_hJ_[1]):_hN_[1];
          return _hN_}
        var _hM_=caml_call2(React[1][10],_hL_,_hK_);
        return [0,[1,[0,_hJ_,_hM_]],_hI_[2]]}
      function _gQ_(_hD_,_hC_)
       {var _hE_=[0,_hD_];
        function _hF_(_hG_)
         {_hE_[1] = 0 === _hG_[0]?caml_call2(_gL_,_hG_[1],_hE_[1]):_hG_[1];
          return _hG_}
        return [1,[0,_hE_,caml_call2(React[1][10],_hF_,_hC_)]]}
      function _gR_(_hB_){return [0,_hB_]}
      function _gS_(_hA_,_hz_)
       {return 0 === _hz_[0]
                ?[0,caml_call2(_gM_,_hA_,_hz_[1])]
                :[1,caml_call2(_gN_,_hA_,_hz_[1])]}
      function _gT_(_hs_,_hr_)
       {if(0 === _hr_[0])return [0,caml_call2(_gN_,_hs_,_hr_[1])];
        var
         _ht_=_hr_[1],
         _hu_=[0,caml_call2(_gN_,_hs_,_ht_[1][1])],
         _hv_=_ht_[2];
        function _hw_(_hx_)
         {var _hy_=_gS_(_hs_,_hx_);
          _hu_[1] = 0 === _hy_[0]?caml_call2(_gL_,_hy_[1],_hu_[1]):_hy_[1];
          return _hy_}
        return [1,[0,_hu_,caml_call2(React[1][10],_hw_,_hv_)]]}
      function _gU_(_hq_){return 0 === _hq_[0]?_hq_[1]:_hq_[1][1][1]}
      function _gV_(_hp_){return 0 === _hp_[0]?React[1][1]:_hp_[1][2]}
      function _gW_(_ho_,_hn_){return caml_call2(_ho_,0,[0,_hn_])}
      function _gX_(_hm_,_hl_){return caml_call2(_hm_,0,[1,_hl_])}
      function _gY_(_hh_,_hg_,_hf_)
       {if(0 === _hg_[0])
         {var _hi_=caml_call2(_hh_,_hf_,[1,_hg_[1]]);
          return caml_call1(React[2][1],_hi_)}
        var _hj_=_hg_[1],_hk_=caml_call2(_hh_,_hf_,[1,_hj_[1][1]]);
        return caml_call4(React[2][21],0,_hh_,_hk_,_hj_[2])}
      function _gZ_(_g8_,_g7_)
       {var _g9_=_g8_?_g8_[1]:caml_equal;
        if(0 === _g7_[0])return caml_call1(React[2][1],_g7_[1]);
        var _g__=_g7_[1],_g$_=_g__[2],_ha_=_g__[1][1];
        function _hb_(_he_,_hd_)
         {return 0 === _hd_[0]?caml_call2(_gL_,_hd_[1],_he_):_hd_[1]}
        var _hc_=[0,caml_call1(_gK_[5],_g9_)];
        return caml_call4(React[2][21],_hc_,_hb_,_ha_,_g$_)}
      return [0,
              _gO_,
              _gP_,
              _gQ_,
              function(_g1_,_g0_)
               {var _g2_=_g1_?_g1_[1]:caml_equal;
                function _g3_(_g6_,_g5_)
                 {return [0,caml_call3(_gK_[6],_g2_,_g5_,_g6_)]}
                var _g4_=caml_call2(React[2][14],_g3_,_g0_);
                return _gQ_(caml_call1(React[2][3],_g0_),_g4_)},
              _gR_,
              _gW_,
              _gX_,
              _gS_,
              _gT_,
              _gU_,
              _gY_,
              _gZ_,
              _gV_]}
    var _b_=0,_c_=Stdlib_list[17];
    function _d_(_gF_)
     {function _gG_(_gJ_)
       {switch(_gJ_[0])
         {case 0:var _gH_=caml_call1(_gF_,_gJ_[2]);return [0,_gJ_[1],_gH_];
          case 1:return [1,_gJ_[1]];
          case 2:var _gI_=caml_call1(_gF_,_gJ_[2]);return [2,_gJ_[1],_gI_];
          default:return [3,_gJ_[1],_gJ_[2]]}}
      return caml_call1(Stdlib_list[17],_gG_)}
    function _g_(_f5_,_f4_)
     {var _f1_=0,_f0_=_f5_;
      for(;;)
       {if(0 <= _f1_)
         {if(_f0_)
           {var _f2_=_f0_[1];
            if(3 !== _f2_[0])
             {var _f3_=_f2_[1];
              if(_f1_ <= _f3_){var _f1_=_f3_,_f0_=_f0_[2];continue}}
            var _f6_=0}
          else
           var _f6_=1;
          if(_f6_)
           {var _fT_=0,_fS_=0,_fR_=_f5_,_fQ_=_f4_;
            for(;;)
             {if(_fR_)
               {var _fU_=_fR_[1];
                if(3 === _fU_[0])
                 var switch$0=0;
                else
                 {var _fV_=_fU_[1];
                  if(_fS_ < _fV_)
                   {var _fP_=_fT_,_fO_=_fV_ - _fS_ | 0,_fN_=_fQ_;
                    for(;;)
                     {if(! (0 <= _fO_))throw [0,Assert_failure,_e_];
                      if(0 < _fO_)
                       {if(_fN_)
                         {var _fP_=[0,_fN_[1],_fP_],_fO_=_fO_ - 1 | 0,_fN_=_fN_[2];
                          continue}
                        var _fW_=caml_call1(Stdlib[2],cst_invalid_index)}
                      else
                       var _fW_=[0,_fN_,_fP_];
                      var _fY_=_fW_[1],_fX_=_fW_[2],switch$0=1;
                      break}}
                  else
                   var switch$0=0}}
              else
               var switch$0=0;
              if(! switch$0)var _fY_=_fQ_,_fX_=_fT_;
              if(_fR_)
               {var _fZ_=_fR_[1];
                switch(_fZ_[0])
                 {case 0:
                   var
                    _fT_=_fX_,
                    _fS_=_fZ_[1],
                    _fR_=_fR_[2],
                    _fQ_=[0,_fZ_[2],_fY_];
                   continue;
                  case 1:
                   if(_fY_)
                    {var _fT_=_fX_,_fS_=_fZ_[1],_fR_=_fR_[2],_fQ_=_fY_[2];
                     continue}
                   return caml_call1(Stdlib[2],cst_merge_invalid_index);
                  case 2:
                   if(_fY_)
                    {var
                      _fT_=_fX_,
                      _fS_=_fZ_[1],
                      _fR_=_fR_[2],
                      _fQ_=[0,_fZ_[2],_fY_[2]];
                     continue}
                   return caml_call1(Stdlib[2],cst_merge_invalid_index$0);
                  default:
                   return caml_call1
                           (Stdlib[3],cst_linear_merge_X_not_supported)}}
              return caml_call2(Stdlib_list[12],_fX_,_fY_)}}
          var
           _f7_=
            function(_gE_,_gD_)
             {switch(_gD_[0])
               {case 0:
                 var
                  _f9_=_gD_[1],
                  _f8_=_gD_[2],
                  _f__=
                   0 <= _f9_
                    ?_f9_
                    :(caml_call1(Stdlib_list[1],_gE_) + 1 | 0) + _f9_ | 0,
                  _gb_=0,
                  _ga_=_f__,
                  _f$_=_gE_;
                 for(;;)
                  {if(0 === _ga_)
                    return caml_call2(Stdlib_list[12],_gb_,[0,_f8_,_f$_]);
                   if(_f$_)
                    {var _gb_=[0,_f$_[1],_gb_],_ga_=_ga_ - 1 | 0,_f$_=_f$_[2];
                     continue}
                   return caml_call1(Stdlib[3],cst_ReactiveData_Rlist_merge)}
                case 1:
                 var
                  _gc_=_gD_[1],
                  _gd_=
                   0 <= _gc_?_gc_:caml_call1(Stdlib_list[1],_gE_) + _gc_ | 0,
                  _gg_=0,
                  _gf_=_gd_,
                  _ge_=_gE_;
                 for(;;)
                  {if(0 === _gf_)
                    if(_ge_)return caml_call2(Stdlib_list[12],_gg_,_ge_[2]);
                   if(_ge_)
                    {var _gg_=[0,_ge_[1],_gg_],_gf_=_gf_ - 1 | 0,_ge_=_ge_[2];
                     continue}
                   return caml_call1(Stdlib[3],cst_ReactiveData_Rlist_merge$0)}
                case 2:
                 var
                  _gh_=_gD_[1],
                  _gi_=
                   0 <= _gh_?_gh_:caml_call1(Stdlib_list[1],_gE_) + _gh_ | 0,
                  _gj_=caml_call1(Stdlib_array[12],_gE_),
                  _gk_=_gD_[2];
                 caml_check_bound(_gj_,_gi_)[_gi_ + 1] = _gk_;
                 return caml_call1(Stdlib_array[11],_gj_);
                default:
                 var
                  _gl_=_gD_[2],
                  _gm_=_gD_[1],
                  _gn_=caml_call1(Stdlib_array[12],_gE_),
                  _go_=_gn_.length - 1,
                  _gp_=0 <= _gm_?_gm_:_go_ + _gm_ | 0,
                  _gq_=caml_check_bound(_gn_,_gp_)[_gp_ + 1];
                 if(0 < _gl_)
                  {if(_go_ <= (_gp_ + _gl_ | 0))
                    caml_call1(Stdlib[3],cst_ReactiveData_Rlist_merge$1);
                   var _gr_=(_gp_ + _gl_ | 0) - 1 | 0;
                   if(! (_gr_ < _gp_))
                    {var _gt_=_gp_;
                     for(;;)
                      {var
                        _gu_=_gt_ + 1 | 0,
                        _gv_=caml_check_bound(_gn_,_gu_)[_gu_ + 1];
                       caml_check_bound(_gn_,_gt_)[_gt_ + 1] = _gv_;
                       var _gw_=_gt_ + 1 | 0;
                       if(_gr_ !== _gt_){var _gt_=_gw_;continue}
                       break}}
                   var _gs_=_gp_ + _gl_ | 0;
                   caml_check_bound(_gn_,_gs_)[_gs_ + 1] = _gq_}
                 else
                  {if((_gp_ + _gl_ | 0) < 0)
                    caml_call1(Stdlib[3],cst_ReactiveData_Rlist_merge$2);
                   var _gx_=(_gp_ + _gl_ | 0) + 1 | 0;
                   if(! (_gp_ < _gx_))
                    {var _gz_=_gp_;
                     for(;;)
                      {var
                        _gA_=_gz_ - 1 | 0,
                        _gB_=caml_check_bound(_gn_,_gA_)[_gA_ + 1];
                       caml_check_bound(_gn_,_gz_)[_gz_ + 1] = _gB_;
                       var _gC_=_gz_ - 1 | 0;
                       if(_gx_ !== _gz_){var _gz_=_gC_;continue}
                       break}}
                   var _gy_=_gp_ + _gl_ | 0;
                   caml_check_bound(_gn_,_gy_)[_gy_ + 1] = _gq_}
                 return caml_call1(Stdlib_array[11],_gn_)}};
          return caml_call3(Stdlib_list[20],_f7_,_f4_,_f5_)}
        throw [0,Assert_failure,_f_]}}
    function _h_(_fK_,_fJ_,_fI_)
     {var _fM_=_fJ_,_fL_=_fI_;
      for(;;)
       {if(_fM_)
         {if(_fL_)
           if(caml_call2(_fK_,_fM_[1],_fL_[1]))
            {var _fM_=_fM_[2],_fL_=_fL_[2];continue}}
        else
         if(! _fL_)return 1;
        return 0}}
    function _i_(_fz_)
     {var
       _fA_=Stdlib_hashtbl[27],
       _fB_=[0,function(_fH_,_fG_){return _fH_ === _fG_?1:0},_fA_],
       _fC_=caml_call1(Stdlib_hashtbl[25],_fB_),
       _fD_=caml_call1(_fC_[1],16);
      function _fE_(_fF_){return caml_call3(_fC_[5],_fD_,_fF_,0)}
      caml_call2(Stdlib_list[15],_fE_,_fz_);
      return caml_call1(_fC_[11],_fD_)}
    var
     _j_=
      _a_
       ([0,
         _g_,
         _d_,
         _c_,
         _b_,
         _h_,
         function(_fq_,_fp_,_fo_)
          {function _fr_(_fy_,_fx_,_fw_){return [0,[0,_fx_,_fw_],_fy_]}
           function _fs_(_fv_,_fu_){return [0,[1,_fu_],_fv_]}
           var
            _ft_=0,
            _e__=[0,_fq_]?_fq_:caml_equal,
            _e$_=_i_(_fp_),
            _ff_=_ft_,
            _fe_=1,
            _fd_=_fp_,
            _fc_=_fo_,
            _fb_=0,
            _fa_=_i_(_fo_);
           for(;;)
            {if(_fd_)
              {var _fg_=_fd_[2],_fh_=_fd_[1];
               if(_fc_)
                {var _fi_=_fc_[2],_fj_=_fc_[1];
                 if(caml_call2(_e__,_fh_,_fj_))
                  {var _fd_=_fg_,_fc_=_fi_,_fb_=_fb_ + 1 | 0;continue}
                 if(caml_call1(_fa_,_fh_))
                  {if(caml_call1(_e$_,_fj_))
                    {if(_fe_)
                      {var _ff_=_fs_(_ff_,_fb_),_fe_=0,_fd_=_fg_;continue}
                     var
                      _ff_=_fr_(_ff_,_fb_,_fj_),
                      _fe_=1,
                      _fc_=_fi_,
                      _fb_=_fb_ + 1 | 0;
                     continue}
                   var _ff_=_fr_(_ff_,_fb_,_fj_),_fc_=_fi_,_fb_=_fb_ + 1 | 0;
                   continue}
                 var _ff_=_fs_(_ff_,_fb_),_fd_=_fg_;
                 continue}
               var _ff_=_fs_(_ff_,_fb_),_fd_=_fg_,_fc_=0;
               continue}
             if(_fc_)
              {var
                _fk_=_fr_(_ff_,_fb_,_fc_[1]),
                _ff_=_fk_,
                _fd_=0,
                _fc_=_fc_[2],
                _fb_=_fb_ + 1 | 0;
               continue}
             var _fm_=0,_fl_=_ff_;
             for(;;)
              {var _fn_=_fm_?_fm_[1]:_fm_;
               if(_fl_){var _fm_=[0,[0,_fl_[1],_fn_]],_fl_=_fl_[2];continue}
               return _fn_}}}]),
     _k_=_j_[3],
     _l_=_j_[5],
     _m_=_j_[6],
     _n_=_j_[10],
     _o_=_j_[13];
    function _p_(_e9_,_e8_){return caml_call2(_m_,_e8_,[0,[0,0,_e9_],0])}
    function _q_(_e7_,_e6_){return caml_call2(_m_,_e6_,[0,[0,-1,_e7_],0])}
    function _r_(_e5_,_e4_,_e3_)
     {return caml_call2(_m_,_e3_,[0,[0,_e4_,_e5_],0])}
    function _s_(_e2_,_e1_,_e0_)
     {return caml_call2(_m_,_e0_,[0,[2,_e1_,_e2_],0])}
    function _t_(_eZ_,_eY_,_eX_)
     {return caml_call2(_m_,_eX_,[0,[3,_eZ_,_eY_],0])}
    function _u_(_eW_,_eV_){return caml_call2(_m_,_eV_,[0,[1,_eW_],0])}
    function _v_(_eR_,_eQ_,_eP_)
     {var _eS_=_eR_?_eR_[1]:caml_equal,_eU_=0,_eT_=_eQ_;
      for(;;)
       {if(_eT_)
         {if(caml_call2(_eS_,_eT_[1],_eP_))return _eU_;
          var _eU_=_eU_ + 1 | 0,_eT_=_eT_[2];
          continue}
        throw Not_found}}
    function _w_(_eN_,_eM_,_eL_,_eK_)
     {var _eO_=_v_(_eN_,caml_call1(_n_,_eM_[1]),_eL_);
      return _s_(_eK_,_eO_,_eM_[2])}
    function _x_(_eH_)
     {var _eI_=_eH_[2],_eJ_=caml_call1(_n_,_eH_[1]);
      return _u_(caml_call1(Stdlib_list[1],_eJ_) - 1 | 0,_eI_)}
    function _y_(_eF_,_eE_,_eD_)
     {var _eG_=_v_(_eF_,caml_call1(_n_,_eE_[1]),_eD_);
      return _u_(_eG_,_eE_[2])}
    function _z_(_eC_){return caml_call1(_l_,[0,_eC_,0])}
    function _A_(_ev_)
     {var
       _ew_=[0,1],
       _ex_=caml_call1(React[1][2],0),
       _ey_=_ex_[2],
       _ez_=caml_call2(_k_,0,_ex_[1]);
      function _eA_(_eB_)
       {return _ew_[1]
                ?(_ew_[1] = 0,caml_call2(_ey_,0,[0,[0,[0,0,_eB_],0]]))
                :caml_call2(_ey_,0,[0,[0,[2,0,_eB_],0]])}
      caml_call3(React[2][11],0,_eA_,_ev_);
      return _ez_}
    function _B_(_dj_,_di_)
     {var
       _dk_=caml_call1(_n_,_dj_),
       _dl_=caml_call1(_n_,_di_),
       _dm_=[0,0],
       _dn_=[0,0];
      function _do_(_eu_,_et_)
       {switch(_et_[0])
         {case 0:_eu_[1]++;return 0;
          case 1:_eu_[1] += -1;return 0;
          default:return 0}}
      function _dp_(_es_,_er_)
       {_es_[1] = caml_call1(Stdlib_list[1],_er_);return 0}
      _dp_(_dm_,_dk_);
      _dp_(_dn_,_dl_);
      function _dq_(_ef_)
       {switch(_ef_[0])
         {case 0:
           var
            _eg_=_ef_[1],
            _eh_=0 <= _eg_?_eg_:_eg_ - _dn_[1] | 0,
            _ei_=[0,_eh_,_ef_[2]];
           break;
          case 1:
           var
            _ej_=_ef_[1],
            _ek_=0 <= _ej_?_ej_:_ej_ - _dn_[1] | 0,
            _ei_=[1,_ek_];
           break;
          case 2:
           var
            _el_=_ef_[1],
            _em_=_ef_[2],
            _en_=0 <= _el_?_el_:_el_ - _dn_[1] | 0,
            _ei_=[2,_en_,_em_];
           break;
          default:
           var
            _eo_=_ef_[1],
            _ep_=_ef_[2],
            _eq_=0 <= _eo_?_eo_:_eo_ - _dn_[1] | 0,
            _ei_=[3,_eq_,_ep_]}
        _do_(_dm_,_ei_);
        return _ei_}
      var _dr_=caml_call1(Stdlib_list[17],_dq_);
      function _ds_(_d4_)
       {switch(_d4_[0])
         {case 0:
           var
            _d5_=_d4_[1],
            _d6_=_d4_[2],
            _d7_=0 <= _d5_?_dm_[1] + _d5_ | 0:_d5_,
            _d8_=[0,_d7_,_d6_];
           break;
          case 1:
           var
            _d9_=_d4_[1],
            _d__=0 <= _d9_?_dm_[1] + _d9_ | 0:_d9_,
            _d8_=[1,_d__];
           break;
          case 2:
           var
            _d$_=_d4_[1],
            _ea_=_d4_[2],
            _eb_=0 <= _d$_?_dm_[1] + _d$_ | 0:_d$_,
            _d8_=[2,_eb_,_ea_];
           break;
          default:
           var
            _ec_=_d4_[1],
            _ed_=_d4_[2],
            _ee_=0 <= _ec_?_dm_[1] + _ec_ | 0:_ec_,
            _d8_=[3,_ee_,_ed_]}
        _do_(_dn_,_d8_);
        return _d8_}
      var
       _dt_=caml_call1(Stdlib_list[17],_ds_),
       _du_=0,
       _dv_=caml_call1(_o_,_di_);
      function _dw_(_d3_){return [0,15437,_d3_]}
      var
       _dx_=[0,caml_call2(React[1][10],_dw_,_dv_),_du_],
       _dy_=caml_call1(_o_,_dj_);
      function _dz_(_d2_){return [0,15436,_d2_]}
      var _dA_=[0,caml_call2(React[1][10],_dz_,_dy_),_dx_];
      function _dB_(_d0_,_dZ_)
       {var _d1_=_d0_[1];
        if(! _d1_)
         if(typeof _dZ_ !== "number")
          if(15436 === _dZ_[1])return [0,[0,_dZ_[2]],_d0_[2]];
        if(! _d0_[2])
         if(typeof _dZ_ !== "number")
          if(15437 === _dZ_[1])return [0,_d1_,[0,_dZ_[2]]];
        throw [0,Assert_failure,_D_]}
      var _dC_=caml_call3(React[1][23],_dB_,_C_,_dA_);
      function _dD_(_dF_)
       {var _dG_=_dF_[1];
        if(_dG_)
         {var _dH_=_dG_[1];
          if(0 === _dH_[0])
           {var _dI_=_dF_[2],_dJ_=_dH_[1];
            if(_dI_)
             {var _dK_=_dI_[1];
              if(0 === _dK_[0])
               {var _dL_=caml_call1(_dr_,_dJ_),_dM_=caml_call1(_dt_,_dK_[1]);
                return [0,caml_call2(Stdlib[26],_dL_,_dM_)]}
              var _dN_=_dK_[1],_dO_=caml_call1(_n_,_dj_);
              _dp_(_dm_,_dO_);
              _dp_(_dn_,_dN_);
              return [1,caml_call2(Stdlib[26],_dO_,_dN_)]}
            return [0,caml_call1(_dr_,_dJ_)]}
          var _dP_=_dF_[2],_dQ_=_dH_[1];
          if(_dP_)
           {var _dR_=_dP_[1];
            if(0 === _dR_[0])
             {_dp_(_dm_,_dQ_);
              var _dS_=caml_call1(_n_,_di_);
              _dp_(_dn_,_dS_);
              return [1,caml_call2(Stdlib[26],_dQ_,_dS_)]}
            var _dT_=_dR_[1];
            _dp_(_dm_,_dQ_);
            _dp_(_dn_,_dT_);
            return [1,caml_call2(Stdlib[26],_dQ_,_dT_)]}
          _dp_(_dm_,_dQ_);
          var _dU_=caml_call1(_n_,_di_);
          return [1,caml_call2(Stdlib[26],_dQ_,_dU_)]}
        var _dV_=_dF_[2];
        if(_dV_)
         {var _dW_=_dV_[1];
          if(0 === _dW_[0])return [0,caml_call1(_dt_,_dW_[1])];
          var _dX_=_dW_[1];
          _dp_(_dn_,_dX_);
          var _dY_=caml_call1(_n_,_dj_);
          return [1,caml_call2(Stdlib[26],_dY_,_dX_)]}
        throw [0,Assert_failure,_E_]}
      var _dE_=caml_call2(React[1][10],_dD_,_dC_);
      return caml_call2(_k_,caml_call2(Stdlib[26],_dk_,_dl_),_dE_)}
    function _F_(_dh_)
     {switch(_dh_[0])
       {case 0:return [0,(- _dh_[1] | 0) - 1 | 0,_dh_[2]];
        case 1:return [1,(- _dh_[1] | 0) - 1 | 0];
        case 2:return [2,(- _dh_[1] | 0) - 1 | 0,_dh_[2]];
        default:return [3,(- _dh_[1] | 0) - 1 | 0,- _dh_[2] | 0]}}
    function _G_(_db_)
     {var _dc_=caml_call1(_o_,_db_);
      function _dd_(_dg_)
       {return 0 === _dg_[0]
                ?[0,caml_call2(Stdlib_list[17],_F_,_dg_[1])]
                :[1,caml_call1(Stdlib_list[9],_dg_[1])]}
      var _de_=caml_call2(React[1][10],_dd_,_dc_),_df_=caml_call1(_n_,_db_);
      return caml_call2(_k_,caml_call1(Stdlib_list[9],_df_),_de_)}
    function _H_(_bE_,_bD_)
     {var
       _bF_=caml_call1(Stdlib_map[1],[0,caml_compare]),
       _bG_=[0,_bF_[1]],
       _bH_=[0,0];
      function _bI_(_c6_)
       {_bH_[1] = caml_call1(Stdlib_list[1],_c6_);
        _bG_[1] = _bF_[1];
        var _c__=_c6_,_c9_=0,_c8_=0,_c7_=-1;
        for(;;)
         {if(_c__)
           {var _c$_=_c__[2],_da_=_c__[1];
            if(caml_call1(_bE_,_da_))
             {_bG_[1] = caml_call3(_bF_[4],_c8_,_c7_ + 1 | 0,_bG_[1]);
              var
               _c__=_c$_,
               _c9_=[0,_da_,_c9_],
               _c8_=_c8_ + 1 | 0,
               _c7_=_c7_ + 1 | 0;
              continue}
            var _c__=_c$_,_c8_=_c8_ + 1 | 0;
            continue}
          return caml_call1(Stdlib_list[9],_c9_)}}
      function _bJ_(_c5_){return 0 <= _c5_?_c5_:(_bH_[1] + 1 | 0) + _c5_ | 0}
      function _bK_(_cT_,_cS_)
       {var
         _cU_=_bJ_(_cT_),
         _cV_=caml_call2(_bF_[26],_cU_,_bG_[1]),
         _cW_=_cV_[3],
         _cX_=_cV_[2],
         _cY_=_cV_[1],
         _cZ_=_cX_?caml_call3(_bF_[4],_cU_,_cX_[1],_cW_):_cW_;
        function _c0_(_c3_,_c2_)
         {var _c4_=_cS_?_c2_ + 1 | 0:_c2_;
          _bG_[1] = caml_call3(_bF_[4],_c3_ + 1 | 0,_c4_,_bG_[1]);
          return 0}
        caml_call2(_bF_[12],_c0_,_cZ_);
        var
         _c1_=
          caml_call1(_bF_[2],_cY_)?0:caml_call1(_bF_[22],_cY_)[2] + 1 | 0;
        if(_cS_)_bG_[1] = caml_call3(_bF_[4],_cU_,_c1_,_bG_[1]);
        _bH_[1]++;
        return _c1_}
      function _bL_(_cK_)
       {var
         _cL_=caml_call2(_bF_[3],_cK_,_bG_[1]),
         _cM_=caml_call2(_bF_[26],_cK_,_bG_[1]);
        function _cN_(_cQ_,_cP_)
         {var _cR_=_cL_?_cP_:_cP_ - 1 | 0;
          _bG_[1] = caml_call3(_bF_[4],_cQ_ - 1 | 0,_cR_,_bG_[1]);
          return 0}
        if(1 - caml_call1(_bF_[2],_bG_[1]))
         {var _cO_=caml_call1(_bF_[22],_bG_[1]);
          _bG_[1] = caml_call2(_bF_[7],_cO_[1],_bG_[1])}
        _bH_[1] += -1;
        return caml_call2(_bF_[12],_cN_,_cM_[3])}
      function _bM_(_cF_)
       {var _cG_=caml_call2(_bF_[26],_cF_,_bG_[1]);
        function _cH_(_cJ_,_cI_)
         {_bG_[1] = caml_call3(_bF_[4],_cJ_,_cI_ - 1 | 0,_bG_[1]);return 0}
        _bG_[1] = caml_call2(_bF_[7],_cF_,_bG_[1]);
        return caml_call2(_bF_[12],_cH_,_cG_[3])}
      function _bN_(_cr_,_cq_,_cp_)
       {var _cs_=_cp_?1:_cp_;
        if(_cr_ < _cq_)
         {var _ct_=_cr_ + 1 | 0;
          if(! (_cq_ < _ct_))
           {var _cu_=_ct_;
            for(;;)
             {var _cv_=_cs_?-1:0;
              try
               {var _cx_=caml_call2(_bF_[27],_cu_,_bG_[1]) + _cv_ | 0;
                _bG_[1] = caml_call3(_bF_[4],_cu_ - 1 | 0,_cx_,_bG_[1])}
              catch(_cD_)
               {_cD_ = caml_wrap_exception(_cD_);
                if(_cD_ !== Not_found)throw _cD_}
              var _cw_=_cu_ + 1 | 0;
              if(_cq_ !== _cu_){var _cu_=_cw_;continue}
              break}}}
        else
         {var _cy_=_cr_ - 1 | 0;
          if(! (_cy_ < _cq_))
           {var _cz_=_cy_;
            for(;;)
             {try
               {var
                 _cB_=_cs_?1:0,
                 _cC_=caml_call2(_bF_[27],_cz_,_bG_[1]) + _cB_ | 0;
                _bG_[1] = caml_call3(_bF_[4],_cz_ + 1 | 0,_cC_,_bG_[1])}
              catch(_cE_)
               {_cE_ = caml_wrap_exception(_cE_);
                if(_cE_ !== Not_found)throw _cE_}
              var _cA_=_cz_ - 1 | 0;
              if(_cq_ !== _cz_){var _cz_=_cA_;continue}
              break}}}
        return _cp_
                ?(_bG_[1] = caml_call3(_bF_[4],_cq_,_cp_[1],_bG_[1]),0)
                :(_bG_[1] = caml_call2(_bF_[7],_cq_,_bG_[1]),0)}
      function _bO_(_bZ_)
       {switch(_bZ_[0])
         {case 0:
           var _b0_=_bZ_[2],_b1_=_bZ_[1];
           return caml_call1(_bE_,_b0_)
                   ?[0,[0,_bK_(_b1_,1),_b0_],0]
                   :(_bK_(_b1_,0),0);
          case 1:
           var _b2_=_bJ_(_bZ_[1]);
           try
            {var _b4_=[0,[1,caml_call2(_bF_[27],_b2_,_bG_[1])],0],_b3_=_b4_}
           catch(_cm_)
            {_cm_ = caml_wrap_exception(_cm_);
             if(_cm_ !== Not_found)throw _cm_;
             var _b3_=0}
           _bL_(_b2_);
           return _b3_;
          case 2:
           var _b5_=_bZ_[2],_b6_=_bJ_(_bZ_[1]);
           try
            {var
              _b9_=caml_call2(_bF_[27],_b6_,_bG_[1]),
              _b__=
               caml_call1(_bE_,_b5_)
                ?[0,[2,_b9_,_b5_],0]
                :(_bM_(_b6_),[0,[1,_b9_],0]);
             return _b__}
           catch(_ci_)
            {_ci_ = caml_wrap_exception(_ci_);
             if(_ci_ === Not_found)
              {var _b7_=caml_call1(_bE_,_b5_);
               if(_b7_)
                {var _bU_=caml_call2(_bF_[26],_b6_,_bG_[1]);
                 if(0 !== _bU_[2])throw [0,Assert_failure,_I_];
                 var
                  _bV_=
                   function(_cl_,_ck_)
                    {_bG_[1] = caml_call3(_bF_[4],_cl_,_ck_ + 1 | 0,_bG_[1]);
                     return 0};
                 try
                  {var _bY_=caml_call1(_bF_[22],_bU_[1])[2],_bW_=_bY_}
                 catch(_cj_)
                  {_cj_ = caml_wrap_exception(_cj_);
                   if(_cj_ !== Not_found)throw _cj_;
                   var _bW_=-1}
                 var _bX_=_bW_ + 1 | 0;
                 _bG_[1] = caml_call3(_bF_[4],_b6_,_bX_,_bG_[1]);
                 caml_call2(_bF_[12],_bV_,_bU_[3]);
                 var _b8_=[0,[0,_bX_,_b5_],0]}
               else
                var _b8_=_b7_;
               return _b8_}
             throw _ci_}
          default:
           var _b$_=_bJ_(_bZ_[1]),_ca_=_b$_ + _bZ_[2] | 0;
           try
            {var _cb_=caml_call2(_bF_[27],_b$_,_bG_[1]);
             try
              {var _ch_=caml_call2(_bF_[27],_ca_,_bG_[1]),_ce_=_ch_}
             catch(_co_)
              {_co_ = caml_wrap_exception(_co_);
               if(_co_ !== Not_found)throw _co_;
               var
                _cc_=caml_call2(_bF_[26],_b$_,_bG_[1])[1],
                _cd_=
                 caml_call1(_bF_[2],_cc_)
                  ?0
                  :caml_call1(_bF_[22],_cc_)[2] + 1 | 0,
                _ce_=_cd_}
             _bN_(_b$_,_ca_,[0,_ce_]);
             var
              _cf_=_ce_ !== _cb_?1:0,
              _cg_=_cf_?[0,[3,_cb_,_ce_ - _cb_ | 0],0]:_cf_;
             return _cg_}
           catch(_cn_)
            {_cn_ = caml_wrap_exception(_cn_);
             if(_cn_ === Not_found){_bN_(_b$_,_ca_,0);return 0}
             throw _cn_}}}
      function _bP_(_bS_)
       {if(0 === _bS_[0])
         {var _bT_=caml_call2(Stdlib_list[17],_bO_,_bS_[1]);
          return [0,caml_call1(Stdlib_list[13],_bT_)]}
        return [1,_bI_(_bS_[1])]}
      var _bQ_=caml_call1(_o_,_bD_),_bR_=caml_call2(React[1][10],_bP_,_bQ_);
      return caml_call2(_k_,_bI_(caml_call1(_n_,_bD_)),_bR_)}
    var _J_=caml_call1(Stdlib_set[1],[0,caml_compare]);
    function _K_(_aW_,_aV_)
     {function _aX_(_bC_,_bB_,_bA_)
       {return caml_call1(_aW_,_bA_)?_bC_:caml_call2(_J_[4],_bB_,_bC_)}
      var _aY_=_J_[1],_aZ_=0;
      function _a0_(_bz_)
       {var _bw_=_aZ_,_bv_=_aY_,_bu_=_bz_;
        for(;;)
         {if(_bu_)
           {var
             _bx_=_bu_[2],
             _by_=_aX_(_bv_,_bw_,_bu_[1]),
             _bw_=_bw_ + 1 | 0,
             _bv_=_by_,
             _bu_=_bx_;
            continue}
          return _bv_}}
      function _a1_(_br_,_bq_,_bp_)
       {function _bs_(_bt_){return _br_ <= _bt_?caml_call2(_bq_,_bt_,1):_bt_}
        return caml_call2(_J_[14],_bs_,_bp_)}
      function _a2_(_a7_,_a6_)
       {if(0 === _a6_[0])
         {var
           _a8_=_a6_[1],
           _a9_=
            function(_a$_,_a__)
             {switch(_a__[0])
               {case 0:
                 var
                  _ba_=_a__[1],
                  _bb_=
                   _a1_(_ba_,function(_bo_,_bn_){return _bo_ + _bn_ | 0},_a$_);
                 return _aX_(_bb_,_ba_,_a__[2]);
                case 1:
                 var _bc_=_a__[1],_bd_=caml_call2(_J_[6],_bc_,_a$_);
                 return _a1_
                         (_bc_,function(_bm_,_bl_){return _bm_ - _bl_ | 0},_bd_);
                case 2:
                 var _be_=_a__[1],_bf_=_a__[2];
                 return _aX_(caml_call2(_J_[6],_be_,_a$_),_be_,_bf_);
                default:
                 var
                  _bg_=_a__[2],
                  _bh_=_a__[1],
                  _bi_=caml_call2(_J_[3],_bg_,_a$_);
                 if(caml_call2(_J_[3],_bh_,_a$_) === _bi_)return _a$_;
                 if(caml_call2(_J_[3],_bh_,_a$_))
                  {var _bj_=caml_call2(_J_[6],_bh_,_a$_);
                   return caml_call2(_J_[4],_bg_,_bj_)}
                 var _bk_=caml_call2(_J_[6],_bg_,_a$_);
                 return caml_call2(_J_[4],_bh_,_bk_)}};
          return caml_call3(Stdlib_list[20],_a9_,_a7_,_a8_)}
        return _a0_(_a6_[1])}
      var
       _a3_=caml_call1(_o_,_aV_),
       _a4_=_a0_(caml_call1(_n_,_aV_)),
       _a5_=caml_call4(React[2][21],0,_a2_,_a4_,_a3_);
      return caml_call3(React[2][11],0,_J_[2],_a5_)}
    var
     _L_=_j_[12],
     _M_=_j_[11],
     _N_=_j_[9],
     _O_=_j_[8],
     _P_=_j_[7],
     _Q_=_j_[4],
     _R_=_j_[2],
     _S_=_j_[1],
     ReactiveData=
      [0,
       [0,
        _S_,
        _R_,
        _k_,
        _Q_,
        _l_,
        _m_,
        _P_,
        _O_,
        _N_,
        _n_,
        _M_,
        _L_,
        _o_,
        _p_,
        _q_,
        _r_,
        _u_,
        _x_,
        _y_,
        _s_,
        _w_,
        _t_,
        _z_,
        _A_,
        _B_,
        _G_,
        _H_,
        _K_],
       function(_ac_)
        {function _U_(_aQ_,_aP_)
          {function _aR_(_aU_,_aT_)
            {if(3404203 <= _aT_[1])return caml_call2(_ac_[7],_aT_[2],_aU_);
             var _aS_=_aT_[2];
             return caml_call3(_ac_[4],_aS_[1],_aS_[2],_aU_)}
           return caml_call3(Stdlib_list[20],_aR_,_aP_,_aQ_)}
         function _V_(_aK_)
          {function _aL_(_aO_)
            {if(3404203 <= _aO_[1])return [0,3404203,_aO_[2]];
             var _aM_=_aO_[2],_aN_=caml_call1(_aK_,_aM_[2]);
             return [0,3254785,[0,_aM_[1],_aN_]]}
           return caml_call1(Stdlib_list[17],_aL_)}
         function _W_(_aJ_,_aI_){return caml_call2(_ac_[33],_aJ_,_aI_)}
         var _X_=_ac_[1];
         function _Y_(_aH_){return caml_call1(_ac_[11],_aH_)}
         var
          _Z_=
           _a_
            ([0,
              _U_,
              _V_,
              _W_,
              _X_,
              _Y_,
              function(_au_,_at_,_as_)
               {function _av_(_aE_,_aD_,_aC_)
                 {if(_aD_)
                   {if(_aC_)
                     {var _aF_=_aC_[1];
                      return caml_call2(_au_,_aD_[1],_aF_)?0:[0,[0,85,_aF_]]}
                    return _T_}
                  var _aG_=_aC_?[0,[0,65,_aC_[1]]]:_aC_;
                  return _aG_}
                var _aw_=caml_call3(_ac_[8],_av_,_at_,_as_);
                function _ax_(_aB_,_aA_,_az_)
                 {return typeof _aA_ === "number"
                          ?[0,[0,3404203,_aB_],_az_]
                          :85 <= _aA_[1]
                            ?[0,[0,3404203,_aB_],[0,[0,3254785,[0,_aB_,_aA_[2]]],_az_]]
                            :[0,[0,3254785,[0,_aB_,_aA_[2]]],_az_]}
                var _ay_=caml_call3(_ac_[13],_ax_,_aw_,0);
                return caml_call1(Stdlib_list[9],_ay_)}]),
          ___=_Z_[3],
          _$_=_Z_[10],
          _aa_=_Z_[13];
         function _ab_(_ae_,_ad_)
          {function _af_(_am_)
            {if(3404203 <= _am_[1])return [0,[0,3404203,_am_[2]],0];
             var
              _an_=_am_[2],
              _ao_=_an_[2],
              _ap_=_an_[1],
              _aq_=caml_call2(_ae_,_ap_,_ao_),
              _ar_=_aq_?[0,[0,3254785,[0,_ap_,_ao_]],0]:_aq_;
             return _ar_}
           function _ag_(_ak_)
            {if(0 === _ak_[0])
              {var _al_=caml_call2(Stdlib_list[17],_af_,_ak_[1]);
               return [0,caml_call1(Stdlib_list[13],_al_)]}
             return [1,caml_call2(_ac_[16],_ae_,_ak_[1])]}
           var
            _ah_=caml_call1(_aa_,_ad_),
            _ai_=caml_call2(React[1][10],_ag_,_ah_),
            _aj_=caml_call1(_$_,_ad_);
           return caml_call2(___,caml_call2(_ac_[16],_ae_,_aj_),_ai_)}
         return [0,
                 _Z_[1],
                 _Z_[2],
                 ___,
                 _Z_[4],
                 _Z_[5],
                 _Z_[6],
                 _Z_[7],
                 _Z_[8],
                 _Z_[9],
                 _$_,
                 _Z_[11],
                 _Z_[12],
                 _aa_,
                 _ab_]},
       _a_];
    runtime.caml_register_global(24,ReactiveData,"ReactiveData");
    return}
  (function(){return this}()));


//# 1 ".js/js_of_ocaml-tyxml/js_of_ocaml_tyxml.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_new_string=runtime.caml_new_string,
     caml_register_global=runtime.caml_register_global,
     caml_string_notequal=runtime.caml_string_notequal;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_of_video$0=caml_new_string("of_video"),
     cst_of_audio$0=caml_new_string("of_audio"),
     cst_of_iFrame=caml_new_string("of_iFrame"),
     cst_of_canvas$0=caml_new_string("of_canvas"),
     cst_of_table$0=caml_new_string("of_table"),
     cst_of_tableCaption=caml_new_string("of_tableCaption"),
     cst_of_tableSection=caml_new_string("of_tableSection"),
     cst_of_tableCol=caml_new_string("of_tableCol"),
     cst_of_tableRow=caml_new_string("of_tableRow"),
     cst_of_tableCell=caml_new_string("of_tableCell"),
     cst_of_embed$0=caml_new_string("of_embed"),
     cst_of_script$0=caml_new_string("of_script"),
     cst_of_map$0=caml_new_string("of_map"),
     cst_of_area$0=caml_new_string("of_area"),
     cst_of_param$0=caml_new_string("of_param"),
     cst_of_object$0=caml_new_string("of_object"),
     cst_of_image=caml_new_string("of_image"),
     cst_of_anchor=caml_new_string("of_anchor"),
     cst_of_mod=caml_new_string("of_mod"),
     cst_of_hr$0=caml_new_string("of_hr"),
     cst_of_br$0=caml_new_string("of_br"),
     cst_of_pre$0=caml_new_string("of_pre"),
     cst_of_quote=caml_new_string("of_quote"),
     cst_of_heading$0=caml_new_string("of_heading"),
     cst_of_paragraph=caml_new_string("of_paragraph"),
     cst_of_div$0=caml_new_string("of_div"),
     cst_of_li$0=caml_new_string("of_li"),
     cst_of_dList=caml_new_string("of_dList"),
     cst_of_oList=caml_new_string("of_oList"),
     cst_of_uList=caml_new_string("of_uList"),
     cst_of_legend$0=caml_new_string("of_legend"),
     cst_of_fieldSet=caml_new_string("of_fieldSet"),
     cst_of_label$0=caml_new_string("of_label"),
     cst_of_button$0=caml_new_string("of_button"),
     cst_of_textArea=caml_new_string("of_textArea"),
     cst_of_input$0=caml_new_string("of_input"),
     cst_of_select$0=caml_new_string("of_select"),
     cst_of_option$0=caml_new_string("of_option"),
     cst_of_optGroup=caml_new_string("of_optGroup"),
     cst_of_form$0=caml_new_string("of_form"),
     cst_of_body$0=caml_new_string("of_body"),
     cst_of_style$0=caml_new_string("of_style"),
     cst_of_base$0=caml_new_string("of_base"),
     cst_of_meta$0=caml_new_string("of_meta"),
     cst_of_title$0=caml_new_string("of_title"),
     cst_of_link$0=caml_new_string("of_link"),
     cst_of_head$0=caml_new_string("of_head"),
     cst_of_html$0=caml_new_string("of_html"),
     cst_of_element$0=caml_new_string("of_element"),
     cst_of_wbr=caml_new_string("of_wbr"),
     cst_of_var=caml_new_string("of_var"),
     cst_of_u=caml_new_string("of_u"),
     cst_of_time=caml_new_string("of_time"),
     cst_of_th=caml_new_string("of_th"),
     cst_of_sup=caml_new_string("of_sup"),
     cst_of_summary=caml_new_string("of_summary"),
     cst_of_sub=caml_new_string("of_sub"),
     cst_of_strong=caml_new_string("of_strong"),
     cst_of_span=caml_new_string("of_span"),
     cst_of_source=caml_new_string("of_source"),
     cst_of_small=caml_new_string("of_small"),
     cst_of_section=caml_new_string("of_section"),
     cst_of_samp=caml_new_string("of_samp"),
     cst_of_ruby=caml_new_string("of_ruby"),
     cst_of_rt=caml_new_string("of_rt"),
     cst_of_rp=caml_new_string("of_rp"),
     cst_of_q=caml_new_string("of_q"),
     cst_of_progress=caml_new_string("of_progress"),
     cst_of_output=caml_new_string("of_output"),
     cst_of_noscript=caml_new_string("of_noscript"),
     cst_of_nav=caml_new_string("of_nav"),
     cst_of_meter=caml_new_string("of_meter"),
     cst_of_menu=caml_new_string("of_menu"),
     cst_of_mark=caml_new_string("of_mark"),
     cst_of_main=caml_new_string("of_main"),
     cst_of_keygen=caml_new_string("of_keygen"),
     cst_of_kbd=caml_new_string("of_kbd"),
     cst_of_i=caml_new_string("of_i"),
     cst_of_hgroup=caml_new_string("of_hgroup"),
     cst_of_header=caml_new_string("of_header"),
     cst_of_footer=caml_new_string("of_footer"),
     cst_of_figure=caml_new_string("of_figure"),
     cst_of_figcaption=caml_new_string("of_figcaption"),
     cst_of_embed=caml_new_string("of_embed"),
     cst_of_em=caml_new_string("of_em"),
     cst_of_dt=caml_new_string("of_dt"),
     cst_of_dfn=caml_new_string("of_dfn"),
     cst_of_details=caml_new_string("of_details"),
     cst_of_dd=caml_new_string("of_dd"),
     cst_of_datalist=caml_new_string("of_datalist"),
     cst_of_command=caml_new_string("of_command"),
     cst_of_colgroup=caml_new_string("of_colgroup"),
     cst_of_code=caml_new_string("of_code"),
     cst_of_cite=caml_new_string("of_cite"),
     cst_of_bdo=caml_new_string("of_bdo"),
     cst_of_b=caml_new_string("of_b"),
     cst_of_aside=caml_new_string("of_aside"),
     cst_of_article=caml_new_string("of_article"),
     cst_of_address=caml_new_string("of_address"),
     cst_of_abbr=caml_new_string("of_abbr"),
     cst_of_h6=caml_new_string("of_h6"),
     cst_of_h5=caml_new_string("of_h5"),
     cst_of_h4=caml_new_string("of_h4"),
     cst_of_h3=caml_new_string("of_h3"),
     cst_of_h2=caml_new_string("of_h2"),
     cst_of_h1=caml_new_string("of_h1"),
     cst_of_video=caml_new_string("of_video"),
     cst_of_audio=caml_new_string("of_audio"),
     cst_of_iframe=caml_new_string("of_iframe"),
     cst_of_canvas=caml_new_string("of_canvas"),
     cst_of_table=caml_new_string("of_table"),
     cst_of_caption=caml_new_string("of_caption"),
     cst_of_tbody=caml_new_string("of_tbody"),
     cst_of_thead=caml_new_string("of_thead"),
     cst_of_tfoot=caml_new_string("of_tfoot"),
     cst_of_col=caml_new_string("of_col"),
     cst_of_tr=caml_new_string("of_tr"),
     cst_of_td=caml_new_string("of_td"),
     cst_of_script=caml_new_string("of_script"),
     cst_of_map=caml_new_string("of_map"),
     cst_of_area=caml_new_string("of_area"),
     cst_of_param=caml_new_string("of_param"),
     cst_of_object=caml_new_string("of_object"),
     cst_of_img=caml_new_string("of_img"),
     cst_of_a=caml_new_string("of_a"),
     cst_of_del=caml_new_string("of_del"),
     cst_of_ins=caml_new_string("of_ins"),
     cst_of_hr=caml_new_string("of_hr"),
     cst_of_br=caml_new_string("of_br"),
     cst_of_pre=caml_new_string("of_pre"),
     cst_of_blockquote=caml_new_string("of_blockquote"),
     cst_of_heading=caml_new_string("of_heading"),
     cst_of_p=caml_new_string("of_p"),
     cst_of_div=caml_new_string("of_div"),
     cst_of_li=caml_new_string("of_li"),
     cst_of_dl=caml_new_string("of_dl"),
     cst_of_ol=caml_new_string("of_ol"),
     cst_of_ul=caml_new_string("of_ul"),
     cst_of_legend=caml_new_string("of_legend"),
     cst_of_fieldset=caml_new_string("of_fieldset"),
     cst_of_label=caml_new_string("of_label"),
     cst_of_button=caml_new_string("of_button"),
     cst_of_textarea=caml_new_string("of_textarea"),
     cst_of_input=caml_new_string("of_input"),
     cst_of_select=caml_new_string("of_select"),
     cst_of_option=caml_new_string("of_option"),
     cst_of_optgroup=caml_new_string("of_optgroup"),
     cst_of_form=caml_new_string("of_form"),
     cst_of_body=caml_new_string("of_body"),
     cst_of_style=caml_new_string("of_style"),
     cst_of_base=caml_new_string("of_base"),
     cst_of_meta=caml_new_string("of_meta"),
     cst_of_title=caml_new_string("of_title"),
     cst_of_link=caml_new_string("of_link"),
     cst_of_head=caml_new_string("of_head"),
     cst_of_html=caml_new_string("of_html"),
     cst_of_pcdata=caml_new_string("of_pcdata"),
     cst_of_node=caml_new_string("of_node"),
     cst_of_element=caml_new_string("of_element"),
     cst$6=caml_new_string(" "),
     cst$5=caml_new_string(","),
     cst$4=caml_new_string(" "),
     cst_filter_attrib_not_implemented_for_event_handler=
      caml_new_string("filter_attrib not implemented for event handler"),
     cst_style=caml_new_string("style"),
     cst_style$0=caml_new_string("style"),
     cst$2=caml_new_string(";"),
     cst$3=caml_new_string("&"),
     cst$1=caml_new_string(" "),
     cst$0=caml_new_string(","),
     cst=caml_new_string(" "),
     Js_of_ocaml_Dom_svg=global_data.Js_of_ocaml__Dom_svg,
     Js_of_ocaml_Dom_html=global_data.Js_of_ocaml__Dom_html,
     React=global_data.React,
     Stdlib_string=global_data.Stdlib__string,
     Invalid_argument=global_data.Invalid_argument,
     Js_of_ocaml_Js=global_data.Js_of_ocaml__Js,
     ReactiveData=global_data.ReactiveData,
     Stdlib_list=global_data.Stdlib__list,
     Js_of_ocaml_Dom=global_data.Js_of_ocaml__Dom,
     Assert_failure=global_data.Assert_failure,
     Stdlib=global_data.Stdlib,
     Xml_wrap=global_data.Xml_wrap,
     Svg_f=global_data.Svg_f,
     Html_f=global_data.Html_f,
     Js_of_ocaml_tyxml=[0,0,0,0];
    caml_register_global(232,Js_of_ocaml_tyxml,"Js_of_ocaml_tyxml__");
    var Js_of_ocaml_tyxml_Tyxml_cast_sigs=[0];
    caml_register_global
     (233,
      Js_of_ocaml_tyxml_Tyxml_cast_sigs,
      "Js_of_ocaml_tyxml__Tyxml_cast_sigs");
    var
     _c_=[0,caml_new_string("lib/tyxml/tyxml_js.ml"),275,8],
     _d_=[0,caml_new_string("lib/tyxml/tyxml_js.ml"),281,15],
     _e_=[0,caml_new_string("lib/tyxml/tyxml_js.ml"),289,17],
     _b_=[0,caml_new_string("lib/tyxml/tyxml_js.ml"),262,4];
    function MakeTo(C)
     {function rebuild_node(param,x){return caml_call1(C[1],x)}
      function of_element(elt){return rebuild_node(cst_of_element,elt)}
      function of_node(elt){return rebuild_node(cst_of_node,elt)}
      function of_pcdata(elt){return rebuild_node(cst_of_pcdata,elt)}
      function of_html(elt){return rebuild_node(cst_of_html,elt)}
      function of_head(elt){return rebuild_node(cst_of_head,elt)}
      function of_link(elt){return rebuild_node(cst_of_link,elt)}
      function of_title(elt){return rebuild_node(cst_of_title,elt)}
      function of_meta(elt){return rebuild_node(cst_of_meta,elt)}
      function of_base(elt){return rebuild_node(cst_of_base,elt)}
      function of_style(elt){return rebuild_node(cst_of_style,elt)}
      function of_body(elt){return rebuild_node(cst_of_body,elt)}
      function of_form(elt){return rebuild_node(cst_of_form,elt)}
      function of_optgroup(elt){return rebuild_node(cst_of_optgroup,elt)}
      function of_option(elt){return rebuild_node(cst_of_option,elt)}
      function of_select(elt){return rebuild_node(cst_of_select,elt)}
      function of_input(elt){return rebuild_node(cst_of_input,elt)}
      function of_textarea(elt){return rebuild_node(cst_of_textarea,elt)}
      function of_button(elt){return rebuild_node(cst_of_button,elt)}
      function of_label(elt){return rebuild_node(cst_of_label,elt)}
      function of_fieldset(elt){return rebuild_node(cst_of_fieldset,elt)}
      function of_legend(elt){return rebuild_node(cst_of_legend,elt)}
      function of_ul(elt){return rebuild_node(cst_of_ul,elt)}
      function of_ol(elt){return rebuild_node(cst_of_ol,elt)}
      function of_dl(elt){return rebuild_node(cst_of_dl,elt)}
      function of_li(elt){return rebuild_node(cst_of_li,elt)}
      function of_div(elt){return rebuild_node(cst_of_div,elt)}
      function of_p(elt){return rebuild_node(cst_of_p,elt)}
      function of_heading(elt){return rebuild_node(cst_of_heading,elt)}
      function of_blockquote(elt){return rebuild_node(cst_of_blockquote,elt)}
      function of_pre(elt){return rebuild_node(cst_of_pre,elt)}
      function of_br(elt){return rebuild_node(cst_of_br,elt)}
      function of_hr(elt){return rebuild_node(cst_of_hr,elt)}
      function of_ins(elt){return rebuild_node(cst_of_ins,elt)}
      function of_del(elt){return rebuild_node(cst_of_del,elt)}
      function of_a(elt){return rebuild_node(cst_of_a,elt)}
      function of_img(elt){return rebuild_node(cst_of_img,elt)}
      function of_object(elt){return rebuild_node(cst_of_object,elt)}
      function of_param(elt){return rebuild_node(cst_of_param,elt)}
      function of_area(elt){return rebuild_node(cst_of_area,elt)}
      function of_map(elt){return rebuild_node(cst_of_map,elt)}
      function of_script(elt){return rebuild_node(cst_of_script,elt)}
      function of_td(elt){return rebuild_node(cst_of_td,elt)}
      function of_tr(elt){return rebuild_node(cst_of_tr,elt)}
      function of_col(elt){return rebuild_node(cst_of_col,elt)}
      function of_tfoot(elt){return rebuild_node(cst_of_tfoot,elt)}
      function of_thead(elt){return rebuild_node(cst_of_thead,elt)}
      function of_tbody(elt){return rebuild_node(cst_of_tbody,elt)}
      function of_caption(elt){return rebuild_node(cst_of_caption,elt)}
      function of_table(elt){return rebuild_node(cst_of_table,elt)}
      function of_canvas(elt){return rebuild_node(cst_of_canvas,elt)}
      function of_iframe(elt){return rebuild_node(cst_of_iframe,elt)}
      function of_audio(elt){return rebuild_node(cst_of_audio,elt)}
      function of_video(elt){return rebuild_node(cst_of_video,elt)}
      function of_h1(elt){return rebuild_node(cst_of_h1,elt)}
      function of_h2(elt){return rebuild_node(cst_of_h2,elt)}
      function of_h3(elt){return rebuild_node(cst_of_h3,elt)}
      function of_h4(elt){return rebuild_node(cst_of_h4,elt)}
      function of_h5(elt){return rebuild_node(cst_of_h5,elt)}
      function of_h6(elt){return rebuild_node(cst_of_h6,elt)}
      function of_abbr(elt){return rebuild_node(cst_of_abbr,elt)}
      function of_address(elt){return rebuild_node(cst_of_address,elt)}
      function of_article(elt){return rebuild_node(cst_of_article,elt)}
      function of_aside(elt){return rebuild_node(cst_of_aside,elt)}
      function of_b(elt){return rebuild_node(cst_of_b,elt)}
      function of_bdo(elt){return rebuild_node(cst_of_bdo,elt)}
      function of_cite(elt){return rebuild_node(cst_of_cite,elt)}
      function of_code(elt){return rebuild_node(cst_of_code,elt)}
      function of_colgroup(elt){return rebuild_node(cst_of_colgroup,elt)}
      function of_command(elt){return rebuild_node(cst_of_command,elt)}
      function of_datalist(elt){return rebuild_node(cst_of_datalist,elt)}
      function of_dd(elt){return rebuild_node(cst_of_dd,elt)}
      function of_details(elt){return rebuild_node(cst_of_details,elt)}
      function of_dfn(elt){return rebuild_node(cst_of_dfn,elt)}
      function of_dt(elt){return rebuild_node(cst_of_dt,elt)}
      function of_em(elt){return rebuild_node(cst_of_em,elt)}
      function of_embed(elt){return rebuild_node(cst_of_embed,elt)}
      function of_figcaption(elt){return rebuild_node(cst_of_figcaption,elt)}
      function of_figure(elt){return rebuild_node(cst_of_figure,elt)}
      function of_footer(elt){return rebuild_node(cst_of_footer,elt)}
      function of_header(elt){return rebuild_node(cst_of_header,elt)}
      function of_hgroup(elt){return rebuild_node(cst_of_hgroup,elt)}
      function of_i(elt){return rebuild_node(cst_of_i,elt)}
      function of_kbd(elt){return rebuild_node(cst_of_kbd,elt)}
      function of_keygen(elt){return rebuild_node(cst_of_keygen,elt)}
      function of_main(elt){return rebuild_node(cst_of_main,elt)}
      function of_mark(elt){return rebuild_node(cst_of_mark,elt)}
      function of_menu(elt){return rebuild_node(cst_of_menu,elt)}
      function of_meter(elt){return rebuild_node(cst_of_meter,elt)}
      function of_nav(elt){return rebuild_node(cst_of_nav,elt)}
      function of_noscript(elt){return rebuild_node(cst_of_noscript,elt)}
      function of_output(elt){return rebuild_node(cst_of_output,elt)}
      function of_progress(elt){return rebuild_node(cst_of_progress,elt)}
      function of_q(elt){return rebuild_node(cst_of_q,elt)}
      function of_rp(elt){return rebuild_node(cst_of_rp,elt)}
      function of_rt(elt){return rebuild_node(cst_of_rt,elt)}
      function of_ruby(elt){return rebuild_node(cst_of_ruby,elt)}
      function of_samp(elt){return rebuild_node(cst_of_samp,elt)}
      function of_section(elt){return rebuild_node(cst_of_section,elt)}
      function of_small(elt){return rebuild_node(cst_of_small,elt)}
      function of_source(elt){return rebuild_node(cst_of_source,elt)}
      function of_span(elt){return rebuild_node(cst_of_span,elt)}
      function of_strong(elt){return rebuild_node(cst_of_strong,elt)}
      function of_sub(elt){return rebuild_node(cst_of_sub,elt)}
      function of_summary(elt){return rebuild_node(cst_of_summary,elt)}
      function of_sup(elt){return rebuild_node(cst_of_sup,elt)}
      function of_th(elt){return rebuild_node(cst_of_th,elt)}
      function of_time(elt){return rebuild_node(cst_of_time,elt)}
      function of_u(elt){return rebuild_node(cst_of_u,elt)}
      function of_var(elt){return rebuild_node(cst_of_var,elt)}
      function of_wbr(elt){return rebuild_node(cst_of_wbr,elt)}
      return [0,
              of_element,
              of_node,
              of_pcdata,
              of_html,
              of_head,
              of_link,
              of_title,
              of_meta,
              of_base,
              of_style,
              of_body,
              of_form,
              of_optgroup,
              of_option,
              of_select,
              of_input,
              of_textarea,
              of_button,
              of_label,
              of_fieldset,
              of_legend,
              of_ul,
              of_ol,
              of_dl,
              of_li,
              of_div,
              of_p,
              of_heading,
              of_blockquote,
              of_pre,
              of_br,
              of_hr,
              of_del,
              of_ins,
              of_a,
              of_img,
              of_object,
              of_param,
              of_area,
              of_map,
              of_script,
              of_td,
              of_tr,
              of_col,
              of_tfoot,
              of_thead,
              of_tbody,
              of_caption,
              of_table,
              of_canvas,
              of_iframe,
              of_audio,
              of_video,
              of_h1,
              of_h2,
              of_h3,
              of_h4,
              of_h5,
              of_h6,
              of_abbr,
              of_address,
              of_article,
              of_aside,
              of_b,
              of_bdo,
              of_cite,
              of_code,
              of_colgroup,
              of_command,
              of_datalist,
              of_dd,
              of_details,
              of_dfn,
              of_dt,
              of_em,
              of_embed,
              of_figcaption,
              of_figure,
              of_footer,
              of_header,
              of_hgroup,
              of_i,
              of_kbd,
              of_keygen,
              of_main,
              of_mark,
              of_menu,
              of_meter,
              of_nav,
              of_noscript,
              of_output,
              of_progress,
              of_q,
              of_rp,
              of_rt,
              of_ruby,
              of_samp,
              of_section,
              of_small,
              of_source,
              of_span,
              of_strong,
              of_sub,
              of_summary,
              of_sup,
              of_th,
              of_time,
              of_u,
              of_var,
              of_wbr]}
    function MakeOf(C)
     {function rebuild_node(param,x){return caml_call1(C[1],x)}
      function of_element(elt){return rebuild_node(cst_of_element$0,elt)}
      function of_html(elt){return rebuild_node(cst_of_html$0,elt)}
      function of_head(elt){return rebuild_node(cst_of_head$0,elt)}
      function of_link(elt){return rebuild_node(cst_of_link$0,elt)}
      function of_title(elt){return rebuild_node(cst_of_title$0,elt)}
      function of_meta(elt){return rebuild_node(cst_of_meta$0,elt)}
      function of_base(elt){return rebuild_node(cst_of_base$0,elt)}
      function of_style(elt){return rebuild_node(cst_of_style$0,elt)}
      function of_body(elt){return rebuild_node(cst_of_body$0,elt)}
      function of_form(elt){return rebuild_node(cst_of_form$0,elt)}
      function of_optGroup(elt){return rebuild_node(cst_of_optGroup,elt)}
      function of_option(elt){return rebuild_node(cst_of_option$0,elt)}
      function of_select(elt){return rebuild_node(cst_of_select$0,elt)}
      function of_input(elt){return rebuild_node(cst_of_input$0,elt)}
      function of_textArea(elt){return rebuild_node(cst_of_textArea,elt)}
      function of_button(elt){return rebuild_node(cst_of_button$0,elt)}
      function of_label(elt){return rebuild_node(cst_of_label$0,elt)}
      function of_fieldSet(elt){return rebuild_node(cst_of_fieldSet,elt)}
      function of_legend(elt){return rebuild_node(cst_of_legend$0,elt)}
      function of_uList(elt){return rebuild_node(cst_of_uList,elt)}
      function of_oList(elt){return rebuild_node(cst_of_oList,elt)}
      function of_dList(elt){return rebuild_node(cst_of_dList,elt)}
      function of_li(elt){return rebuild_node(cst_of_li$0,elt)}
      function of_div(elt){return rebuild_node(cst_of_div$0,elt)}
      function of_paragraph(elt){return rebuild_node(cst_of_paragraph,elt)}
      function of_heading(elt){return rebuild_node(cst_of_heading$0,elt)}
      function of_quote(elt){return rebuild_node(cst_of_quote,elt)}
      function of_pre(elt){return rebuild_node(cst_of_pre$0,elt)}
      function of_br(elt){return rebuild_node(cst_of_br$0,elt)}
      function of_hr(elt){return rebuild_node(cst_of_hr$0,elt)}
      function of_mod(elt){return rebuild_node(cst_of_mod,elt)}
      function of_anchor(elt){return rebuild_node(cst_of_anchor,elt)}
      function of_image(elt){return rebuild_node(cst_of_image,elt)}
      function of_object(elt){return rebuild_node(cst_of_object$0,elt)}
      function of_param(elt){return rebuild_node(cst_of_param$0,elt)}
      function of_area(elt){return rebuild_node(cst_of_area$0,elt)}
      function of_map(elt){return rebuild_node(cst_of_map$0,elt)}
      function of_script(elt){return rebuild_node(cst_of_script$0,elt)}
      function of_embed(elt){return rebuild_node(cst_of_embed$0,elt)}
      function of_tableCell(elt){return rebuild_node(cst_of_tableCell,elt)}
      function of_tableRow(elt){return rebuild_node(cst_of_tableRow,elt)}
      function of_tableCol(elt){return rebuild_node(cst_of_tableCol,elt)}
      function of_tableSection(elt)
       {return rebuild_node(cst_of_tableSection,elt)}
      function of_tableCaption(elt)
       {return rebuild_node(cst_of_tableCaption,elt)}
      function of_table(elt){return rebuild_node(cst_of_table$0,elt)}
      function of_canvas(elt){return rebuild_node(cst_of_canvas$0,elt)}
      function of_iFrame(elt){return rebuild_node(cst_of_iFrame,elt)}
      function of_audio(elt){return rebuild_node(cst_of_audio$0,elt)}
      function of_video(elt){return rebuild_node(cst_of_video$0,elt)}
      return [0,
              of_element,
              of_html,
              of_head,
              of_link,
              of_title,
              of_meta,
              of_base,
              of_style,
              of_body,
              of_form,
              of_optGroup,
              of_option,
              of_select,
              of_input,
              of_textArea,
              of_button,
              of_label,
              of_fieldSet,
              of_legend,
              of_uList,
              of_oList,
              of_dList,
              of_li,
              of_div,
              of_paragraph,
              of_heading,
              of_quote,
              of_pre,
              of_br,
              of_hr,
              of_mod,
              of_anchor,
              of_image,
              of_object,
              of_param,
              of_area,
              of_map,
              of_script,
              of_embed,
              of_tableCell,
              of_tableRow,
              of_tableCol,
              of_tableSection,
              of_tableCaption,
              of_table,
              of_canvas,
              of_iFrame,
              of_audio,
              of_video]}
    var include=[0,MakeTo,MakeOf];
    caml_register_global(234,include,"Js_of_ocaml_tyxml__Tyxml_cast");
    function uri_of_string(s){return s}
    function string_of_uri(s){return s}
    function attr(name,v){return [0,name,[4,caml_call1(React[2][1],[0,v])]]}
    function float_attrib(name,value){return attr(name,value.toString())}
    function int_attrib(name,value){return attr(name,value.toString())}
    function string_attrib(name,value){return attr(name,value.toString())}
    function space_sep_attrib(name,values)
     {return attr(name,caml_call2(Stdlib_string[7],cst,values).toString())}
    function comma_sep_attrib(name,values)
     {return attr(name,caml_call2(Stdlib_string[7],cst$0,values).toString())}
    function event_handler_attrib(name,value){return [0,name,[0,value]]}
    function mouse_event_handler_attrib(name,value){return [0,name,[1,value]]}
    function keyboard_event_handler_attrib(name,value)
     {return [0,name,[2,value]]}
    function touch_event_handler_attrib(name,value){return [0,name,[3,value]]}
    function uri_attrib(name,value){return attr(name,value.toString())}
    function uris_attrib(name,values)
     {return attr(name,caml_call2(Stdlib_string[7],cst$1,values).toString())}
    function empty(param)
     {return Js_of_ocaml_Dom_html[2].createDocumentFragment()}
    function comment(c)
     {return Js_of_ocaml_Dom_html[2].createComment(c.toString())}
    function pcdata(s)
     {return Js_of_ocaml_Dom_html[2].createTextNode(s.toString())}
    function encodedpcdata(s)
     {return Js_of_ocaml_Dom_html[2].createTextNode(s.toString())}
    function entity(e)
     {var
       _H_=caml_call2(Stdlib[17],e,cst$2),
       _I_=caml_call2(Stdlib[17],cst$3,_H_).toString(),
       entity=caml_call1(Js_of_ocaml_Dom_html[119],_I_);
      return Js_of_ocaml_Dom_html[2].createTextNode(entity)}
    function get_prop(node,name)
     {return caml_call1(Js_of_ocaml_Js[6][5],node[name])?[0,name]:0}
    function iter_prop_protected(node,name,f)
     {var match=get_prop(node,name);
      if(match)
       {var n=match[1];
        try {var _F_=caml_call1(f,n);return _F_}catch(_G_){return 0}}
      return 0}
    function attach_attribs(node,l)
     {function _D_(param)
       {var att=param[2],n=param[1],n$0=n.toString();
        switch(att[0])
         {case 0:
           var h=att[1];
           return node[n$0] = function(ev){return ! ! caml_call1(h,ev)};
          case 1:
           var h$0=att[1];
           return node[n$0] = function(ev){return ! ! caml_call1(h$0,ev)};
          case 2:
           var h$1=att[1];
           return node[n$0] = function(ev){return ! ! caml_call1(h$1,ev)};
          case 3:
           var h$2=att[1];
           return node[n$0] = function(ev){return ! ! caml_call1(h$2,ev)};
          default:
           var
            a=att[1],
            _E_=
             function(param)
              {if(param)
                {var v=param[1];
                 node.setAttribute(n$0,v);
                 return caml_string_notequal(n,cst_style)
                         ?iter_prop_protected
                           (node,n$0,function(name){return node[name] = v})
                         :node.style.cssText = v}
               node.removeAttribute(n$0);
               return caml_string_notequal(n,cst_style$0)
                       ?iter_prop_protected
                         (node,
                          n$0,
                          function(name){return node[name] = Js_of_ocaml_Js[1]})
                       :node.style.cssText = ""};
           caml_call3(React[2][11],0,_E_,a);
           return 0}}
      return caml_call2(Stdlib_list[15],_D_,l)}
    function leaf(opt,name)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var e=Js_of_ocaml_Dom_html[2].createElement(name.toString());
      attach_attribs(e,a);
      return e}
    function node(opt,name,children)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var e=Js_of_ocaml_Dom_html[2].createElement(name.toString());
      attach_attribs(e,a);
      function _C_(c){e.appendChild(c);return 0}
      caml_call2(Stdlib_list[15],_C_,children);
      return e}
    function cdata(s){return pcdata(s)}
    function cdata_script(s){return cdata(s)}
    function cdata_style(s){return cdata(s)}
    function leaf$0(opt,name)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var
       e=
        Js_of_ocaml_Dom_html[2].createElementNS
         (Js_of_ocaml_Dom_svg[1],name.toString());
      attach_attribs(e,a);
      return e}
    function node$0(opt,name,children)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var
       e=
        Js_of_ocaml_Dom_html[2].createElementNS
         (Js_of_ocaml_Dom_svg[1],name.toString());
      attach_attribs(e,a);
      function _B_(c){e.appendChild(c);return 0}
      caml_call2(Stdlib_list[15],_B_,children);
      return e}
    var
     Svg=
      caml_call1
       (Svg_f[1],
        [0,
         Xml_wrap[1],
         string_of_uri,
         uri_of_string,
         float_attrib,
         int_attrib,
         string_attrib,
         space_sep_attrib,
         comma_sep_attrib,
         event_handler_attrib,
         mouse_event_handler_attrib,
         keyboard_event_handler_attrib,
         touch_event_handler_attrib,
         uri_attrib,
         uris_attrib,
         empty,
         comment,
         pcdata,
         encodedpcdata,
         entity,
         leaf$0,
         node$0,
         cdata,
         cdata_script,
         cdata_style]),
     _a_=
      [0,
       Svg[2],
       Svg[3],
       Svg[4],
       Svg[5],
       Svg[6],
       Svg[7],
       Svg[8],
       Svg[9],
       Svg[10],
       Svg[11],
       Svg[12],
       Svg[13],
       Svg[14],
       Svg[15],
       Svg[16],
       Svg[17],
       Svg[18],
       Svg[19],
       Svg[20],
       Svg[21],
       Svg[22],
       Svg[23],
       Svg[24],
       Svg[25],
       Svg[26],
       Svg[27],
       Svg[28],
       Svg[29],
       Svg[30],
       Svg[31],
       Svg[32],
       Svg[33],
       Svg[34],
       Svg[35],
       Svg[36],
       Svg[37],
       Svg[38],
       Svg[39],
       Svg[40],
       Svg[41],
       Svg[42],
       Svg[43],
       Svg[44],
       Svg[45],
       Svg[46],
       Svg[47],
       Svg[48],
       Svg[49],
       Svg[50],
       Svg[51],
       Svg[52],
       Svg[53],
       Svg[54],
       Svg[55],
       Svg[56],
       Svg[57],
       Svg[58],
       Svg[59],
       Svg[60],
       Svg[61],
       Svg[62],
       Svg[63],
       Svg[64],
       Svg[65],
       Svg[66],
       Svg[67],
       Svg[68],
       Svg[69],
       Svg[70],
       Svg[71],
       Svg[72],
       Svg[73],
       Svg[74],
       Svg[75],
       Svg[76],
       Svg[77],
       Svg[78],
       Svg[79],
       Svg[80],
       Svg[81],
       Svg[82],
       Svg[83],
       Svg[84],
       Svg[85],
       Svg[86],
       Svg[87],
       Svg[88],
       Svg[89],
       Svg[90],
       Svg[91],
       Svg[92],
       Svg[93],
       Svg[94],
       Svg[95],
       Svg[96],
       Svg[97],
       Svg[98],
       Svg[99],
       Svg[100],
       Svg[101],
       Svg[102],
       Svg[103],
       Svg[104],
       Svg[105],
       Svg[106],
       Svg[107],
       Svg[108],
       Svg[109],
       Svg[110],
       Svg[111],
       Svg[112],
       Svg[113],
       Svg[114],
       Svg[115],
       Svg[116],
       Svg[117],
       Svg[118],
       Svg[119],
       Svg[120],
       Svg[121],
       Svg[122],
       Svg[123],
       Svg[124],
       Svg[125],
       Svg[126],
       Svg[127],
       Svg[128],
       Svg[129],
       Svg[130],
       Svg[131],
       Svg[132],
       Svg[133],
       Svg[134],
       Svg[135],
       Svg[136],
       Svg[137],
       Svg[138],
       Svg[139],
       Svg[140],
       Svg[141],
       Svg[142],
       Svg[143],
       Svg[144],
       Svg[145],
       Svg[146],
       Svg[147],
       Svg[148],
       Svg[149],
       Svg[150],
       Svg[151],
       Svg[152],
       Svg[153],
       Svg[154],
       Svg[155],
       Svg[156],
       Svg[157],
       Svg[158],
       Svg[159],
       Svg[160],
       Svg[161],
       Svg[162],
       Svg[163],
       Svg[164],
       Svg[165],
       Svg[166],
       Svg[167],
       Svg[168],
       Svg[169],
       Svg[170],
       Svg[171],
       Svg[172],
       Svg[173],
       Svg[174],
       Svg[175],
       Svg[176],
       Svg[177],
       Svg[178],
       Svg[179],
       Svg[180],
       Svg[181],
       Svg[182],
       Svg[183],
       Svg[184],
       Svg[185],
       Svg[186],
       Svg[187],
       Svg[188],
       Svg[189],
       Svg[190],
       Svg[191],
       Svg[192],
       Svg[193],
       Svg[194],
       Svg[195],
       Svg[196],
       Svg[197],
       Svg[198],
       Svg[199],
       Svg[200],
       Svg[201],
       Svg[202],
       Svg[203],
       Svg[204],
       Svg[205],
       Svg[206],
       Svg[207],
       Svg[208],
       Svg[209],
       Svg[210],
       Svg[211],
       Svg[212],
       Svg[213],
       Svg[214],
       Svg[215],
       Svg[216],
       Svg[217],
       Svg[218],
       Svg[219],
       Svg[220],
       Svg[221],
       Svg[222],
       Svg[223],
       Svg[224],
       Svg[225],
       Svg[226],
       Svg[227],
       Svg[228],
       Svg[229],
       Svg[230],
       Svg[231],
       Svg[232],
       Svg[233],
       Svg[234],
       Svg[235],
       Svg[236],
       Svg[237],
       Svg[238],
       Svg[239],
       Svg[240],
       Svg[241],
       Svg[242],
       Svg[243],
       Svg[244],
       Svg[245],
       Svg[246],
       Svg[247],
       Svg[248],
       Svg[249],
       Svg[250],
       Svg[251],
       Svg[252],
       Svg[253],
       Svg[254],
       Svg[255],
       Svg[256],
       Svg[257],
       Svg[258],
       Svg[259],
       Svg[260],
       Svg[261],
       Svg[262],
       Svg[263],
       Svg[264],
       Svg[265],
       Svg[266],
       Svg[267],
       Svg[268],
       Svg[269],
       Svg[270],
       Svg[271],
       Svg[272],
       Svg[273],
       Svg[274],
       Svg[275],
       Svg[276],
       Svg[277],
       Svg[278],
       Svg[279],
       Svg[280],
       Svg[281],
       Svg[282],
       Svg[283],
       Svg[284],
       Svg[285],
       Svg[286],
       Svg[287],
       Svg[288],
       Svg[289],
       Svg[290],
       Svg[291],
       Svg[292],
       Svg[293],
       Svg[294],
       Svg[295],
       Svg[296],
       Svg[297],
       Svg[298],
       Svg[299],
       Svg[300],
       Svg[301],
       Svg[302],
       Svg[303],
       Svg[304],
       Svg[305],
       Svg[306],
       Svg[307],
       Svg[308],
       Svg[309],
       Svg[310],
       Svg[311],
       Svg[312],
       Svg[313],
       Svg[314],
       Svg[315],
       Svg[316],
       Svg[317],
       Svg[318],
       Svg[319],
       Svg[320],
       Svg[321],
       Svg[322],
       Svg[323],
       Svg[324],
       Svg[325],
       Svg[326],
       Svg[327],
       Svg[328],
       Svg[329]],
     Html5=
      caml_call1
       (caml_call1
         (Html_f[1],
          [0,
           Xml_wrap[1],
           string_of_uri,
           uri_of_string,
           float_attrib,
           int_attrib,
           string_attrib,
           space_sep_attrib,
           comma_sep_attrib,
           event_handler_attrib,
           mouse_event_handler_attrib,
           keyboard_event_handler_attrib,
           touch_event_handler_attrib,
           uri_attrib,
           uris_attrib,
           empty,
           comment,
           pcdata,
           encodedpcdata,
           entity,
           leaf,
           node,
           cdata,
           cdata_script,
           cdata_style]),
        _a_),
     elt=Html5[332],
     To_dom=MakeTo([0,elt]),
     elt$0=Html5[330],
     Of_dom=MakeOf([0,elt$0]);
    function add_to(opt,node,content)
     {if(opt)var sth=opt[1],keep=sth;else var keep=1;
      if(1 - keep)
       {var l=node.childNodes,_v_=l.length - 1 | 0,_u_=0;
        if(! (_v_ < 0))
         {var i=_u_;
          for(;;)
           {var _w_=function(x){node.removeChild(x);return 0},_x_=l.item(i);
            caml_call2(Js_of_ocaml_Js[5][6],_x_,_w_);
            var _y_=i + 1 | 0;
            if(_v_ !== i){var i=_y_;continue}
            break}}}
      function _z_(x)
       {var _A_=caml_call1(To_dom[1],x);
        return caml_call2(Js_of_ocaml_Dom[5],node,_A_)}
      return caml_call2(Stdlib_list[15],_z_,content)}
    function id(keep,id,content)
     {var node=caml_call1(Js_of_ocaml_Dom_html[6],id);
      return add_to(keep,node,content)}
    function body(keep,content)
     {return add_to(keep,Js_of_ocaml_Dom_html[2].body,content)}
    function head(keep,content)
     {return add_to(keep,Js_of_ocaml_Dom_html[2].head,content)}
    function html(head,body)
     {if(head)
       {var h=head[1],_s_=caml_call1(To_dom[5],h);
        Js_of_ocaml_Dom_html[2].head = _s_}
      var _t_=caml_call1(To_dom[11],body);
      Js_of_ocaml_Dom_html[2].body = _t_;
      return 0}
    var return$0=React[2][1];
    function fmap(f){return caml_call2(React[2][11],0,f)}
    function nil(param){return ReactiveData[1][1]}
    var singleton=ReactiveData[1][24];
    function cons(x,xs)
     {var _r_=caml_call1(singleton,x);
      return caml_call2(ReactiveData[1][25],_r_,xs)}
    function map(f){return caml_call1(ReactiveData[1][9],f)}
    function append(x,y){return caml_call2(ReactiveData[1][25],x,y)}
    function insertAt(dom,i,x)
     {var nodes=dom.childNodes;
      if(runtime.caml_lessequal(i,nodes.length))
       return runtime.caml_equal(i,nodes.length)
               ?(dom.appendChild(x),0)
               :(dom.insertBefore(x,nodes.item(i)),0);
      throw [0,Assert_failure,_b_]}
    function removeChildren(dom)
     {for(;;)
       {var match=caml_call1(Js_of_ocaml_Js[5][10],dom.lastChild);
        if(match){var c=match[1];dom.removeChild(c);continue}
        return 0}}
    function update_children(dom,nodes)
     {removeChildren(dom);
      var _i_=0;
      function _j_(param,msg)
       {if(0 === msg[0])
         {var
           p=msg[1],
           _k_=
            function(p)
             {switch(p[0])
               {case 0:
                 var
                  x=p[2],
                  i=p[1],
                  i$0=0 <= i?i:(dom.childNodes.length + 1 | 0) + i | 0;
                 return insertAt(dom,i$0,x);
                case 1:
                 var
                  i$1=p[1],
                  i$2=0 <= i$1?i$1:dom.childNodes.length + i$1 | 0,
                  nodes=dom.childNodes;
                 if(0 <= i$2)
                  if(i$2 < nodes.length)
                   {var
                     _m_=function(n){return caml_call2(Js_of_ocaml_Dom[4],dom,n)},
                     _n_=nodes.item(i$2);
                    return caml_call2(Js_of_ocaml_Js[5][6],_n_,_m_)}
                 throw [0,Assert_failure,_c_];
                case 2:
                 var
                  x$0=p[2],
                  i$3=p[1],
                  i$4=0 <= i$3?i$3:dom.childNodes.length + i$3 | 0,
                  _o_=dom.childNodes.item(i$4),
                  match=caml_call1(Js_of_ocaml_Js[5][10],_o_);
                 if(match)
                  {var old=match[1];dom.replaceChild(x$0,old);return 0}
                 throw [0,Assert_failure,_d_];
                default:
                 var
                  move=p[2],
                  i$5=p[1],
                  i$6=0 <= i$5?i$5:dom.childNodes.length + i$5 | 0;
                 if(0 === move)return 0;
                 var
                  _p_=dom.childNodes.item(i$6),
                  match$0=caml_call1(Js_of_ocaml_Js[5][10],_p_);
                 if(match$0)
                  {var i$7=match$0[1],_q_=0 < move?move + 1 | 0:move;
                   return insertAt(dom,i$6 + _q_ | 0,i$7)}
                 throw [0,Assert_failure,_e_]}};
          return caml_call2(Stdlib_list[15],_k_,p)}
        var l=msg[1];
        removeChildren(dom);
        function _l_(l){dom.appendChild(l);return 0}
        return caml_call2(Stdlib_list[15],_l_,l)}
      caml_call3(ReactiveData[1][11],_j_,nodes,_i_);
      return 0}
    function filter_attrib(param,on)
     {var a=param[2],name=param[1];
      if(4 === a[0])
       {var a$0=a[1],_h_=function(on,a){return on?a:0};
        return [0,name,[4,caml_call4(React[2][27],0,_h_,on,a$0)]]}
      throw [0,
             Invalid_argument,
             cst_filter_attrib_not_implemented_for_event_handler]}
    function attr$0(name,f,s)
     {var a=caml_call1(fmap(f),s);return [0,name,[4,a]]}
    function float_attrib$0(name,s)
     {return attr$0(name,function(f){return [0,f.toString()]},s)}
    function int_attrib$0(name,s)
     {return attr$0(name,function(f){return [0,f.toString()]},s)}
    function string_attrib$0(name,s)
     {return attr$0(name,function(f){return [0,f.toString()]},s)}
    function space_sep_attrib$0(name,s)
     {return attr$0
              (name,
               function(f)
                {return [0,caml_call2(Stdlib_string[7],cst$4,f).toString()]},
               s)}
    function comma_sep_attrib$0(name,s)
     {return attr$0
              (name,
               function(f)
                {return [0,caml_call2(Stdlib_string[7],cst$5,f).toString()]},
               s)}
    function event_handler_attrib$0(name,s)
     {return event_handler_attrib(name,s)}
    function mouse_event_handler_attrib$0(name,s)
     {return mouse_event_handler_attrib(name,s)}
    function keyboard_event_handler_attrib$0(name,s)
     {return keyboard_event_handler_attrib(name,s)}
    function touch_event_handler_attrib$0(name,s)
     {return touch_event_handler_attrib(name,s)}
    function uri_attrib$0(name,s)
     {return attr$0(name,function(f){return [0,f.toString()]},s)}
    function uris_attrib$0(name,s)
     {return attr$0
              (name,
               function(f)
                {return [0,caml_call2(Stdlib_string[7],cst$6,f).toString()]},
               s)}
    function pcdata$0(s)
     {var e=Js_of_ocaml_Dom_html[2].createTextNode("");
      function _g_(s){return e.data = s.toString()}
      caml_call3(React[2][11],0,_g_,s);
      return e}
    function encodedpcdata$0(s){return pcdata$0(s)}
    function entity$0(s){return entity(s)}
    function node$1(opt,name,l)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var e=Js_of_ocaml_Dom_html[2].createElement(name.toString());
      attach_attribs(e,a);
      update_children(e,l);
      return e}
    function node$2(opt,name,l)
     {if(opt)var sth=opt[1],a=sth;else var a=0;
      var
       e=
        Js_of_ocaml_Dom_html[2].createElementNS
         (Js_of_ocaml_Dom_svg[1],name.toString());
      attach_attribs(e,a);
      update_children(e,l);
      return e}
    var
     Svg$0=
      caml_call1
       (Svg_f[1],
        [0,
         [0,return$0,fmap,nil,singleton,cons,append,map],
         string_of_uri,
         uri_of_string,
         float_attrib$0,
         int_attrib$0,
         string_attrib$0,
         space_sep_attrib$0,
         comma_sep_attrib$0,
         event_handler_attrib$0,
         mouse_event_handler_attrib$0,
         keyboard_event_handler_attrib$0,
         touch_event_handler_attrib$0,
         uri_attrib$0,
         uris_attrib$0,
         empty,
         comment,
         pcdata$0,
         encodedpcdata$0,
         entity$0,
         leaf$0,
         node$2,
         cdata,
         cdata_script,
         cdata_style]),
     _f_=
      [0,
       Svg$0[2],
       Svg$0[3],
       Svg$0[4],
       Svg$0[5],
       Svg$0[6],
       Svg$0[7],
       Svg$0[8],
       Svg$0[9],
       Svg$0[10],
       Svg$0[11],
       Svg$0[12],
       Svg$0[13],
       Svg$0[14],
       Svg$0[15],
       Svg$0[16],
       Svg$0[17],
       Svg$0[18],
       Svg$0[19],
       Svg$0[20],
       Svg$0[21],
       Svg$0[22],
       Svg$0[23],
       Svg$0[24],
       Svg$0[25],
       Svg$0[26],
       Svg$0[27],
       Svg$0[28],
       Svg$0[29],
       Svg$0[30],
       Svg$0[31],
       Svg$0[32],
       Svg$0[33],
       Svg$0[34],
       Svg$0[35],
       Svg$0[36],
       Svg$0[37],
       Svg$0[38],
       Svg$0[39],
       Svg$0[40],
       Svg$0[41],
       Svg$0[42],
       Svg$0[43],
       Svg$0[44],
       Svg$0[45],
       Svg$0[46],
       Svg$0[47],
       Svg$0[48],
       Svg$0[49],
       Svg$0[50],
       Svg$0[51],
       Svg$0[52],
       Svg$0[53],
       Svg$0[54],
       Svg$0[55],
       Svg$0[56],
       Svg$0[57],
       Svg$0[58],
       Svg$0[59],
       Svg$0[60],
       Svg$0[61],
       Svg$0[62],
       Svg$0[63],
       Svg$0[64],
       Svg$0[65],
       Svg$0[66],
       Svg$0[67],
       Svg$0[68],
       Svg$0[69],
       Svg$0[70],
       Svg$0[71],
       Svg$0[72],
       Svg$0[73],
       Svg$0[74],
       Svg$0[75],
       Svg$0[76],
       Svg$0[77],
       Svg$0[78],
       Svg$0[79],
       Svg$0[80],
       Svg$0[81],
       Svg$0[82],
       Svg$0[83],
       Svg$0[84],
       Svg$0[85],
       Svg$0[86],
       Svg$0[87],
       Svg$0[88],
       Svg$0[89],
       Svg$0[90],
       Svg$0[91],
       Svg$0[92],
       Svg$0[93],
       Svg$0[94],
       Svg$0[95],
       Svg$0[96],
       Svg$0[97],
       Svg$0[98],
       Svg$0[99],
       Svg$0[100],
       Svg$0[101],
       Svg$0[102],
       Svg$0[103],
       Svg$0[104],
       Svg$0[105],
       Svg$0[106],
       Svg$0[107],
       Svg$0[108],
       Svg$0[109],
       Svg$0[110],
       Svg$0[111],
       Svg$0[112],
       Svg$0[113],
       Svg$0[114],
       Svg$0[115],
       Svg$0[116],
       Svg$0[117],
       Svg$0[118],
       Svg$0[119],
       Svg$0[120],
       Svg$0[121],
       Svg$0[122],
       Svg$0[123],
       Svg$0[124],
       Svg$0[125],
       Svg$0[126],
       Svg$0[127],
       Svg$0[128],
       Svg$0[129],
       Svg$0[130],
       Svg$0[131],
       Svg$0[132],
       Svg$0[133],
       Svg$0[134],
       Svg$0[135],
       Svg$0[136],
       Svg$0[137],
       Svg$0[138],
       Svg$0[139],
       Svg$0[140],
       Svg$0[141],
       Svg$0[142],
       Svg$0[143],
       Svg$0[144],
       Svg$0[145],
       Svg$0[146],
       Svg$0[147],
       Svg$0[148],
       Svg$0[149],
       Svg$0[150],
       Svg$0[151],
       Svg$0[152],
       Svg$0[153],
       Svg$0[154],
       Svg$0[155],
       Svg$0[156],
       Svg$0[157],
       Svg$0[158],
       Svg$0[159],
       Svg$0[160],
       Svg$0[161],
       Svg$0[162],
       Svg$0[163],
       Svg$0[164],
       Svg$0[165],
       Svg$0[166],
       Svg$0[167],
       Svg$0[168],
       Svg$0[169],
       Svg$0[170],
       Svg$0[171],
       Svg$0[172],
       Svg$0[173],
       Svg$0[174],
       Svg$0[175],
       Svg$0[176],
       Svg$0[177],
       Svg$0[178],
       Svg$0[179],
       Svg$0[180],
       Svg$0[181],
       Svg$0[182],
       Svg$0[183],
       Svg$0[184],
       Svg$0[185],
       Svg$0[186],
       Svg$0[187],
       Svg$0[188],
       Svg$0[189],
       Svg$0[190],
       Svg$0[191],
       Svg$0[192],
       Svg$0[193],
       Svg$0[194],
       Svg$0[195],
       Svg$0[196],
       Svg$0[197],
       Svg$0[198],
       Svg$0[199],
       Svg$0[200],
       Svg$0[201],
       Svg$0[202],
       Svg$0[203],
       Svg$0[204],
       Svg$0[205],
       Svg$0[206],
       Svg$0[207],
       Svg$0[208],
       Svg$0[209],
       Svg$0[210],
       Svg$0[211],
       Svg$0[212],
       Svg$0[213],
       Svg$0[214],
       Svg$0[215],
       Svg$0[216],
       Svg$0[217],
       Svg$0[218],
       Svg$0[219],
       Svg$0[220],
       Svg$0[221],
       Svg$0[222],
       Svg$0[223],
       Svg$0[224],
       Svg$0[225],
       Svg$0[226],
       Svg$0[227],
       Svg$0[228],
       Svg$0[229],
       Svg$0[230],
       Svg$0[231],
       Svg$0[232],
       Svg$0[233],
       Svg$0[234],
       Svg$0[235],
       Svg$0[236],
       Svg$0[237],
       Svg$0[238],
       Svg$0[239],
       Svg$0[240],
       Svg$0[241],
       Svg$0[242],
       Svg$0[243],
       Svg$0[244],
       Svg$0[245],
       Svg$0[246],
       Svg$0[247],
       Svg$0[248],
       Svg$0[249],
       Svg$0[250],
       Svg$0[251],
       Svg$0[252],
       Svg$0[253],
       Svg$0[254],
       Svg$0[255],
       Svg$0[256],
       Svg$0[257],
       Svg$0[258],
       Svg$0[259],
       Svg$0[260],
       Svg$0[261],
       Svg$0[262],
       Svg$0[263],
       Svg$0[264],
       Svg$0[265],
       Svg$0[266],
       Svg$0[267],
       Svg$0[268],
       Svg$0[269],
       Svg$0[270],
       Svg$0[271],
       Svg$0[272],
       Svg$0[273],
       Svg$0[274],
       Svg$0[275],
       Svg$0[276],
       Svg$0[277],
       Svg$0[278],
       Svg$0[279],
       Svg$0[280],
       Svg$0[281],
       Svg$0[282],
       Svg$0[283],
       Svg$0[284],
       Svg$0[285],
       Svg$0[286],
       Svg$0[287],
       Svg$0[288],
       Svg$0[289],
       Svg$0[290],
       Svg$0[291],
       Svg$0[292],
       Svg$0[293],
       Svg$0[294],
       Svg$0[295],
       Svg$0[296],
       Svg$0[297],
       Svg$0[298],
       Svg$0[299],
       Svg$0[300],
       Svg$0[301],
       Svg$0[302],
       Svg$0[303],
       Svg$0[304],
       Svg$0[305],
       Svg$0[306],
       Svg$0[307],
       Svg$0[308],
       Svg$0[309],
       Svg$0[310],
       Svg$0[311],
       Svg$0[312],
       Svg$0[313],
       Svg$0[314],
       Svg$0[315],
       Svg$0[316],
       Svg$0[317],
       Svg$0[318],
       Svg$0[319],
       Svg$0[320],
       Svg$0[321],
       Svg$0[322],
       Svg$0[323],
       Svg$0[324],
       Svg$0[325],
       Svg$0[326],
       Svg$0[327],
       Svg$0[328],
       Svg$0[329]],
     Html=
      caml_call1
       (caml_call1
         (Html_f[1],
          [0,
           [0,return$0,fmap,nil,singleton,cons,append,map],
           string_of_uri,
           uri_of_string,
           float_attrib$0,
           int_attrib$0,
           string_attrib$0,
           space_sep_attrib$0,
           comma_sep_attrib$0,
           event_handler_attrib$0,
           mouse_event_handler_attrib$0,
           keyboard_event_handler_attrib$0,
           touch_event_handler_attrib$0,
           uri_attrib$0,
           uris_attrib$0,
           empty,
           comment,
           pcdata$0,
           encodedpcdata$0,
           entity$0,
           leaf,
           node$1,
           cdata,
           cdata_script,
           cdata_style]),
        _f_),
     R=
      [0,
       [0,
        [0,return$0,fmap,nil,singleton,cons,append,map],
        string_of_uri,
        uri_of_string,
        float_attrib$0,
        int_attrib$0,
        string_attrib$0,
        space_sep_attrib$0,
        comma_sep_attrib$0,
        event_handler_attrib$0,
        mouse_event_handler_attrib$0,
        keyboard_event_handler_attrib$0,
        touch_event_handler_attrib$0,
        uri_attrib$0,
        uris_attrib$0,
        empty,
        comment,
        pcdata$0,
        encodedpcdata$0,
        entity$0,
        leaf,
        node$1,
        cdata,
        cdata_script,
        cdata_style],
       Svg$0,
       Html,
       filter_attrib,
       Html],
     Util=[0,update_children],
     Wrap=[0,return$0,fmap,nil,singleton,cons,append,map],
     Register=[0,html,body,head,id],
     Xml=
      [0,
       Xml_wrap[1],
       string_of_uri,
       uri_of_string,
       float_attrib,
       int_attrib,
       string_attrib,
       space_sep_attrib,
       comma_sep_attrib,
       event_handler_attrib,
       mouse_event_handler_attrib,
       keyboard_event_handler_attrib,
       touch_event_handler_attrib,
       uri_attrib,
       uris_attrib,
       empty,
       comment,
       pcdata,
       encodedpcdata,
       entity,
       leaf,
       node,
       cdata,
       cdata_script,
       cdata_style],
     include$0=[0,Xml,Svg,Html5,Html5,Register,Wrap,Util,R,To_dom,Of_dom];
    caml_register_global(249,include$0,"Js_of_ocaml_tyxml__Tyxml_js");
    var Js_of_ocaml_tyxml$0=[0,0,0,0];
    caml_register_global(250,Js_of_ocaml_tyxml$0,"Js_of_ocaml_tyxml");
    var Tyxml_cast=[0,MakeTo,MakeOf];
    caml_register_global(251,Tyxml_cast,"Tyxml_cast");
    var Tyxml_cast_sigs=[0];
    caml_register_global(252,Tyxml_cast_sigs,"Tyxml_cast_sigs");
    var Tyxml_js=[0,Xml,Svg,Html5,Html5,Register,Wrap,Util,R,To_dom,Of_dom];
    caml_register_global(253,Tyxml_js,"Tyxml_js");
    return}
  (function(){return this}()));


//# 1 ".client.eobjs/byte/fr.cmo.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_new_string=runtime.caml_new_string;
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     questions=
      caml_list_of_js_array
       ([caml_new_string
          ("Un des principaux r\xc3\xb4les de l\xe2\x80\x99enseignant ou de l\xe2\x80\x99enseignante est de maintenir l\xe2\x80\x99ordre et la discipline dans sa classe, et ce, en contr\xc3\xb4lant personnellement le comportement de ses \xc3\xa9l\xc3\xa8ves."),
         caml_new_string
          ("R\xc3\xa9compenser les \xc3\xa9l\xc3\xa8ves m\xc3\xa9ritants ou leur donner du renforcement est une excellente fa\xc3\xa7on de g\xc3\xa9rer sa classe."),
         caml_new_string
          ("En gestion de classe,la t\xc3\xa2che principale de l\xe2\x80\x99enseignant(e) consiste \xc3\xa0 aider les \xc3\xa9l\xc3\xa8ves \xc3\xa0 comprendre et \xc3\xa0 respecter les r\xc3\xa8gles choisies par le groupe."),
         caml_new_string
          ("L\xe2\x80\x99utilisation d\xe2\x80\x99activit\xc3\xa9s d\xe2\x80\x99apprentissage appropri\xc3\xa9es encourage habituellement les \xc3\xa9l\xc3\xa8ves \xc3\xa0 bien se comporter parce que cela diminue l\xe2\x80\x99ennui et la frustration."),
         caml_new_string
          ("La menace de la punition et la punition peuvent \xc3\xaatre tr\xc3\xa8s efficaces lorsqu\xe2\x80\x99elles sont bien utilis\xc3\xa9es."),
         caml_new_string
          ("En ce qui concerne le comportement des \xc3\xa9l\xc3\xa8ves, il est pr\xc3\xa9f\xc3\xa9rable de leur imposer le moins de limites possible afin de leur permettre de d\xc3\xa9velopper tout leur potentiel et leur autonomie."),
         caml_new_string
          ("En ce qui concerne la gestion de classe, l\xe2\x80\x99action la plus importante de l\xe2\x80\x99enseignant ou de l\xe2\x80\x99enseignante consiste \xc3\xa0 faire en sorte d\xe2\x80\x99avoir de bonnes relations avec ses \xc3\xa9l\xc3\xa8ves."),
         caml_new_string
          ("Une gestion de classe efficace passe avant tout par l\xe2\x80\x99instauration dans la classe d\xe2\x80\x99un syst\xc3\xa8me de r\xc3\xa8gles d\xc3\xa9termin\xc3\xa9es par l\xe2\x80\x99enseignant ou l\xe2\x80\x99enseignante."),
         caml_new_string
          ("Une bonne gestion de classe consiste principalement \xc3\xa0 renforcer les comportements appropri\xc3\xa9s et \xc3\xa0 d\xc3\xa9courager les comportements d\xc3\xa9viants."),
         caml_new_string
          ("L\xe2\x80\x99utilisation du conseil de coop\xc3\xa9ration et de sessions collectives de r\xc3\xa9solution de probl\xc3\xa8mes sont parmi les moyens les plus efficaces pour r\xc3\xa9gler les probl\xc3\xa8mes de gestion de classe."),
         caml_new_string
          ("L\xe2\x80\x99utilisation de strat\xc3\xa9gies p\xc3\xa9dagogiques efficaces contribue grandement \xc3\xa0 pr\xc3\xa9venir et \xc3\xa0 r\xc3\xa9gler les probl\xc3\xa8mes de comportement."),
         caml_new_string
          ("On peut utiliser le sarcasme en classe mais avec pr\xc3\xa9caution et seulement apr\xc3\xa8s que de solides relations auront \xc3\xa9t\xc3\xa9 \xc3\xa9tablies avec les \xc3\xa9l\xc3\xa8ves."),
         caml_new_string
          ("Trop de contr\xc3\xb4le peut entraver le d\xc3\xa9veloppement naturel de l\xe2\x80\x99autonomie des \xc3\xa9l\xc3\xa8ves."),
         caml_new_string
          ("En ce qui concerne la gestion de classe, le r\xc3\xb4le le plus important de l\xe2\x80\x99enseignant ou de l\xe2\x80\x99enseignante consiste \xc3\xa0 \xc3\xa9tablir et \xc3\xa0 maintenir de bonnes relations avec ses \xc3\xa9l\xc3\xa8ves."),
         caml_new_string
          ("C\xe2\x80\x99est le r\xc3\xb4le de l\xe2\x80\x99enseignant ou de l\xe2\x80\x99enseignante de choisir personnellement des r\xc3\xa8gles de vie pour sa classe."),
         caml_new_string
          ("Un bon syst\xc3\xa8me d\xe2\x80\x99\xc3\xa9mulation appliqu\xc3\xa9 \xc3\xa0 tout le groupe peut vraiment faciliter la gestion de classe."),
         caml_new_string
          ("Une bonne gestion de classe passe avant tout par la coh\xc3\xa9sion du groupe et la coop\xc3\xa9ration entre les \xc3\xa9l\xc3\xa8ves."),
         caml_new_string
          ("Faire en sorte que chaque \xc3\xa9l\xc3\xa8ve fasse des apprentissages significatifs est une excellente fa\xc3\xa7on d\xe2\x80\x99instaurer et de maintenir la discipline en classe."),
         caml_new_string
          ("Une gestion de classe efficace passe parfois par le recours \xc3\xa0 la coercition."),
         caml_new_string
          ("En gestion de classe, il est pr\xc3\xa9f\xc3\xa9rable d\xe2\x80\x99\xc3\xaatre un peu trop permissif qu\xe2\x80\x99un peu trop \xc2\xab contr\xc3\xb4lant \xc2\xbb."),
         caml_new_string
          ("La qualit\xc3\xa9 de la gestion de classe se mesure avant tout par la nature des relations entre les \xc3\xa9l\xc3\xa8ves et l\xe2\x80\x99enseignant ou l\xe2\x80\x99enseignante."),
         caml_new_string
          ("Une gestion de class efficace passe par l\xe2\x80\x99\xc3\xa9tablissement et le maintien du contr\xc3\xb4le de la classe \xc3\xa0 l\xe2\x80\x99aide d\xe2\x80\x99un code de vie \xc3\xa9labor\xc3\xa9 par l\xe2\x80\x99enseignant ou l\xe2\x80\x99enseignante."),
         caml_new_string
          ("En gestion de classe, il est primordial de savoir r\xc3\xa9compenser et appliquer\n  des cons\xc3\xa9quences."),
         caml_new_string
          ("Une gestion de classe efficace a pour but principal d\xe2\x80\x99aider le groupe \xc3\xa0 devenir capable de r\xc3\xa9gler lui-m\xc3\xaame plusieurs de ses probl\xc3\xa8mes."),
         caml_new_string
          ("Les activit\xc3\xa9s d\xe2\x80\x99apprentissage que choisit l\xe2\x80\x99enseignant ou l\xe2\x80\x99enseignante ont une r\xc3\xa9percussion importante sur le comportement des \xc3\xa9l\xc3\xa8ves."),
         caml_new_string
          ("L\xe2\x80\x99utilisation du sarcasme peut, \xc3\xa0 certaines conditions bien pr\xc3\xa9cises, constituer un moyen acceptable de contr\xc3\xb4ler le comportement de certains \xc3\xa9l\xc3\xa8ves."),
         caml_new_string
          ("Une gestion de classe efficace passe parfois par la punition s\xc3\xa9v\xc3\xa8re des comportements inad\xc3\xa9quats.")]),
     classes=
      [0,
       [0,
        caml_new_string("Autorit\xc3\xa9"),
        caml_new_string
         ("Les enseignantes et les enseignants qui g\xc3\xa8rent leur classe principalement \xc3\xa0 partir d\xe2\x80\x99un syst\xc3\xa8me de r\xc3\xa8gles et de proc\xc3\xa9dures qu\xe2\x80\x99ils ont eux-m\xc3\xaames d\xc3\xa9finies s\xe2\x80\x99inscrivent dans un patron d\xe2\x80\x99autorit\xc3\xa9. Les tenants de cette fa\xc3\xa7on de faire consid\xc3\xa8rent g\xc3\xa9n\xc3\xa9ralement que leur r\xc3\xb4le consiste principalement \xc3\xa0 contr\xc3\xb4ler le comportement des \xc3\xa9l\xc3\xa8ves en organisant et en r\xc3\xa9gulant les relations sociales qui sont \xc3\xa9tablies en classe. D\xc3\xa8s lors, l\xe2\x80\x99\xc3\xa9laboration et l\xe2\x80\x99instauration d\xe2\x80\x99un code vie efficace sont une priorit\xc3\xa9 pour ces derniers.")],
       [0,
        [0,
         caml_new_string("Modification du comportement"),
         caml_new_string
          ("La modification du comportement s\xe2\x80\x99inscrit pleinement dans une conception b\xc3\xa9haviorale cognitive de l\xe2\x80\x99\xc3\xa9ducation. Ses d\xc3\xa9fenseurs soutiennent que les comportements, ad\xc3\xa9quats ou non, sont appris, et que le r\xc3\xb4le des enseignantes et des enseignants consiste principalement \xc3\xa0 encourager les \xc3\xa9l\xc3\xa8ves \xc3\xa0 adopter des comportements appropri\xc3\xa9s. Leurs pratiques s\xe2\x80\x99appuient g\xc3\xa9n\xc3\xa9ralement sur les quatre principes de base de l\xe2\x80\x99apprentissage d\xc3\xa9finis par les b\xc3\xa9havioristes, soit le renforcement positif, la punition, l\xe2\x80\x99extinction et le renforcement n\xc3\xa9gatif.  Ils ont donc tendance \xc3\xa0 pr\xc3\xa9venir et \xc3\xa0 r\xc3\xa9gler les probl\xc3\xa8mes de comportement des \xc3\xa9l\xc3\xa8ves en utilisant des techniques sophistiqu\xc3\xa9es destin\xc3\xa9es \xc3\xa0 amener une modification des comportements inadapt\xc3\xa9s. Ils ont par exemple recours \xc3\xa0 la r\xc3\xa9compense ainsi qu\xe2\x80\x99au syst\xc3\xa8me d\xe2\x80\x99\xc3\xa9mulation et utilisent fr\xc3\xa9quemment la feuille de route et le contrat de comportement.")],
        [0,
         [0,
          caml_new_string("Syst\xc3\xa8me social"),
          caml_new_string
           ("Les enseignantes et enseignants port\xc3\xa9s plut\xc3\xb4t \xc3\xa0 g\xc3\xa9rer leur classe \xc3\xa0 partir de pr\xc3\xa9occupations relatives au syst\xc3\xa8me social accordent eux aussi beaucoup d\xe2\x80\x99importance \xc3\xa0 l\xe2\x80\x99\xc3\xa9tablissement de r\xc3\xa8gles et de proc\xc3\xa9dures; cependant, ils privil\xc3\xa9gient davantage la coh\xc3\xa9sion du groupe et la coop\xc3\xa9ration entre les \xc3\xa9l\xc3\xa8ves que ne le font leurs coll\xc3\xa8gues plus \xc2\xab autoritaires \xc2\xbb. Ils con\xc3\xa7oivent qu\xe2\x80\x99une bonne gestion de classe devrait d\xe2\x80\x99abord tenir compte du fait que l\xe2\x80\x99enseignement et l\xe2\x80\x99apprentissage se produisent dans un contexte de groupe et que le r\xc3\xb4le de l\xe2\x80\x99enseignant consiste principalement \xc3\xa0 \xc3\xa9tablir et \xc3\xa0 maintenir dans la classe des conditions favorables \xc3\xa0 la vie en commun. En cons\xc3\xa9quence, ces enseignantes et ces enseignants ont tendance \xc3\xa0 \xc3\xaatre attentifs au groupe plut\xc3\xb4t qu\xe2\x80\x99aux individus et sont port\xc3\xa9s \xc3\xa0 partager leur autorit\xc3\xa9 avec les \xc3\xa9l\xc3\xa8ves en les faisant participer aux choix des r\xc3\xa8gles de vie et aux d\xc3\xa9cisions concernant les affaires internes de la classe. Ils sont enclins par exemple \xc3\xa0 recourir dans leur classe \xc3\xa0 l\xe2\x80\x99instauration d\xe2\x80\x99instances d\xc3\xa9mocratiques comme le conseil de coop\xc3\xa9ration.")],
         [0,
          [0,
           caml_new_string("Accent sur la p\xc3\xa9dagogie"),
           caml_new_string
            ("Pour leur part, les tenants d\xe2\x80\x99une gestion de classe centr\xc3\xa9e sur la p\xc3\xa9dagogie appuient principalement leur pratique sur la conception voulant qu\xe2\x80\x99une bonne planification de l\xe2\x80\x99enseignement soit \xc3\xa0 la base d\xe2\x80\x99une gestion efficace de la classe et que cela encourage les \xc3\xa9l\xc3\xa8ves \xc3\xa0 se comporter de fa\xc3\xa7on convenable. Pour eux, la responsabilit\xc3\xa9 premi\xc3\xa8re des enseignantes et des enseignants est de proposer aux \xc3\xa9l\xc3\xa8ves des activit\xc3\xa9s d\xe2\x80\x99apprentissage correspondant \xc3\xa0 leurs acquis, \xc3\xa0 leurs besoins et \xc3\xa0 leurs champs d\xe2\x80\x99int\xc3\xa9r\xc3\xaat, de leur enseigner des strat\xc3\xa9gies d\xe2\x80\x99apprentissage appropri\xc3\xa9es et de s\xe2\x80\x99assurer que chacun puisse recevoir de l\xe2\x80\x99aide et r\xc3\xa9ussir.  Ces enseignantes et enseignants accordent g\xc3\xa9n\xc3\xa9ralement beaucoup d\xe2\x80\x99importance au choix et au d\xc3\xa9roulement des activit\xc3\xa9s d\xe2\x80\x99apprentissage ainsi qu\xe2\x80\x99\xc3\xa0 la motivation scolaire des \xc3\xa9l\xc3\xa8ves.")],
          [0,
           [0,
            caml_new_string("Intimidation"),
            caml_new_string
             ("Comme pour la composante autorit\xc3\xa9, l\xe2\x80\x99intimidation repose sur la conception qu\xe2\x80\x99une bonne gestion de classe passe par le contr\xc3\xb4le du comportement des \xc3\xa9l\xc3\xa8ves. Cependant, au lieu de chercher \xc3\xa0 atteindre cet objectif en amenant progressivement les \xc3\xa9l\xc3\xa8ves \xc3\xa0 se conformer \xc3\xa0 leurs attentes, les adeptes de l\xe2\x80\x99intimidation cherchent plut\xc3\xb4t \xc3\xa0 forcer les \xc3\xa9l\xc3\xa8ves \xc3\xa0 leur ob\xc3\xa9ir. Pour ce faire, ils utilisent le sarcasme, la moquerie, la force ou la punition s\xc3\xa9v\xc3\xa8re.  Les enseignantes et les enseignants qui privil\xc3\xa9gient cette composante tentent aussi de \xc2\xab mettre les fauteurs de troubles \xc3\xa0 leur place d\xc3\xa8s le d\xc3\xa9part \xc2\xbb en leur faisant perdre la face devant leurs pairs. Ils n\xe2\x80\x99h\xc3\xa9sitent pas \xc3\xa0 faire preuve d\xe2\x80\x99une grande s\xc3\xa9v\xc3\xa9rit\xc3\xa9 envers les \xc3\xa9l\xc3\xa8ves fautifs et leur gestion de classe est habituellement fond\xc3\xa9e sur la lutte de pouvoir avec les \xc3\xa9l\xc3\xa8ves.")],
           [0,
            [0,
             caml_new_string("Permissivit\xc3\xa9"),
             caml_new_string
              ("Les adeptes de la permissivit\xc3\xa9 sont d\xe2\x80\x99avis que l\xe2\x80\x99on doit intervenir le moins possible dans le processus de gestion de classe parce que le contr\xc3\xb4le inhibe le d\xc3\xa9veloppement naturel de l\xe2\x80\x99autonomie des \xc3\xa9l\xc3\xa8ves. Ces derniers croient en g\xc3\xa9n\xc3\xa9ral que leur r\xc3\xb4le consiste avant tout \xc3\xa0 favoriser le d\xc3\xa9veloppement de l\xe2\x80\x99autonomie et de la libre expression. En cons\xc3\xa9quence, ces enseignantes et enseignants exercent moins leur autorit\xc3\xa9 et ont tendance \xc3\xa0 s\xe2\x80\x99en remettre au bon vouloir des \xc3\xa9l\xc3\xa8ves.")],
            [0,
             [0,
              caml_new_string("Socio-\xc3\xa9motivit\xc3\xa9"),
              caml_new_string
               ("Les partisans de la socio-\xc3\xa9motivit\xc3\xa9 sont fortement influenc\xc3\xa9s par les id\xc3\xa9es issues de la psychologie humaniste. Ces enseignantes et enseignants croient qu\xe2\x80\x99une bonne gestion de classe est grandement tributaire de la qualit\xc3\xa9 des relations ma\xc3\xaetre-\xc3\xa9l\xc3\xa8ves et qu\xe2\x80\x99en cons\xc3\xa9quence, leur r\xc3\xb4le consiste avant tout \xc3\xa0 \xc3\xa9tablir et \xc3\xa0 conserver des relations harmonieuses avec les \xc3\xa9l\xc3\xa8ves. Ils ont donc recours par exemple \xc3\xa0 l\xe2\x80\x99\xc3\xa9coute active, \xc3\xa0 l\xe2\x80\x99empathie, \xc3\xa0 la th\xc3\xa9rapie de la r\xc3\xa9alit\xc3\xa9 et \xc3\xa0 l\xe2\x80\x99acceptation inconditionnelle. Par ailleurs, ils privil\xc3\xa9gient la cons\xc3\xa9quence logique plut\xc3\xb4t que la punition comme fa\xc3\xa7on de r\xc3\xa9agir aux comportements d\xc3\xa9viants des \xc3\xa9l\xc3\xa8ves. Tout comme leurs coll\xc3\xa8gues port\xc3\xa9s sur les aspects socio-syst\xc3\xa9miques de la classe, les tenants de la socio-\xc3\xa9motivit\xc3\xa9 adoptent un style d\xc3\xa9mocratique de gestion et tendent \xc3\xa0 associer les \xc3\xa9l\xc3\xa8ves aux prises de d\xc3\xa9cisions. Toutefois, ils sont moins enclins \xc3\xa0 consid\xc3\xa9rer le groupe et privil\xc3\xa9gient les transactions individuelles. En cons\xc3\xa9quence, ils pr\xc3\xa9f\xc3\xa8rent r\xc3\xa9gler un probl\xc3\xa8me de comportement en priv\xc3\xa9 plut\xc3\xb4t que dans le contexte du conseil de classe.")],
             0]]]]]]],
     Stdlib_printf=global_data.Stdlib__printf,
     Stdlib_list=global_data.Stdlib__list,
     _c_=
      [0,
       [4,0,0,0,[11,caml_new_string(" - "),[2,0,0]]],
       caml_new_string("%d - %s")],
     _a_=
      [0,
       caml_new_string("Fortement en d\xc3\xa9saccord"),
       [0,
        caml_new_string("En d\xc3\xa9saccord"),
        [0,
         caml_new_string("Neutre"),
         [0,
          caml_new_string("D'accord"),
          [0,caml_new_string("Fortement en accord"),0]]]]];
    function _b_(i,t){return caml_call3(Stdlib_printf[4],_c_,i + 1 | 0,t)}
    var
     answers=caml_call2(Stdlib_list[18],_b_,_a_),
     Fr=[0,questions,answers,classes];
    runtime.caml_register_global(6,Fr,"Fr");
    return}
  (function(){return this}()));


//# 1 ".client.eobjs/byte/template.cmo.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_new_string=runtime.caml_new_string;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Cela_dit_les_op_rations_de_validation_de_ce_questionnaire_n_tant_pas_encore_tout_fait_termin_es_il_est_conseill_d_tre_prudent_dans_l_interpr_tation_de_vos_r_sultats=
      caml_new_string
       ("Cela dit, les op\xc3\xa9rations de validation de ce questionnaire n\xe2\x80\x99\xc3\xa9tant pas encore tout \xc3\xa0 fait termin\xc3\xa9es, il est conseill\xc3\xa9 d\xe2\x80\x99\xc3\xaatre prudent dans l\xe2\x80\x99interpr\xc3\xa9tation de vos r\xc3\xa9sultats."),
     cst_Votre_profil_indique_quelles_sont_les_composantes_pr_dominantes_de_votre_style_de_gestion_de_classe_Vous_pouvez_aussi_comparer_vos_r_sultats_avec_ceux_de_coll_gues_et_ainsi_mieux_conna_tre_vos_caract_ristiques_personnelles=
      caml_new_string
       ("Votre profil indique quelles sont les composantes pr\xc3\xa9dominantes de votre style de gestion de classe. Vous pouvez aussi comparer vos r\xc3\xa9sultats avec ceux de coll\xc3\xa8gues et, ainsi, mieux conna\xc3\xaetre vos caract\xc3\xa9ristiques personnelles."),
     cst_R_sultats=caml_new_string("R\xc3\xa9sultats"),
     cst_Indiquez_votre_degr_d_accord_chacun_des_nonc_s=
      caml_new_string
       ("Indiquez votre degr\xc3\xa9 d\xe2\x80\x99accord \xc3\xa0 chacun des \xc3\xa9nonc\xc3\xa9s :"),
     cst_Questionnaire=caml_new_string("Questionnaire"),
     cst$0=caml_new_string("?"),
     cst=caml_new_string(""),
     Js_of_ocaml_tyxml_Tyxml_js=global_data.Js_of_ocaml_tyxml__Tyxml_js,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_printf=global_data.Stdlib__printf,
     React=global_data.React,
     Stdlib_array=global_data.Stdlib__array,
     Js_of_ocaml_Dom_html=global_data.Js_of_ocaml__Dom_html,
     Js_of_ocaml_Js=global_data.Js_of_ocaml__Js,
     _b_=[0,[8,0,0,[0,2],0],caml_new_string("%.2f")],
     _a_=[0,caml_new_string("q"),0],
     RList=0;
    function select(l)
     {var
       match=caml_call2(React[2][2],0,0),
       f=match[2],
       s=match[1],
       _J_=[0,cst,l];
      function _K_(t)
       {var _T_=caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][214],t);
        return caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][305],0,_T_)}
      var _L_=caml_call2(Stdlib_list[17],_K_,_J_),_M_=0;
      function _N_(e)
       {function _Q_(t)
         {function _R_(t)
           {return 0 === t.selectedIndex
                    ?caml_call2(f,0,0)
                    :caml_call2(f,0,[0,t.selectedIndex])}
          var _S_=caml_call1(Js_of_ocaml_Dom_html[114][50],t);
          return caml_call2(Js_of_ocaml_Js[5][6],_S_,_R_)}
        caml_call2(Js_of_ocaml_Js[5][6],e.target,_Q_);
        return 1}
      var
       _O_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][18],_N_),_M_],
       _P_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][124],0),_O_]];
      return [0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][302],_P_,_L_),s]}
    function test(questions,answers)
     {function _B_(q)
       {var match=select(answers),s=match[2],e=match[1];return [0,[0,q,e],s]}
      var
       _C_=caml_call2(Stdlib_list[17],_B_,questions),
       match=caml_call1(Stdlib_list[46],_C_),
       sigs=match[2],
       l=match[1],
       _D_=caml_call1(Stdlib_array[12],sigs);
      function _E_(param)
       {var
         e=param[2],
         q=param[1],
         _G_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][293],0,[0,e,0]),0],
         _H_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][214],q),0],
         _I_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][293],0,_H_),_G_];
        return caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][295],0,_I_)}
      var
       eta=caml_call2(Stdlib_list[17],_E_,l),
       _F_=Js_of_ocaml_tyxml_Tyxml_js[3][286];
      return [0,
              caml_call1
               (caml_call5
                 (_F_,
                  0,
                  0,
                  0,
                  0,
                  [0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][5],_a_),0]]),
                eta),
              _D_]}
    function score(s)
     {function _z_(param)
       {if(param){var x=param[1];return caml_call2(Stdlib_printf[4],_b_,x)}
        return cst$0}
      var _A_=caml_call3(React[2][11],0,_z_,s);
      return caml_call1(Js_of_ocaml_tyxml_Tyxml_js[8][3][214],_A_)}
    function results(l)
     {var
       _m_=[0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][172],-101336657),0]],
       _n_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][300],_m_,0),0];
      function _o_(param)
       {var
         s=param[2],
         match=param[1],
         t=match[2],
         d=match[1],
         _q_=[0,score(s),0],
         _r_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][293],0,_q_),0],
         _s_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][214],t),0],
         _t_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][267],0,_s_),0],
         _u_=
          [0,[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][172],111644259),0]],
         _v_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][300],_u_,0),_t_],
         _w_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][214],d),0],
         _x_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][249],0,_w_),_v_],
         _y_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][299],0,_x_),0],
         eta=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][293],0,_y_),_r_],
         arg=Js_of_ocaml_tyxml_Tyxml_js[3][295];
        return caml_call2(arg,0,eta)}
      var
       eta=caml_call2(Stdlib_list[17],_o_,l),
       arg=Js_of_ocaml_tyxml_Tyxml_js[3][286],
       _p_=[0,caml_call6(arg,0,0,0,0,0,eta),_n_];
      return caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][296],0,_p_)}
    function app(questions,answers,f)
     {var
       match=test(questions,answers),
       s=match[2],
       t=match[1],
       r=results(caml_call1(f,s)),
       _c_=
        [0,
         caml_call1
          (Js_of_ocaml_tyxml_Tyxml_js[3][214],
           cst_Cela_dit_les_op_rations_de_validation_de_ce_questionnaire_n_tant_pas_encore_tout_fait_termin_es_il_est_conseill_d_tre_prudent_dans_l_interpr_tation_de_vos_r_sultats),
         0],
       _d_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][236],0,_c_),0],
       _e_=
        [0,
         caml_call1
          (Js_of_ocaml_tyxml_Tyxml_js[3][214],
           cst_Votre_profil_indique_quelles_sont_les_composantes_pr_dominantes_de_votre_style_de_gestion_de_classe_Vous_pouvez_aussi_comparer_vos_r_sultats_avec_ceux_de_coll_gues_et_ainsi_mieux_conna_tre_vos_caract_ristiques_personnelles),
         0],
       _f_=[0,r,[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][236],0,_e_),_d_]],
       _g_=[0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][214],cst_R_sultats),0],
       _h_=[0,t,[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][226],0,_g_),_f_]],
       _i_=
        [0,
         caml_call1
          (Js_of_ocaml_tyxml_Tyxml_js[3][214],
           cst_Indiquez_votre_degr_d_accord_chacun_des_nonc_s),
         0],
       _j_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][236],0,_i_),_h_],
       _k_=
        [0,caml_call1(Js_of_ocaml_tyxml_Tyxml_js[3][214],cst_Questionnaire),0],
       _l_=[0,caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][226],0,_k_),_j_];
      return caml_call2(Js_of_ocaml_tyxml_Tyxml_js[3][239],0,_l_)}
    var Template=[0,RList,select,test,score,results,app];
    runtime.caml_register_global(19,Template,"Template");
    return}
  (function(){return this}()));


//# 1 ".client.eobjs/byte/utils.cmo.js"
(function(joo_global_object)
   {"use strict";
    var runtime=joo_global_object.jsoo_runtime;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     Stdlib_list=global_data.Stdlib__list,
     React=global_data.React,
     _a_=[0,0.];
    function map(f,param)
     {if(param){var x=param[1];return [0,caml_call1(f,x)]}return 0}
    function avg(l)
     {function _h_(acc,match)
       {if(acc)if(match){var x=match[1],acc$0=acc[1];return [0,acc$0 + x]}
        return 0}
      var _i_=caml_call3(Stdlib_list[20],_h_,_a_,l);
      return map(function(sum){return sum / caml_call1(Stdlib_list[1],l)},_i_)}
    function of_list(l)
     {var _f_=0;
      function _g_(acc,x){return [0,x,acc]}
      return caml_call4(React[2][22],0,_g_,_f_,l)}
    function eval$0(l,f,a)
     {function _b_(param)
       {var src=param[2],p=param[1];
        function _c_(i)
         {var _e_=i - 1 | 0;return runtime.caml_check_bound(a,_e_)[_e_ + 1]}
        var _d_=of_list(caml_call2(Stdlib_list[17],_c_,src));
        return [0,p,caml_call3(React[2][11],0,f,_d_)]}
      return caml_call2(Stdlib_list[17],_b_,l)}
    var Utils=[0,map,avg,of_list,eval$0];
    runtime.caml_register_global(3,Utils,"Utils");
    return}
  (function(){return this}()));


//# 1 ".client.eobjs/byte/test.cmo.js"
(function(joo_global_object)
   {"use strict";
    var runtime=joo_global_object.jsoo_runtime;
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    var
     global_data=runtime.caml_get_global_data(),
     Utils=global_data.Utils,
     Stdlib_list=global_data.Stdlib__list,
     _a_=
      [0,
       [0,1,[0,8,[0,15,[0,22,0]]]],
       [0,
        [0,2,[0,9,[0,16,[0,23,0]]]],
        [0,
         [0,3,[0,10,[0,17,[0,24,0]]]],
         [0,
          [0,4,[0,11,[0,18,[0,25,0]]]],
          [0,
           [0,5,[0,12,[0,19,[0,26,[0,27,0]]]]],
           [0,[0,6,[0,13,[0,20,0]]],[0,[0,7,[0,14,[0,21,0]]],0]]]]]]];
    function eval$0(classes)
     {var _b_=Utils[2],_c_=caml_call2(Stdlib_list[47],classes,_a_);
      return caml_call2(Utils[4],_c_,_b_)}
    var Test=[0,eval$0];
    runtime.caml_register_global(3,Test,"Test");
    return}
  (function(){return this}()));


//# 1 ".client.eobjs/byte/client.cmo.js"
(function(joo_global_object)
   {"use strict";
    var runtime=joo_global_object.jsoo_runtime;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     Fr=global_data.Fr,
     Test=global_data.Test,
     Template=global_data.Template,
     Js_of_ocaml_tyxml_Tyxml_js=global_data.Js_of_ocaml_tyxml__Tyxml_js,
     Js_of_ocaml_Dom_html=global_data.Js_of_ocaml__Dom_html,
     Js_of_ocaml_Dom_events=global_data.Js_of_ocaml__Dom_events;
    function _a_(param,_b_)
     {var
       _c_=caml_call1(Test[1],Fr[3]),
       _d_=caml_call3(Template[6],Fr[1],Fr[2],_c_),
       t=caml_call1(Js_of_ocaml_tyxml_Tyxml_js[9][1],_d_);
      Js_of_ocaml_Dom_html[2].body.appendChild(t);
      return 1}
    caml_call4
     (Js_of_ocaml_Dom_events[2],
      0,
      Js_of_ocaml_Dom_html[2],
      Js_of_ocaml_Dom_html[15][50],
      _a_);
    var Client=[0];
    runtime.caml_register_global(8,Client,"Client");
    return}
  (function(){return this}()));


//# sourceMappingURL=data:application/json;base64,